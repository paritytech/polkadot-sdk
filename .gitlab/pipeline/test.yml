# this is an artificial job dependency, for pipeline optimization using GitLab's DAGs
# the job can be found in check.yml
.run-immediately:
  needs:
    - job: job-starter
      artifacts: false

#
#
#
.codecov-check:
  script:
    - >
      if command -v codecovcli -h >/dev/null 2>&1; then
        codecovcli --version;
      else
        echo "downloading codecovcli";
        curl -s -o codecovcli https://cli.codecov.io/latest/linux/codecov;
        chmod +x codecovcli;
        mv codecovcli /usr/local/bin/codecovcli;
      fi
    #
    - codecovcli --version

#
#
#
codecov-start:
  stage: test
  when: manual
  allow_failure: false
  extends:
    - .kubernetes-env
    - .common-refs
    - .pipeline-stopper-artifacts
    - .run-immediately
  script:
    - !reference [.codecov-check, script]
    - >
      if [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        codecovcli -v create-commit -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --fail-on-error --pr ${CI_COMMIT_REF_NAME} --git-service github;
        codecovcli -v create-report -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --fail-on-error --pr ${CI_COMMIT_REF_NAME} --git-service github;
      else
        codecovcli -v create-commit -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --fail-on-error --git-service github;
        codecovcli -v create-report -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --fail-on-error --git-service github;      
      fi

#
#
#
codecov-finish:
  stage: test
  extends:
    - .kubernetes-env
    - .common-refs
    - .pipeline-stopper-artifacts
  needs:
    - test-linux-stable-codecov
  script:
    - !reference [.codecov-check, script]
    - codecovcli -v create-report-results -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --git-service github
    - codecovcli -v get-report-results -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --git-service github
    - codecovcli -v send-notifications -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --git-service github

#
#
#
test-linux-stable-codecov:
  stage: test
  needs:
    - codecov-start
  extends:
    - .docker-env
    - .common-refs
    - .pipeline-stopper-artifacts
  variables:
    CI_IMAGE: europe-docker.pkg.dev/parity-build/ci-images/ci-unified:bullseye-1.77.0
    RUST_TOOLCHAIN: stable
    RUSTFLAGS: "-Cdebug-assertions=y -Cinstrument-coverage"
    LLVM_PROFILE_FILE: "target/coverage/cargo-test-${CI_NODE_INDEX}-%p-%m.profraw"
    CARGO_INCREMENTAL: 0
    FORKLIFT_BYPASS: "true"
  parallel: 2
  script:
    # tools
    - !reference [.codecov-check, script]
    - rustup component add llvm-tools-preview
    - mkdir -p target/coverage/result/
    # Place real test call here
    - >
      time cargo nextest run -p polkadot \
        --locked \
        --release \
        --no-fail-fast \
        --partition count:${CI_NODE_INDEX}/${CI_NODE_TOTAL}
    # generate and upload reports
    - >
      grcov \
        target/coverage/ \
        --binary-path ./target/release/ \
        -s . \
        -t lcov \
        --branch \
        -o target/coverage/result/report-${CI_NODE_INDEX}.lcov
    - ls -l target/coverage/result/
    - >
      if [ "$CI_COMMIT_REF_NAME" != "master" ]; then  
        codecovcli -v do-upload -f target/coverage/result/report-${CI_NODE_INDEX}.lcov --disable-search -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --fail-on-error --pr ${CI_COMMIT_REF_NAME} --git-service github;
      else
        codecovcli -v do-upload -f target/coverage/result/report-${CI_NODE_INDEX}.lcov --disable-search -t ${CODECOV_TOKEN} -r paritytech/polkadot-sdk --commit-sha ${CI_COMMIT_SHA} --fail-on-error --git-service github;
      fi

test-doc:
  stage: test
  extends:
    - .docker-env
    - .common-refs
  # DAG
  needs:
    - job: test-rustdoc
      artifacts: false
  variables:
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: "-Cdebug-assertions=y -Dwarnings"
  script:
    - time cargo test --doc --workspace

test-rustdoc:
  stage: test
  extends:
    - .docker-env
    - .common-refs
    - .run-immediately
  variables:
    SKIP_WASM_BUILD: 1
  script:
    - time cargo doc --workspace --all-features --no-deps

quick-benchmarks-omni:
  stage: test
  extends:
    - .docker-env
    - .common-refs
    - .run-immediately
  variables:
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: "-C debug-assertions"
    RUST_BACKTRACE: "full"
    WASM_BUILD_NO_COLOR: 1
    WASM_BUILD_RUSTFLAGS: "-C debug-assertions"
  script:
    - time cargo build --locked --quiet --release -p asset-hub-westend-runtime --features runtime-benchmarks
    - time cargo run --locked --release -p frame-omni-bencher --quiet -- v1 benchmark pallet --runtime target/release/wbuild/asset-hub-westend-runtime/asset_hub_westend_runtime.compact.compressed.wasm --all --steps 2 --repeat 1 --quiet

cargo-check-each-crate-macos:
  stage: test
  extends:
    - .docker-env
    - .common-refs
    - .run-immediately
    # - .collect-artifacts
  before_script:
    # skip timestamp script, the osx bash doesn't support printf %()T
    - !reference [.job-switcher, before_script]
    - !reference [.rust-info-script, script]
    - !reference [.pipeline-stopper-vars, script]
  variables:
    SKIP_WASM_BUILD: 1
  script:
    # TODO: use parallel jobs, as per cargo-check-each-crate, once more Mac runners are available
    # - time ./scripts/ci/gitlab/check-each-crate.py 1 1
    - time cargo check --workspace --locked
  timeout: 2h
  tags:
    - osx
