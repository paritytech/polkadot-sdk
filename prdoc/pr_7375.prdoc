# Schema: Polkadot SDK PRDoc Schema (prdoc) v1.0.0
# yaml-language-server: $schema=https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/prdoc/schema_user.json

title: Refactor the host <-> runtime interface machinery (the `#[runtime_interface]` macro) and the way host functions are defined

doc:
  - audience: Node Dev
    description: |
      This PR refactors the way the host functions are defined.

      Previously the way a given type was marshalled through the host <-> runtime boundary was
      hardcoded for every type by the virtue of it implementing the relevant conversion traits.

      This had two major consequences:
        * It was not obvious how a given type is going to be passed just by looking at its type alone,
          masking potentially expensive marshalling strategies. (For example, returning `Option<u32>`
          was done through the SCALE codec and involved extra memory allocations!)
        * It was not possible to use multiple marshalling strategies for a single type, making some
          of the future improvements we'd like to do (e.g. move the runtime memory allocator into the runtime)
          very hard to do.

      So this PR disentangles this mess and makes the marshalling strategies explicit. This makes it
      much more clear how a given type in a given host function is marshalled, and also makes it possible
      to use different marshalling strategies for the same type in different host functions.

      Before this PR you'd define a host function like this:

      ```rust
          #[runtime_interface]
          trait MyInterface {
              fn say_hello_world(name: &str) {
                  println!("Hello {name}!");
              }
          }
      ```

      and after this PR you'll define it like this:

      ```rust
          #[runtime_interface]
          trait MyInterface {
              fn say_hello_world(name: PassFatPointerAndRead<&str>) {
                  println!("Hello {name}!", name);
              }
          }
      ```

      In this case the strategy for passing the `&str` is now explicitly specified (`PassFatPointerAndRead`).
      Note that the *actual* API generated by this macro and the way arguments are accessed is completely unchanged!
      The `#[runtime_interface]` machinery automatically "strips" away the marshalling strategy wrappers,
      so neither the body of the `say_hello_world` function here nor its callers need to be changed.

      Furthermore, to explicitly distinguish between the runtime compilation mode and native mode,
      `#[cfg(substrate_runtime)]` is now used instead of `#[cfg(not(feature = "std"))]`. That allows for fine-tuning
      the compilation behavior without relying solely on the `std` feature.

crates:
  - name: sp-runtime-interface
    bump: major
    note: Rework of the `#[runtime_interface]` macro and associated types/trait.
  - name: sp-runtime-interface-proc-macro
    bump: major
    note: Rework of the `#[runtime_interface]` macro.
  - name: sp-wasm-interface
    bump: major
    note: The `Pointer` type now implements `Copy` and `Clone` unconditionally. The `Result` now always returns a `String`.
  - name: sp-core
    bump: major
    note: Some types don't implement the traits related to the old `#[runtime_interface]` anymore. A few extra conversion impls.
  - name: sp-io
    bump: major
    note: Requires the new `#[runtime_interface]` macro and associated machinery. Some types don't implement the traits related to the old `#[runtime_interface]` anymore.
  - name: sp-statement-store
    bump: major
    note: Requires the new `#[runtime_interface]` macro and associated machinery. Some types don't implement the traits related to the old `#[runtime_interface]` anymore.
  - name: sp-crypto-ec-utils
    bump: minor
    note: Requires the new `#[runtime_interface]` macro and associated machinery.
  - name: frame-benchmarking
    bump: major
    note: Requires the new `#[runtime_interface]` macro and associated machinery. `Benchmarking::current_time` host call was changed.
  - name: frame-support-procedural
    bump: minor
    note: Needs new `frame-benchmarking` due to the change to `current_time`.
  - name: polkadot-runtime-metrics
    bump: minor
    note: Needs new `frame-benchmarking` due to the change to `current_time`.
