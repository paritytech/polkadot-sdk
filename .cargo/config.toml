[build]
rustdocflags = [
	"-Arustdoc::redundant_explicit_links", # stylistic
	"-Dwarnings",
]

# An auto defined `clippy` feature was introduced,
# but it was found to clash with user defined features,
# so was renamed to `cargo-clippy`.
#
# If you want standard clippy run:
# RUSTFLAGS= cargo clippy
[target.'cfg(feature = "cargo-clippy")']
rustflags = [
	"-Aclippy::all",
	"-Aclippy::bind_instead_of_map",              # styalistic
	"-Aclippy::borrowed-box",                     # Reasonable to fix this one
	"-Aclippy::default_constructed_unit_structs", # stylistic
	"-Aclippy::derivable_impls",                  # false positives
	"-Aclippy::eq_op",                            # In tests we test equality.
	"-Aclippy::erasing_op",                       # E.g. 0 * DOLLARS
	"-Aclippy::extra-unused-type-parameters",     # stylistic
	"-Aclippy::identity-op",                      # One case where we do 0 +
	"-Aclippy::if-same-then-else",
	"-Aclippy::needless_option_as_deref",         # false positives
	"-Aclippy::nonminimal-bool",                  # maybe
	"-Aclippy::option-map-unit-fn",               # styalistic
	"-Aclippy::stable_sort_primitive",            # prefer stable sort
	"-Aclippy::too-many-arguments",               # (Turning this on would lead to)
	"-Aclippy::type_complexity",                  # raison d'etre
	"-Aclippy::unit_arg",                         # styalistic.
	"-Aclippy::unnecessary_cast",                 # Types may change
	"-Aclippy::useless_conversion",               # Types may change
	"-Aclippy::while_immutable_condition",        # false positives
	"-Aclippy::zero-prefixed-literal",            # 00_1000_000
	"-Asuspicious_double_ref_op",
	"-Dclippy::complexity",
	"-Dclippy::correctness",
]

[env]
# Needed for musl builds so user doesn't have to install musl-tools.
CC_x86_64_unknown_linux_musl = { value = ".cargo/musl-gcc", force = true, relative = true }
CXX_x86_64_unknown_linux_musl = { value = ".cargo/musl-g++", force = true, relative = true }
