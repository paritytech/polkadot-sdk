searchState.loadedDescShard("pallet_indices", 0, "An index is a short form of an address. This module …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_indices</code>\nType used for storing an account’s index; implies the …\nThe lookup from index to account.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency trait.\nThe deposit needed for reserving an index.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe index was not available.\nA account index was assigned.\nA account index has been freed up (unassigned).\nA account index has been frozen to its current account ID.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe index was not already assigned.\nThe index is assigned to another account.\nThe source and destination accounts are identical.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe index is permanent and may not be freed/changed.\nThe overarching event type.\nWeight information for extrinsics in this pallet.\nAssign an previously unassigned index.\nAssign an previously unassigned index.\nAuto-generated docs-only module listing all defined …\nForce an index to an account. This doesn’t require a …\nForce an index to an account. This doesn’t require a …\nFree up an index owned by the sender.\nFree up an index owned by the sender.\nFreeze an index so it will always point to the sender …\nFreeze an index so it will always point to the sender …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLookup an address to get an Id, if there’s one there.\nLookup an T::AccountIndex to get an Id, if there’s one …\nCreate a call with the variant <code>claim</code>.\nCreate a call with the variant <code>force_transfer</code>.\nCreate a call with the variant <code>free</code>.\nCreate a call with the variant <code>freeze</code>.\nCreate a call with the variant <code>transfer</code>.\nAuto-generated docs-only module listing all (public and …\nAssign an index already owned by the sender to another …\nAssign an index already owned by the sender to another …\nAssign an previously unassigned index.\nForce an index to an account. This doesn’t require a …\nFree up an index owned by the sender.\nFreeze an index so it will always point to the sender …\nAssign an index already owned by the sender to another …\nThe lookup from index to account.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_indices</code> using the Substrate node and …\nWeight functions needed for <code>pallet_indices</code>.\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …")