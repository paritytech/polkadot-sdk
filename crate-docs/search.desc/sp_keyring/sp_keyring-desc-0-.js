searchState.loadedDescShard("sp_keyring", 0, "Support code for the runtime. A set of test accounts.\nConvenience export: Sr25519’s Keyring is exposed as …\nTest account crypto for bandersnatch. A set of well-known …\nTest account crypto for ed25519. Support code for the …\nTest account crypto for sr25519. Support code for the …\nSet of test accounts.\nAn iterator over the variants of Keyring\nVRFs backed by Bandersnatch, an elliptic curve built over …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nCreate a crypto <code>Pair</code> from a numeric value.\nIdentifier used to match public keys against …\nThe byte length of serialized pre-output.\nThe byte length of serialized public key.\nBandersnatch secret key.\nBandersnatch public key.\nThe byte length of secret key seed.\nThe byte length of serialized signature.\nContext used to produce a plain signature without any VRF …\nBandersnatch signature.\nDerive a child key from a series of given (hard) junctions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate an arbitrary number of bytes from the given …\nBandersnatch Ring-VRF types and operations.\nProduce a ring-vrf signature.\nGet the key seed.\nSign a message.\nReturn a vector filled with the seed (32 bytes).\nBandersnatch VRF types and operations.\nOverhead in the domain size with respect to the supported …\nContext used to construct ring prover and verifier.\nremove as soon as soon as serialization is implemented by …\nRing VRF signature.\nDomain size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n<code>k</code> is the prover secret index in [0..keyset_size).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the keyset max size.\nBuild an dummy instance for testing purposes.\nVRF pre-outputs.\nGet ring prover for the key at index <code>public_idx</code> in the …\nVerify a ring-vrf signature.\nRing signature.\nGet ring verifier for the <code>public_keys</code> set.\nInformation required for a lazy construction of a ring …\nVerifier key.\nMax number of inputs/pre-outputs which can be handled by …\nVRF input to construct a <code>VrfPreOutput</code> instance and …\nBounded vector used for VRF inputs and pre-outputs.\nVRF pre-output derived from <code>VrfInput</code> using a <code>VrfSecret</code>.\nData to be signed via one of the two provided vrf flavors.\nVRF signature.\nGet the challenge associated to the <code>transcript</code> contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nVRF inputs to be signed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate an arbitrary number of bytes from the given …\nConstruct a new VRF input.\nConstruct a new data to be signed.\nConstruct a new data to be signed.\nVRF pre-outputs.\nAppend a message to the transcript.\nTries to append a <code>VrfInput</code> to the vrf inputs list.\nTranscript signature.\nAssociated protocol transcript.\nSet of test accounts.\nAn iterator over the variants of Keyring\nSimple Ed25519 API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nAn identifier used to match public keys against ed25519 …\nThe byte length of public key\nA key pair.\nA public key.\nThe byte length of signature\nA signature.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nCalls <code>U::from(self)</code>.\nGet the public key.\nGet the seed for this key.\nSign a message.\nReturn a vec filled with raw data.\nVerify a signature on a message.\nSet of test accounts.\nAn iterator over the variants of Keyring\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nCreate a crypto <code>Pair</code> from a numeric value.\nGet account id of a <code>numeric</code> account.\nSimple sr25519 (Schnorr-Ristretto) API.\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF pre-output.\nVRF proof.\nAdd some extra data to be signed.\nThe keyring for use with accounts when using the test …")