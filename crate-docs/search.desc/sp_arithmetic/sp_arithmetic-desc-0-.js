searchState.loadedDescShard("sp_arithmetic", 0, "Minimal fixed point arithmetic primitives and types for …\nArithmetic errors.\nDivision by zero.\nA collection-like object that is made of values of type <code>T</code> …\nOverflow.\nTrait for comparing two numbers with an threshold.\nUnderflow.\nCopied from <code>sp-runtime</code> and documented there.\nInfinite precision unsigned integer for substrate runtime.\nDecimal Fixed Point implementations for Substrate runtime. …\nReturns the argument unchanged.\nSome helper functions to work with 128bit numbers. Note …\nCalls <code>U::from(self)</code>.\nNormalize <code>input</code> so that the sum of all elements reaches …\nNormalize self around <code>targeted_sum</code>.\nTypes that implement <code>PerThing</code> can be used as a …\nCompare if <code>self</code> is <code>threshold</code> greater or less than <code>other</code>.\nPrimitive traits for the runtime arithmetic.\nSimple wrapper around an infinitely large integer, …\nRepresentation of two limbs.\nRepresentation of a single limb.\nAdds <code>self</code> with <code>other</code>. self and other do not have to have …\nAssumed as a given primitive.\nA naive getter for limb at <code>index</code>. Note that the order is …\nDivides an <code>n + m</code> limb self by a <code>n</code> limb <code>other</code>. The result …\nDivides <code>self</code> by a single limb <code>other</code>. This can be used in …\nReturns the argument unchanged.\nRaw constructor from custom limbs. If <code>limbs</code> is empty, …\nA naive getter for limb at <code>index</code>. Note that the order is …\nCalls <code>U::from(self)</code>.\nNumber of limbs.\nZero-pad <code>self</code> from left to reach <code>size</code> limbs. Will not make …\nreturns the least significant limb of the number.\nStrips zeros from the left side (the most significant …\nreturns the most significant limb of the number.\nMultiplies n-limb number <code>self</code> with m-limb number <code>other</code>.\nAssumed as a given primitive.\nA naive setter for limb at <code>index</code>. Note that the order is …\nSplits a <code>Double</code> limb number into a tuple of two <code>Single</code> …\nSubtracts <code>other</code> from <code>self</code>. self and other do not have to …\nCreate a new instance with <code>size</code> limbs. This prevents any …\nPrecision of this fixed point implementation. It should be …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nThe underlying data type used for this fixed point number.\nIndicates if this fixed point implementation is signed or …\nPrecision of this fixed point implementation.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nReturns the smallest integer greater than or equal to a …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nChecked multiplication for integer type <code>N</code>. Equal to …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nConsumes <code>self</code> and returns the inner raw value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nNegate the value.\nNegate the value.\nNegate the value.\nNegate the value.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nReturns the number rounded to the nearest integer. Rounds …\nSaturating absolute value.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nReturns the integer part.\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nHelper gcd function used in Rational128 implementation.\nReturns <code>a * b / c</code> (wrapping to 128 bits) or <code>None</code> in the …\nsplit a u128 into two u64 limbs\nConvert a u128 to a u32 based biguint.\nThe accuracy of this type.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nThe rounding method to use for unsigned quantities.\nThe rounding method to use.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fraction into <code>Self</code>.\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSame as <code>Self::from_float</code>.\nBuild this type from a number of parts per thing.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a percent. Equivalent to …\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nReturns the value for <code>Rounding</code> which would give the same …\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this is one.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nReturn <code>true</code> if this is nothing.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nMultiplication that always rounds the result up to a whole …\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nMultiplication that always rounds down to a whole number. …\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nReturn the product of multiplication of this value by …\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nEquivalent to <code>Self::from_parts(0)</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nA wrapper for any rational number with a 128 bit numerator …\nA wrapper for any rational number with infinitely large …\nAddition. Simply tries to unify the denominators and add …\nSubtraction. Simply tries to unify the denominators and …\nReturn the denominator reference.\nReturn the denominator.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nBuild from a raw <code>n/d</code>. This could lead to / 0 if not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf it is zero or not\nA saturating add that assumes <code>self</code> and <code>other</code> have the same …\nA saturating subtraction that assumes <code>self</code> and <code>other</code> have …\nGet the least common divisor of <code>self</code> and <code>other</code>.\nReturn the numerator reference.\nReturn the numerator.\nOne.\nOne\nConvert <code>self</code> to a similar rational number where …\nZero.\nZero.\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast16Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast8Bit</code>, but …\nA meta trait for arithmetic type operations, regardless of …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nA trait implementing integer square root.\nDefines a multiplicative identity element for <code>Self</code>.\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nUseful functions for signed numbers (i.e. numbers that can …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nA trait for values which cannot be negative\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nThe positive difference of two numbers.\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nAdds two numbers, checking for overflow.\nAdds two numbers, checking for overflow.\nAdds two numbers overwriting the left hand one, checking …\nAdds two numbers overwriting the left hand one, checking …\nDivides two numbers, checking for overflow.\nDivides two numbers, checking for overflow.\nDivides two numbers overwriting the left hand one, …\nDivides two numbers overwriting the left hand one, …\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers overwriting the left hand one, …\nMultiplies two numbers overwriting the left hand one, …\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nRaises a value to the power of exp, returning …\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers overwriting the left hand one, …\nSubtracts two numbers overwriting the left hand one, …\nFind the integer square root.\nFind the integer square root, returning <code>None</code> if the number …\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the sign of the number.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.")