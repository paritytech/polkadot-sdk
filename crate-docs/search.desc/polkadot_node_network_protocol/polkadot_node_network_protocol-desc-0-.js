searchState.loadedDescShard("polkadot_node_network_protocol", 0, "Network protocol types for parachains.\nVersion-annotated messages used by the approval …\nA node claiming to be an authority (unauthenticated)\nVersion-annotated messages used by the bitfield …\nVersion-annotated messages used by the bitfield …\nA full node.\nVersion-annotated messages used by the gossip-support …\nWhen sending a request, what to do on a disconnected …\nJust fail if the destination is not yet connected.\nA light node.\nThe minimum amount of peers to send gossip messages to.\nThe advertised role of a node.\nSpecialized wrapper around <code>View</code>.\nIdentifier of a peer of the network.\nDescription of a reputation adjustment for a node.\nVersion-annotated messages used by the statement …\nTry to connect to the peer.\nUnified annoyance cost and good behavior benefits.\nV1 type.\nV1 type.\nV1 type.\nV1 type.\nV1 type.\nV1 type.\nV1 type.\nV1 type.\nV2 type.\nV2 type.\nV2 type.\nV2 type.\nV2 type.\nV2 type.\nV2 type.\nV2 type.\nV3 type\nV3 type\nV3 type\nV3 type\nV3 type\nV3 type\nV3 type\nV3 type\nA protocol-versioned type.\nAll supported versions of the collation protocol message.\nAll supported versions of the validation protocol message.\nA succinct representation of a peer’s view. This …\nAn error indicating that this the over-arching message …\nAccessing authority discovery service Authority discovery …\nCheck if two views have the same heads.\nConvert to a fully-owned version of the message.\nWhether the view contains a given hash.\nObtain the cost or benefit associated with the enum …\nExtract the static description.\nReturns an iterator of the hashes present in <code>Self</code> but not …\nReturns the subset of <code>peers</code> with the specified <code>version</code>.\nThe highest known finalized block number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a <code>PeerId</code> from bytes.\nGet <code>PeerId</code> from ed25519 public key bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGrid topology support module Grid topology support …\nAn iterator containing hashes present in both <code>Self</code> and in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>PeerId</code> into ed25519 public key bytes.\nObtain an iterator over all heads.\nWhether the reputation change is for good behavior.\nCheck if the number of heads contained, is null.\nObtain an iterator over all heads.\nObtain the number of heads that are in view.\nNew reputation change with given delta and reason.\nCreates a new instance.\nConstruct a new view based on heads and a finalized block …\nNew reputation change that forces minimum possible …\nConstruct a new <code>OurView</code> with the given chain heads, …\nPeer-sets and protocols used for parachains. All peersets …\nGenerate random peer ID.\nReason for reputation change.\nReplace <code>self</code> with <code>new</code>.\nRequest/response protocols used in Polkadot. Overview over …\nShall we connect to a disconnected peer?\nReturns the span per head map.\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nTry to extract <code>PeerId</code> from <code>Multiaddr</code>.\nv1 notification protocol types.\nv2 network protocol types.\nv3 network protocol types. Purpose is for changing …\nReputation delta.\nConstruct a new view with the given chain heads and …\nStart with no heads, but only a finalized block number.\nAn abstraction over the authority discovery service.\nGet the addresses for the given <code>AuthorityDiscoveryId</code> from …\nGet the <code>AuthorityDiscoveryId</code> for the given <code>PeerId</code> from the …\nPropagate to all peers of any kind.\nThe number of peers to randomly propagate messages to.\nThe sample rate for randomly propagating messages. This …\nInformation about the grid neighbors for a particular node …\nPropagate to all peers sharing the X dimension of the grid.\nPropagate to all peers sharing either the X or Y dimension …\nPropagate to all peers sharing the Y dimension of the grid.\nNo required propagation.\nWe don’t know yet, because we’re waiting for topology …\nA representation of routing based on sample\nRouting mode\nA storage for the current and maybe previous topology\nA set of topologies indexed by session\nTopology representation for a session.\nAn entry tracking a session grid topology and some cached …\nInformation about a peer in the gossip topology for a …\nProduces the outgoing routing logic for a particular peer.\nDecrease references counter for a specific topology\nThe authority discovery public key of the validator in the …\nUtility function for creating an empty set of grid …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAccess the underlying topology.\nReturns a current grid topology\nAccess the current grid topology mutably. Dangerous and …\nReturns a topology for the specific session index\nReturn the grid topology for the specific session index, …\nReturn a grid topology based on the session index: If we …\nIncrease number of messages being sent\nIncrease references counter for a specific topology\nInsert a new topology, no-op if already present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we already took all the necessary samples.\nWhether the required routing set is definitely empty.\nTells if a given peer id is validator in a session\nTells if a given peer id is validator in a session\nA convenience method that returns total number of peers in …\nAccess the local grid neighbors.\nAccess the local grid neighbors mutably.\nCreate a new session grid topology.\nThe validator’s known peer IDs.\nReturns the difference between this and the <code>other</code> topology …\nReturns the list of peers to route based on the required …\nRepresent peers in the X axis\nRepresent peers in the Y axis\nGiven the originator of a message as a validator index, …\nGiven the originator of a message as a peer index, …\nGet a filter function based on this topology and the …\nPerform random sampling for a specific peer Returns <code>true</code> …\nUpdates the known peer ids for the passed authorities ids.\nUpdates the known peer ids for the passed authorities ids.\nUpdates the known peer ids for the passed authorities ids.\nUpdate the current topology preserving the previous one\nThe index of the validator in the discovery keys of the …\nRepresent validators in the X axis\nRepresent validators in the Y axis\nThe collation peer-set is used for validator&lt;&gt;collator …\nSupported collation protocol versions. Only versions …\nAn iterator over the variants of CollationVersion\nWhether a node is an authority or not.\nMax notification size is currently constant.\nNode is not an authority.\nThe peer-sets and thus the protocols which are used for …\nAn iterator over the variants of PeerSet\nOn the wire protocol name to <code>PeerSet</code> mapping.\nA small and nifty collection that allows to store data …\nA generic version of the protocol. This struct must not be …\nMarker indicating the version is unknown.\nThe first version.\nThe first version.\nThe second version.\nThe second version.\nThe third version where changes to …\nThe validation peer-set is responsible for all messages …\nSupported validation protocol versions. Only versions …\nAn iterator over the variants of ValidationVersion\nNode is authority.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet <code>sc_network</code> peer set configurations for each peerset on …\nGet the peer set label for metrics reporting.\nGet the main protocol name. It’s used by the networking …\nGet the main protocol version for this peer set.\nGet the max notification size for this peer set.\nGet the protocol name for specific version.\nGet the protocol label for metrics reporting.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct <code>PeerSetProtocolNames</code> using <code>genesis_hash</code> and …\nGet <code>NonDefaultSetConfig</code>s for all available peer sets, at …\nLookup the protocol using its on the wire name.\nProtocol for requesting candidates with attestations in …\nProtocol for fetching available data.\nTimeout for requesting availability chunks.\nProtocol for chunk fetching, used by availability …\nProtocol for chunk fetching version 2, used by …\nProtocol for fetching collations from collators.\nProtocol for fetching collations from collators when async …\nWe can have relative large timeouts here, there is no …\nSending of dispute statements with application level …\nCommon properties of any <code>Request</code>.\nWe don’t want a slow peer to slow down all the others, …\nWe don’t want a slow peer to slow down all the others, …\nThe protocol name as a dynamically allocated string.\nWhat protocol this <code>Request</code> implements.\nProtocol for fetching seconded PoVs from validators of the …\nA protocol per subsystem seems to make the most sense, …\nAn iterator over the variants of Protocol\nThe protocol name transmitted on the wire.\nType for getting on the wire <code>Protocol</code> names using genesis …\nConfiguration for a single request-response protocol.\nEach request has a corresponding <code>Response</code>.\nFetching of statements that are too large for gossip.\nThe protocol name as a static string.\nFallback on the wire protocol names to support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a configuration for a given Request response protocol.\nGet on the wire <code>Protocol</code> name.\nGet a configuration for a given Request response protocol.\nChannel on which the networking service will send incoming …\nEverything related to handling of incoming requests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum allowed size, in bytes, of a request.\nMaximum allowed size, in bytes, of a response.\nName of the protocol on the wire. Should be something like …\nConfiguration of the networking layer.\nConstruct <code>ReqProtocolNames</code> from <code>genesis_hash</code> and <code>fork_id</code>.\nEverything related to handling of outgoing requests.\nDuration after which emitted requests are considered timed …\nActual versioned requests and responses that are sent over …\nActual versioned requests and responses that are sent over …\nDecoding failed, we were able to change the peer’s …\nDecoding failed, we were able to change the peer’s …\nDecoding failed, but sending reputation change failed.\nDecoding failed, but sending reputation change failed.\nContains the error value\nA request coming in, including a sender for sending …\nReceiver for incoming requests.\nContains the success value\nTyped variant of <code>netconfig::OutgoingResponse</code>.\nSender for sending back responses on an <code>IncomingRequest</code>.\nGeneral result based on above <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate configuration for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into raw untyped substrate <code>IncomingRequest</code>.\nCreate new <code>IncomingRequest</code>.\nThe sent request.\n<code>PeerId</code> of sending peer.\nSender for sending response back.\nTry to receive the next incoming request.\nReputation changes accrued while handling the request. To …\nThe payload of the response.\nSend response with additional options.\nSend response with additional options.\nSend the response back.\nSend the response back.\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nAct as an authority\nAccept them. This is the default.\nActual authority.\nDefault value for Kademlia replication factor which  …\nDeny them.\nA Ed25519 secret key configuration.\nThe options for obtaining a Ed25519 secret key.\nMinimum Requirements for a Hash within Networking\nFull node, does not participate in consensus.\nRead the secret key from a file. If the file does not …\nRead the secret key from a file. If the file does not …\nRegular full node.\nFull block download and verification.\nFull network configuration.\nA single request received by a peer on a request-response …\nUse the given secret key <code>K</code>.\nUse the given secret key <code>K</code>.\nMultihash of the peer ID is invalid.\nLight client node.\nUse libp2p for P2P networking.\nDownload blocks and the latest state.\nUse litep2p for P2P networking.\nOnly allow connections within the same process. Only …\nError while parsing the multiaddress.\nAddress of a node, including its identity.\nNo network.\nNetwork backend type.\nNetwork service configuration.\nAlways generate a new secret key <code>K</code>.\nAlways generate a new secret key <code>K</code>.\nThe configuration of a node’s secret key, describing the …\nExtension to <code>SetConfig</code> for sets that aren’t the default …\nThe policy for connections to non-reserved peers.\nNormal transport mode.\nTrait defining the required functionality from a …\nCustom handshake for the notification protocol\nNotification metrics.\nNotification service\nSink connected directly to the node background task. …\nThe protocol name as a dynamically allocated string.\nResponse for an incoming request to be send by a request …\nNetwork initialization parameters.\nError that can be generated by <code>parse_str_addr</code>.\nThe peer ID is missing from the address.\nTrait defining required functionality from <code>PeerStore</code>.\nTrait providing peer reputation management and connection …\nChannel pair which allows <code>Notifications</code> to interact with a …\nProtocol name prefix, transmitted on the wire for legacy …\nThe protocol name transmitted on the wire.\nConfiguration for a single request-response protocol.\nRole of the local node.\nBitmask of the roles that a node fulfills.\nThe configuration options for obtaining a secret key <code>K</code>.\nConfiguration for a set of nodes.\nThe protocol name as a static string.\nSync operation mode.\nConfiguration for the transport layer.\nWarp sync - verify authority set transitions and the …\nAdd a list of protocol names used for backward …\nAdd known peer.\nAdd a notification protocol.\nAdd a request-response protocol.\nAdd a node to the list of reserved nodes.\nReturns the set containing all flags.\nShould we insert non-global addresses into the DHT?\nModifies the configuration to allow non-reserved nodes.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nBitswap configuration, if the server has been enabled.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nBlock announce protocol configuration\nList of initial node addresses\nEasy way for a user to create a <code>Multiaddr</code>.\nClient identifier. Sent over the wire for debugging …\nMake a copy of the object so it can be shared between …\nInstruct <code>Notifications</code> to close substream for <code>peer</code>.\nReturns the complement of this set of flags.\nConcatenates the multiaddress and peer ID into one …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nConfiguration for the default set of nodes used for block …\nNumber of substreams to reserve for full nodes for block …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nEd25519 keys.\nReturns an empty set of flags.\nTrue if Kademlia random discovery should be enabled.\nHow to spawn background tasks.\nGet reference to fallback protocol names.\nFallback on the wire protocol names to support.\nFork ID to distinguish protocols of different hard forks. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nCreate new <code>NotificationHandshake</code> from raw bytes\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenesis hash of the chain\nGet handle to <code>PeerStore</code>.\nGet reference to handshake.\nMaximum allowed number of incoming substreams related to …\nChannel on which the networking service will send incoming …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvaluate a <code>NodeKeyConfig</code> to obtain an identity <code>Keypair</code>:\nEnable serving block data over IPFS bitswap.\nReturns <code>true</code> if all flags are currently set.\nTrue for <code>Role::Authority</code>.\nDoes this role represents a client that does not …\nCheck whether the peer is banned.\nReturns <code>true</code> if no flags are currently stored.\nDoes this role represents a client that holds full chain …\nDoes this role represents a client that does not hold full …\nIf we are in “reserved-only” peer mode.\nReturns <code>true</code> if <code>self</code> is <code>Self::Warp</code>.\nRequire iterative Kademlia DHT queries to use disjoint …\nKademlia replication factor determines to how many closest …\nCollect all reserved nodes and bootnodes addresses.\nReturns <code>true</code> if <code>self</code> is <code>Self::LightState</code>.\nMultiaddresses to listen for incoming connections.\nMaximum number of blocks per request.\nGet maximum notification size.\nMaximum number of peers to ask the same blocks in parallel.\nMaximum allowed size, in bytes, of a request.\nMaximum allowed size, in bytes, of a response.\nGet message sink of the peer.\nGet reference to metrics.\nRegistry for recording prometheus metrics to.\nRegistry for recording prometheus metrics to.\nAddress of the node.\nName of the protocol on the wire. Should be something like …\nDirectory path to store network-specific configuration. …\nNetworking backend used for P2P communication.\nNetwork layer configuration.\nNetwork configuration.\nCreate new <code>FullNetworkConfiguration</code>.\nCreate new <code>NotificationsSink</code>. NOTE: only used for testing …\nCreate new <code>NotificationHandshake</code> from an object that …\nCreates a new <code>NonDefaultSetConfig</code>. Zero slots and accepts …\nCreate new default configuration\nCreate new <code>NotificationMetrics</code>.\nCreate new default configuration for localhost-only …\nCreate new default configuration for localhost-only …\nGet next event from the <code>Notifications</code> event stream.\nThe node key configuration, which determines the node’s …\nName of the node. Sent over the wire for debugging …\nWhether nodes that aren’t in <code>SetConfig::reserved_nodes</code> …\nReturns the complement of this set of flags.\nNotification metrics.\nGet reference to installed notification protocols.\nCreate new (protocol, notification) handle pair.\nInstruct <code>Notifications</code> to open a new substream for <code>peer</code>.\nNumber of outgoing substreams related to this set that we…\nGet candidates with highest reputations for initiating …\nAttempt to parse the peer mode from a string.\nSplits a Multiaddress into a Multiaddress and PeerId.\nParses a string address and splits it into Multiaddress …\nRequest sent by the remote. Will always be smaller than …\nWho sent the request.\nReturns the <code>PeerId</code> the sink is connected to.\nIts identity.\nGet peer reputation.\nGet peer role, if available.\nGet handle to <code>PeerStore</code>.\nChannel to send back the response.\nGet protocol name of the <code>NotificationService</code>.\nLegacy name of the protocol to use on the wire. Should be …\nGet protocol name.\nGet reference to protocol name.\nGet reference to protocol name.\nMultiaddresses to advertise. Detected automatically if …\nRegister received notification to Prometheus.\nRegister sent notification to Prometheus.\nRegister a protocol handle to disconnect peers whose …\nRegister closed substream to Prometheus.\nRegister opened substream to Prometheus.\nRemoves the specified flags in-place.\nReport peer disconnection for reputation adjustment.\nAdjust peer reputation.\nReputation changes accrued while handling the request. To …\nDuration after which emitted requests are considered timed …\nWait until the remote is ready to accept a notification.\nList of reserved node addresses.\nThe payload of the response.\nAssigned role for our node (full, light, …).\nStart running <code>PeerStore</code> event loop.\nVerify addresses are consistent with enabled transports.\nCheck for duplicate bootnodes.\nSend asynchronous <code>notification</code> to <code>peer</code>, allowing sender to …\nSend synchronous <code>notification</code> to <code>peer</code>.\nSends a notification to the peer.\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nInserts or removes the specified flags depending on the …\nGet access to the <code>SetConfig</code> of the notification protocol.\nGet reference to <code>SetConfig</code>.\nSet handshake for the notification protocol replacing the …\nSet peer role.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nInitial syncing mode.\nTake <code>PeerStore</code>.\nTake <code>ProtocolHandlePair</code> from <code>NonDefaultSetConfig</code>\nToggles the specified flags in-place.\nConfiguration for the transport layer.\nNon-blocking variant of <code>set_handshake()</code> that attempts to …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nSize of Yamux receive window of all substreams. <code>None</code> for …\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nIf true, allow connecting to private IPv4/IPv6 addresses …\nIf true, the network will use mDNS to discover other …\nError when decoding <code>ed25519</code>-related types.\nAn Ed25519 keypair.\nAn Ed25519 public key.\nAn Ed25519 secret key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate a new random Ed25519 keypair.\nGenerate a new Ed25519 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nConvert the keypair into a byte array by concatenating the …\nConvert the public key to a byte array in compressed form, …\nConvert public key to <code>PeerId</code>.\nTry to parse a keypair from the binary format produced by …\nTry to parse a public key from a byte array containing the …\nTry to parse an Ed25519 secret key from a byte slice …\nVerify the Ed25519 signature on a message using the public …\nRequest a candidate and attestations.\nRecipient is a validator, we address it via this …\nRequest full available data from a node.\nResponse got canceled by networking.\nRequest an availability chunk from a node.\nFetch a collation from a collator which previously …\nFetch a collation from a collator which previously …\nRequests for notifying about an ongoing dispute.\nContains the error value\nResponse could not be decoded.\nSome error in substrate/libp2p happened.\nContains the success value\nA request to be sent to the network bridge, including a …\nResponses received for an <code>OutgoingRequest</code>.\nRecipient is a regular peer and we know its peer id.\nFetch a PoV from a validator which previously sent out a …\nPotential recipients of an outgoing request.\nAny error that can occur when sending a request.\nAll requests that can be sent to the network bridge via …\nUsed by the network to send us a response to a request.\nRequests for fetching large statements as part of …\nEncode the request.\nEncode a request into a <code>Vec&lt;u8&gt;</code>.\nOptional fallback request and protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the error represents some kind of timeout …\nCreate a new <code>OutgoingRequest</code>.\nCreate a new <code>OutgoingRequest</code> with a fallback in case the …\nThe actual request to send over the wire.\nIntended recipient of this request.\nSender which is used by networking to get us back a …\nThe requested data.\nRequest the entire available data for a candidate.\nReceive a requested available data.\nThe requested chunk data.\nRequest an availability chunk.\nReceive a requested erasure chunk.\nSkimmed down variant of <code>ErasureChunk</code>.\nDeliver requested collation.\nRequest the advertised collation at that relay-parent.\nResponses as sent by collators.\nDeliver requested collation along with parent head data.\nRecipient successfully processed the dispute request.\nA dispute request.\nPossible responses to a <code>DisputeRequest</code>.\nNode was not in possession of the requested chunk.\nNode was not in possession of the requested data.\nPoV was not found in store.\nDeliver requested PoV.\nRequest the advertised collation at that relay-parent.\nResponses to <code>PoVFetchingRequest</code>.\nData missing to reconstruct the full signed statement.\nRequest for fetching a large statement via …\nRespond with found full statement.\nHash of candidate we want a chunk for.\nCandidate we want a PoV for.\nThe candidate hash to get the available data for.\nHash of candidate that was used create the …\nThe erasure-encoded chunk of data belonging to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe validator index we are requesting from. This must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>ParaId</code> of the collation.\nProof for this chunk’s branch in the Merkle tree.\nRe-build an <code>ErasureChunk</code> from response and request.\nRelay parent we want a collation for.\nData needed to locate and identify the needed statement.\nThe head data of the candidate’s parent. This is needed …\nCandidate’s proof of validity.\nThe receipt of the candidate.\nRequest a candidate with statements.\nResponse to an <code>AttestedCandidateRequest</code>.\nThe requested chunk data.\nRequest an availability chunk.\nReceive a requested erasure chunk.\nDeliver requested collation.\nRequest the advertised collation at that relay-parent.\nResponses as sent by collators.\nDeliver requested collation along with parent head data.\nNode was not in possession of the requested chunk.\nHash of the candidate we want to request.\nCandidate hash.\nHash of candidate we want a chunk for.\nThe candidate receipt, with commitments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe validator index we are requesting from. This may not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStatement filter with ‘OR’ semantics, indicating which …\nThe <code>ParaId</code> of the collation.\nThe <code>PersistedValidationData</code> corresponding to the candidate.\nRelay parent collation is built on top of.\nAll known statements about the candidate, in compact form, …\nThe head data of the candidate’s parent. This is needed …\nCandidate’s proof of validity.\nThe receipt of the candidate.\nAdvertise a collation to a validator. Can only be sent …\nApproval distribution messages\nNetwork messages used by the approval distribution …\nApprovals for candidates in some recent, unfinalized block.\nAssignments for candidates in recent, unfinalized blocks.\nA signed availability bitfield for a given relay-parent …\nBitfield distribution messages\nNetwork messages used by the bitfield distribution …\nAll network messages on the collation peer-set.\nA collation sent to a validator was seconded.\nCollator protocol messages\nNetwork messages used by the collator protocol subsystem\nDeclare the intent to advertise collations under a …\nDummy network message type, so we will receive …\nSeconded statement with large payload (e.g. containing a …\nA signed full statement under a given relay-parent.\nStatement distribution messages\nNetwork messages used by the statement distribution …\nData that makes a statement unique.\nAll network messages on the validation peer-set.\nHash of the candidate that got validated.\nGet the payload that should be signed and included in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet fingerprint describing the contained statement …\nGet contained relay parent.\nGet the signature from the statement.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this message contains a large statement.\nRelay parent this statement is relevant under.\nSignature of seconding validator.\nValidator that attested the validity.\nAdvertise a collation to a validator. Can only be sent …\nApproval distribution messages\nNetwork messages used by the approval distribution …\nApprovals for candidates in some recent, unfinalized block.\nAssignments for candidates in recent, unfinalized blocks.\nAn acknowledgement of a backed candidate being known.\nA notification of a backed candidate being known by the …\nA manifest of a known backed candidate, along with a …\nA notification of a backed candidate being known by the …\nA signed availability bitfield for a given relay-parent …\nBitfield distribution messages\nNetwork messages used by the bitfield distribution …\nAll network messages on the collation peer-set.\nA collation sent to a validator was seconded.\nCollator protocol messages\nNetwork messages used by the collator protocol subsystem\nDeclare the intent to advertise collations under a …\nDummy network message type, so we will receive …\nA notification of a signed statement in compact form, for …\nStatement distribution messages\nNetwork messages used by the statement distribution …\nBitfields indicating the statements that are known or …\nAll messages for V1 for compatibility with the statement …\nAll network messages on the validation peer-set.\nDetermine the number of backing validators in the …\nCreate a new blank filter with the given group size.\nThe hash of the candidate.\nThe hash of the candidate.\nGet the payload that should be signed and included in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new full filter with the given group size.\nThe group index backing the candidate at the relay-parent.\nWhether the filter has a specific expected length, …\nWhether the statement filter has at least one seconded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMask out <code>Seconded</code> statements in <code>self</code> according to the …\nMask out <code>Valid</code> statements in <code>self</code> according to the provided\nThe para ID of the candidate. It is illegal for this to be …\nThe head-data corresponding to the candidate.\nThe relay-parent of the candidate.\nSeconded statements. ‘1’ is known or undesired.\nA statement filter which indicates which validators in the …\nA statement filter which indicates which validators in the …\nValid statements. ‘1’ is known or undesired.\nCandidate hash.\nParachain head data hash before candidate execution.\nHash of the relay parent advertised collation is based on.\nApproval distribution messages\nNetwork messages used by the approval distribution …\nApprovals for candidates in some recent, unfinalized block.\nAssignments for candidates in recent, unfinalized blocks. …\nThis parts of the protocol did not change from v2, so just …\nThis parts of the protocol did not change from v2, so just …\nBitfield distribution messages\nThis parts of the protocol did not change from v2, so just …\nThis parts of the protocol did not change from v2, so just …\nStatement distribution messages\nThis parts of the protocol did not change from v2, so just …\nThis parts of the protocol did not change from v2, so just …\nAll network messages on the validation peer-set.\nThis parts of the protocol did not change from v2, so just …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")