searchState.loadedDescShard("sc_consensus_beefy", 0, "BEEFY gadget network parameters.\nBEEFY gadget initialization parameters.\nLinks used by the BEEFY RPC layer, from the BEEFY …\nLinks between the block importer, the background voter and …\nA convenience BEEFY client trait that defines all the type …\nClient Backend\nMake block importer and link half necessary to tie the …\nBEEFY client\nCommunication streams for the BEEFY networking protocols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStream of BEEFY signed commitments from block import to …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStream of BEEFY best block hashes coming from the voter.\nStream of signed commitments coming from the voter.\nName of the votes gossip protocol used by BEEFY.\nChain specific BEEFY gossip protocol name. See …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether running under “Authority” role.\nChain specific BEEFY on-demand justifications protocol …\nName of the BEEFY justifications request-response protocol.\nLocal key store\nLinks between the block importer, the background voter and …\nMinimal delta between blocks, BEEFY should vote for\nNetwork implementing gossip, requests and sync-oracle.\nBEEFY voter network params\nHandle for receiving notification events.\nHandler for incoming BEEFY justifications requests from a …\nBEEFY Payload provider\nPrometheus metric registry\nRuntime Api Provider\nStart the BEEFY gadget.\nSyncing service implementing a sync oracle and an event …\nSends BEEFY best block hashes from voter to RPC.\nSends BEEFY signed commitments from voter to RPC.\nReturns the configuration value to put in …\nRequest/response protocol for syncing BEEFY justifications.\nThe sending half of the notifications channel(s) used to …\nThe receiving half of a notifications channel used to …\nProvides tracing key for BEEFY best block stream.\nThe sending half of the notifications channel(s) used to …\nThe receiving half of a notifications channel used to …\nProvides tracing key for BEEFY versioned finality proof …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandler for incoming BEEFY justifications requests from a …\nDecoding failed, we were able to change the peer’s …\nDecoding failed, but sending reputation change failed.\nBEEFY justification request.\nIncoming request stream exhausted. Should only happen on …\nStart collecting proofs from this block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BeefyJustifsRequestHandler</code>.\nNetwork request-response protocol name used by this …\nRun <code>BeefyJustifsRequestHandler</code>.\nA block-import handler for BEEFY.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new BeefyBlockImport.\nA finality proof with matching BEEFY authorities’ …\nCurrent active version")