searchState.loadedDescShard("polkadot_node_subsystem", 0, "Subsystem accumulation.\nActivated leaf.\nActivated leaf.\nSubsystems should adjust their jobs to start and stop work …\nChanges in the set of active leaves: the parachain heads …\nGenerated message type wrapper over all possible messages …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA abstracting trait for usage with subsystems.\nBinds a generated type covering all declared outgoing …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA block was finalized with i.e. babe or another consensus …\n<code>Subsystem</code> is informed of a finalized block by its block …\nA new block was imported.\nAn event telling the <code>Overseer</code> on the particular block that …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nOffers header utilities.\nAccumulative trait for a particular subsystem wrapper.\nA description of an error causing the chain API request to …\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nCollection of channels to the individual subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nSome other <code>Subsystem</code>’s message.\nConclude the work of the <code>Overseer</code> and all <code>Subsystem</code>s.\nRunning with jaeger disabled.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA dummy subsystem that implements <code>Subsystem</code> for all types …\nRunning with jaeger being enabled.\nContains the error value\nThe error type.\nAn event from outside the overseer scope, such as the …\nThe runtime API cannot be executed due to a runtime error.\nSome request from outer world.\nA request from the outer world.\nAn error that may happen during Availability Recovery …\nDefer initialization to a point where the <code>handle</code> is …\nSpecialized message type originating from the overseer.\nPer origin (or subsystem) annotations to wrap an error.\nPer origin (or subsystem) annotations to wrap an error.\nGenerated by the <code>#[overseer(..)]</code> proc-macro\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA handle used to communicate with the <code>Overseer</code>.\nWhether a header supports parachain consensus or not.\nHigh priority.\nHigh priority.\nType for the initialized field of the orchestra builder\nType used to represent a builder where all fields are …\nStateful convenience wrapper around <code>mick_jaeger</code>.\nConfiguration for the jaeger tracing.\nJaeger configuration builder.\nA description of an error during jaeger initialization.\nAn error that may happen during Availability Recovery …\nLaunched and operational state.\nA helper trait to map a subsystem to smth. else.\nThe message type of this context. Subsystems launched with …\nA wrapping type for messages.\nSubsystem- or job-specific Prometheus metrics.\nCreate a stream of ticks with a defined cycle duration.\nType marker for the uninitialized field of the orchestra …\nMessage as sent to a subsystem.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nUninitialized, suggests wrong API usage if encountered.\nNormal priority.\nNormal priority.\nThe runtime API request in question cannot be executed …\nContains the success value\nA subsystem that the orchestrator orchestrates.\nThe overarching messages <code>enum</code> for this particular …\nThe associated <em>outgoing</em> messages for a subsystem that …\nThe output type of the mapping.\nThe orchestra.\nBuilder pattern to create compile time safe construction …\nExternal connector.\nAn error type that describes faults that may happen\nHandle for an orchestra.\nA shareable metrics type for usage with the overseer.\nConnector to send messages towards all subsystems, while …\nSignals sent by an overseer to a subsystem.\nA context type that is given to the <code>Subsystem</code> upon …\nA special “per leaf span”.\nPreparation state with the necessary config to launch the …\nDescribes the priority of the message.\nPriority of messages sending to the individual subsystems. …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAn error that may happen during Availability Recovery …\nAccumulative trait for a particular subsystem wrapper.\nA description of an error causing the runtime API request …\nA abstracting trait for usage with subsystems.\nExposes all runtime calls that are used by the runtime API …\nThe sender type as provided by <code>sender()</code> and underlying.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSignal from the <code>Orchestra</code>.\nAnd the same for signals.\nWatermark to track the received signals.\nA wrapper type for a span.\nSame as <code>SpawnJob</code> but for blocking tasks to be executed on a\nGlue to connect <code>trait orchestra::Spawner</code> and <code>SpawnNamed</code> …\nA message that wraps something the <code>Subsystem</code> is desiring to\nSpawned subsystem.\nA spawner\nA helper to annotate the stage with a numerical value to …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nStop the overseer on i.e. a UNIX signal.\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nAn error type that describes faults that may happen\nIncoming messages from both the bounded and unbounded …\nSpecialized subsystem instance type of subsystems …\nSet of readouts of the <code>Meter</code>s of a subsystem.\nCollection of meters related to a subsystem.\nA <code>Result</code> type that wraps <code>SubsystemError</code>.\nSender end of a channel to interface with a subsystem.\nTask kind to launch.\nExtends <code>Future</code> to allow time-limited futures.\nA type of messages that are sent from a <code>Subsystem</code> to the …\nA bounded channel error when trying to send a message …\nKeeps the state of a specific block pinned in memory while …\nDirectly initialize the subsystem with the given subsystem …\nWait for the activation of a particular hash and be …\nNew relay chain block of interest.\nSpecify the baggage in the builder when it was not …\nSpecify the baggage in the builder when it has been …\nA user specified addendum field.\nSpecify the baggage in the builder when it has been …\nSpecify the baggage in the builder when it was not …\nA user specified addendum field.\nParachain host API version\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nApproval voting configuration parameters\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nObtain access to the orchestra handle.\nObtain access to the orchestra handle.\nReturns the persisted validation data for the given <code>ParaId</code> …\nReturns candidate’s acceptance limitations for …\nRetrieve authority identifiers of the current and next …\nYields information on all availability cores as relevant …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nInform the <code>Overseer</code> that some block was finalized.\nInform the <code>Overseer</code> that that some block was imported.\nBroadcast a signal to all subsystems.\nComplete the construction and create the orchestra type.\nComplete the construction and create the orchestra type …\nCreate a new orchestra utilizing the builder.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nGet a vector of events concerning candidates that occurred …\nGet the receipt of a candidate pending availability. This …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nGet the receipts of all candidates pending availability …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nChecks if the given validation outputs pass the acceptance …\nFetch the <code>ClaimQueue</code> from scheduler pallet\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nReturns information regarding the current epoch.\nRelay chain block hashes no longer of interest.\nGets the disabled validators at a specific block height\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nReturns all onchain disputes. This is a staging method! Do …\nGet all the pending inbound messages in the downward …\nA dummy subsystem, mostly useful for placeholders and …\nEquality for <code>ActiveLeavesUpdate</code> doesn’t imply bitwise …\nError types for the subsystem requests.\nGlues together the <code>Overseer</code> and <code>BlockchainEvents</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe task of the subsystem being spawned.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nObtain a clone of the handle.\nGet block hash by number. Returns <code>None</code> if the header is …\nHash of the block.\nThe block hash.\nThe block hash.\nA helper to convert the hash to the fixed size …\nReturn true if the given header supports parachain …\nGet block header. Returns <code>None</code> if block is not found.\nGet the contents of all channels addressed to the given …\nIncrease the number of signals by one.\nGet blockchain info.\nThe instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value.\nReturns <code>true</code> if we could not send to channel as it was …\nIs this update empty and doesn’t contain any information?\nReturns <code>true</code> if we could not send to channel as it was full\nReturns a merkle proof of a validator session key in a …\nSpawn a task, it depends on the implementer if this is …\nLoad the current value of received signals.\nConsumes a <code>T</code> per subsystem, and maps it to <code>Self::Output</code>.\nExtract information from each subsystem.\nThe message to be sent/consumed.\nSet the interconnecting message channel capacities. This …\nRe-export of all messages type, including the wrapper type.\nAll meters of the particular subsystem instance.\nPrometheus metrics related to the overseer and its …\nSpecify the baggage in the builder when it was not …\nSpecify the baggage in the builder when it has been …\nA user specified addendum field.\nGet the minimum number of backing votes.\nName of the subsystem instance.\nName of the subsystem being spawned.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nCreate a new metronome source with a defined cycle …\nCreate a new <code>Handle</code>.\nGet the node features.\nGet block number by hash. Returns <code>None</code> if the header is …\nBlock’s number.\nThe block number.\nThe block number.\nScrape dispute relevant from on-chain, backing votes and …\nReturns the state of parachain backing for a given para. …\nHash of the parent block.\nYields the persisted validation data for the given <code>ParaId</code> …\nThe priority level.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nReturns code hashes of PVFs that require pre-checking by …\nRead the values of all subsystem <code>Meter</code>s.\nReceive a signal or a message.\nReceive a signal.\nConvenience method to register metrics in the optional …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nRoute a particular message to a subsystem that consumes …\nRun the <code>Overseer</code>.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSend a message via a bounded channel.\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a message to the wrapped subsystem.\nSend a direct message with defined priority to some other …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend some message to one of the <code>Subsystem</code>s.\nSend a message not providing an origin.\nSend a signal to the wrapped subsystem.\nSend a message to another subsystem via an unbounded …\nSend a message onto the unbounded queue of some other …\nSend a message using the unbounded connection.\nObtain the sender.\nGet the execution environment parameter set by parent …\nReturns the session index expected at a child of the block.\nGet the session info for the given session, if stored.\nSet the interconnecting signal channel capacity. This will …\nThe number of signals already received. Required to assure …\nSignal level at the point of reception.\nAn associated <code>jaeger::Span</code>.\nAn associated <code>jaeger::Span</code>.\nSpecify the baggage in the builder when it has been …\nSpecify the baggage in the builder when it was not …\nA user specified addendum field.\nSpawn task of kind <code>self</code> using spawner <code>S</code>.\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nSpawn the metrics metronome task.\nGet access to internal task spawner.\nThe <code>spawner</code> to use for spawning tasks.\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nCreate a <code>ActiveLeavesUpdate</code> with a single activated hash\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nTell <code>Overseer</code> to shutdown.\nCreate a <code>ActiveLeavesUpdate</code> with a single deactivated hash\nSubmits a PVF pre-checking statement into the transaction …\nSubmits an unsigned extrinsic to slash validators who lost …\nSpecify the baggage in the builder when it has been …\nSpecify the baggage in the builder when it was not …\nA user specified addendum field.\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nTransform the inner value.\nTry to asynchronously receive a message.\nTry to register metrics in the Prometheus registry.\nTry to send a message via a bounded channel.\nTries to send a direct message to some other <code>Subsystem</code>, …\nTries to send a direct message with defined priority to …\nTries to send a signal to the wrapped subsystem without …\nTransform the inner value, fail-able version.\nSend sink for <code>Message</code>s to be sent to a subsystem.\nSend sink for <code>Signal</code>s to be sent to a subsystem.\nReturns a list of validators that lost a past session …\nA handle to unpin the block on drop.\nA handle to unpin the block on drop.\nA handle to unpin the block on drop.\nFetch the validation code used by a para, making the given …\nGet the validation code from its hash.\nFetch the hash of the validation code used by a para, …\nReturns the validator groups and rotation info localized …\nGet the current validators.\nWait for a block with the given hash to be in the …\nSend the given signal, a termination signal, to all …\nCreate a new connector with non-default event channel …\nAdds a <code>str</code> as <code>origin</code> to the given error <code>err</code>.\nThe actual message.\nThe originating subsystem name.\nThe relay parent for which activation to wait for.\nResponse channel to await on.\nContained message\n<code>mick_jaeger</code> provided API to record spans to.\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nThe runtime API being called\nThe runtime API being called\nThe wrapped error. Marked as source for tracking the error …\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nName of the task to spawn which be shown in jaeger and …\nName of the task to spawn which be shown in jaeger and …\nThe future to execute.\nThe future to execute.\nSubsystem of the task to spawn which be shown in jaeger …\nSubsystem of the task to spawn which be shown in jaeger …\nA dummy subsystem that implements <code>Subsystem</code> for all types …\nCreate an overseer with all subsystem being <code>Sub</code>.\nCreate an overseer with all subsystem being <code>Sub</code>.\nA description of an error causing the chain API request to …\nContains the error value\nThe runtime API cannot be executed due to a runtime error.\nAn error that may happen during Availability Recovery …\nPer origin (or subsystem) annotations to wrap an error.\nGenerated by the <code>#[overseer(..)]</code> proc-macro\nAn error that may happen during Availability Recovery …\nThe runtime API request in question cannot be executed …\nContains the success value\nAn error that may happen during Availability Recovery …\nA description of an error causing the runtime API request …\nAn error type that describes faults that may happen\nEase the use of subsystem errors.\nThe runtime API being called\nThe runtime API being called\nThe wrapped error. Marked as source for tracking the error …\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nA trait to support the origin annotation such that errors …\nAn owned dynamically typed <code>Future</code> for use in cases where …\nSome other <code>Subsystem</code>’s message.\nThe context of an asynchronous task.\nA future representing the notification that an elapsed …\nA <code>Duration</code> type to represent a span of time, typically …\nContains the error value\nThe error type.\nA message type that a subsystem receives from an orchestra.\nPer origin (or subsystem) annotations to wrap an error.\nFuture for the <code>fuse</code> method.\nA future represents an asynchronous computation obtained …\nAn extension trait for <code>Future</code>s that provides a variety of …\nA set of futures which may complete in any order.\nHigh priority.\nHigh priority.\nPoll the first stream.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nA helper trait to map a subsystem to smth. else.\nThe message type of this context. Subsystems launched with …\nA wrapping type for messages.\nThe duration of one nanosecond.\nNormal priority.\nNormal priority.\nContains the success value\nAn error type that describes faults that may happen\nAlias for a result with error type <code>OrchestraError</code>.\nThe overarching messages <code>enum</code> for this particular …\nThe output type of the mapping.\nThe type of value produced on completion.\nRepresents that a value is not ready yet.\nA pointer which pins its pointee in place.\nIndicates whether a value is available or if the current …\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nDescribes the priority of the message.\nPriority of messages sending to the individual subsystems. …\nRepresents that a value is immediately ready.\nPoll the second stream.\nThe duration of one second.\nThe sender type as provided by <code>sender()</code> and underlying.\nSignal from the <code>Orchestra</code>.\nAnd the same for signals.\nWatermark to track the received signals.\nSame as <code>SpawnJob</code> but for blocking tasks to be executed on a\nA message that wraps something the <code>Subsystem</code> is desiring to\nAn asynchronous subsystem task..\nA spawner\nAn extension trait for <code>Stream</code>s that provides a variety of …\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nIncoming messages from both the bounded and unbounded …\nA running instance of some <code>Subsystem</code>.\nSet of readouts of the <code>Meter</code>s of a subsystem.\nCollection of meters related to a subsystem.\nSender end of a channel to interface with a subsystem.\nA future that wraps another future with a <code>Delay</code> allowing …\nExtends <code>Future</code> to allow time-limited futures.\nA type of messages that are sent from a <code>Subsystem</code> to the …\nA bounded channel error when trying to send a message …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nGets <code>Pin&lt;&amp;mut T&gt;</code> to the underlying pinned value from this …\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nGets a mutable reference to the pinned value this <code>Pin&lt;Ptr&gt;</code> …\nReturns the total number of nanoseconds contained by this …\nGets a shared reference to the pinned value this <code>Pin</code> …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nAn adaptor for chunking up items of the stream inside a …\nClears the set, removing all futures.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.\nDivide <code>Duration</code> by <code>f32</code>.\nDivide <code>Duration</code> by <code>f64</code>.\nThe internal duration between this point and another.\nCreates a stream which gives the current iteration count …\nReturns a reference to the extension data for the current …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreates a new <code>Duration</code> from the specified number of …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreate a new <code>Context</code> from a <code>&amp;Waker</code>.\nCreates a new <code>Duration</code> from the specified number of weeks.\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nThe task of the subsystem being spawned.\nGets a mutable reference to the data inside of this <code>Pin</code>.\nGets a shared reference out of a pin.\nGets a mutable reference to the data inside of this <code>Pin</code>.\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this stream into a future of …\nUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying pointer.\nUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying <code>Ptr</code>.\nConverts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same …\nConvert this future into a single element stream.\nReturns <code>true</code> if the set contains no futures.\nReturns <code>true</code> if the poll is a <code>Pending</code> value.\nReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.\nReturns true if this <code>Duration</code> spans no time.\nReturns an iterator that allows inspecting each future in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows inspecting each future in …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns the number of futures contained in the set.\nReturns a reference to the <code>LocalWaker</code> for the current task.\nCreate a packet from its parts.\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …\nMap this future’s output to a different type, returning …\nMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …\nMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nConsumes a <code>T</code> per subsystem, and maps it to <code>Self::Output</code>.\nConstructs a new pin by mapping the interior value.\nConstruct a new pin by mapping the interior value.\nThe message to be sent/consumed.\nAll meters of the particular subsystem instance.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nName of the subsystem being spawned.\nName of the subsystem instance.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreates a new future which will fire at <code>dur</code> time into the …\nConstructs a new, empty <code>FuturesUnordered</code>.\nConstruct a new <code>Pin&lt;Ptr&gt;</code> around a pointer to some data of …\nCreates a new <code>Duration</code> from the specified number of whole …\nConstruct a new <code>Pin&lt;Ptr&gt;</code> around a reference to some data …\nCreates a future that resolves to the next item in the …\nEvaluates and consumes the future, returning the resulting …\nCreates a new stream which exposes a <code>peek</code> method.\nAttempt to resolve the future to a final value, registering\nA macro which returns the result of polling a future once …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nThe priority level.\nPush a future into the set.\nAn adaptor for chunking up ready items of the stream …\nReceive a signal or a message.\nReceive a signal.\nTurn this future into a future that yields <code>()</code> on …\nResets this timeout to an new timeout which will fire at …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nThe internal duration between this point and another.\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nPolls multiple futures and streams simultaneously, …\nA functor to specify strategy of the channels selection in …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message with defined priority to some other …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend a message onto the unbounded queue of some other …\nSend a message using the unbounded connection.\nObtain the sender.\nAssigns a new value to the memory location pointed to by …\nCreate a cloneable handle to this future where all handles …\nThe number of signals already received. Required to assure …\nSignal level at the point of reception.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nGet a pinning mutable reference from a static mutable …\nGet a pinning reference from a <code>&amp;&#39;static</code> reference.\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nCreates a new <code>Fuse</code>-wrapped future which is already …\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nToggle the value and return the old one.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nTry to asynchronously receive a message.\nTries to send a direct message to some other <code>Subsystem</code>, …\nTries to send a direct message with defined priority to …\nSend sink for <code>Message</code>s to be sent to a subsystem.\nSend sink for <code>Signal</code>s to be sent to a subsystem.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nConverts a stream of pairs into a future, which resolves …\nReturns a reference to the <code>Waker</code> for the current task.\nAnnotate the error with a origin <code>str</code>.\nAn adapter for zipping two streams together.\nContained message\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nName of the task to spawn which be shown in jaeger and …\nName of the task to spawn which be shown in jaeger and …\nThe future to execute.\nThe future to execute.\nSubsystem of the task to spawn which be shown in jaeger …\nSubsystem of the task to spawn which be shown in jaeger …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe type of value produced by the sink when an error …\nThe type of failures yielded by this future\nThe type of failures yielded by this future\nA future represents an asynchronous computation obtained …\nAn extension trait for <code>Future</code>s that provides a variety of …\nValues yielded by the stream.\nThe type of successful values yielded by this future\nThe type of successful values yielded by this future\nThe type of value produced on completion.\nA <code>Sink</code> is a value into which other values can be sent, …\nAn extension trait for <code>Sink</code>s that provides a variety of …\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecutes another future after this one resolves …\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAdds a fixed-size buffer to the current sink.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nCreates an adaptor which will chain this stream with …\nAn adaptor for chunking up items of the stream inside a …\nClose the sink.\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which gives the current iteration count …\nMaps this future’s <code>Error</code> to a new error type using the …\nWraps the current stream in a new stream which converts …\nBuilt-in executors and related tools.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nCreates a future which will wait for a non-empty buffer to …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlush the sink, processing all pending items.\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nDo something with the error value of a future before …\nDo something with the error value of this stream, …\nDo something with the success value of a future before …\nDo something with the success value of this stream, …\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConverts this stream into a future of …\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nConvert this future into a single element stream.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nAsynchronous I/O.\nPolls multiple futures simultaneously, returning a tuple …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns a stream over the lines of this reader. This …\nFutures-powered synchronization primitives.\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMaps this future’s error value to a different value.\nWraps the current stream in a new stream which maps the …\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nWraps the current stream in a new stream which maps the …\nMaps this future’s success value to a different value, …\nThis module contains the <code>Never</code> type.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreates a future that resolves to the next item in the …\nEvaluates and consumes the future, returning the resulting …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nChain on a computation for when an error happens, passing …\nCreates a new stream which exposes a <code>peek</code> method.\nA macro which yields to the event loop once.\nPins a value on the stack.\nAttempt to resolve the future to a final value, registering\nA macro which returns the result of polling a future once …\nFlush any remaining output and close this sink, if …\nAttempt to close the object.\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nAttempt to return the contents of the internal buffer, …\nFlush any remaining output from this sink.\nAttempt to flush the object, ensuring that any buffered …\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nAttempt to seek to an offset, in bytes, in a stream.\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nA “prelude” for crates using the <code>futures</code> crate.\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nExtracts the successful type of a <code>Poll&lt;T&gt;</code>.\nAn adaptor for chunking up ready items of the stream …\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nCreates a future which will seek an IO object, and then …\nPolls multiple futures and streams simultaneously, …\nPolls multiple futures and streams simultaneously, …\nReturns a <code>Future</code> that resolves when the next item in this …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nCreate a cloneable handle to this future where all handles …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nHelper method for splitting this read/write object into …\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreates a future which will return the current seek …\nCombines several streams, all producing the same <code>Item</code> …\nCreates a new stream of at most <code>n</code> items of the underlying …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nTools for working with tasks.\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nPolls multiple futures simultaneously, resolving to a …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nConverts a stream of pairs into a future, which resolves …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn adapter for zipping two streams together.\nA multi-producer, single-consumer queue for sending values …\nA channel for sending a single message between …\nThe receiving end of a bounded mpsc channel.\nThe error type for <code>Sender</code>s used as <code>Sink</code>s.\nThe transmission end of a bounded mpsc channel.\nThe error type returned from <code>try_next</code>.\nThe error type returned from <code>try_send</code>.\nThe receiving end of an unbounded mpsc channel.\nThe transmission end of an unbounded mpsc channel.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel, without dropping …\nCloses the receiving half of a channel, without dropping …\nCloses this channel from the sender side, preventing any …\nCloses this channel from the sender side, preventing any …\nDisconnects this sender from the channel, closing it if …\nDisconnects this sender from the channel, closing it if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHashes the receiver into the provided hasher\nHashes the receiver into the provided hasher\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the message that was attempted to be sent but …\nDrops the message and converts into a <code>SendError</code>.\nReturns whether this channel is closed without needing a …\nReturns whether this channel is closed without needing a …\nReturns whether the sender send to this receiver.\nReturns whether the sender send to this receiver.\nReturns <code>true</code> if this error is a result of the receiver …\nReturns <code>true</code> if this error is a result of the receiver …\nReturn false is channel has no queued messages, true …\nReturns <code>true</code> if this error is a result of the channel …\nReturns <code>true</code> if this error is a result of the channel …\nReturn the number of messages in the queue or 0 if channel …\nPolls the channel to determine if there is guaranteed …\nCheck if the channel is ready to receive a message.\nReturns whether the senders send to the same receiver.\nReturns whether the senders send to the same receiver.\nSend a message on the channel.\nSend a message on the channel.\nTries to receive the next message without notifying a …\nTries to receive the next message without notifying a …\nAttempts to send a message on this <code>Sender</code>, returning the …\nCreates an unbounded mpsc channel for communicating …\nSends a message along this channel.\nError returned from a <code>Receiver</code> when the corresponding …\nA future that resolves when the receiving end of a channel …\nA future for a value that will be provided by another …\nA means of transmitting a single value to another task.\nCreates a future that resolves when this <code>Sender</code>’s …\nCreates a new one-shot channel for sending a single value …\nGracefully close this receiver, preventing any subsequent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests to see whether this <code>Sender</code>’s corresponding <code>Receiver</code>\nTests to see whether this <code>Sender</code> is connected to the given …\nPolls this <code>Sender</code> half to detect whether its associated …\nCompletes this oneshot with a successful result.\nAttempts to receive a message outside of the context of a …\nAn iterator which blocks on values from a stream until …\nRepresents an executor context.\nAn error returned by <code>enter</code> if an execution scope has …\nA single-threaded task pool for polling futures to …\nA handle to a <code>LocalPool</code> that implements <code>Spawn</code>.\nA general-purpose thread pool for scheduling tasks that …\nThread pool configuration object.\nExecute the closure <code>f</code> immediately after each worker thread …\nExecute closure <code>f</code> just prior to shutting down each worker …\nRun a future to completion on the current thread.\nTurn a stream into a blocking iterator.\nCreate a default thread pool configuration, which can then …\nCreate a <code>ThreadPool</code> with the given configuration.\nMarks the current thread as being within the dynamic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>BlockingStream</code> into the inner <code>Stream</code> type.\nSet thread name prefix of a future ThreadPool.\nCreates a new thread pool with the default configuration.\nCreate a default thread pool configuration.\nCreate a new, empty pool of tasks.\nSet size of a future ThreadPool\nRun all tasks in the pool to completion.\nRuns all the tasks in the pool until the given future …\nRuns all tasks in the pool and returns if no more progress …\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future with output <code>()</code> to\nGet a clonable handle to the pool as a <code>Spawn</code>.\nSet stack size of threads in the pool, in bytes.\nRuns all tasks and returns after completing one future or …\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nA simple wrapper type which allows types which implement …\nAn entity already exists, often a file.\nProgram argument list too long.\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe operation failed because a pipe was closed.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a writer and buffers its output.\nReader for the <code>chain</code> method.\nFuture for the <code>close</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nFuture for the <code>copy()</code> function.\nFuture for the <code>copy_buf()</code> function.\nFuture for the <code>copy_buf_abortable()</code> function.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nA <code>Cursor</code> wraps an in-memory buffer and provides it with a …\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>fill_buf</code> method.\nFuture for the <code>flush</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nSink for the <code>into_sink</code> method.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nThe filesystem object is, unexpectedly, a directory.\nWrap a writer, like <code>BufWriter</code> does, but prioritizes …\nStream for the <code>lines</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>read</code> method.\nFuture for the <code>read_exact</code> method.\nThe readable half of an object returned from …\nFuture for the <code>read_line</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>read_to_end</code> method.\nFuture for the <code>read_to_string</code> method.\nFuture for the <code>read_until</code> method.\nFuture for the <code>read_vectored</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nError indicating a <code>ReadHalf&lt;T&gt;</code> and <code>WriteHalf&lt;T&gt;</code> were not …\nFuture for the <code>BufReader::seek_relative</code> method.\nFuture for the <code>seek</code> method.\nEnumeration of possible methods to seek within an I/O …\nWriter for the <code>sink()</code> function.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>take</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nAn owned window around an underlying buffer.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>write</code> method.\nFuture for the <code>write_all</code> method.\nThe writable half of an object returned from …\nFuture for the <code>write_vectored</code> method.\nAn error returned when an operation could not be completed …\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nReturns a reference to the internally buffered data.\nReturns a reference to the internally buffered data.\nReturns a reference to <code>buf_writer</code>’s internally buffered …\nCreates an adaptor which will chain this stream with …\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nAttempt to downcast the custom boxed error to <code>E</code>.\nConstructs a new handle to an empty reader.\nReturns the end index of this window into the underlying …\nCreates a future which will wait for a non-empty buffer to …\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreates a new instance of an <code>Error</code> from a particular OS …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns a mutable reference to the inner error wrapped by …\nReturns a mutable reference to the contained IO object.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGets mutable references to the underlying readers in this …\nGets a mutable reference to the underlying value in this …\nAcquires a mutable reference to the underlying sink or …\nGets a mutable reference to the underlying buffer inside …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGets pinned mutable references to the underlying readers …\nAcquires a pinned mutable reference to the underlying sink …\nReturns a reference to the inner error wrapped by this …\nReturns a reference to the contained IO object.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nGets references to the underlying readers in this <code>Chain</code>.\nGets a reference to the underlying value in this cursor.\nAcquires a reference to the underlying sink or stream that …\nGets a shared reference to the underlying buffer inside of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes self and returns the contained IO object.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes the <code>Chain</code>, returning the wrapped readers.\nConsumes this cursor, returning the underlying value.\nConsumes this combinator, returning the underlying sink or …\nConsumes this <code>Window</code>, returning the underlying buffer.\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the remaining number of bytes that can be read …\nReturns a stream over the lines of this reader. This …\nCreates a new I/O error from a known kind of error as well …\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\nCreates a new <code>AllowStdIo</code> from an existing IO object.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nCreate a new <code>LineWriter</code> with default buffer capacity. The …\nCreates a new cursor wrapping the provided underlying …\nCreates a new window around the buffer <code>t</code> defaulting to the …\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_close()</code>\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_flush()</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nSeek to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nAttempts to seek relative to the current position. If the …\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nCreates an instance of a reader that infinitely repeats …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nCreates a future which will seek an IO object, and then …\nSeeks relative to the current position. If the new …\nChanges the range of this window to the range specified.\nSets the number of bytes that can be read before this …\nSets the position of this cursor.\nCreates an instance of a writer which will successfully …\nHelper method for splitting this read/write object into …\nReturns the starting index of this window into the …\nCreates a future which will return the current seek …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nCreates a new <code>LineWriter</code> with the specified buffer …\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nA type of futures-powered synchronization primitive which …\nFuture returned by <code>BiLock::lock</code> which will resolve when …\nReturned RAII guard from the <code>poll_lock</code> method.\nAn RAII guard returned by the <code>MutexGuard::map</code> and …\nA futures-aware mutex.\nAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …\nA future which resolves when the target mutex has been …\nAn RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>…\nA future which resolves when the target mutex has been …\nError indicating two <code>BiLock&lt;T&gt;</code>s were not two halves of a …\nGet a mutable pinned reference to the locked value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nReturns <code>true</code> only if the other <code>BiLock&lt;T&gt;</code> originated from …\nAcquire the lock asynchronously.\nPerform a “blocking lock” of this lock, consuming this …\nAcquire the lock asynchronously.\nReturns a locked view over a portion of the locked data.\nReturns a locked view over a portion of the locked data.\nCreates a new futures-aware mutex.\nCreates a new <code>BiLock</code> protecting the provided data.\nAttempt to acquire this lock, returning <code>Pending</code> if it can…\nAttempts to put the two “halves” of a <code>BiLock&lt;T&gt;</code> back …\nAttempt to acquire the lock immediately.\nAttempt to acquire the lock immediately.\nA type with no possible values.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nThe type of value produced by the sink when an error …\nThe type of failures yielded by this future\nThe type of failures yielded by this future\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of successful values yielded by this future\nThe type of successful values yielded by this future\nThe type of value produced on completion.\nA <code>Sink</code> is a value into which other values can be sent, …\nA stream of values produced asynchronously.\nA convenience for futures that return <code>Result</code> values that …\nA convenience for streams that return <code>Result</code> values that …\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nAdapters specific to <code>Result</code>-returning streams\nAn extension trait for <code>Stream</code>s that provides a variety of …\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nAn extension trait for <code>Sink</code>s that provides a variety of …\nAn extension trait which adds utility methods to …\nAn extension trait for <code>Future</code>s that provides a variety of …\nAdapters specific to <code>Result</code>-returning futures\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecutes another future after this one resolves …\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAdds a fixed-size buffer to the current sink.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nCreates an adaptor which will chain this stream with …\nAn adaptor for chunking up items of the stream inside a …\nClose the sink.\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which gives the current iteration count …\nMaps this future’s <code>Error</code> to a new error type using the …\nWraps the current stream in a new stream which converts …\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nCreates a future which will wait for a non-empty buffer to …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlush the sink, processing all pending items.\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nAsynchronous values.\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nDo something with the error value of a future before …\nDo something with the error value of this stream, …\nDo something with the success value of a future before …\nDo something with the success value of this stream, …\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConverts this stream into a future of …\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nConvert this future into a single element stream.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nWrap this future in an <code>Either</code> future, making it the …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns a stream over the lines of this reader. This …\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMaps this future’s error value to a different value.\nWraps the current stream in a new stream which maps the …\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nWraps the current stream in a new stream which maps the …\nMaps this future’s success value to a different value, …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreates a future that resolves to the next item in the …\nEvaluates and consumes the future, returning the resulting …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nChain on a computation for when an error happens, passing …\nCreates a new stream which exposes a <code>peek</code> method.\nAttempt to resolve the future to a final value, registering\nFlush any remaining output and close this sink, if …\nAttempt to close the object.\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nAttempt to return the contents of the internal buffer, …\nFlush any remaining output from this sink.\nAttempt to flush the object, ensuring that any buffered …\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nAttempt to seek to an offset, in bytes, in a stream.\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nAn adaptor for chunking up ready items of the stream …\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nCreates a future which will seek an IO object, and then …\nReturns a <code>Future</code> that resolves when the next item in this …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nCreate a cloneable handle to this future where all handles …\nAsynchronous sinks.\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nHelper method for splitting this read/write object into …\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nAsynchronous streams.\nCreates a future which will return the current seek …\nCreates a new stream of at most <code>n</code> items of the underlying …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nConverts a stream of pairs into a future, which resolves …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn adapter for zipping two streams together.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>and_then</code> method.\nAn owned dynamically typed <code>Future</code> for use in cases where …\nFuture for the <code>catch_unwind</code> method.\nThe output of the completed future\nThe output of the completed future\nCombines two different futures, streams, or sinks having …\nFuture for the <code>err_into</code> method.\nThe type of failures yielded by this future\nFuture for the <code>flatten</code> method.\nSink for the <code>flatten_sink</code> method.\nStream for the <code>flatten_stream</code> method.\nFuture for the <code>fuse</code> method.\nA future which tracks whether or not the underlying future …\nA future represents an asynchronous computation obtained …\nA not-yet-completed future\nA not-yet-completed future\nAn extension trait for <code>Future</code>s that provides a variety of …\nA custom trait object for polling futures, roughly akin to …\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nFuture for the <code>inspect</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>into_future</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_all</code> function.\nFuture for the <code>lazy</code> function.\nFirst branch of the type\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA custom trait object for polling futures, roughly akin to …\nFuture for the <code>map</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nA future that may have completed.\nFuture for the <code>never_error</code> combinator.\nThe type of successful values yielded by this future\nFuture for the <code>ok_into</code> method.\nA future representing a value which may or may not be …\nFuture for the <code>or_else</code> method.\nThe type of value produced on completion.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>poll_immediate</code> function.\nFuture for the <code>ready</code> function.\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nSecond branch of the type\nFuture for the <code>select()</code> function.\nFuture for the <code>select_all</code> function.\nFuture for the <code>select_ok</code> function.\nFuture for the <code>shared</code> method.\nFuture for the <code>then</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nFuture for the <code>try_join_all</code> function.\nA future that may have completed with an error.\nFuture for the <code>try_select()</code> function.\nFuture for the <code>unit_error</code> combinator.\nA custom implementation of a future trait object for …\nFuture for the <code>unwrap_or_else</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nExecutes another future after this one resolves …\nConvert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, …\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nCatches unwinding panics while polling the future.\nCreates a new <code>WeakShared</code> for this <code>Shared</code>.\nDrops the future represented by the given fat pointer.\nCreate a future that is immediately ready with an error …\nMaps this future’s <code>Error</code> to a new error type using the …\nFactor out a homogeneous type from an either of pairs.\nFactor out a homogeneous type from an either of pairs.\nFlatten the execution of this future when the output of …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nDrops this handle <em>without</em> canceling the underlying future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nFuse a future such that <code>poll</code> will never again be called …\nDo something with the output of a future before passing it …\nDo something with the error value of a future before …\nDo something with the success value of a future before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nUnwraps the value from this immediately ready future.\nConsumes this combinator, returning the underlying futures.\nExtract the value of an either over two equivalent types.\nConvert an owned instance into a (conceptually owned) fat …\nConvert this future into a single element stream.\nReturns <code>true</code> if the underlying future should no longer be …\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nCreates a future which represents a collection of the …\nCreates a new future that allows delayed execution of a …\nWrap this future in an <code>Either</code> future, making it the …\nMap this future’s output to a different type, returning …\nMaps this future’s error value to a different value.\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value, …\nWraps a future into a <code>MaybeDone</code>\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nEvaluates and consumes the future, returning the resulting …\nCreate a future that is immediately ready with a success …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nReturns an <code>Option</code> containing a mutable reference to the …\nReturns an <code>Option</code> containing a mutable reference to the …\nReturns <code>Some</code> containing a reference to this <code>Shared</code>’s …\nCreates a future which never resolves, representing a …\nAttempt to resolve the future to a final value, registering\nCreates a new future wrapping around a function returning …\nCreates a future that is immediately ready with an Option …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nReturns <code>true</code> if the two <code>Shared</code>s point to the same future …\nHashes the internal state of this <code>Shared</code> in a way that’s …\nCreates a future that is immediately ready with a value.\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWaits for either one of two differently-typed futures to …\nCreates a new future which will select over a list of …\nCreates a new future which will select the first …\nCreate a cloneable handle to this future where all handles …\nGets the number of strong pointers to this allocation.\nAttempt to take the output of a <code>MaybeDone</code> without driving …\nAttempt to take the output of a <code>TryMaybeDone</code> without …\nChain on a computation for when a future finished, passing …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nCreates a future which represents either a collection of …\nWraps a future into a <code>TryMaybeDone</code>\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nWaits for either one of two differently-typed futures to …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nAttempts to upgrade this <code>WeakShared</code> into a <code>Shared</code>.\nGets the number of weak pointers to this allocation.\nSink for the <code>buffer</code> method.\nFuture for the <code>close</code> method.\nSink for the <code>drain</code> function.\nThe type of value produced by the sink when an error …\nSink that clones incoming items and forwards them to two …\nFuture for the <code>feed</code> method.\nFuture for the <code>flush</code> method.\nFuture for the <code>send</code> method.\nFuture for the <code>send_all</code> method.\nA <code>Sink</code> is a value into which other values can be sent, …\nSink for the <code>sink_err_into</code> method.\nAn extension trait for <code>Sink</code>s that provides a variety of …\nSink for the <code>sink_map_err</code> method.\nSink for the <code>unfold</code> function.\nSink for the <code>with</code> method.\nSink for the <code>with_flat_map</code> method.\nAdds a fixed-size buffer to the current sink.\nClose the sink.\nCreate a sink that will just discard all items given to it.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFlush the sink, processing all pending items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a mutable reference to the inner sinks.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGet a pinned mutable reference to the inner sinks.\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGet a shared reference to the inner sinks.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sinks.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.")