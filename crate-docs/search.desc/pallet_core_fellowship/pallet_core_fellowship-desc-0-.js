searchState.loadedDescShard("pallet_core_fellowship", 0, "Additional logic for the Core Fellowship. This determines …\nGuard to ensure that the given origin is inducted into …\nA piece of evidence to underpin a Wish.\nThe status of a single member.\nThe status of the pallet instance.\nMember wishes to be promoted.\nMember wishes only to retain their current rank.\nThe desired outcome for which evidence is presented.\nThe amounts to be paid when a member of a given rank (-1) …\nThe period between which unproven members become demoted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage migrations for the core-fellowship pallet.\nThe period between which members must wait before they may …\nAmount by which an account can remain at rank 0 (candidate …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe amounts to be paid when a member of a given rank (-1) …\nAutogenerated weights for <code>pallet_core_fellowship</code>\n<code>UncheckedOnRuntimeUpgrade</code> implementation <code>MigrateToV1</code> …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMember activity flag has been set.\nThe candidate has already been inducted. This should never …\nThe origin which has permission to issue a proof that a …\nThe type in which salaries/budgets are measured.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nMember has been demoted to the given (non-zero) rank.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nSome submitted evidence was judged and removed. There may …\nThe maximum size in bytes submitted evidence is allowed to …\nThe origin that has permission to “fast” promote a …\nPre-ranked account has been inducted at their current rank.\nThe origin which has permission to move a candidate into …\nMember has begun being tracked in this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe given rank is invalid - this generally means it’s …\nRepresents the highest possible rank in this pallet.\nThe current membership of the fellowship.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe origin does not have enough permission to do this …\nThe candidate has not been inducted, so cannot be …\nNo work needs to be done at present for this member.\nMember has been removed from being tracked in this pallet …\nThe <code>Pallet</code> struct, the main type that implements traits …\nParameters for the pallet have changed.\nThe origin which has permission update the parameters.\nThe origin which has permission to promote a member. The …\nMember has been promoted to the given rank.\nMember has been proven at their current rank, postponing …\nMember’s rank is not zero.\nMember has stated evidence of their efforts their request …\nThe runtime event type.\nA member had its AccountId swapped.\nOperation cannot be done yet since not enough time has …\nMember’s rank is not as expected - generally means that …\nMember’s rank is too low.\nWeight information for extrinsics in this pallet.\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nApprove a member to continue at their rank.\nApprove a member to continue at their rank.\nBump the state of a member.\nBump the state of a member.\nThe period between which unproven members become demoted.\nThe period between which unproven members become demoted.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nIntroduce an already-ranked individual of the collective …\nIntroduce an already-ranked individual of the collective …\nIntroduce a new and unranked candidate (rank zero).\nIntroduce a new and unranked candidate (rank zero).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe period between which members must wait before they may …\nThe period between which members must wait before they may …\nCreate a call with the variant <code>approve</code>.\nCreate a call with the variant <code>bump</code>.\nCreate a call with the variant <code>import</code>.\nCreate a call with the variant <code>induct</code>.\nCreate a call with the variant <code>offboard</code>.\nCreate a call with the variant <code>promote</code>.\nCreate a call with the variant <code>promote_fast</code>.\nCreate a call with the variant <code>set_active</code>.\nCreate a call with the variant <code>set_params</code>.\nCreate a call with the variant <code>set_partial_params</code>.\nCreate a call with the variant <code>submit_evidence</code>.\nStop tracking a prior member who is now not a ranked …\nStop tracking a prior member who is now not a ranked …\nAmount by which an account can remain at rank 0 (candidate …\nAmount by which an account can remain at rank 0 (candidate …\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nIncrement the rank of a ranked and tracked account.\nIncrement the rank of a ranked and tracked account.\nFast promotions can skip ranks and ignore the …\nFast promotions can skip ranks and ignore the …\nSet whether a member is active or not.\nSet whether a member is active or not.\nSet the parameters.\nSet the parameters.\nSet the parameters partially.\nSet the parameters partially.\nAuto-generated docs-only module listing all (public and …\nProvide evidence that a rank is deserved.\nProvide evidence that a rank is deserved.\nThe evidence of efforts.\nNew rank. If <code>None</code> then candidate record was removed …\nThe old rank, prior to this change.\nThe member/candidate.\nThe desired outcome for which the evidence was presented.\nApprove a member to continue at their rank.\nBump the state of a member.\nIntroduce an already-ranked individual of the collective …\nIntroduce a new and unranked candidate (rank zero).\nStop tracking a prior member who is now not a ranked …\nIncrement the rank of a ranked and tracked account.\nFast promotions can skip ranks and ignore the …\nSet whether a member is active or not.\nSet the parameters.\nSet the parameters partially.\nProvide evidence that a rank is deserved.\nThe status of a claimant.\nSome evidence together with the desired outcome for which …\nThe overall status of the system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_core_fellowship</code> using the Substrate …\nWeight functions needed for <code>pallet_core_fellowship</code>.\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nCalls <code>U::from(self)</code>.\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nStorage: <code>RankedCollective::Members</code> (r:1 w:1) Proof: …\nStorage: <code>RankedCollective::Members</code> (r:1 w:1) Proof: …\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nStorage: <code>CoreFellowship::Params</code> (r:0 w:1) Proof: …\nStorage: <code>CoreFellowship::Params</code> (r:1 w:1) Proof: …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:0) Proof: …")