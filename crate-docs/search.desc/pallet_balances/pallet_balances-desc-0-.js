searchState.loadedDescShard("pallet_balances", 0, "Balances Pallet\nAll balance information for an account.\nWhether something should be interpreted as an increase or …\nAny reason at all.\nA single lock on a balance. There can be many of these on …\nDecrease the amount.\nPaying system transaction fees.\nIncrease the amount.\nAny reason other than paying system transaction fees.\nOpaque, move-only struct with private fields that serves …\nOpaque, move-only struct with private fields that serves …\nSimplified reasons for withdrawing balance.\nStore named reserved balance.\nThe amount which the free balance may not drop below when …\nThe amount of the named reserve.\nBasic drop handler will just square up the total issuance.\nBasic drop handler will just square up the total issuance.\nExtra information about this account. The MSB is a flag …\nNon-reserved part of the balance which the account holder …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe amount that <code>free + reserved</code> may not drop below when …\nAn identifier for this lock. Only one lock may be in …\nThe identifier for the named reserve.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new positive imbalance from a balance.\nCreate a new negative imbalance from a balance.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nIf true, then the lock remains in effect even for payment …\nBalance which is has active holds on it and may not be …\nThe total balance in this account including any that is …\nAutogenerated weights for <code>pallet_balances</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Balances pallet example of storing the balance of an …\nThe means of storing the balances of an account.\nThe balance of an account.\nThe balance of an account.\nA balance was set by root.\nSome amount was burned from an account.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBeneficiary account must pre-exist.\nBased on <code>Config</code>. Auto-generated by …\nThe delta cannot be zero.\nSome amount was deposited (e.g. for transaction fees).\nAn account was removed whose balance was non-zero but …\nHandler for the unbalanced reduction when removing a dust …\nHandler for the unbalanced reduction when removing a dust …\nAn account was created with some free balance.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nValue too low to create account due to existential deposit.\nThe minimum amount required to keep an account open. MUST …\nThe minimum amount required to keep an account open. MUST …\nA vesting schedule already exists for this account.\nTransfer/payment would kill account.\nThe ID type for freezes.\nThe ID type for freezes.\nFreeze locks on account balances.\nSome balance was frozen.\nCan be used to configure the genesis state of this pallet.\nHolds on account balances.\nThe total units of outstanding deactivated balance in the …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nBalance too low to send value.\nThe issuance cannot be modified since it is already …\nTotal issuance was increased by <code>amount</code>, creating a credit …\nAccount liquidity restrictions prevent withdrawal.\nSome balance was locked.\nAny liquidity locks on some account balances. NOTE: Should …\nThe maximum number of individual freeze locks that can …\nThe maximum number of individual freeze locks that can …\nThe maximum number of locks that should exist on an …\nThe maximum number of locks that should exist on an …\nThe maximum number of named reserves that can exist on an …\nThe maximum number of named reserves that can exist on an …\nSome amount was minted into an account.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nTotal issuance was decreased by <code>amount</code>, creating a debt to …\nThe ID type for reserves.\nThe ID type for reserves.\nSome balance was moved from the reserve of the first …\nSome balance was reserved (moved from free to reserved).\nNamed reserves on some account balances.\nSome amount was restored into an account.\nThe overarching event type.\nThe overarching event type.\nThe overarching freeze reason.\nThe overarching freeze reason.\nThe overarching hold reason.\nThe overarching hold reason.\nSome amount was removed from the account (e.g. for …\nSome amount was suspended from an account (it can be …\nSome balance was thawed.\nNumber of freezes exceed <code>MaxFreezes</code>.\nNumber of holds exceed <code>VariantCountOf&lt;T::RuntimeHoldReason&gt;</code>…\nNumber of named reserves exceed <code>MaxReserves</code>.\nThe total units issued in the system.\nThe <code>TotalIssuance</code> was forcefully changed.\nTransfer succeeded.\nSome balance was unlocked.\nSome balance was unreserved (moved from reserved to free).\nAn account was upgraded.\nVesting balance too high to send value.\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nSome amount was withdrawn from the account (e.g. for …\nBurn the specified liquid free balance from the origin …\nBurn the specified liquid free balance from the origin …\nCheck if <code>who</code> can reserve <code>value</code> from their free balance.\nDefault implementations of <code>DefaultConfig</code>, which can be …\nDeposit some <code>value</code> into the free balance of <code>who</code>, possibly …\nDeposit some <code>value</code> into the free balance of an existing …\nAuto-generated docs-only module listing all defined …\nEnsure the account <code>who</code> is using the new logic.\nAdjust the total issuance in a saturating way.\nAdjust the total issuance in a saturating way.\nSet the regular balance of a given account.\nSet the regular balance of a given account.\nExactly as <code>transfer_allow_death</code>, except the origin must be …\nExactly as <code>transfer_allow_death</code>, except the origin must be …\nUnreserve some balance from a user by force.\nUnreserve some balance from a user by force.\nGet the free balance of an account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nPublic function to get the inactive issuance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic function to access the Locks storage.\nForce the new free balance of a target account <code>who</code> to some …\nCreate a call with the variant <code>burn</code>.\nCreate a call with the variant <code>force_adjust_total_issuance</code>.\nCreate a call with the variant <code>force_set_balance</code>.\nCreate a call with the variant <code>force_transfer</code>.\nCreate a call with the variant <code>force_unreserve</code>.\nCreate a call with the variant <code>transfer_all</code>.\nCreate a call with the variant <code>transfer_allow_death</code>.\nCreate a call with the variant <code>transfer_keep_alive</code>.\nCreate a call with the variant <code>upgrade_accounts</code>.\nMove the reserved balance of one account into the balance …\nMove the reserved balance of one account into the balance …\nMove <code>value</code> from the free balance from <code>who</code> to their …\nMove <code>value</code> from the free balance from <code>who</code> to a named …\nGet the reserved balance of an account.\nPublic function to access the reserves storage.\nSlash a target account <code>who</code>, returning the negative …\nSlash from reserved balance, returning the negative …\nSlash from reserved balance, returning the negative …\nAuto-generated docs-only module listing all (public and …\nPublic function to get the total issuance.\nTransfer the entire transferable balance from the caller …\nTransfer the entire transferable balance from the caller …\nTransfer some liquid free balance to another account.\nTransfer some liquid free balance to another account.\nSame as the <code>transfer_allow_death</code> call, but with a check …\nSame as the <code>transfer_allow_death</code> call, but with a check …\nUnreserve some funds, returning any amount that was unable …\nUnreserve some funds, returning any amount that was unable …\nUpgrade a specified account.\nUpgrade a specified account.\nGet the balance of an account that can be used for …\nGet the balance of an account that can be used for paying …\nWithdraw some free balance from an account, respecting …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nBurn the specified liquid free balance from the origin …\nAdjust the total issuance in a saturating way.\nSet the regular balance of a given account.\nExactly as <code>transfer_allow_death</code>, except the origin must be …\nUnreserve some balance from a user by force.\nTransfer the entire transferable balance from the caller …\nTransfer some liquid free balance to another account.\nSame as the <code>transfer_allow_death</code> call, but with a check …\nUpgrade a specified account.\nThe Balances pallet example of storing the balance of an …\nFreeze locks on account balances.\nHolds on account balances.\nThe total units of outstanding deactivated balance in the …\nAny liquidity locks on some account balances. NOTE: Should …\nNamed reserves on some account balances.\nThe total units issued in the system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_balances</code> using the Substrate node and …\nWeight functions needed for <code>pallet_balances</code>.\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:2 w:2) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:999 w:999) Proof: …")