searchState.loadedDescShard("substrate_relay_helper", 0, "The library of substrate relay. contains some public codes …\nRelay all headers.\nBatch call builder.\nBatch call builder constructor.\nCall builder, used by this constructor.\nRelay only free (including mandatory) headers.\nType of headers that we relay.\nRelay only mandatory headers.\nAccount, used to sign message (also headers and …\nTagged relay account, which balance may be exposed as …\nTransaction creation parameters.\nBatch call builder based on <code>pallet-utility</code>.\nCreate batch call from given calls vector.\nDeal with CLI args of substrate-to-substrate relay.\nCreate chain-specific set of configuration objects: …\nCreate chain-specific set of runtime version parameters.\nCreate chain-specific set of runtime version parameters.\nCreate chain-specific set of signing parameters.\nCreate set of configuration objects specific to …\nCreate set of configuration objects specific to …\nTypes and functions intended to ease adding of new …\nRelay errors.\nTypes and functions intended to ease adding of new …\nTypes and functions intended to ease adding of new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMacro that generates …\nMacro that generates <code>ReceiveMessagesProofCallBuilder</code> …\nMacro that generates <code>ReportEquivocationCallBuilder</code> …\nMacro that generates <code>SubmitFinalityProofCallBuilder</code> …\nMacro that generates <code>SubmitFinalityProofCallBuilder</code> …\nReturns reference to the account id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTools for supporting message lanes between two …\nTransactions mortality.\nCreate a new instance of a batch call builder.\nTypes and functions intended to ease adding of new …\nTypes and functions intended to ease adding of new …\nModule for handling storage proofs compatibility.\nTransactions author.\nReturns stringified account tag.\nName of the bridged chain, which sends us messages or …\nAccount id.\nAuto query version from chain\nRead version from bundle dependencies directly.\nCustom <code>spec_version</code> and <code>transaction_version</code>\nDefault Substrate client type that we are using. We’ll …\nUser has explicitly specified argument value.\nEither explicit or maximal allowed value.\nLane id.\nThe target that will be used when publishing logs related …\nMaximal allowed value for this argument.\nPrometheus metrics params.\nRuntime version params.\nBasic traits for exposing bridges in the CLI.\nPrimitives related to chain CLI options.\nPrimitives for exposing the equivocation detection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nPrimitives for exposing the bridge initialization …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to convert CLI metrics params into metrics params, …\nDo not expose a Prometheus metric endpoint.\nExpose Prometheus endpoint at given interface.\nExpose Prometheus endpoint at given port.\nPrimitives for exposing the headers relaying functionality …\nComplex 2-ways headers+messages relays support.\nPrimitives for exposing the messages relaying …\nPrimitives for exposing the parachains finality relaying …\nThe source chain with extra bounds.\nMinimal bridge representation that can be used from the …\nEquivocation detection pipeline.\nFinality proofs synchronization pipeline.\nLane identifier type.\nBridge representation that can be used from the CLI for …\nThe Source -&gt; Destination messages synchronization …\nAn alias for lane identifier type.\nFinality proofs synchronization pipeline (source parachain …\nBridge representation that can be used from the CLI for …\nFinality proofs synchronization pipeline (source relay …\nBridge representation that can be used from the CLI for …\nConvenience trait that adds bounds to <code>CliBridgeBase</code>.\nBridge representation that can be used from the CLI for …\nThe source chain.\nThe <code>CliBridgeBase</code> type represents the parachain in this …\nThe target chain.\nOptional messages delivery transaction limits that the …\nAuto query version from chain\nRead version from bundle dependencies directly.\nCustom <code>spec_version</code> and <code>transaction_version</code>\nRuntime version params.\nSource connection params.\nSource runtime version params.\nSource signing params.\nTarget connection params.\nTarget runtime version params.\nTarget signing params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert connection params into Substrate client.\nConvert connection params into Substrate client.\nConverts self into <code>ChainRuntimeVersion</code>.\nConverts self into <code>ChainRuntimeVersion</code>.\nWS endpoint of Source: host component.\nWS endpoint of Source: path component.\nWS endpoint of Source: port component.\nCustom runtime version\nUse secure websocket connection.\nThe SURI of secret key to use when transactions are …\nPath to the file, that contains SURI of secret key to use …\nThe password for the SURI of secret key to use when …\nPath to the file, that password for the SURI of secret key …\nThe custom sepc_version for chain Source\nThe custom transaction_version for chain Source\nTransactions mortality period, in blocks. MUST be a power …\nWS endpoint of Source: full URI. Overrides all other …\nThe type of runtime version for chain Source\nWS endpoint of Target: host component.\nWS endpoint of Target: path component.\nWS endpoint of Target: port component.\nCustom runtime version\nUse secure websocket connection.\nThe SURI of secret key to use when transactions are …\nPath to the file, that contains SURI of secret key to use …\nThe password for the SURI of secret key to use when …\nPath to the file, that password for the SURI of secret key …\nThe custom sepc_version for chain Target\nThe custom transaction_version for chain Target\nTransactions mortality period, in blocks. MUST be a power …\nWS endpoint of Target: full URI. Overrides all other …\nThe type of runtime version for chain Target\nParse signing params into chain-specific KeyPair.\nParse signing params into chain-specific KeyPair.\nReturn transaction parameters.\nReturn transaction parameters.\nReturn transactions mortality.\nReturn transactions mortality.\nStart equivocation detection loop.\nTrait used for starting the equivocation detection loop …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStart the equivocation detection loop.\nTrait used for bridge initializing.\nThe finality engine used by the source chain.\nBridge initialization params.\nGet the encoded call to init the bridge.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInitialize the bridge.\nCalls <code>U::from(self)</code>.\nTrait used for relaying headers between 2 chains.\nSingle header relaying params.\nChain headers relaying params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRelay single header. No checks are made to ensure that …\nRelay headers.\nBase portion of the bidirectional complex relay.\nParameters that are associated with one side of the bridge.\nBidirectional complex relay.\nBase portion of the bidirectional complex relay.\nBridge parameters, shared by all bridge types.\nAll data of the bidirectional complex relay.\nParameters that have the same names across all bridges.\nLeft to Right bridge.\nLane identifier type.\nThe left relay chain.\nThe left relay chain.\nThe CLI params for the bridge.\nRight to Left bridge\nThe right destination chain (it can be a relay or a …\nThe right relay chain.\nAccounts, which balances are exposed as metrics by the …\nReference to the base relay portion.\nChain client.\nReference to common relay parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHex-encoded lane identifiers that should be served by the …\nParameters of the left chain.\nCreates and returns Left to Right complex relay.\nCommon metric parameters.\nMutable reference to the base relay portion.\nMutable reference to common relay parameters.\nConstruct new bridge.\nCreates new bridge parameters from its components.\nIf passed, only free headers (mandatory and every Nth …\nIf passed, only mandatory headers (headers that are …\nParachain to parachain relayer CLI primitives.\nPrometheus metrics params.\nRelay chain to parachain relayer CLI primitives.\nRelay chain to Relay chain relayer CLI primitives.\nParameters of the right chain.\nCreates and returns Right to Left complex relay.\nStart complex relay.\nShared parameters.\nStart on-demand headers relays.\nParams used for sending transactions to the chain.\nA base relay between two parachain from different …\nParameters that are shared by all bridge types.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nClient of the left relay chain.\nClient of the right relay chain.\nA base relay between standalone (relay) chain and a …\nParameters that are shared by all bridge types.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nClient of the right relay chain.\nA base relay between two standalone (relay) chains.\nParameters that are shared by all bridge types.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTrait used for relaying messages between 2 chains.\nMessages delivery confirmation relaying params.\nMessages relaying params.\nMessages range relaying params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart relaying messages.\nRelay a messages delivery confirmation.\nRelay a consequitive range of messages.\nTrait used for relaying parachains finality between 2 …\nSingle parachains head relaying params.\nParachains heads relaying params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRelay single parachain head. No checks are made to ensure …\nStart relaying parachains finality.\nConvenience trait that adds bounds to …\nBounded <code>SubstrateFinalityPipeline::SourceChain</code>.\nBounded <code>AccountIdOf&lt;SubstrateFinalityPipeline::SourceChain&gt;</code>…\nBuilding the <code>report_equivocation</code> call when having direct …\nAdapter that allows a …\nThe type of the equivocation proof used by the …\nThe type of the key owner proof used by the …\nDifferent ways of building <code>report_equivocation</code> calls.\nHow the <code>report_equivocation</code> call is built ?\nSubstrate -&gt; Substrate equivocation detection pipeline.\nBuild a <code>report_equivocation</code> call to be executed on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun Substrate-to-Substrate equivocations detection loop.\nAdd relay guards if required.\nFailed to decode GRANDPA authorities at the given header …\nFailed subscribe to decode justification from the source …\nRelay errors.\nFailed to guess initial GRANDPA authorities at the given …\nFailed to submit signed extrinsic from to the target chain.\nGRANDPA authorities read from the source chain are invalid.\nFailed subscribe to read justification from the source …\nFailed subscribe to read justification from the source …\nFailed to retrieve GRANDPA authorities at the given header …\nFailed to retrieve header by the hash from the source …\nFailed to submit signed extrinsic from to the target chain.\nFailed subscribe to justification stream of the source …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nConvenience trait that adds bounds to …\nBounded <code>SubstrateFinalityPipeline::TargetChain</code>.\nBounded <code>AccountIdOf&lt;SubstrateFinalityPipeline::TargetChain&gt;</code>…\nBuilding <code>submit_finality_proof</code> call when you have direct …\nAdapter that allows all <code>SubstrateFinalitySyncPipeline</code> to …\nDifferent ways of building <code>submit_finality_proof</code> calls.\nHow submit finality proof call is built?\nSubstrate -&gt; Substrate finality proofs synchronization …\nGiven source chain header, its finality proof and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInitialize Substrate -&gt; Substrate finality bridge.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRelay single header. No checks are made to ensure that …\nRun Substrate-to-Substrate finality sync loop.\nDefault generic implementation of finality source for …\nAdd relay guards if required.\nSubstrate client as Substrate finality proof target.\nSubmit headers-bridge initialization transaction.\nShared updatable reference to the maximal header number …\nSubstrate node as finality source.\nReturns reference to the underlying RPC client.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate new headers source using given client.\nReturns best finalized block number.\nReturn header and its justification of the given block or …\nSubstrate client as Substrate finality target.\nEnsure that the bridge pallet at target chain is active.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate new Substrate headers target.\nFinality engine.\nHeaders of this chain are submitted to the <code>TargetChain</code>.\nSubstrate -&gt; Substrate finality related pipeline.\nSubstrate finality proof. Specific to the used …\nSubstrate finality proofs stream.\nHeaders of the <code>SourceChain</code> are submitted to this chain.\nGet the id of the best <code>SourceChain</code> header known to the …\nSupport of different finality engines, available in …\nSubscribe to new finality proofs.\nA reader that can extract the consensus log from the …\nFinality engine, used by the Substrate chain.\nThe type of the equivocation proof used by the consensus …\nThe equivocations finder.\nType of finality proofs, used by consensus engine.\nThe context needed for verifying finality proofs.\nGRANDPA finality engine.\nUnique consensus engine identifier.\nType of bridge pallet initialization data.\nThe type of the key owner proof used by the consensus …\nType of bridge pallet operating mode.\nChecks whether the given <code>header</code> and its finality <code>proof</code> fit …\nGet the context needed for validating a finality proof.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate key ownership proof for the provided equivocation.\nCalls <code>U::from(self)</code>.\nReturns <code>Ok(true)</code> if finality pallet at the bridged chain …\nReturns <code>Ok(true)</code> if finality pallet at the bridged chain …\nReturns storage at the bridged (target) chain that …\nReturns storage key at the bridged (target) chain that …\nPrepare initialization data for the finality bridge pallet.\nPrepare initialization data for the GRANDPA verifier …\nA method to subscribe to encoded finality proofs, given …\nReturns the finality info associated to the source headers …\nVerify and optimize finality proof before sending it to …\nBatch transaction that brings headers + and messages …\nBuilding <code>receive_messages_delivery_proof</code> call when you …\nBuilding <code>receive_messages_proof</code> call when you have direct …\nLane identifier type.\nAdapter that allows all <code>SubstrateMessageLane</code> to act as …\nDelivery transaction limits.\nSubstrate &lt;-&gt; Substrate messages relay parameters.\nDifferent ways of building <code>receive_messages_delivery_proof</code> …\nHow receive messages delivery proof call is built?\nDifferent ways of building <code>receive_messages_proof</code> calls.\nHow receive messages proof call is built?\nHow batch calls are built at the source chain?\nMessages of this chain are relayed to the <code>TargetChain</code>.\nSubstrate -&gt; Substrate messages synchronization pipeline.\nHow batch calls are built at the target chain?\nMessages from the <code>SourceChain</code> are dispatched on this chain.\nReturn a batch call that includes the provided call.\nGiven messages delivery proof, build call of …\nGiven messages proof, build call of <code>receive_messages_proof</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentifier of lane that needs to be served.\nMessages relay limits. If not provided, the relay tries to …\nMaximal number of messages in the delivery transaction.\nMaximal cumulative weight of messages in the delivery …\nTools for supporting message lanes between two …\nMetrics parameters.\nCreates a new instance of <code>BatchProofTransaction</code>.\nRelay messages delivery confirmation of …\nDeliver range of Substrate-to-Substrate messages. No …\nRun Substrate-to-Substrate messages sync loop.\nSubstrate client as Substrate messages source. The chain …\nMessages source client.\nOptional on-demand source to target headers relay.\nSource transaction params.\nSubstrate client as Substrate messages target. The chain …\nMessages target client.\nOptional on-demand target to source headers relay.\nTarget transaction params.\nAdd relay accounts balance metrics.\nIntermediate message proof returned by the source …\nSubstrate client as Substrate messages source.\nReads best <code>PeerChain</code> header known to the <code>SelfChain</code> using …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate new Substrate headers source.\nRead best blocks from given client.\nDoes the same stuff as <code>read_client_state</code>, but properly …\nMessage receiving proof returned by the target Substrate …\nSubstrate client as Substrate messages target.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate new Substrate headers target.\nOn-demand headers relay that is relaying finalizing …\nOn-demand Substrate -&gt; Substrate header finality relay.\nOn-demand Substrate -&gt; Substrate parachain finality relay.\nAsk relay to prove source <code>required_header</code> to the …\nReconnect to source and target nodes.\nAsk relay to relay source header with given number  to the …\nOn-demand Substrate &lt;-&gt; Substrate header finality relay.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate new on-demand headers relay.\nOn-demand Substrate &lt;-&gt; Substrate parachain finality relay.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate new on-demand parachains relay.\nAsk relay to prove source <code>required_header</code> to the …\nBuilding <code>submit_parachain_heads</code> call when you have direct …\nAdapter that allows all <code>SubstrateParachainsPipeline</code> to act …\nHeaders of this parachain are submitted to the …\nRelay chain that is storing headers of …\nDifferent ways of building <code>submit_parachain_heads</code> calls.\nHow submit parachains heads call is built?\nSubstrate -&gt; Substrate parachain finality proofs …\nTarget chain where <code>Self::SourceParachain</code> headers are …\nGiven parachains and their heads proof, build call of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParachain heads source.\nParachain heads target.\nSubstrate client as parachain heads source.\nShared updatable reference to the maximal parachain header …\nReturns reference to the underlying RPC client.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates new parachains source client.\nReturn decoded head of given parachain.\nSubstrate client as parachain heads source.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates new parachains target client.\nReturns reference to the underlying RPC client.\nConverts proof to <code>RawStorageProof</code> type.")