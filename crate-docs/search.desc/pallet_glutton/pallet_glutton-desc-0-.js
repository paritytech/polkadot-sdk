searchState.loadedDescShard("pallet_glutton", 0, "WARNING\nMax number of entries for the <code>TrashData</code> map.\nHard limit for any other resource limit (in units).\nThe size of each value in the <code>TrashData</code> storage in bytes.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_glutton</code>\nThe admin origin that can set computational limits and …\nThe pallet was already initialized.\nThe block length limit has been updated.\nContains a variant per dispatchable extrinsic that this …\nThe computation limit has been updated.\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe limit was over <code>crate::RESOURCE_HARD_LIMIT</code>.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet has been (re)initialized.\nThe overarching event type.\nThe storage limit has been updated.\nWeight information for this pallet.\nThe required configuration field.\nIncrease the block size by including the specified garbage …\nIncrease the block size by including the specified garbage …\nThe block length limit.\nThe compute limit.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInitialize the pallet. Should be called once, if no …\nInitialize the pallet. Should be called once, if no …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>bloat</code>.\nCreate a call with the variant <code>initialize_pallet</code>.\nCreate a call with the variant <code>set_block_length</code>.\nCreate a call with the variant <code>set_compute</code>.\nCreate a call with the variant <code>set_storage</code>.\nSet how much of the block length should be filled with …\nSet how much of the block length should be filled with …\nSet how much of the remaining <code>ref_time</code> weight should be …\nSet how much of the remaining <code>ref_time</code> weight should be …\nSet how much of the remaining <code>proof_size</code> weight should be …\nSet how much of the remaining <code>proof_size</code> weight should be …\nThe storage limit.\nAuto-generated docs-only module listing all (public and …\nThe amount of trash data for wasting proof size.\nThe block length limit.\nThe computation limit.\nWhether the pallet has been re-initialized.\nThe storage limit.\nIncrease the block size by including the specified garbage …\nInitialize the pallet. Should be called once, if no …\nSet how much of the block length should be filled with …\nSet how much of the remaining <code>ref_time</code> weight should be …\nSet how much of the remaining <code>proof_size</code> weight should be …\nThe proportion of the remaining <code>ref_time</code> to consume during …\nThe proportion of the <code>block length</code> to consume on each …\nThe proportion of the remaining <code>proof_size</code> to consume …\nStorage map used for wasting proof size.\nThe current number of entries in <code>TrashData</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_glutton</code> using the Substrate node and …\nWeight functions needed for <code>pallet_glutton</code>.\nStorage: <code>Glutton::Storage</code> (r:1 w:0) Proof: <code>Glutton::Storage</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>Glutton::TrashDataCount</code> (r:1 w:1) Proof: …\nStorage: <code>Glutton::TrashDataCount</code> (r:1 w:1) Proof: …\nCalls <code>U::from(self)</code>.\nStorage: <code>Glutton::Storage</code> (r:1 w:0) Proof: <code>Glutton::Storage</code>…\nStorage: <code>Glutton::Storage</code> (r:1 w:0) Proof: <code>Glutton::Storage</code>…\nStorage: <code>Glutton::Compute</code> (r:0 w:1) Proof: <code>Glutton::Compute</code>…\nStorage: <code>Glutton::Storage</code> (r:0 w:1) Proof: <code>Glutton::Storage</code>…\nStorage: <code>Glutton::TrashData</code> (r:5000 w:0) Proof: …\nThe range of component <code>i</code> is <code>[0, 100000]</code>.")