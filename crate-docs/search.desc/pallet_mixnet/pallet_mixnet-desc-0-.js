searchState.loadedDescShard("pallet_mixnet", 0, "This pallet is responsible for determining the current …\nIndex of an authority in the authority list for a session.\nLike <code>Mixnode</code>, but encoded size is bounded.\n<code>BoundedMixnode</code> type for the given configuration.\nA mixnode registration. A registration transaction is …\n<code>Registration</code> type for the given configuration.\nThe index in the next session’s authority list of the …\nThe index in the next session’s authority list of the …\nBlock number at the time of creation. When a registration …\nBlock number at the time of creation. When a registration …\nExternal addresses for the mixnode, in multiaddr format, …\nExternal addresses for the mixnode, in multiaddr format, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey-exchange public key for the mixnode.\nKey-exchange public key for the mixnode.\nMixnode information to register for the following session.\nMixnode information to register for the following session.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nlibp2p peer ID of the mixnode.\nlibp2p peer ID of the mixnode.\nThe session during which this registration should be …\nThe session during which this registration should be …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nThe maximum number of authorities per session.\nThe maximum size of one of a mixnode’s external …\nThe maximum number of external addresses for a mixnode.\nMinimum number of mixnodes. If there are fewer than this …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSession progress/length estimation. Used to determine when …\nLength of the first phase of each session (<code>CoverToCurrent</code>…\nLength of the third phase of each session (<code>CoverToPrev</code>), …\nThe number of “slack” blocks at the end of each …\nThe number of “slack” blocks at the start of each …\nLength of the second phase of each session (…\nThe <code>Pallet</code> struct, the main type that implements traits …\nPriority of unsigned transactions used to register …\nReturns the mixnode set for the current session.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to register a mixnode for the next session.\nThe mixnode set for the very first session.\nCreate a call with the variant <code>register</code>.\nReturns the mixnode set for the previous session.\nRegister a mixnode for the following session.\nRegister a mixnode for the following session.\nReturns the index and phase of the current session.\nAuto-generated docs-only module listing all (public and …\nRegister a mixnode for the following session.\nIndex of the current session. This may be offset relative …\nBlock in which the current session started.\nMixnode sets by session index. Only the mixnode sets for …\nAuthority list for the next session.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")