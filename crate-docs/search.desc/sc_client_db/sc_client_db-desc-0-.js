searchState.loadedDescShard("sc_client_db", 0, "Client backend that is backed by a database.\nNo pruning. Canonicalization is a no-op.\nCanonicalization discards non-canonical nodes. All the …\nCheck given path, and see if there is an existing database …\nDisk backend.\nDatabase transaction\nBlock database\nBlock pruning settings.\nMaintain a pruning window.\nUse a custom already-open database.\nDatabase settings.\nWhere to find the database..\nHash type that this backend uses for the database.\nDB-backed patricia trie state, transaction type is an …\nBuilder for <code>DbState</code>.\nKeep full block history, of every block that was ever …\nKeep full finalized block history.\nLoad a ParityDb database from a given path.\nPruning mode.\nA raw iterator over the <code>RefTrackingState</code>.\nA reference tracking state.\nLoad a RocksDB database from a given path. Recommended for …\nKeep N recent finalized blocks.\nState backend that’s useful for benchmarking\nCreate a mode that keeps given number of blocks.\nBlock pruning mode.\nCommit the <code>transaction</code> to the database atomically. Any …\nCheck if the value exists in the database without …\nExpose the Database that is used by this backend. The …\nExpose the Storage that is used by this backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieve the value previously stored against <code>key</code> or <code>None</code> if\nReturns the pruning mode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an archive (either ArchiveAll or ArchiveCanonical) …\nTrue if this is an archive pruning mode (either KeepAll or …\nCreate a new instance of database backend.\nCreate new memory-backed client backend for tests.\nCreate new memory-backed client backend for tests.\nRocksDB-based offchain workers local storage.\nReturn path for databases that are stored on disk.\nReset the shared trie cache.\nRemove a possible path-prefix from the key.\nSet path for databases that are stored on disk.\nWhere to find the database.\nRequested state pruning mode.\nCheck if database supports internal ref counting for state …\nThe maximum trie cache size in bytes.\nCheck value size in the database possibly without …\nCall <code>f</code> with the value previously stored against <code>key</code>.\nCache size in MiB. Used only by <code>RocksDb</code> variant of …\nCache size in MiB.\nthe handle to the custom storage\nPath to the paritydb database.\nPath to the database.\nPath to the database.\nif set, the <code>create</code> flag will be required to open such …\nPath to the rocksdb database.\nState that manages the backend database reference. Allows …\nA raw iterator over the <code>BenchmarkingState</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance that creates a database in a …\nGet the key tracking information for the state db.\nGet the proof recorder for this state\nReset the key tracking information for the state db.\nOffchain local storage\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate offchain local storage with given <code>KeyValueDB</code> …\nCreate new offchain storage for tests (backed by memorydb)")