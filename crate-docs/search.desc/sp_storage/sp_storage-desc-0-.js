searchState.loadedDescShard("sp_storage", 0, "Primitive types for storage related stuff.\nInformation related to a child state.\nA child trie of default type.\nType of child. It does not strictly define different child …\nThis is the one used by default.\nIf runtime module ensures that the child key is a unique …\nStorage key of a child trie, it contains the prefix to the …\nDifferent possible state version.\nStruct containing data needed for a storage.\nStorage change set\nChild trie storage data.\nStorage data associated to a <code>StorageKey</code>.\nStorage key.\nMap of data to use in a storage, it is a collection of …\nThreshold size to start using trie value nodes in state.\nStorage key with read/write tracking information.\nOld state version, no value nodes.\nNew state version can use value nodes.\nAdd a storage read to this key.\nAdd a storage write to this key.\nBlock hash\nA list of changes\nAssociated child info for a child trie.\nReturns the type for this child info.\nChildren trie storage data. Key does not include prefix, …\nChild data for storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransform a prefixed key into a tuple of the child type …\nCheck if this key has been “read”, i.e. it exists in …\nCheck if this key has been “written”, i.e. a new value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet inner key, this should only be needed when writing …\nReturns the full location in the direct parent of this …\nReturns byte sequence (keyspace) that can be use by …\nCreate a default <code>TrackedStorageKey</code>\nCreate a prefixed storage key from its byte array …\nTry to get a child type from its <code>u32</code> representation.\nInstantiates child information for a default child trie of …\nSame as <code>new_default</code> but with <code>Vec&lt;u8&gt;</code> as input.\nCreate a prefixed storage key reference.\nReturns the location reserved for this child trie in their …\nReturn the full location in the direct parent of this trie.\nIf defined, values in state of size bigger or equal to …\nReturns a reference to the location in the direct parent of\nTop trie storage data.\nTry to update with another instance, return false if both …\nList of all well known keys and prefixes in storage.\nWhitelist this key.\nPrefix of child storage keys.\nWasm code of the runtime.\nPrefix of the default child storage keys in the top trie.\nCurrent extrinsic index (u32) is stored under this key.\nNumber of wasm linear memory pages required for execution …\nCurrent intra-block entropy (a universally unique <code>[u8; 32]</code> …\nWhether a key is a child storage key.\nWhether a key is a default child storage key.\nReturns if the given <code>key</code> starts with …")