searchState.loadedDescShard("sc_utils", 0, "Utilities Primitives for Substrate\nProduce opaque sequential IDs.\nMetering primitives and globals\nCode to meter unbounded channels.\nProvides mpsc notification channel that can be instantiated\nProvides means to implement a typical Pub/Sub mechanism.\nA Sequence of IDs.\nA Sequential ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ID-sequence.\nObtain another ID from this sequence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister the statics to report to registry\nThe channel is closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nThe channel is full but not closed.\nWrapper Type around <code>async_channel::Receiver</code> that decreases …\nWrapper Type around <code>async_channel::Sender</code> that increases …\nAn error returned from <code>Receiver::try_recv()</code>.\nAn error returned from <code>Sender::try_send()</code>.\nProxy function to <code>async_channel::Sender</code>.\nProxy function to <code>async_channel::Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message that couldn’t be sent.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is empty and closed.\nProxy function to <code>async_channel::Sender</code>.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if the channel is full but not closed.\nThe number of elements in the channel (proxy function to …\nThe number of elements in the channel (proxy function to …\nThe name of this receiver\nWrapper around <code>async_channel::unbounded</code> that tracks the …\nProxy function to <code>async_channel::Receiver</code> that discounts …\nProxy function to <code>async_channel::Sender::try_send</code>.\nThe receiving half of the notifications channel(s).\nThe sending half of the notifications channel(s).\nThe receiving half of the notifications channel.\nConst <code>str</code> representing the “tracing key” used to tag …\nTrait used to define the “tracing key” string used to …\nCreates a new pair of receiver and sender of <code>Payload</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend out a notification to all subscribers that a new …\nSubscribe to a channel through which the generic payload …\nDispatch a message of type <code>M</code>.\nA subscription hub.\nThe type of the that shall be sent through the channel as …\nThe receiving side of the subscription.\nThe type returned by the <code>dispatch</code>-method.\nSubscribe using a key of type <code>K</code>\nUnsubscribe: unregisters a previously created subscription.\nDispatch the message of type <code>M</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide access to the registry (for test purposes).\nCreate a new instance of Hub (with default value for the …\nCreate a new instance of Hub over the initialized Registry.\nSend the message produced with <code>Trigger</code>.\nRegister subscriber with the ID <code>subs_id</code> as having interest …\nSubscribe to this Hub using the <code>subs_key: K</code>.\nRemove all registrations of the subscriber with ID <code>subs_id</code>.\nOne of the sinks is ready.\nHolds a list of <code>UnboundedSender</code>s, each associated with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a new empty collection.\nWaits until one of the sinks is ready, then returns an …\nAdds a sender to the collection.\nSends an element on the sender.")