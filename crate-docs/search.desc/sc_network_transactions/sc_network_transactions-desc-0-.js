searchState.loadedDescShard("sc_network_transactions", 0, "Transactions handling to plug on top of the network …\nA set of transactions.\nHandler for transactions. Call <code>TransactionsHandler::run</code> to …\nControls the behaviour of a <code>TransactionsHandler</code> it is …\nPrototype for a <code>TransactionsHandler</code>.\nTurns the prototype into the actual handler. Returns a …\nConfiguration of the transaction protocol\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nYou must call when new a transaction is imported by the …\nPropagate one transaction.\nYou may call this when new transactions are imported by …\nTurns the <code>TransactionsHandler</code> into a future that should …\nTransaction is invalid.\nDummy implementation of the <code>TransactionPool</code> trait for a …\nTransaction is good but already known by the transaction …\nTransaction is good and not yet known.\nTransaction import was not performed.\nResult of the transaction import.\nFuture resolving to transaction import result.\nTransaction pool interface\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet hash of transaction.\nImport a transaction into the pool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify the pool about transactions broadcast.\nGet transaction by hash.\nGet transactions from the pool that are ready to be …")