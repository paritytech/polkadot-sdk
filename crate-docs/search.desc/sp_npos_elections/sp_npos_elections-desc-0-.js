searchState.loadedDescShard("sp_npos_elections", 0, "A set of election algorithms to be used with a substrate …\nAn error occurred in some arithmetic operation.\nA voter’s stake assignment among a set of targets, …\nUtility struct to group parameters for the balancing …\nSame as <code>Supports</code> but bounded by <code>B</code>.\nA candidate entity for the election.\nA pointer to a candidate struct with interior mutability.\nA vote being casted by a <code>Voter</code> to a <code>Candidate</code> is an <code>Edge</code>.\nFinal result of the election.\nThe score of an election. This is the main measure of an …\nThe errors that might occur in this crate and …\nExtension trait for evaluating a support map or vector.\nA type in which performing operations on vote weights are …\nThe data provided to create support map was invalid.\nOne of the index functions returned none.\nOne of the page indices was invalid.\nThe solution type has a voter who’s number of targets is …\nWhile going from solution indices to ratio, the weight of …\nA voter’s stake assignment among a set of targets, …\nA structure to demonstrate the election result from the …\nLinkage from a winner to their <code>Support</code>.\nA target-major representation of the the election outcome.\nThe number of voters is bigger than the <code>MaxVoters</code> bound.\nA type which is used in the API of this crate as a numeric …\nA voter entity.\nIndividual assignments. for each tuple, the first elements …\nBalancing algorithm implementation.\nThis voter’s budget.\nThe distribution of the voter’s stake.\nThe distribution of the voter’s stake.\nEvaluate a support map. The returned tuple contains:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHelper methods for npos-elections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts self into the normal <code>Assignment</code> type.\nReturns none if this voter does not have any non-zero …\nConvert from a ratio assignment into one with absolute …\nThe minimal winner, in terms of total backing stake.\nCreate a new <code>Voter</code>.\n(very) Basic implementation of a graph node used in the …\nImplementation of the sequential-phragmen election method.\nImplementation of the PhragMMS method.\nImplements functions and interfaces to check solutions for …\nRust implementation of the Phragmén reduce algorithm. …\nConverts raw inputs to types used in this crate.\nCompares two sets of election scores based on …\nThe sum of the total backing of all winners.\nThe sum squared of the total backing of all winners, aka. …\nBuild the support map from the assignments.\nSame as <code>to_support_map</code> except it returns a flat vector.\nGet the total stake of this assignment (aka voter budget).\nTotal support.\nTraits for the npos-election operations.\nTry and normalize this assignment.\nTry and normalize this assignment.\nTry and normalize the votes of self.\nSame as <code>Self::try_normalize</code> but the normalization is only …\nSupport from voters.\nReturns <code>true</code> if <code>self</code> votes for <code>target</code>.\nVoter’s identifier.\nVoter’s identifier\nJust winners zipped with their approval stake. Note that …\nBalance the weight distribution of a given <code>voters</code> at most …\nConverts a vector of ratio assignments into ones with …\nSame as <code>assignment_ratio_to_staked</code> and try and do …\nConverts a vector of staked assignments into ones with …\nSame as <code>assignment_staked_to_ratio</code> and try and do …\nExecute sequential phragmen with potentially some rounds …\nCore implementation of seq-phragmen.\nExecute the phragmms method.\nCheck a solution to be PJR.\nThe internal implementation of the PJR check after having …\nCompute the threshold corresponding to the standard PJR …\nCheck a solution to be t-PJR.\nValidate a challenge to an election result.\nValidate a challenge to an election result.\nReduce the given <code>Vec&lt;StakedAssignment&lt;IdentifierT&gt;&gt;</code>. This …\nan aggregator trait for a generic type of a voter/target …\nAggregator trait for a PerThing that can be multiplied by …")