searchState.loadedDescShard("sp_runtime", 0, "Substrate Runtime Primitives.\nThe accuracy of this type.\nRe-export this since it’s part of the API of this crate. …\nIt’s a 20 byte representation.\nIt’s a 32 byte representation.\nAll extrinsics are allowed to be included in this block.\nSignature verify that can work with any known signature …\nThe result of applying of an extrinsic.\nSame as <code>ApplyExtrinsicResult</code> but augmented with …\nAn arithmetic error.\nAn arithmetic error.\nRe-export top-level arithmetic stuff. Arithmetic errors.\nA bad origin.\nA bad origin.\nAccount cannot exist with the funds that would be given.\nAccount cannot receive the assets.\nThe borrowed mode that wraps a <code>&amp;&#39;static str</code>.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nRe-export this since it’s part of the API of this crate. …\nRe-export this since it’s part of the API of this crate. …\nRe-export this since it’s part of the API of this crate. …\nRe-export this since it’s part of the API of this crate. …\nSomething that can build the genesis storage of a module.\nComplex storage builder stuff.\nAccount cannot be created.\nAccount cannot be created for a held balance.\nFailed to lookup some data.\nFailed to lookup some data.\nCommit the transaction.\nConsensus engine unique ID.\nAt least one consumer is remaining so the account cannot …\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nThe state is corrupt; this is generally not going to fix …\nRe-export this since it’s part of the API of this crate. …\nRe-export this since it’s part of the API of this crate. …\nPrecision of this fixed point implementation. It should be …\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\nRe-export these since they’re only “kind of” generic.\nRe-export these since they’re only “kind of” generic.\nReason why a dispatch call failed.\nResult of a <code>Dispatchable</code> which contains the <code>DispatchResult</code> …\nThis type specifies the outcome of dispatching a call to a …\nThis is the legacy return type of <code>Dispatchable</code>. It is …\nReturn type of a <code>Dispatchable</code> which contains the …\nDivision by zero.\nAn ECDSA/SECP256k1 signature.\nAn SECP256k1/ECDSA identity (actually, the Blake2 hash of …\nAn Ed25519 signature.\nAn Ed25519 identity.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe encoded justification specific to a consensus engine.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nResources exhausted, e.g. attempt to read/write data which …\nResources exhausted, e.g. attempt to read/write data which …\nConfines the kind of extrinsics that can be included in a …\nRe-export top-level arithmetic stuff. A fixed point number …\nRe-export top-level arithmetic stuff. A fixed point number …\nRe-export top-level arithmetic stuff. Something that …\nRe-export top-level arithmetic stuff. Integer types that …\nRe-export top-level arithmetic stuff. A fixed point number …\nRe-export top-level arithmetic stuff. A fixed point number …\nFunds exist but are frozen.\nFunds are unavailable.\nAn identifier for this application-specific key type.\nIt’s an account ID (pubkey).\nIt’s an account index.\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nRe-export top-level arithmetic stuff. Get the inner type …\nAn abstraction over justification for a block’s validity …\nCollection of justifications for a given block, multiple …\nRe-export this since it’s part of the API of this crate. …\nA value of type <code>L</code>.\nToo many transactional layers have been spawned.\nThe number of bytes of the module-specific <code>error</code> field …\nA custom error in a module.\nA custom error in a module.\nReason why a pallet call failed.\nA multi-format address wrapper for on-chain accounts.\nSignature verify that can work with any known signature …\nPublic key for any known crypto algorithm.\nA transactional layer was expected, but does not exist.\nThere are no providers so the account cannot be created.\nThere are no providers so the account cannot be created.\nWithdrawal would cause unwanted loss of account.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nInherents are allowed to be included.\nSome part of the balance gives the only provider reference …\nSimple blob to hold an extrinsic without committing to its …\nSimple blob that hold a value in an encoded form without …\nSome error occurred.\nSome error occurred.\nOverflow.\nThe owned mode that wraps a <code>String</code>.\nThe pair key type of this crypto.\nRe-export top-level arithmetic stuff. Something that …\nRe-export top-level arithmetic stuff. A fixed point …\nRe-export top-level arithmetic stuff. A fixed point …\nRe-export top-level arithmetic stuff. A fixed point …\nRe-export top-level arithmetic stuff. A fixed point …\nRe-export top-level arithmetic stuff. A fixed point …\nThe <code>RuntimeAppPublic</code> this type is bound to.\nRe-export top-level arithmetic stuff. A wrapper for any …\nIt’s some arbitrary raw bytes.\nA value of type <code>R</code>.\nRollback the transaction.\nRoot origin is not allowed.\nRoot origin is not allowed.\nRe-export top-level arithmetic stuff. The rounding method …\nRuntime interface for an application’s public key.\nRe-export <code>RuntimeDebug</code>, to avoid dependency clutter.\nA string that wraps a <code>&amp;&#39;static str</code> in the runtime and …\nIndicates if this fixed point implementation is signed or …\nRe-export top-level arithmetic stuff. Convenience type to …\nA <strong>data structure</strong> that can be serialized into any data …\nThe signature that will be generated when signing with the …\nAn Sr25519 signature.\nAn Sr25519 identity.\nDifferent possible state version.\nStruct containing data needed for a storage.\nChild trie storage data.\nSimple 4 byte identifier.\nAn error to do with tokens.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nThere are too many consumers so the account cannot be …\nDescribes on what should happen with a storage transaction.\nThe number of transactional layers has been reached, or we …\nThe number of transactional layers has been reached, or we …\nErrors related to transactional storage layers.\nAn error with tries.\nAn error with tries.\nThe error type used as return type in try runtime hooks.\nRe-export this since it’s part of the API of this crate. …\nSome resource (e.g. a preimage) is unavailable right now. …\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThe asset in question is unknown.\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nRe-export top-level arithmetic stuff. Get the upper type …\nOld state version, no value nodes.\nNew state version can use value nodes.\nRe-export this since it’s part of the API of this crate. …\nPrecision of this fixed point implementation.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nReturns all public keys for this application in the …\nAppend a justification. Returns false if a justification …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nChecks that <code>$x</code> is equal to <code>$y</code> with an error rate of <code>$error</code>.\nSame as <code>assert_eq_error_rate</code>, but intended to be used with …\nAssimilate the storage for this module into pre-existing …\nRe-export big_uint stuff. Infinite precision unsigned …\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nRe-export bounded_vec and bounded_btree_map macros only …\nRe-export bounded_vec and bounded_btree_map macros only …\nRe-export bounded_vec and bounded_btree_map macros only …\nRe-export bounded_vec and bounded_btree_map macros only …\nCreate the module genesis storage into the given <code>storage</code> …\nBuild the storage out of this builder.\nReturns the smallest integer greater than or equal to a …\nAddition. Simply tries to unify the denominators and add …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nChecked multiplication for integer type <code>N</code>. Equal to …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nSubtraction. Simply tries to unify the denominators and …\nAssociated child info for a child trie.\nChildren trie storage data. Key does not include prefix, …\nClears the set, removing all elements.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nCalls a given macro a number of times with a set of fixed …\nCreate a const <code>RuntimeString</code>.\nCreate a const <code>RuntimeString</code>.\nProvides some utilities to define a piecewise linear …\nReturn the denominator.\nChild data for storage.\nTry to decode this <code>OpaqueValue</code> into the given concrete …\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nDeserialize this value from the given Serde deserializer.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nModule specific error value.\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the largest integer less than or equal to a number.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nConvenience macro to use the format! interface to get a …\nConvenience macro to use the format! interface to get a …\nReturns the fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an encoded extrinsic to an <code>OpaqueExtrinsic</code>.\nConverts a fraction into <code>Self</code>.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSame as <code>Self::from_float</code>.\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nBuild this type from a percent. Equivalent to …\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value for <code>Rounding</code> which would give the same …\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nBuild from a raw <code>n/d</code>. This could lead to / 0 if not …\nGenerate a public/private pair with an optional <code>seed</code> and …\nGeneric implementations of <code>crate::traits::Header</code>, …\nReturn the encoded justification for the given consensus …\nExactly the same semantics as <code>slice::get_mut</code>.\nRe-export 128 bit helpers. Some helper functions to work …\nImplement <code>OpaqueKeys</code> for a described struct.\nModule index, matching the metadata module index.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nConsumes <code>self</code> and returns the inner raw value.\nExtract the value of an either over two equivalent types.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nConsume self, and return the inner <code>BTreeSet</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nConvert into the inner type.\nConvert the inner value to an iterator.\nReturn a copy of the encoded justification for the given …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nReturn <code>true</code> if this is one.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturn true if the value is the <code>Right</code> variant.\nReturn <code>true</code> if this is nothing.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nIf it is zero or not\nBorrow the inner value as an iterator.\nReturn an iterator over the justifications.\nMutably borrow the inner value as an iterator.\nRe-export this since it’s part of the API of this crate. …\nA saturating add that assumes <code>self</code> and <code>other</code> have the same …\nA saturating subtraction that assumes <code>self</code> and <code>other</code> have …\nGet the least common divisor of <code>self</code> and <code>other</code>.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nRuntime types that existed in old API versions.\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nOptional error message.\nCreate a <code>Morph</code> and/or <code>TryMorph</code> impls with a simple …\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiplication that always rounds the result up to a whole …\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nMultiplication that always rounds down to a whole number. …\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nReturn the numerator.\nNegate the value.\nNegate the value.\nNegate the value.\nNegate the value.\nCreate a new <code>BoundedBTreeSet</code>.\nCreate a new instance from its raw inner byte value.\nCreate a new <code>OpaqueValue</code> using the given encoded …\nA collection of higher lever helpers for offchain calls.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nOne\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nAdditional information about the <code>Dispatchable</code> which is …\nPrint something that implements <code>Printable</code> from the runtime.\nTypes for a compact base-16 merkle trie used for checking …\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nRemove an item from the set, returning whether it was …\nExactly the same semantics as <code>Vec::remove</code>.\nRemove the encoded justification for the given consensus …\nExactly the same semantics as <code>Vec::retain</code>.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturns the number rounded to the nearest integer. Rounds …\nA logger that can be used to log from the runtime.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nSaturating absolute value.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSerialize this value into the given Serde serializer.\nSign the given message with the corresponding private key …\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nReturn the product of multiplication of this value by …\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nIf defined, values in state of size bigger or equal to …\nUtility function to declare string literals backed by an …\nReturn the same error but without the attached message.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nExactly the same semantics as <code>Vec::swap_remove</code>.\nRemoves and returns the value in the set, if any, that is …\nTesting utilities.\nConvert <code>self</code> to a similar rational number where …\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nReturns <code>Self</code> as raw vec.\nTop trie storage data.\nPrimitives for the runtime modules.\nTransaction validity interface.\nReturns the integer part.\nExactly the same semantics as <code>BTreeSet::insert</code>, but …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nReturn the next lower value to <code>self</code> or an error with the …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nReturn the next higher value to <code>self</code> or an error with the …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nProvides a type that wraps another type and provides a …\nReturns the left value\nReturns the right value\nVerify that the given signature matches the given message …\nVerify a signature on an encoded value in a lazy manner. …\nEquivalent to <code>Self::from_parts(0)</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nZero.\nSimple wrapper around an infinitely large integer, …\nRepresentation of two limbs.\nRepresentation of a single limb.\nAdds <code>self</code> with <code>other</code>. self and other do not have to have …\nAssumed as a given primitive.\nA naive getter for limb at <code>index</code>. Note that the order is …\nDivides an <code>n + m</code> limb self by a <code>n</code> limb <code>other</code>. The result …\nDivides <code>self</code> by a single limb <code>other</code>. This can be used in …\nReturns the argument unchanged.\nRaw constructor from custom limbs. If <code>limbs</code> is empty, …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nA naive getter for limb at <code>index</code>. Note that the order is …\nCalls <code>U::from(self)</code>.\nNumber of limbs.\nZero-pad <code>self</code> from left to reach <code>size</code> limbs. Will not make …\nreturns the least significant limb of the number.\nStrips zeros from the left side (the most significant …\nreturns the most significant limb of the number.\nMultiplies n-limb number <code>self</code> with m-limb number <code>other</code>.\nAssumed as a given primitive.\nA naive setter for limb at <code>index</code>. Note that the order is …\nSplits a <code>Double</code> limb number into a tuple of two <code>Single</code> …\nSubtracts <code>other</code> from <code>self</code>. self and other do not have to …\nCreate a new instance with <code>size</code> limbs. This prevents any …\nA bounded map based on a B-Tree.\nGet the bound of the type in <code>usize</code>.\nClears the map, removing all elements.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn a mutable reference to the value corresponding to …\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeMap</code>.\nGets a mutable iterator over the entries of the map, …\nConsume the map, applying <code>f</code> to each of it’s values and …\nCreate a new <code>BoundedBTreeMap</code>.\nRemove a key from the map, returning the value at the key …\nRemove a key from the map, returning the value at the key …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nConsume the map, applying <code>f</code> to each of it’s values as …\nConsumes self and mutates self via the given <code>mutate</code> …\nA bounded slice.\nA bounded vector.\nCreate an object through truncation.\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nGet the bound of the type in <code>usize</code>.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nExactly the same semantics as <code>Vec::clear</code>.\nExact same semantics as <code>Vec::drain</code>.\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nExactly the same semantics as <code>slice::get_mut</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturns true of this collection is full.\nExactly the same semantics as <code>slice::iter_mut</code>.\nExactly the same semantics as <code>slice::last_mut</code>.\nCreate <code>Self</code> with no items.\nExactly the same semantics as <code>Vec::pop</code>.\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nMove the position of an item from one location to another …\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nExactly the same semantics as <code>slice::swap_remove</code>.\nExactly the same semantics as <code>Vec::truncate</code>.\nCreate an object through truncation.\nConsume and truncate the vector <code>v</code> in order to create a new …\nCreate an instance from the first elements of the given …\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsumes self and mutates self via the given <code>mutate</code> …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as [<code>Vec::rotate_left</code>], but …\nExactly the same semantics as [<code>Vec::rotate_right</code>], but …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nPiecewise Linear function in [0, 1] -&gt; [0, 1].\nCompute <code>f(n/d)*d</code> with <code>n &lt;= d</code>. This is useful to avoid loss …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe maximum value that can be returned.\nArray of points. Must be in order from the lowest …\nAbstraction over a substrate block.\nSomething to identify a block.\nDefinition of something that the external world might want …\nA message from the runtime to the consensus engine. This …\nA message from the runtime to the consensus engine. This …\nType corresponding to DigestItem::Consensus.\nGeneric header digest.\nDigest item that is able to encode/decode ‘system’ …\nA ‘referencing view’ for digest item. Does not own its …\nAn era to describe the longevity of a transaction.\nIdentify by block header hash.\nAbstraction over a block header for a substrate chain.\nThe transaction is valid forever. The genesis hash must be …\nPeriod and phase are encoded:\nIdentify by block number.\nType of a digest item that contains raw data; this also …\nSome other thing. Unsupported and experimental.\nAny ‘non-system’ digest item, opaque to the native …\nSome other (non-prescribed) type.\nEra phase\nA pre-runtime digest.\nA pre-runtime digest.\nType corresponding to DigestItem::PreRuntime.\nAn indication for the light clients that the runtime …\nRuntime code or heap pages updated.\nPut a Seal on it. This is only used by native code, and is …\nPut a Seal on it. This is only used by native code, and is …\nType corresponding to DigestItem::Seal.\nAbstraction over a substrate block and justification.\nA payload that has been signed for an unchecked extrinsics.\nAn extrinsic right from the external world. This is …\nReturns <code>Some</code> if this entry is the <code>Consensus</code> entry.\nCast this digest item into <code>Consensus</code>\nReturns Some if <code>self</code> is a <code>DigestItem::Other</code>.\nCast this digest item into <code>PreRuntime</code>\nReturns <code>Some</code> if this entry is the <code>PreRuntime</code> entry.\nCast this digest item into <code>PreRuntime</code>\nReturns <code>Some</code> if this entry is the <code>Seal</code> entry.\nCast this digest item into <code>Seal</code>\nGet the block number of the start of the era whose …\nFull block.\nTry to match this to a <code>Self::Consensus</code>, check <code>id</code> matches …\nTry to match this to a <code>Self::Consensus</code>, check <code>id</code> matches …\nGet a conversion of the first digest item that …\nGet the block number of the first block at which the era …\nDeconstruct the payload into it’s components.\nA chain-specific digest of data useful for light clients …\nReturns a ‘referencing view’ for this digest item.\nThe accompanying extrinsics.\nThe merkle root of the extrinsics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreate new <code>SignedPayload</code> from raw components.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe function that should be called.\nThe function that should be called.\nCreate a block ID from a hash.\nConvenience helper for computing the hash of the header …\nThe block header.\nCreate an “immortal” transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if this is an immortal transaction.\nCheck if this block ID refers to the pre-genesis state.\nBlock justification.\nGet reference to the first digest item that matches the …\nGet reference to all digest items.\nA list of logs in the digest.\nCreate a new era based on a period (which should be a …\nCreate new <code>SignedPayload</code>.\nA new header with the given number and default hash for …\nNew instance of a signed extrinsic aka “transaction”.\nNew instance of an unsigned extrinsic aka “inherent”.\nCreate a block ID from a number.\nThe block number.\nThe parent hash.\nPop a digest item.\nCreate a block ID for a pre-genesis state.\nTry to match this to a <code>Self::PreRuntime</code>, check <code>id</code> matches …\nTry to match this to a <code>Self::PreRuntime</code>, check <code>id</code> matches …\nPush new digest item.\nTry to match this to a <code>Self::Seal</code>, check <code>id</code> matches and …\nTry to match this to a <code>Self::Seal</code>, check <code>id</code> matches and …\nThe signature, address, number of extrinsics have come …\nWho this purports to be from and the number of extrinsics …\nThe state trie merkle root\nReturns the opaque data contained in the item if <code>Some</code> if …\nTry to match this digest item to the given opaque item …\nReturns the data contained in the item if <code>Some</code> if this …\nTry to match this digest item to the given opaque item …\nGet an encoded version of this payload.\nHelper gcd function used in Rational128 implementation.\nReturns <code>a * b / c</code> (wrapping to 128 bits) or <code>None</code> in the …\nsplit a u128 into two u64 limbs\nConvert a u128 to a u32 based biguint.\nKey type for controlling an account in a Substrate …\nKey type for Aura module, built-in. Identified as <code>aura</code>.\nKey type for AuthorityDiscovery module, built-in. …\nKey type for Babe module, built-in. Identified as <code>babe</code>.\nKey type for BEEFY module.\nA key type ID useful for tests.\nKey type for Grandpa module, built-in. Identified as <code>gran</code>.\nKey type for ImOnline module, built-in. Identified as <code>imon</code>.\nKey type for Mixnet module, used to sign key-exchange …\nKey type for Sassafras module, built-in. Identified as <code>sass</code>…\nKey type for staking, built-in. Identified as <code>stak</code>.\nA key type for signing statements\nRuntime types that existed prior to BlockBuilder API …\n<code>ApplyExtrinsicResult</code> type definition before BlockBuilder …\nAn arithmetic error.\nA bad origin.\nFailed to lookup some data.\nAt least one consumer is remaining so the account cannot …\n<code>DispatchError</code> type definition before BlockBuilder API …\n<code>DispatchOutcome</code> type definition before BlockBuilder API …\nContains the error value\nContains the error value\nA custom error in a module.\n<code>ModuleError</code> type definition before BlockBuilder API …\nThere are no providers so the account cannot be created.\nContains the success value\nContains the success value\nSome error occurred.\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\nConvert the legacy <code>ApplyExtrinsicResult</code> type to the latest …\nModule specific error value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nModule index, matching the metadata module index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional error message.\nExecution context extra capabilities.\nA externalities extension for accessing the Offchain DB.\nThe requested action couldn’t been completed within a …\nDeadline was reached while we waited for this request to …\nDuration type\nAn extended externalities for offchain workers.\nThe request has finished with given status code.\nExternal http calls.\nAn error enum returned by some http methods.\nOpaque type for offchain http requests.\nStatus of the HTTP request\nThe ID of the request is invalid in this context.\nThe passed ID is invalid in this context.\nThere was an IO Error while processing the request.\nAn error has occurred during the request, for example a …\nKeystore access.\nAn identifier for a type of cryptographic key.\nLocal storage is revertible and fork-aware. It means that …\nAn <code>*Externalities</code> implementation with limited capabilities.\nAccess to opaque network state.\nManage the authorized nodes\nAccess to offchain worker DB (read only).\nAccess to offchain worker DB (writes).\nThe offchain database extension that will be registered at …\nChange to be applied to the offchain worker db in regards …\nOffchain DB persistent (non-fork-aware) storage.\nThe offchain worker extension that will be registered at …\nSimple blob to hold a <code>Multiaddr</code> without committing to its …\nA blob to hold information about the local node’s …\nPersistent storage is non-revertible and not fork-aware. …\nRandomness source.\nRemove the data associated with the key\nPersistent storage prefix used by the Offchain Worker API …\nOverwrite the value of an associated key\nA type of supported crypto.\nAccess time related functionality\nOpaque timestamp type\nAbstraction over transaction pool.\nAn externalities extension to submit transactions to the …\nIncrease the timestamp by given <code>Duration</code>.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReplace the value in storage if given old_value matches …\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns a saturated difference (Duration) between two …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nList of addresses the node knows it can be reached as.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nCreate new duration representing given number of …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates new <code>Timestamp</code> given unix timestamp in milliseconds.\nRetrieve a value from storage under given key and prefix.\nA high-level helpers for making HTTP requests from …\nAppend header to the request.\nInitiates a http request given HTTP verb and the URL.\nWrite a chunk of request body.\nRead all response headers.\nRead a chunk of body response to given buffer.\nBlock and wait for the responses for given requests.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns if the local node is a potential validator.\nRemoves a value in the local storage.\nSets a value in the local storage if it matches current …\nGets a value from the local storage.\nSets a value in the local storage.\nReturns number of milliseconds this Duration represents.\nReturns information about the local node’s network state.\nCreate new externalities limited to given <code>capabilities</code>.\nCreate new <code>OpaqueMultiaddr</code>\nCreate a new instance of <code>Self</code>.\nCreate a new instance of <code>OffchainDbExt</code>.\nCreate a new instance of <code>TransactionPoolExt</code>.\nReturns the complement of this set of flags.\nPeerId of the local node in SCALE encoded.\nReturns a random seed.\nClear a storage entry under given key and prefix.\nRemoves the specified flags in-place.\nPersist a value in storage under given key and prefix.\nInserts or removes the specified flags depending on the …\nSet the authorized nodes from runtime.\nPause the execution until <code>deadline</code> is reached.\nA set of storage helpers for offchain workers.\nOff-chain Storage Lock\nDecrease the timestamp by given <code>Duration</code>\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nSubmit transaction.\nReturns the symmetric difference between the flags in <code>self</code> …\nUtilities for offchain calls testing.\nReturns current UNIX timestamp (in millis)\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturn number of milliseconds since UNIX epoch.\nDeadline has been reached.\nDELETE request\nContains the error value\nA request error\nGET request\nA collection of Headers in the response.\nA custom iterator traversing all the headers.\nA result of waiting for a pending request.\nRequest had timed out.\nRequest method (HTTP verb)\nContains the success value\nCustom verb\nPATCH request\nA struct representing an uncompleted http request.\nPOST request\nPUT request\nAn HTTP request builder.\nA HTTP response.\nA buffered byte iterator over response body.\nUnknown error has been encountered.\nAdd a header.\nSet the body of the request.\nRetrieve the body of this response.\nBody of the request\nResponse status code\nReturns current element (if any).\nSet the deadline of the request.\nSet the deadline for reading the body.\nDeadline to finish sending the request\nReturn an error that caused the iterator to return <code>None</code>.\nRetrieve a single header from the list of headers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStart a simple GET request\nRetrieve the headers for this response.\nRequest ID\nRequest id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this headers into an iterator.\nChange the method of the request\nRequest method\nCreate a new Request builder with the given URL.\nMove the iterator to the next position.\nCreate new POST request with given body.\nRaw headers\nSend the request and return a handle.\nAttempts to wait for the request to finish, but will …\nAttempt to wait for all provided requests, but up to given …\nChange the URL of the request.\nRequest URL\nWait for the request to complete.\nWait for all provided requests.\nThe underlying db failed to update due to a concurrent …\nPossible errors when mutating a storage value.\nReason for not being able to provide the stored value\nA storage value with a static key.\nAn abstraction over local storage value.\nValue found but undecodable\nThe function given to us to create the value to be stored …\nRemove the associated value from the storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieve &amp; decode the value from storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new reference to a value in the fork-aware local …\nRetrieve &amp; decode the current value and set it to a new …\nCreate a new reference to a value in the persistent local …\nSet the value of the storage to encoding of given …\nLockable based on block number and timestamp.\nA deadline based on block number and time.\nAn instant type specifying i.e. a point in time.\nLockable item for use with a persisted storage lock.\nStorage based lock.\nRAII style guard for a lock.\nLockable based on the current timestamp with a …\nThe block number until which the lock is still valid <em>at </em>…\nCalculate the deadline based on a current state such as …\nProvide the current state of block number and time.\nExtend the lock by guard deadline if it already exists.\nConsume the guard but <strong>do not</strong> unlock the underlying lock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nVerify the deadline has not expired compared to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepeated lock attempts until the lock is successfully …\nCreate a new storage lock with a <code>default()</code> instance of …\nSnooze at least until <code>deadline</code> is reached.\nThe timestamp until which the lock is still valid <em>at least</em>.\nA single attempt to lock using the storage entry.\nExplicitly create a time and block number based storage …\nExplicitly create a time and block number based storage …\nExplicitly create a time based storage lock with a …\nCreate a new storage lock with an explicit instance of a …\nInternal state of the externalities.\nPending request.\nThe internal state of the fake transaction pool.\nImplementation of offchain externalities used for tests.\nSharable “persistent” offchain storage for test.\nImplementation of transaction pool used for test.\nApply a set of off-chain changes directly to the test …\nRequest body\nAdd expected HTTP request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAsserts that pending request has been submitted and fills …\nRetrieve a key from the test backend.\nRequest headers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal storage\nEncoded Metadata\nHTTP method\nCreate a new and empty offchain storage db for persistent …\nCreate new <code>TestOffchainExt</code> and a reference to the internal …\nCreate new <code>TestTransactionPoolExt</code> and a reference to the …\nPersistent local storage\nNumber of bytes already read from the response body.\nA list of pending requests.\nResponse body\nResponse headers\nA supposedly random seed.\nHas the request been sent already.\nA timestamp simulating the current time.\nA vector of transactions submitted from the runtime.\nURI\nCreate new <code>TestOffchainExt</code> and a reference to the internal …\nA helper structure for building a basic base-16 merkle …\nOne of the proof nodes could not be decoded.\nCorrupt Trie item.\nThe statement being verified contains multiple key-value …\nThe proof contains at least one extraneous hash reference …\nThe proof contains at least one extraneous node.\nThe proof contains at least one extraneous value which …\nTrie item not found in the database,\nThe proof is missing trie nodes required to verify.\nThe proof contains an invalid child reference that exceeds …\nHash is not value.\nAttempted to create a trie with a state root not in the DB.\nThe root hash computed from the proof is incorrect.\nA runtime friendly error type for tries.\nA value was found in the trie with a nibble key that was …\nThe proof indicates that an expected value was not found …\nCreate a compact merkle proof needed to prove all <code>keys</code> and …\nCreate a compact merkle proof needed to prove a single key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new instance of a <code>ProvingTrie</code> using an iterator …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery a value contained within the current trie. Returns …\nAccess the underlying trie root.\nVerify the existence or non-existence of multiple <code>items</code> in …\nVerify the existence or non-existence of <code>key</code> and <code>value</code> in …\nRuntime logger implementation - <code>log</code> crate backend.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInitialize the logger.\nCalls <code>U::from(self)</code>.\nTesting block\nA message from the runtime to the consensus engine. This …\nHeader Digest\nDigest item\nAn opaque extrinsic wrapper type.\nFixed-size uninterpreted hash type with 32 bytes (256 …\nBlock Header\nSome other thing. Unsupported and experimental.\nA pre-runtime digest.\nAn indication for the light clients that the runtime …\nPut a Seal on it. This is only used by native code, and is …\nA dummy signature type, to match <code>UintAuthorityId</code>.\nTest transaction, tuple of (sender, call, signed_extra) …\nA dummy type which can be used instead of regular …\nExecutes all necessary logic needed prior to dispatch and …\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nCall of the extrinsic.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nA chain-specific digest of data useful for light clients …\nList of extrinsics\nThe merkle root of the extrinsics.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nBlock header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no bits are set.\nReturns the size of this hash in bytes.\nA list of logs in the digest.\nCreate a new <code>TextXt</code>.\nA new header with the given number and default hash for …\nThe block number.\nThe parent hash.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nReturns a new fixed hash where all bits are set to the …\nSet the list of keys returned by the runtime call for all …\nSignature of the extrinsic.\nSimple sr25519 (Schnorr-Ristretto) API.\nThe state trie merkle root\nReturns the inner bytes array.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nConvert this authority ID into a public key.\nChecks to see if this is a valid <em>transaction</em>. It returns …\nReturns a new zero-initialized fixed hash.\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF pre-output.\nVRF proof.\nAdd some extra data to be signed.\nThe account ID that this can be transformed into.\nType of the signer.\nThe type which encodes the sender identity.\nThis type can be converted into and possibly from an …\nA lookup implementation returning the <code>AccountId</code> from a …\nAny additional data that will go into the signed payload. …\nMeans of signature verification of an application key.\nInput that adds infinite number of zero after wrapped …\nAn “executable” piece of information, used by the …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nAn error type that indicates that the origin is invalid.\nBlake2-256 Hash implementation.\nA “checkable” piece of information, used by the …\nSomething which fulfills the abstract idea of a Substrate …\nSomething that can convert a <code>BlockId</code> to a number or a hash.\nSuper trait with all the attributes for a block number.\nType of <code>BlockNumber</code> to provide.\nGet current block number\nNumbers which have upper and lower bounds\nThe function call.\nThe type which encodes the call to be dispatched.\nType by which we can dispatch. Restricts the …\nThe call to validate\nSomething that can be checked for equality and printed out …\nExtract the digest type for a block. A “checkable” …\nReturned if <code>check</code> succeeds.\nReturned if <code>check</code> succeeds.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nA <code>TryMorph</code> implementation to reduce a scalar by a …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nTrait for things that can be clear (have no bits set). For …\n…\nInfallible conversion trait. Generic over both source and …\nReversing infallible conversion trait. Generic over both …\nA structure that performs standard conversion using the …\nAdapter which turns a Get implementation into a Convert …\nShortcut to reference the <code>Info</code> type of a <code>Dispatchable</code>.\nA lazy call (module function and argument values) that can …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nThe error type that will be returned by the functions.\nSomething that acts like an <code>Extrinsic</code>.\nType for extrinsics.\nImplementor is an <code>Extrinsic</code> and provides metadata about …\nA marker trait for something that knows the type of the …\nA marker trait for something that knows the type of the …\nAbstraction around hashing\nHeader hash type\nBlock hash type.\nSuper trait with all the attributes for a hashing output.\nHashing algorithm\nExtract the hashing type for a block.\nSomething which fulfills the abstract idea of a Substrate …\nHeader type.\nUnique identifier of this signed extension.\nSome type that is able to be collapsed into an account ID. …\nA structure that performs identity conversion.\nA lookup implementation returning the input value.\nAn opaque set of information attached to the transaction. …\nA trait implementing integer square root.\nDetermine if a <code>MemberId</code> is a valid member.\nKeccak-256 Hash implementation.\nTypes bound to this opaque keys that provide the key type …\nA lazy value.\nMeans of changing one type into another in a manner …\nAn error that indicates that a lookup failed.\nFallible conversion trait returning an Option. Generic …\nReversing fallible conversion trait returning an Option. …\nA type that implements Display when in std environment.\nDefinition for a bi-directional, fallible conversion …\nA type that implements FromStr when in std environment.\nA type that implements Hash when in std environment.\nA type that implements Serialize when in std environment …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nExtensible conversion trait. Generic over only source …\nImplementation of <code>Morph</code> which converts between types using …\nA <code>TryMorph</code> implementation to enforce an upper limit for a …\nThe <code>NodeBlock</code> type.\nHeader number.\nExtract the number type for a block.\nDefines a multiplicative identity element for <code>Self</code>.\nOpaque data type that may be destructured into a series of …\nThe type into which <code>A</code> is mutated.\nThe type into which <code>A</code> is mutated.\nThe output type of the product of <code>self</code> and <code>Other</code>.\nThe hash type produced.\nShortcut to reference the <code>PostInfo</code> type of a <code>Dispatchable</code>.\nAdditional information that is returned by <code>dispatch</code>. Can …\nThe type that encodes information that can be passed from …\nTrait for things which can be printed from the runtime.\nMutator which reduces a scalar by a particular amount.\nMorpher to disregard the source value and replace with …\nMorpher to disregard the source value and replace with the …\nThe <code>RuntimeBlock</code> type.\nEvery function call from your runtime has an origin, which …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nMultiply and divide by a number that isn’t necessarily …\nThe signature type of the extrinsic.\nThe type of the address that signed the extrinsic.\nThe additional data that is specific to the signed …\nSomething that acts like a <code>SignaturePayload</code> of an <code>Extrinsic</code>…\nThe payload we carry for signed extrinsics.\nMeans by which a transaction may be extended. This type …\nInformation about a <code>SignedExtension</code> for the runtime …\nSigned extensions attached to this <code>Extrinsic</code>.\nType of the signer.\nA meta trait for all bit ops.\nType to lookup from.\nType to lookup from.\nMeans of changing one type into another in a manner …\nImplementation of <code>Morph</code> to retrieve just the first element …\nType to lookup into.\nType to lookup into.\nInput that adds infinite number of zero after wrapped …\nFallible conversion trait which returns the argument in …\nReversing fallible conversion trait which returns the …\nA structure that performs standard conversion using the …\nExtensible conversion trait. Generic over only source …\nImplementation of <code>TryMorph</code> which attempts to convert …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nThe format version of the <code>Extrinsic</code>.\nProvide validation for unsigned extrinsics.\nMeans of signature verification.\nDefines an additive identity element for <code>Self</code>.\nConstruct any additional data that should be in the signed …\nThe type of the <code>SignedExtension</code> additional signed data for …\nExecutes all necessary logic needed prior to dispatch and …\nCheck self, given an instance of Context.\nCheck self.\nPerform the equality check.\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nMultiplies two numbers, checking for underflow or …\nRaises a value to the power of exp, returning <code>None</code> if an …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nReturn the value of Self that is clear.\nMake conversion.\nAttempt to convert reference of <code>A</code> into value of <code>B</code>, …\nMake conversion back.\nAttempt to convert reference of <code>B</code> into value of <code>A</code>, …\nReturns the current block number.\nSplit the block into header and list of extrinsics.\nReturns a reference to the digest.\nGet a mutable reference to the digest.\nActually dispatch this call and return the result of it.\n@return the integer division of <code>self</code> and <code>other</code>.\nCreates an encoded block from the given <code>header</code> and …\nAdds two numbers, checking for overflow.\nAdds two numbers overwriting the left hand one, checking …\nDivides two numbers, checking for overflow.\nDivides two numbers overwriting the left hand one, …\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers overwriting the left hand one, …\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nRaises a value to the power of exp, returning …\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers overwriting the left hand one, …\nReturns a reference to the list of extrinsics.\nReturns a reference to the extrinsics root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the underlying value.\nGet the decoded key with key-type ID <code>i</code>.\nGet the raw bytes of key with key-type ID <code>i</code>.\nProduce the hash of some byte-slice.\nReturns the hash of the header.\nReturns the hash of the block.\nProduce the hash of some codec-encodable value.\nReturns a reference to the header.\nThe unique identifier of the <code>SignedExtension</code>.\nFind the integer square root.\nFind the integer square root, returning <code>None</code> if the number …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform into an account.\nConvert into an account ID. This is infallible, and may …\nConvert this value amalgamated with the a secondary “sub…\nTrue iff no bits are set.\nIs the given <code>MemberId</code> a valid member?\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nIs this <code>Extrinsic</code> signed? If no information are available …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturn the key-type IDs supported by this set.\nAttempt a lookup.\nAttempt a lookup.\nReturns the largest finite number this type can represent\nAttempt to make conversion.\nAttempt to make conversion back.\nReturns the metadata for this signed extension.\nReturns the smallest finite number this type can represent\nMake conversion.\n@return the product of <code>self</code> and <code>other</code>.\nCreates new header.\nCreates new block from header and extrinsics.\nCreate new instance of the extrinsic.\nCreate a new instance from the given byte array.\nCreate a new instance from the given byte array.\nReturns a reference to the header number.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nThe ordered Patricia tree root of the given <code>input</code>.\nVerify a proof of ownership for the keys.\nReturns a reference to the parent hash.\nDo any post-flight stuff for an extrinsic.\nDo any pre-flight stuff for a signed transaction.\nValidate the call right before dispatch.\nDo any pre-flight stuff for a unsigned transaction.\nPrint the object.\n@return the modulo remainder of <code>self</code> and <code>other</code>.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nUtility function only to be used in benchmarking scenarios …\nSets the extrinsic root.\nSets the header number.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets the parent hash.\nSets the state root.\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns a reference to the state root.\nConvert the given <code>block_id</code> to the corresponding block hash.\nConvert the given <code>block_id</code> to the corresponding block …\nThe Patricia tree root of the given mapping.\nAttempt to make conversion. If returning Result::Err, the …\nAttempt to make conversion back. If returning Result::Err, …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nConvert into an account ID, checking that all bytes of the …\nSame as <code>into_sub_account_truncating</code>, but ensuring that all …\nMake conversion.\nThe type of the <code>SignedExtension</code>.\nBlindly check self.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nConvert from Target back to Source.\nChecks to see if this is a valid <em>transaction</em>. It returns …\nValidate a signed transaction for the transaction queue.\nReturn the validity of the call\nValidate an unsigned transaction for the transaction queue.\nVerify a signature.\nVerify a signature. Return <code>true</code> if signature is valid for …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nCreate a new instance which only contains zeroes as input.\nThe transaction birth block is ancient.\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nGeneral error to do with the transaction’s proofs (e.g. …\nThe sending address is disabled or known to be invalid.\nThe call of the transaction is not expected.\nCould not lookup some information that is required to …\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nContains the error value\nThe transaction would exhaust the resources of current …\nTransaction has been received externally.\nGeneral error to do with the transaction not yet being …\nTransaction is already included in block.\nThe transaction is invalid.\nAn invalid transaction validity.\nTransaction is coming from a local source.\nAn extrinsic with a mandatory dispatch tried to be …\nNo validator found for the given unsigned transaction.\nContains the success value\nGeneral error to do with the inability to pay some fees …\nGeneral error to do with the transaction being outdated …\nMinimum number of blocks a transaction will remain valid …\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nTag for a transaction. No two transactions with the same …\nInformation on a transaction’s validity and, if valid, …\nErrors that can occur while checking the validity of a …\nTransaction validity can’t be determined.\nAn unknown transaction validity.\nInformation concerning a valid transaction.\n<code>ValidTransaction</code> builder.\nAdd a <code>TransactionTag</code> to the set of provided tags.\nAdd a <code>TransactionTag</code> to the set of required tags.\nFinalize the builder and produce <code>TransactionValidity</code>.\nCombine two instances into one, as a best effort. This …\nAugment the builder with existing <code>ValidTransaction</code>.\nReturns if the reason for the invalidity was block …\nReturns <code>true</code> if the reason for the error was block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the longevity of a transaction.\nTransaction longevity\nSet the priority of a transaction.\nPriority of the transaction.\nSet the propagate flag.\nA flag indicating if the transaction should be propagated …\nProvided tags\nTransaction dependencies\nReturns if the reason for the invalidity was a mandatory …\nReturns <code>true</code> if the reason for the error was it being a …\nInitiate <code>ValidTransaction</code> builder object with a particular …\nA type that wraps another type and provides a default …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.")