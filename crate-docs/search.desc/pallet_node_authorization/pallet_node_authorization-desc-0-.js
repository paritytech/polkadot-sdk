searchState.loadedDescShard("pallet_node_authorization", 0, "Node authorization pallet\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for pallet_node_authorization\nThe origin which can add a well known node.\nThe additional adaptive connections of each node.\nThe node is already claimed by a user.\nThe node is already joined in the list.\nContains a variant per dispatchable extrinsic that this …\nThe given claim was removed by its owner.\nConfiguration trait of this pallet.\nThe allowed connections were added to a node.\nThe allowed connections were removed from a node.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe maximum length in bytes of PeerId\nThe maximum number of well known nodes that are allowed to …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe given well known node was added.\nThe given node was claimed by a user.\nThe given well known node was removed.\nThe given well known node was swapped; first item was …\nThe node was transferred to another account.\nThe given well known nodes were reset.\nThe node hasn’t been claimed yet.\nThe node doesn’t exist in the list.\nYou are not the owner of the node.\nA map that maintains the ownership of each node.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe PeerId is too long.\nNo permission to perform specific operation.\nThe origin which can remove a well known node.\nThe origin which can reset the well known nodes.\nThe overarching event type.\nThe origin which can swap the well known nodes.\nToo many well known nodes.\nWeight information for extrinsics in this pallet.\nThe set of well known nodes. This is stored sorted (just …\nAdd additional connections to a given node.\nAdd additional connections to a given node.\nAdd a node to the set of well known nodes. If the node is …\nAdd a node to the set of well known nodes. If the node is …\nAn auto-generated getter for <code>AdditionalConnections</code>.\nA given node can be claimed by anyone. The owner should be …\nA given node can be claimed by anyone. The owner should be …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>add_connections</code>.\nCreate a call with the variant <code>add_well_known_node</code>.\nCreate a call with the variant <code>claim_node</code>.\nCreate a call with the variant <code>remove_claim</code>.\nCreate a call with the variant <code>remove_connections</code>.\nCreate a call with the variant <code>remove_well_known_node</code>.\nCreate a call with the variant <code>reset_well_known_nodes</code>.\nCreate a call with the variant <code>swap_well_known_node</code>.\nCreate a call with the variant <code>transfer_node</code>.\nSet reserved node every block. It may not be enabled …\nAn auto-generated getter for <code>Owners</code>.\nA claim can be removed by its owner and get back the …\nA claim can be removed by its owner and get back the …\nRemove additional connections of a given node.\nRemove additional connections of a given node.\nRemove a node from the set of well known nodes. The …\nRemove a node from the set of well known nodes. The …\nReset all the well known nodes. This will not remove the …\nReset all the well known nodes. This will not remove the …\nAuto-generated docs-only module listing all (public and …\nSwap a well known node to another. Both the ownership and …\nSwap a well known node to another. Both the ownership and …\nA node can be transferred to a new owner.\nA node can be transferred to a new owner.\nAn auto-generated getter for <code>WellKnownNodes</code>.\nAdd additional connections to a given node.\nAdd a node to the set of well known nodes. If the node is …\nA given node can be claimed by anyone. The owner should be …\nA claim can be removed by its owner and get back the …\nRemove additional connections of a given node.\nRemove a node from the set of well known nodes. The …\nReset all the well known nodes. This will not remove the …\nSwap a well known node to another. Both the ownership and …\nA node can be transferred to a new owner.\nThe additional adaptive connections of each node.\nA map that maintains the ownership of each node.\nThe set of well known nodes. This is stored sorted (just …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")