searchState.loadedDescShard("sc_executor", 0, "A crate that provides means of executing/dispatching calls …\nTrait that allows zero-copy read/write of value-references …\nUses the Wasmtime compiled runtime.\nDefault heap allocation pages.\nDefault heap allocation strategy.\nAllocate the initial heap pages as requested by the wasm …\nHost functions for custom runtime interfaces that should …\nDefines the heap pages allocation strategy the wasm …\nSomething that provides implementations for host functions.\nA generic <code>CodeExecutor</code> implementation that uses a delegate …\nDelegate for dispatching a CodeExecutor call.\nThe version of the native runtime.\nPool the instances to avoid initializing everything from …\nPool the instances to avoid initializing everything from …\nRecreate the instance from scratch on every instantiation. …\nRecreate the instance from scratch on every instantiation. …\nRuntime version. This should not be thought of as classic …\nExtracts the runtime version of a given runtime code.\nAllocate a static number of heap pages.\nSpecification of different methods of executing the …\nAn abstraction over Wasm code executor. Supports selecting …\nThe instantiation strategy to use for the WASM executor.\nIgnore missing function imports if set true.\nIgnore missing function imports if set true.\nReturns the api version found for api with <code>id</code>.\nList of supported API “features” along with their …\n<code>authoring_version</code> is the version of the authorship …\nInstantiate a builder for creating an instance of <code>Self</code>.\nCheck if this version matches other version for authoring …\nAuthoring runtimes (<code>spec_version</code>s) that this native …\nCheck if this version matches other version for calling …\n<code>Decode</code> while giving a “version hint”\nDisable to use native runtime when possible just behave …\nDispatch a method in the runtime.\nRust executor possible errors.\nReturns the state version to use for Extrinsics root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if the given api with <code>api_id</code> is implemented and the …\nReturns the host functions <code>Self</code> provides.\nName of the implementation of the spec. This is of little …\nVersion of the implementation of the specification.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide native runtime version.\nCreate new instance.\nCreate new instance.\nCreate a new instance using the given <code>WasmExecutor</code>.\nTake the runtime blob and scan it for the custom wasm …\nStatically registers the host functions.\nExtract <code>RuntimeVersion</code> of the given <code>runtime_code</code>.\nBasic runtime version info.\nIdentifies the different Substrate runtimes. There’ll be …\nVersion of the runtime specification.\nReturns state version to use for update.\nVersion of the system implementation used by this runtime. …\nAll existing calls (dispatchables) are fully compatible …\nSet up the externalities and safe calling environment to …\nExecute the given closure <code>f</code> with the latest runtime (based …\nThe number of pages that will be added on top of the …\nThe absolute maximum size of the linear memory (in pages).\nThe instantiation strategy to use.\nA WASM backtrace.\nFailure to erase the wasm memory.\nContains the error value\nError type.\nInstantiation error.\nAn error message with an attached backtrace.\nContains the success value\nOther error happened.\nResult type alias.\nType for errors occurring during Wasm runtime construction.\nThe backtrace associated with the error message.\nThe string containing the backtrace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe error message.")