searchState.loadedDescShard("sp_database", 0, "The main database trait, allowing Substrate to store data …\nAn alteration to the database.\nAn identifier for a column.\nThis implements <code>Database</code> as an in-memory hash map. <code>commit</code> …\nA series of changes to the database that can be committed …\nWrap RocksDb database into a trait object that implements …\nCommit the <code>transaction</code> to the database atomically. Any …\nCheck if the value exists in the database without …\nCount number of values in a column\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the value previously stored against <code>key</code> or <code>None</code> if\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance\nCreate a new transaction to be prepared and committed …\nIncrease the number of references for <code>hash</code> in the database.\nRelease the preimage of <code>hash</code> from the database. An equal …\nRemove the value of <code>key</code> in <code>col</code>.\nRemove a possible path-prefix from the key.\nSet the value of <code>key</code> in <code>col</code> to <code>value</code>, replacing anything …\nSet the value of <code>key</code> in <code>col</code> to <code>value</code>, replacing anything …\nStore the <code>preimage</code> of <code>hash</code> into the database, so that it …\nCheck if database supports internal ref counting for state …\nCheck value size in the database possibly without …\nCall <code>f</code> with the value previously stored against <code>key</code> and …\nCall <code>f</code> with the value previously stored against <code>key</code>.\nThe error type for database operations.\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for database operations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")