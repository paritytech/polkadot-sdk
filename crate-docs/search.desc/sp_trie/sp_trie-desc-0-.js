searchState.loadedDescShard("sp_trie", 0, "Utility functions to interact with Substrate’s Base-16 …\nIf true, the trie will allow empty values into <code>TrieDBMut</code>\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nBranch node; has slice of child nodes (each possibly null) …\nVarious re-exports from the <code>trie-db</code> crate. Alias accessor …\nCodec to use (needs to match hasher and nibble ops).\nStorage proof in compact form.\nTrie codec reexport, mainly child trie support for trie …\nVarious re-exports from the <code>trie-db</code> crate. Database value\nOne of the proof nodes could not be decoded.\nCorrupt Trie item.\nThe statement being verified contains multiple key-value …\nThe proof contains duplicate nodes.\nVarious re-exports from the <code>hash-db</code> crate. An empty prefix …\nNull trie node; could be an empty root or an empty branch …\nOur <code>NodeCodec</code>-specific error. Error type used for trie …\nExtension node; has a partial key plan and child data.\nThe proof contains at least one extraneous hash reference …\nThe proof contains at least one extraneous node.\nThe proof contains at least one extraneous value which …\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nThe merkle value is the hash of the node.\nHasher to use for this trie.\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nVarious re-exports from the <code>hash-db</code> crate. Trait modelling …\nVarious re-exports from the <code>memory-db</code> crate. Key function …\nTrie item not found in the database,\nThe proof is missing trie nodes required to verify.\nRange for byte representation in encoded node.\nThe proof contains an invalid child reference that exceeds …\nHash is not value.\nAttempted to create a trie with a state root not in the DB.\nOutput item.\nVarious re-exports from the <code>memory-db</code> crate.\n<code>HashDB</code> implementation that append a encoded prefix (unique …\n<code>HashDBMut</code> implementation that append a encoded prefix …\nsubstrate trie layout\nsubstrate trie layout, with external value nodes.\nLeaf node; has a partial key plan and value.\nQuerying interface, as in <code>trie_db</code> but less generic.\nThreshold above which an external node should be use to …\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nEither the <code>hash</code> or <code>value</code> of a node depending on its size.\nBranch node with support for a nibble (when extension …\nRange for hash in encoded node and original value size.\nThe merkle value is the node data itself when the node …\nThe Substrate format implementation of <code>NodeCodec</code>. Concrete …\nVarious re-exports from the <code>trie-db</code> crate. A <code>NodePlan</code> is a …\nVarious re-exports from the <code>memory-db</code> crate. Key function …\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nType that is able to provide a proof size estimation.\nVarious re-exports from the <code>trie-db</code> crate. Description of …\nRaw storage proof type (just raw trie nodes).\nVarious re-exports from the <code>trie-db</code> crate. Records trie …\nRecorder type that is going to be returned by implementors …\nThe root hash computed from the proof is incorrect.\nA proof that some set of key-value pairs are included in …\nError associated with the <code>storage_proof</code> module.\nVarious re-exports from the <code>trie-db</code> crate. A key-value …\nVarious re-exports from the <code>trie-db</code> crate. A cache that …\nVarious re-exports from the <code>trie-db</code> crate. This trait …\nPersistent trie database read-access interface for a given …\nBuilder for creating a <code>TrieDB</code>.\nVarious re-exports from the <code>trie-db</code> crate. Double ended …\nVarious re-exports from the <code>trie-db</code> crate. Iterator for …\nVarious re-exports from the <code>trie-db</code> crate. Double ended …\nVarious re-exports from the <code>trie-db</code> crate. Iterator for …\nPersistent trie database write-access interface for a …\nBuilder for creating a <code>TrieDBMut</code>.\nVarious re-exports from the <code>trie-db</code> crate. Double ended …\nVarious re-exports from the <code>trie-db</code> crate. Iterator for …\nTrieDB error over <code>TrieConfiguration</code> trait.\nHash type for a trie layout.\nVarious re-exports from the <code>trie-db</code> crate. Trait with …\nVarious re-exports from the <code>trie-db</code> crate. A key-value …\nVarious re-exports from the <code>trie-db</code> crate. A trie recorder …\nType that is able to provide a <code>trie_db::TrieRecorder</code>.\nThe Substrate format implementation of <code>TrieStream</code>. …\nIf true, the trie will use extension nodes and no partial …\nA value was found in the trie with a nibble key that was …\nThe proof indicates that an expected value was not found …\nVarious re-exports from the <code>trie-db</code> crate. Plan for value …\nErrors that may occur during proof verification. Most of …\nHelpers for checking for duplicate nodes.\nProvide a recorder implementing <code>trie_db::TrieRecorder</code>.\nBuild a value slice by decoding a byte slice according to …\nBuild a node by decoding a byte slice according to the …\nTrie Cache\nOptional cache that should be used to speed up the lookup.\nCache the given <code>value</code> for the given <code>key</code>.\nDetermine a child trie root given a hash DB and delta …\nDetermine a child trie root given its ordered contents, …\nCheck for the existence of a hash-key.\nDoes the trie contain a given key?\nDoes the trie contain a given key?\nAccess inner hash db.\ndatabase to query from.\nDecode a byte-slice into the desired item.\nTrie codec reexport, mainly child trie support for trie …\nDetermine a trie root given a hash DB and delta values.\nDrain all visited records.\nCreate a <code>StorageProof</code> derived from the internal state.\nLike <code>insert()</code>, except you provide the key and the data is …\nCreate a new empty iterator.\nReturns a new empty proof.\nDetermine the empty child trie root.\nDetermine the empty trie root.\nTrie codec reexport, mainly child trie support for trie …\nEncoding of index as a key (when reusing general trie for …\nReturns the estimated encoded size of the compact proof.\nReturns the storage proof size.\nFetch value by hash at a current node height\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nRestore an iterator from a raw iterator.\nRestore an iterator from a raw iterator.\nRestore an iterator from a raw iterators.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a proof for a subset of keys in a trie.\nLook up a given hash into the bytes that hash to it, …\nWhat is the value of the given key in this trie?\nWhat is the value of the given key in this trie?\nReturns the hash of the value for <code>key</code>.\nGet the <code>NodeOwned</code> that corresponds to the given <code>hash</code>.\nGet or insert a <code>NodeOwned</code>.\nSearch for the key with the given query parameter. See the …\nHash to start at\nInsert a datum item into the DB and return the datum’s …\nInsert a <code>key</code>/<code>value</code> pair into the trie. An empty value is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode as a compact proof with default trie layout.\nConvert into an iterator over encoded trie nodes in …\nCreates a <code>MemoryDB</code> from <code>Self</code>.\nConvert into plain node vector.\nConvert the iterator to a raw iterator.\nConvert the iterator to a raw iterator.\nConvert the iterator to a raw forward iterator.\nConvert the iterator to a raw backward iterator.\nIs the trie empty?\nReturns whether this is an empty proof.\nIs the trie empty?\nReturns a depth-first iterator over the elements of trie.\nReturn an iterator on the compact encoded nodes.\nCreate an iterator over encoded trie nodes in …\nReturns a depth-first iterator over the keys of elemets of …\nReturns the number of nodes in the proof.\nLook up the <code>MerkleValue</code> of the node that is the closest …\nLookup value for the given <code>key</code>.\nMerges multiple storage proofs covering potentially …\nCreate a new iterator.\nCreate a new iterator.\nCreate a new double ended iterator.\nCreate a new double ended iterator.\ninstantiate new keyspaced db\ninstantiate new keyspaced db\nCreate a new iterator.\nCreate a new double ended iterator.\nConstructs a storage proof from a subset of encoded trie …\nCreate a new <code>Recorder</code> which records all given nodes.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix. It …\nCreate a new iterator, but limited to a given prefix. It …\nCreate a new iterator, but limited to a given prefix. It …\nConstructs a storage proof from a subset of encoded trie …\nFetches the next trie item.\nFetches the next key.\nVarious re-exports from the <code>trie-db</code> crate. Utility methods …\nA trie root formed from the items, with keys attached …\nAdvance the iterator into a prefix, no value out of the …\nAdvance the iterator into a prefix, no value out of the …\nVarious re-exports from the <code>memory-db</code> crate. Derive a …\nFetches the previous trie item.\nFetches the previous key.\nExternalities extension that provides access to the …\nQuery object to record nodes and transform data.\nRead the <code>trie_db::MerkleValue</code> of the node that is the …\nRead a hash from the child trie.\nRead a value from the child trie.\nRead a value from the child trie with given query.\nRead the <code>trie_db::MerkleValue</code> of the node that is the …\nRead a value from the trie.\nRead a value from the trie with given Query.\nRecord the given <code>TrieAccess</code>.\nTrie recorder\nOptional recorder that will be called to record all trie …\nExtension for the default recorder.\nRemove a datum previously inserted. Insertions can be “…\nRemove a <code>key</code> from the trie. Equivalent to making it equal …\nReturn the root of the trie.\nReturn the root of the trie.\nPosition the iterator on the first element with key &gt;= <code>key</code>\nPosition the iterator on the first element with key &gt;= <code>key</code>\nPosition the iterator on the first element with key &gt;= <code>key</code>\nEncode as a compact proof with default trie layout.\nCreates a <code>MemoryDB</code> from <code>Self</code> reference.\nConvert self into a <code>MemoryDB</code>.\nDecode to a full storage_proof.\nOperation to build a trie db from its ordered iterator …\nCheck if we have recorded any trie nodes for the given <code>key</code>.\nDetermines a trie root given its ordered contents, closed …\nDetermines a trie root node’s data given its ordered …\nThis module is for non generic definition of trie type. …\nAccess value plan from node plan, return <code>None</code> for node …\nMutable ccess value plan from node plan, return <code>None</code> for …\nVerify a set of key-value pairs against a trie root and a …\nHelper struct used to ensure that a storage proof doesn’…\nError associated with the <code>AccessedNodesTracker</code> module.\nThe proof contains unused nodes.\nEnsure that all the nodes in the proof have been accessed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>RedundantNodesChecker</code>, starting …\nThe size of the shared cache.\nA limiter for the local node cache. This makes sure the …\nThe local trie cache.\nA limiter for the local value cache. This makes sure the …\nThe shared trie cache.\nThe actual <code>TrieCache</code> implementation.\nReturn self as a <code>TrieDB</code> compatible cache.\nReturn self as <code>TrieDBMut</code> compatible cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LocalTrieCache</code> instance from this shared …\nMerge this cache into the given <code>LocalTrieCache</code>.\nCreate a new <code>SharedTrieCache</code>.\nA cache size <code>bytes</code> big.\nGet a copy of the node for <code>key</code>.\nGet a copy of the <code>CachedValue</code> for <code>key</code>.\nReset the entire cache.\nReset the node cache.\nReset the value cache.\nAn unlimited cache size.\nReturns the used memory size of this cache in bytes.\nSingle nibble length in bit.\nSize of header.\nNumber of child for a branch (trie radix).\nNumber of nibble per byte.\nNibble (half a byte).\nThe nibble shifts needed to align. We use two value, one …\nGet u8 nibble value at a given index in a <code>NibbleSlice</code>.\nGet u8 nibble value at a given index of a byte.\nCount the biggest common depth between two left aligned …\nCalculate the number of common nibble between two left …\nGet u8 nibble value at a given index in a left aligned …\nCalculate the number of needed padding a array of nibble …\nMask a byte, keeping left nibble.\nMask a byte, keeping right byte.\nPush u8 nibble value at a given index into an existing …\nShifts right aligned key to add a given left offset. …\nThe proof size extension to fetch the current storage …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>ProofSizeExt</code>.\nReturns the storage proof size.\nThe trie recorder.\nThe <code>TrieRecorder</code> implementation.\nReturns the recorder as <code>TrieRecorder</code> compatible type.\nCommit the latest transaction.\nDrain the recording into a <code>StorageProof</code>.\nReturns the estimated encoded size of the proof.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>RecordedForKey</code> per recorded key per trie.\nReset the state.\nRollback the latest transaction.\nStart a new transaction.\nConvert the recording to a <code>StorageProof</code>.\nConvenience extension for the <code>Recorder</code> struct.\nConvert the recorder into a <code>RawStorageProof</code>, avoiding …\nConvert the recorder into a <code>BTreeSet</code>.\nCorrupt Trie item.\nTrie item not found in the database,\nHash is not value.\nAttempted to create a trie with a state root not in the DB.\nQuerying interface, as in <code>trie_db</code> but less generic.\nPersistent trie database read-access interface for a given …\nBuilder for creating a <code>TrieDB</code>.\nBuilder for creating a <code>TrieDBMutV0</code>.\nBuilder for creating a <code>TrieDBMutV1</code>.\nPersistent trie database write-access interface for a …\nPersistent trie database write-access interface for a …\nAs in <code>trie_db</code>, but less generic, error type for the crate.\nA value was found in the trie with a nibble key that was …\nOptional cache that should be used to speed up the lookup.\ndatabase to query from.\nHash to start at\nQuery object to record nodes and transform data.\nOptional recorder that will be called to record all trie …")