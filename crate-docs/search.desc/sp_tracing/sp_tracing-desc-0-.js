searchState.loadedDescShard("sp_tracing", 0, "Substrate tracing primitives and macros.\nFurther information for debugging purposes\nThe “debug” level.\nThis is a fatal errors\nThe “error” level.\nSCALE CODEC encoded object – the name should allow the …\nDebug or Display call, this is most-likely a print-able …\nNice to now info\nThe “info” level.\nDescribes the level of verbosity of a span or event.\nA handle representing a span, with the capability to enter …\nThe lowest level, keeping track of minute detail\nThe “trace” level.\nThis is a warning you should be aware of\nThe “warn” level.\nThe fieldname for the wasm-originated name\nThe fieldname for the wasm-originated target\nThe identifier we are using to inject the wasm events in …\nSpan or Event Attributes\nThe name of a field provided as the argument name when …\nA list of <code>WasmFieldName</code>s in the order provided\nThe Tracing Level – the user can filter by this\nMetadata provides generic information about the specific …\nA parameter value provided to the span/event\nA list of <code>WasmFieldName</code>s with the given <code>WasmValue</code> (if …\nReturns the string representation of the <code>Level</code>.\nConstructs a new <code>Span</code> as child of the given parent span, …\nReturns a handle to the span considered by the <code>Subscriber</code> …\nConstructs an event at the debug level.\nConstructs a span at the debug level.\nconvert the given Attributes to an event and emit it using …\nCreate an empty entry\nCreate an empty entry\nEnters this span, returning a guard that will exit the …\nEnter a span.\nEnters this span, consuming it and returning a guard that …\nConstructs an event at the error level.\nConstructs a span at the error level.\nEvents represent single points in time during the …\nConstructs a new <code>Event</code>.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nThe list of fields specified in the call\nthe Values provided\nThe file this was emitted from – useful for debugging;  …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nExecutes the given function in the context of this span.\nConstructs an event at the info level.\nConstructs a span at the info level.\nInit a tracing subscriber for logging in tests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nWhether this is a call  to <code>span!</code> or <code>event!</code>\nIterate over the fields\nThe level of this entry\nThe specific line number in the file – useful for …\nReturns this span’s <code>Metadata</code>, if it is enabled.\nthe metadata of the location\nThe module path;  <code>&amp;&#39;static str</code> converted to bytes\nThe name given to <code>event!</code>/<code>span!</code>, <code>&amp;&#39;static str</code> converted to …\nConstructs a new <code>Span</code> with the given metadata and set of …\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nConstructs a new span that is <em>completely disabled</em>.\nReturns this span, if it was enabled by the current …\nthe parent, if directly specified – otherwise assume …\nRecords that the field described by <code>field</code> has the value …\nRecords all the fields in the provided <code>ValueSet</code>.\nSpans represent periods of time in which a program was …\nConstructs a new span.\nThe given target to <code>event!</code>/<code>span!</code> – or module-name, …\nConstructs an event at the trace level.\nConstructs a span at the trace level.\nTry to init a simple tracing subscriber with log …\nConstructs an event at the warn level.\nConstructs a span at the warn level.\nInvokes a function with a reference to this span’s ID …\nRuns given code within a tracing span, measuring it’s …\n<code>Event</code>s represent single points in time where something …\nConstructs a new <code>Event</code> with the specified metadata and set …\nConstructs a new <code>Event</code> with the specified metadata and set …\nReturns an iterator over the set of values on this <code>Event</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the new event’s parent should be …\nReturns true if the new event should be a root.\nReturns metadata describing this <code>Event</code>.\nReturns a new <code>Event</code> in the current span, with the …\nReturns a new <code>Event</code> as a child of the specified span, with …\nReturns the new event’s explicitly-specified parent, if …\nVisits all the fields on this <code>Event</code> with the specified …\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nExits this span, returning the underlying <code>Span</code>.\nReturns the set of all fields defined by this span’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns this span’s <code>Id</code>, if it is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns true if the new span’s parent should be …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns a reference to the new span’s metadata.\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nReturns <code>Attributes</code> describing a new span at the root of …\nReturns the new span’s explicitly-specified parent, if …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nReturns a reference to a <code>ValueSet</code> containing any values …")