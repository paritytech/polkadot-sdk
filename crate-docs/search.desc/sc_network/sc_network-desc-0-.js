searchState.loadedDescShard("sc_network", 0, "Substrate-specific P2P networking.\nAct as an authority\nThird-party authority.\nThe configuration for a <code>Behaviour</code> protocol.\nAn error during decoding of key material.\nFull node, does not participate in consensus.\nFull node.\nWhen sending a request, what to do on a disconnected …\nJust fail if the destination is not yet connected.\nThe (opaque) key of a record.\nIdentity keypair of a node.\nLight client node.\nLight node.\nNetworking backend for <code>litep2p</code>.\nMaximum response size limit.\n<code>Multiaddr</code> type used in Substrate. Converted to libp2p’s …\nNo network.\nNotification metrics.\nRole that the peer sent to us during the handshake, with …\nIdentifier of a peer of the network.\nThe public key of a node’s identity keypair.\nDescription of a reputation adjustment for a node.\nError in a request.\nBitmask of the roles that a node fulfills.\nTry to connect to the peer.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nCreate Bitswap server.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nConfiguration of the networking layer.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nDeterministically derive a new secret from this <code>Keypair</code>, …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nDiscovery mechanisms of Substrate.\nReturns an empty set of flags.\nCreate a new, empty multiaddress.\nEncode the public key into a protobuf structure for …\nSubstrate network possible errors.\nNetwork event types. These are not the part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nParses a <code>PeerId</code> from bytes.\nGet <code>PeerId</code> from ed25519 public key bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nDecode a private key from a protobuf structure and parse …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate a new Ed25519 keypair.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>PeerId</code> into ed25519 public key bytes.\nReturns <code>true</code> if all flags are currently set.\nDoes this role represents a client that does not …\nReturns <code>true</code> if no flags are currently stored.\nDoes this role represents a client that holds full chain …\nReturns <code>true</code> for <code>ObservedRole::Light</code>.\nDoes this role represents a client that does not hold full …\nReturns the components of this multiaddress.\nReturn a <code>KeyType</code> of the <code>Keypair</code>.\nReturn a <code>KeyType</code> of the <code>PublicKey</code>.\nInformation about the networking, for diagnostic purposes.\nNew reputation change with given delta and reason.\nCreates a new key from the bytes of the input.\nNew reputation change that forces minimum possible …\nReturns the complement of this set of flags.\nCreate notification protocol configuration for <code>protocol</code>.\n<code>PeerInfoBehaviour</code> is implementation of <code>NetworkBehaviour</code> …\n<code>PeerStore</code> manages peer reputations and provides connection …\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nProtocol Controller. Generic implementation of peer …\nGet the public key of this keypair.\nAdds an address component to the end of this multiaddr.\nGenerate random peer ID.\nReason for reputation change.\nRemoves the specified flags in-place.\nCreate request-response protocol configuration.\nCollection of request-response protocols.\nStart <code>Litep2pNetworkBackend</code> event loop.\nMain entry point of the sc-network crate.\nInserts or removes the specified flags depending on the …\nSets the keep-alive timeout of idle connections.\nSets the timeout for inbound and outbound requests.\nSign a message using the private key of this keypair, …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nConvert the <code>PublicKey</code> into the corresponding <code>PeerId</code>.\nEncode a private key as protobuf structure.\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nCopies the bytes of the key into a new vector.\nToggles the specified flags in-place.\nTransport that serves as a common ground for all …\nDecode a public key from a protobuf structure, e.g. read …\nTry to extract <code>PeerId</code> from <code>Multiaddr</code>.\n<code>sc-network</code> type definitions\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\n<code>sc-network</code> utilities\nReputation delta.\nVerify a signature for a message using this public key, …\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nAccept them. This is the default.\nActual authority.\nDeny them.\nA Ed25519 secret key configuration.\nThe options for obtaining a Ed25519 secret key.\nMinimum Requirements for a Hash within Networking\nRead the secret key from a file. If the file does not …\nRead the secret key from a file. If the file does not …\nRegular full node.\nFull block download and verification.\nFull network configuration.\nUse the given secret key <code>K</code>.\nUse the given secret key <code>K</code>.\nMultihash of the peer ID is invalid.\nUse libp2p for P2P networking.\nDownload blocks and the latest state.\nUse litep2p for P2P networking.\nOnly allow connections within the same process. Only …\nError while parsing the multiaddress.\nAddress of a node, including its identity.\nNetwork backend type.\nNetwork service configuration.\nAlways generate a new secret key <code>K</code>.\nAlways generate a new secret key <code>K</code>.\nThe configuration of a node’s secret key, describing the …\nExtension to <code>SetConfig</code> for sets that aren’t the default …\nThe policy for connections to non-reserved peers.\nNormal transport mode.\nCustom handshake for the notification protocol\nNotification metrics.\nSink connected directly to the node background task. …\nNetwork initialization parameters.\nError that can be generated by <code>parse_str_addr</code>.\nThe peer ID is missing from the address.\nChannel pair which allows <code>Notifications</code> to interact with a …\nProtocol name prefix, transmitted on the wire for legacy …\nRole of the local node.\nBitmask of the roles that a node fulfills.\nThe configuration options for obtaining a secret key <code>K</code>.\nConfiguration for a set of nodes.\nSync operation mode.\nConfiguration for the transport layer.\nWarp sync - verify authority set transitions and the …\nAdd a list of protocol names used for backward …\nAdd a notification protocol.\nAdd a request-response protocol.\nAdd a node to the list of reserved nodes.\nShould we insert non-global addresses into the DHT?\nModifies the configuration to allow non-reserved nodes.\nBitswap configuration, if the server has been enabled.\nBlock announce protocol configuration\nList of initial node addresses\nEasy way for a user to create a <code>Multiaddr</code>.\nClient identifier. Sent over the wire for debugging …\nConcatenates the multiaddress and peer ID into one …\nConfiguration for the default set of nodes used for block …\nNumber of substreams to reserve for full nodes for block …\nEd25519 keys.\nTrue if Kademlia random discovery should be enabled.\nHow to spawn background tasks.\nGet reference to fallback protocol names.\nFork ID to distinguish protocols of different hard forks. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new <code>NotificationHandshake</code> from raw bytes\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenesis hash of the chain\nGet reference to handshake.\nMaximum allowed number of incoming substreams related to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvaluate a <code>NodeKeyConfig</code> to obtain an identity <code>Keypair</code>:\nEnable serving block data over IPFS bitswap.\nTrue for <code>Role::Authority</code>.\nIf we are in “reserved-only” peer mode.\nReturns <code>true</code> if <code>self</code> is <code>Self::Warp</code>.\nRequire iterative Kademlia DHT queries to use disjoint …\nKademlia replication factor determines to how many closest …\nCollect all reserved nodes and bootnodes addresses.\nReturns <code>true</code> if <code>self</code> is <code>Self::LightState</code>.\nMultiaddresses to listen for incoming connections.\nMaximum number of blocks per request.\nGet maximum notification size.\nMaximum number of peers to ask the same blocks in parallel.\nGet reference to metrics.\nRegistry for recording prometheus metrics to.\nRegistry for recording prometheus metrics to.\nAddress of the node.\nDirectory path to store network-specific configuration. …\nNetworking backend used for P2P communication.\nNetwork layer configuration.\nNetwork configuration.\nCreate new <code>FullNetworkConfiguration</code>.\nCreate new <code>NotificationsSink</code>. NOTE: only used for testing …\nCreate new <code>NotificationHandshake</code> from an object that …\nCreates a new <code>NonDefaultSetConfig</code>. Zero slots and accepts …\nCreate new default configuration\nCreate new <code>NotificationMetrics</code>.\nCreate new default configuration for localhost-only …\nCreate new default configuration for localhost-only …\nThe node key configuration, which determines the node’s …\nName of the node. Sent over the wire for debugging …\nWhether nodes that aren’t in <code>SetConfig::reserved_nodes</code> …\nNotification metrics.\nGet reference to installed notification protocols.\nCreate new (protocol, notification) handle pair.\nNumber of outgoing substreams related to this set that we…\nAttempt to parse the peer mode from a string.\nSplits a Multiaddress into a Multiaddress and PeerId.\nParses a string address and splits it into Multiaddress …\nReturns the <code>PeerId</code> the sink is connected to.\nIts identity.\nGet handle to <code>PeerStore</code>.\nLegacy name of the protocol to use on the wire. Should be …\nGet reference to protocol name.\nGet reference to protocol name.\nMultiaddresses to advertise. Detected automatically if …\nRegister received notification to Prometheus.\nRegister sent notification to Prometheus.\nRegister closed substream to Prometheus.\nRegister opened substream to Prometheus.\nWait until the remote is ready to accept a notification.\nList of reserved node addresses.\nAssigned role for our node (full, light, …).\nVerify addresses are consistent with enabled transports.\nCheck for duplicate bootnodes.\nSends a notification to the peer.\nGet reference to <code>SetConfig</code>.\nInitial syncing mode.\nTake <code>PeerStore</code>.\nTake <code>ProtocolHandlePair</code> from <code>NonDefaultSetConfig</code>\nConfiguration for the transport layer.\nSize of Yamux receive window of all substreams. <code>None</code> for …\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nIf true, allow connecting to private IPv4/IPv6 addresses …\nIf true, the network will use mDNS to discover other …\nError when decoding <code>ed25519</code>-related types.\nAn Ed25519 keypair.\nAn Ed25519 public key.\nAn Ed25519 secret key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate a new random Ed25519 keypair.\nGenerate a new Ed25519 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nConvert the keypair into a byte array by concatenating the …\nConvert the public key to a byte array in compressed form, …\nConvert public key to <code>PeerId</code>.\nTry to parse a keypair from the binary format produced by …\nTry to parse a public key from a byte array containing the …\nTry to parse an Ed25519 secret key from a byte slice …\nVerify the Ed25519 signature on a message using the public …\nDefault value for Kademlia replication factor which  …\nA connection to a peer has been established but the peer …\nImplementation of <code>NetworkBehaviour</code> that discovers the …\n<code>DiscoveryBehaviour</code> configuration.\nEvent generated by the <code>DiscoveryBehaviour</code>.\nThe DHT received a put record request.\nStarted a random Kademlia query.\nA peer connected to this node for whom no listen address …\nThe DHT yielded results for the record request.\nThe record requested was not found in the DHT.\nThe record with a given key was successfully inserted into …\nInserting a value into the DHT failed.\nAdds a hard-coded address for the given peer, that never …\nAdd a self-reported address of a remote peer to the …\nShould non-global addresses be inserted to the DHT?\nShould private IPv4/IPv6 addresses be reported?\nCan the given <code>Multiaddr</code> be put into the DHT?\nSet the number of active connections at which we pause …\nCreate a <code>DiscoveryBehaviour</code> from this config.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStart fetching a record from the DHT.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the total size in bytes of all the records in the …\nReturns the list of nodes that we know exist in the …\nCreate a default configuration with the given public key.\nReturns the number of nodes in each Kademlia kbucket for …\nReturns the number of records in the Kademlia record …\nPuts a record into the DHT on the provided <code>peers</code>\nStart putting a record into the DHT. Other nodes can later …\nStore a record in the Kademlia record store.\nRequire iterative Kademlia DHT queries to use disjoint …\nWhether the discovery behaviour should periodically …\nAdd discovery via Kademlia for the given protocol.\nSets Kademlia replication factor.\nShould MDNS discovery be supported?\nSet custom nodes which never expire, e.g. bootstrap or …\nThe network addresses are invalid because they don’t …\nChannel closed.\nClient error\nConnection closed.\nThe same bootnode (based on address) is registered with …\nThe same request-response protocol has been registered …\nContains the error value\nError type for the network.\nIo error\nLitep2p error.\nContains the success value\nPeer does not exist.\nPrometheus metrics error.\nResult type alias for the network.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe address of the bootnode.\nThe invalid addresses.\nThe first peer id that was found for the bootnode.\nName of the protocol registered multiple times.\nThe second peer id that was found for the bootnode.\nTransport used.\nEvent generated by a DHT.\nEvents generated by DHT as a response to get_value and …\nType for events generated by networking layer.\nClosed a substream with the given node. Always matches a …\nOpened a substream with the given node with the given …\nReceived one or more messages from the given node using …\nThe DHT received a put record request.\nThe value was found.\nThe requested record has not been found in the DHT.\nThe record has been successfully inserted into the DHT.\nAn error has occurred while putting a record into the DHT.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConcerned protocol and associated message.\nIf the negotiation didn’t use the main name of the …\nThe concerned protocol. Each protocol uses a different …\nThe concerned protocol. Each protocol uses a different …\nReceived handshake.\nNode we opened the substream with.\nNode we closed the substream with.\nNode we received the message from.\nRole of the remote.\nLess data provided than indicated by length.\nInvalid multiaddress.\nInvalid protocol specification.\nFailed to decode unsigned varint.\nIterator over <code>Multiaddr</code> <code>Protocol</code>s.\nContains the “port” to contact. Similar to TCP or UDP, …\n<code>Multiaddr</code> type used in Substrate. Converted to libp2p’s …\nError when parsing a <code>Multiaddr</code> from string.\nOther error emitted when parsing into the wrapped type.\n<code>Protocol</code> describes all possible multiaddress protocols.\nUnknown protocol numeric id.\nUnknown protocol string identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEasy way for a user to create a <code>Multiaddr</code>.\nThe socket comes from a dialer.\nWe are dialing the given address.\nPart of the <code>NetworkState</code> struct. Unstable.\nThe socket comes from a listener.\nWe are listening.\nReturns general information about the networking.\nPart of the <code>NetworkState</code> struct. Unstable.\nPart of the <code>NetworkState</code> struct. Unstable.\nPart of the <code>NetworkState</code> struct. Unstable.\nList of node we’re connected to.\nHow we are connected to the node.\nList of addresses the node knows it can be reached as.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of addresses known for this node.\nList of addresses known for this node.\nLatest ping duration with this node.\nLatest ping duration with this node, if we were ever …\nList of addresses the node is currently listening on.\nList of node that we know of but that we’re not …\nPeerId of the local node.\nState of the peerset manager.\nNode information, as provided by the node itself. Can be …\nNode information, as provided by the node itself, if we …\nLocal address of the connection.\nAddress data is sent back to.\nUtility struct for tracking external addresses. The data …\nWe have obtained identity information from a peer, …\nGives access to the information about a node.\nImplementation of <code>NetworkBehaviour</code> that holds information …\nEvent that can be emitted by the behaviour.\nAdd an external address.\nReturns the latest version information we know of.\nReturns the endpoint of an established connection to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the latest ping time we know of for this node. <code>None</code>…\nBuilds a new <code>PeerInfoBehaviour</code>.\nBorrows <code>self</code> and returns a struct giving access to the …\nRemove an external address.\nInformation about the peer.\nId of the peer that has been identified.\nWe don’t accept nodes whose reputation is under this …\nLog target for this file.\nWorker part of <code>PeerStoreHandle</code>\nActual implementation of peer reputations and connection …\nTrait providing peer reputation management and connection …\nTrait describing the required functionality from a <code>Peerset</code> …\nAdd known peer.\nDisconnect peer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet <code>PeerStoreHandle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the peer is banned.\nCreate a new peer store from the list of bootnodes.\nGet candidates with highest reputations for initiating …\nGet peer reputation.\nGet peer role, if available.\nRegister a protocol handle to disconnect peers whose …\nReport peer disconnection for reputation adjustment.\nAdjust peer reputation.\nDrive the <code>PeerStore</code>, decaying reputation values over time …\nSet peer role.\nEquivalent to <code>Connect</code> for the peer corresponding to this …\nRequest to open a connection to the given peer. From the …\nDrop the connection to the given peer, or cancel the …\nOpaque identifier for an incoming connection. Allocated by …\nLog target for this file.\nMessage that is sent by <code>ProtocolController</code> to <code>Notifications</code>…\nConfiguration for a set of nodes for a specific protocol.\nWorker side of <code>ProtocolHandle</code> responsible for all the …\nShared handle to <code>ProtocolController</code>. Distributed around …\nEquivalent to <code>Drop</code> for the peer corresponding to this …\n<code>Notifications</code> protocol index. For historical reasons it’…\nAdds a new reserved peer. <code>ProtocolController</code> will make an …\nDisconnect peer. You should remove the <code>PeerId</code> from the …\nNotify that connection was dropped (either refused or …\nReturns the argument unchanged.\nConst conversion function for initialization of hardcoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMaximum number of incoming links to peers.\nNotify about incoming connection. <code>ProtocolController</code> will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct new <code>ProtocolController</code>.\nPerform one action. Returns <code>true</code> if it should be called …\nMaximum number of outgoing links to peers.\nDemotes reserved peer to non-reserved. Does not disconnect …\nLists of nodes we should always be connected to.\nIf true, we only accept nodes in …\nGet the list of reserved peers.\nDrive <code>ProtocolController</code>. This function returns when all …\nSets whether or not <code>ProtocolController</code> only has …\nSet reserved peers to the new set.\nPeer to connect to.\nPeer to disconnect from.\nSet id to connect on.\nSet id to disconnect on.\nThe configuration for a <code>Behaviour</code> protocol.\nThe connection closed before a response was received.\nThe connection closed before a response could be send.\nThe request could not be sent because a dialing attempt …\nA protocol has been specified multiple times.\nEvent generated by the <code>RequestResponsesBehaviour</code>.\nWhen sending a request, what to do on a disconnected …\nJust fail if the destination is not yet connected.\nPossible failures occurring in the context of receiving an …\nA remote sent a request and either we have successfully …\nA single request received by a peer on a request-response …\nProblem on the network.\nPossible failures occurring in the context of sending an …\nResponse for an incoming request to be send by a request …\nConfiguration for a single request-response protocol.\nError when registering a protocol.\nA request protocol handler issued reputation changes for …\nError in a request.\nA request initiated using …\nThe ID of an inbound or outbound request.\nImplementation of <code>NetworkBehaviour</code> that provides support …\nError when processing a request sent by a remote.\nThe local peer failed to respond to an inbound request\nThe request timed out before a response was received.\nThe inbound request timed out, either while reading the …\nTry to connect to the peer.\nThe remote supports none of the requested protocols.\nThe local peer supports none of the protocols requested by …\nFallback on the wire protocol names to support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nChannel on which the networking service will send incoming …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum allowed size, in bytes, of a request.\nMaximum allowed size, in bytes, of a response.\nName of the protocol on the wire. Should be something like …\nCreates a new behaviour. Must be passed a list of …\nRequest sent by the remote. Will always be smaller than …\nWho sent the request.\nChannel to send back the response.\nReputation changes accrued while handling the request. To …\nDuration after which emitted requests are considered timed …\nThe payload of the response.\nInitiates sending a request.\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nShall we connect to a disconnected peer?\nReputation changes.\nDuration the request took.\nPeer which has emitted the request.\nPeer that we send a request to.\nPeer whose reputation needs to be adjust.\nName of the protocol in question.\nName of the protocol in question.\nWhether handling the request was successful or …\nResult of the request.\nAn error during decoding of key material.\nIdentity keypair of a node.\nSubstrate network service. Handles network IO and manages …\nMain network worker. Must be polled in order for the …\nNotification metrics.\nA <code>NotificationSender</code> allows for sending notifications to a …\nReserved slot in the notifications buffer, ready to accept …\nSink connected directly to the node background task. …\nThe public key of a node’s identity keypair.\nAdds an address for a node.\nAdds a <code>PeerId</code> and its <code>Multiaddr</code> as reserved.\nReturns the local external addresses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStart getting a value from the DHT.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the listener addresses (without trailing <code>/p2p/</code> …\nReturns the list of addresses we are listening on.\nReturns the local Peer ID.\nReturns the local <code>PeerId</code>.\nGet handle to <code>NetworkService</code> of the <code>NetworkBackend</code>.\nGet network state.\nGet network state.\nCreates the network service.\nPerform one action on the network.\nCreate notification protocol configuration.\nReturns the number of peers we’re connected to.\nCreate <code>PeerStore</code>.\nStart putting a value in the DHT.\nRemoves a <code>PeerId</code> from the list of reserved peers.\nCreate request-response protocol configuration.\nGet the list of reserved peers.\nRun the network.\nStart <code>NetworkBackend</code> event loop.\nReturn a <code>NetworkService</code> that can be shared through the …\nSignature-related code\nHigh-level network status information.\nReturns the total number of bytes received so far.\nReturns the total number of bytes sent so far.\nTraits defined by <code>sc-network</code>.\nKeypair.\nLitep2p public key.\nLitep2p keypair.\nLibp2p public key.\nLibp2p keypair.\nPublic key.\nA result of signing a message with a network identity. …\nAn error during signing of a message.\nThe actual signature made for the message signed.\nProtobuf-encode <code>PublicKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate ed25519 keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>Signature</code>.\nGet <code>Keypair</code>’s public key.\nThe public key derived from the network identity that …\nCreate a signature for a message with a given network …\nGet <code>PeerId</code> of the <code>PublicKey</code>.\nAccept inbound substream.\nProtocol name hasn’t been registered.\nTrait defining the behavior of a bandwidth sink.\nBitswap config.\nThe notification receiver has been closed, usually because …\nSubstream direction.\nSubstream opened by the remote node.\nThe (opaque) key of a record.\nMessage sink for peers.\nNetworking backend.\nProvides ability to announce blocks to the network.\nProvides access to the networking DHT.\nProvides access to network-level event stream.\nProvides low-level API for manipulating network peers.\nProvides ability to send network requests.\nSupertrait defining the services provided by <code>NetworkBackend</code>…\nType implementing <code>NetworkService</code> for the networking …\nSigner with network identity\nTrait for providing information about the local network …\nOverview status of the network.\nProvides high-level status information about network.\nProvides an ability to set a fork sync request for a …\nTrait defining the required functionality from a …\nEvents received by the protocol from <code>Notifications</code>.\nType representing notification protocol-related …\nNotification was received from the substream.\nA <code>NotificationSender</code> allows for sending notifications to a …\nError returned by the notification sink.\nReserved slot in the notifications buffer, ready to accept …\nNotification service\nSubstream was closed.\nRemote identified by <code>PeerId</code> opened a substream and sent …\nSubstream opened by the local node.\nTrait defining required functionality from <code>PeerStore</code>.\nType implementing <code>PeerStore</code>.\nReject inbound substream.\nTrait defining the required functionality from a …\nType representing request-response protocol-related …\nAn error during signing of a message.\nValidate inbound substream.\nSubstream acceptance result.\nConnect to unreserved peers and allow unreserved peers to …\nAdds an address known to a node.\nAdd peers to a peer set.\nAdds a <code>PeerId</code> and its <code>Multiaddr</code> as reserved for a sync …\nMake sure an important block is propagated to peers.\nCreate Bitswap server.\nMake a copy of the object so it can be shared between …\nInstruct <code>Notifications</code> to close substream for <code>peer</code>.\nDisconnect from unreserved peers and deny new unreserved …\nDisconnect from a node as soon as possible.\nReturns a stream containing the events that happen on the …\nReturns the local external addresses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStart getting a value from the DHT.\nGet handle to <code>PeerStore</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the direction inbound.\nReturns the listening addresses (without trailing <code>/p2p/</code> …\nReturns the local Peer ID.\nGet message sink of the peer.\nGet handle to <code>NetworkService</code> of the <code>NetworkBackend</code>.\nGet the network state.\nCreate new <code>NetworkBackend</code>.\nInform the network service about new best imported block.\nGet next event from the <code>Notifications</code> event stream.\nCreate notification protocol configuration and an …\nTotal number of connected peers.\nInstruct <code>Notifications</code> to open a new substream for <code>peer</code>.\nGet peer reputation.\nAttempt to get peer role.\nCreate <code>PeerStore</code>.\nGet protocol name of the <code>NotificationService</code>.\nGet protocol name.\nGet protocol name.\nStart putting the record to <code>peers</code>.\nStart putting a value in the DHT.\nReturns a future that resolves when the <code>NotificationSender</code> …\nRegister metrics that are used by the notification …\nRemove peers from a peer set.\nRemoves a <code>PeerId</code> from the list of reserved peers for a …\nReport a given peer as either beneficial (+) or costly (-) …\nSends a single targeted request to a specific peer. On …\nCreate request-response protocol configuration.\nGet the list of reserved peers.\nStart running <code>PeerStore</code> event loop.\nStart <code>NetworkBackend</code> event loop.\nConsumes this slots reservation and actually queues the …\nSend asynchronous <code>notification</code> to <code>peer</code>, allowing sender to …\nSend an asynchronous <code>notification</code> to to the peer …\nSend synchronous <code>notification</code> to <code>peer</code>.\nSend synchronous <code>notification</code> to the peer associated with …\nSet authorized_only flag.\nSet authorized peers.\nGet access to the <code>SetConfig</code> of the notification protocol.\nSet handshake for the notification protocol replacing the …\nSets the reserved set of a protocol to the given set of …\nNotifies the sync service to try and sync the given block …\nSigns the message with the <code>KeyPair</code> that defines the local …\nVariation of <code>request</code> which starts a request whose response …\nHigh-level network status information.\nStore a record in the DHT memory store.\nReturns the number of peers in the sync peer set we’re …\nThe total number of bytes received.\nThe total number of bytes sent.\nGet the number of bytes received.\nGet the number of bytes sent.\nNon-blocking variant of <code>set_handshake()</code> that attempts to …\nVerify signature using peer’s public key.\nIs the substream inbound or outbound.\nReceived handshake.\nReceived handshake.\nNegotiated fallback.\nReceived notification.\nPeer ID.\nPeer ID.\nPeer Id.\nPeer ID.\n<code>oneshot::Sender</code> for sending validation result back to …\nAllows obtaining the average bandwidth of the streams.\nBuilds the transport that serves as a common ground for …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the total number of bytes that have been …\nReturns the total number of bytes that have been uploaded …\nRepresentation of a Multiaddr.\nThe protocol name as a dynamically allocated string.\nIdentifier of a peer of the network.\nThe protocol name transmitted on the wire.\nThe protocol name as a static string.\nCreate a new, empty multiaddress.\nChecks whether the given <code>Multiaddr</code> is a suffix of this …\nConvert a Multiaddr to a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a <code>PeerId</code> from bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuilds a <code>PeerId</code> from a public key.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the length of this multiaddress is 0.\nReturns the components of this multiaddress.\nReturn the length in bytes of this multiaddress.\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nReturns &amp;str identifiers for the protocol names themselves.\nAdds an already-parsed address component to the end of …\nGenerates a random peer ID from a cryptographically secure …\nReplace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nCreate a new, empty multiaddress with the given capacity.\nAppends the given <code>PeerId</code> if not yet present at the end of …\nWrapper around <code>LinkedHashSet</code> with bounded growth.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInsert element into the set.\nCreates a stream that returns a new value every <code>duration</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LruHashSet</code> with the given (exclusive) limit.")