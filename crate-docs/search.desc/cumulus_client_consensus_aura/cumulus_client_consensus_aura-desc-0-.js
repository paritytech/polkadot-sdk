searchState.loadedDescShard("cumulus_client_consensus_aura", 0, "The AuRa consensus algorithm for parachains.\nThe implementation of the AURA consensus for parachains.\nA verifier for Aura blocks.\nParameters of <code>AuraConsensus::build</code>.\nParameters of <code>build_aura_worker</code>.\nParameters of <code>build_verifier</code>.\nParameters for <code>import_queue</code>.\nSlot specific extension that the inherent data provider …\nA unit type wrapper to express the proportion of a slot.\nThe backoff strategy when we miss slots.\nThe block import to use.\nThe block import.\nThe proportion of the slot dedicated to proposing.\nCreate a new boxed instance of AURA consensus.\nBuild the <code>AuraVerifier</code>.\nThe client to interact with the chain.\nThe client to interact with the chain.\nThe client to interact with the chain.\nThe core collator logic for Aura - slot claiming, block …\nStock, pure Aura collators.\nCompatibility mode that should be used.\nThe inherent data providers, to create the inherent data.\nThe inherent data providers, to create the inherent data.\nShould we force the authoring of blocks?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the inner that is guaranteed to be in the range …\nStart an import queue for the Aura consensus algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHook into the sync module to control the justification …\nThe keystore used by the node.\nThe maximum proportion of the slot dedicated to proposing …\nCreate a new proportion.\nThe proposer factory to build proposer instances.\nThe prometheus registry.\nThe current slot that will be found in the <code>InherentData</code>.\nGet the slot duration for Aura by reading from a runtime …\nGet the slot duration for Aura by reading from a runtime …\nThe spawner to spawn background tasks.\nThe sync oracle that can give us the current sync status.\nThe telemetry handle.\nThe telemetry handle.\nTelemetry instance used to report telemetry metrics.\nA utility struct for writing collation logic that makes …\nParameters for instantiating a <code>Collator</code>.\nA claim on an Aura slot.\nGet the author’s public key.\nThe block import handle.\nBuild and import a parachain block on the given parent …\nAttempt to claim a slot derived from the given …\nPropose, seal, import a block and packaging it into a …\nGet the underlying collator service.\nThe collator service used for bundling proposals into …\nExplicitly creates the inherent data for parachain block …\nA builder for inherent data builders.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe keystore handle used for accessing parachain key …\nInstantiate a new instance of the <code>Aura</code> manager.\nThe identifier of the parachain within the relay-chain.\nGet the Aura pre-digest for this slot.\nThe block proposer used for building blocks.\nAn interface to the relay-chain client.\nSeal a block with a signature in the header.\nGet the slot assigned to this claim.\nGet the timestamp corresponding to the relay-chain slot …\nCreate a slot-claim from the given author public key, …\nThis provides the option to run a basic relay-chain driven …\nA collator for Aura that looks ahead of the most recently …\nA collator for Aura that looks ahead of the most recently …\nParameters for <code>run</code>.\nThe amount of time to spend authoring each block.\nUsed to actually import blocks.\nReceiver for collation requests. If <code>None</code>, Aura consensus …\nThe collator key used to sign collations before submitting …\nThe generic collator service used to plug into this …\nInherent data providers. Only non-consensus inherent data …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe underlying keystore, which should contain Aura …\nA handle to the relay-chain client’s “Overseer” or …\nThe underlying para client.\nThe para’s ID.\nThe underlying block proposer this should call into.\nThe length of slots in the relay chain.\nA handle to the relay-chain client.\nRun bare Aura consensus as a relay-chain-driven collator.\nParameters for <code>run</code>.\nParameters for <code>run_with_export</code>.\nThe amount of time to spend authoring each block.\nUsed to actually import blocks.\nA validation code hash provider, used to get the current …\nThe collator key used to sign collations before submitting …\nThe generic collator service used to plug into this …\nInherent data providers. Only non-consensus inherent data …\nWhen set, the collator will export every produced <code>POV</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe underlying keystore, which should contain Aura …\nA handle to the relay-chain client’s “Overseer” or …\nThe para client’s backend, used to access the database.\nThe underlying para client.\nThe para’s ID.\nThe parameters.\nThe underlying block proposer this should call into.\nWhether we should reinitialize the collator config (i.e. …\nThe length of slots in the relay chain.\nA handle to the relay-chain client.\nRun async-backing-friendly Aura.\nRun async-backing-friendly Aura.\nParameters for <code>run</code>.\nThe amount of time to spend authoring each block.\nUsed to actually import blocks.\nA validation code hash provider, used to get the current …\nThe collator key used to sign collations before submitting …\nThe generic collator service used to plug into this …\nInherent data providers. Only non-consensus inherent data …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe underlying keystore, which should contain Aura …\nThe para client’s backend, used to access the database.\nThe underlying para client.\nThe para’s ID.\nThe underlying block proposer this should call into.\nWhether we should reinitialize the collator config (i.e. …\nA handle to the relay-chain client.\nRun aura-based block building and collation task.\nDrift slots by a fixed duration. This can be used to …\nStart an import queue for a Cumulus node which checks …")