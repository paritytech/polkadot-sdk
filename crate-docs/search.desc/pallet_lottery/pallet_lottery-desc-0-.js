searchState.loadedDescShard("pallet_lottery", 0, "A lottery pallet that uses participation in the network to …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_lottery</code>\nA lottery has already ended.\nYou are already participating in the lottery with this …\nContains a variant per dispatchable extrinsic that this …\nA new set of calls have been set!\nConfiguration trait of this pallet.\nThe currency trait.\nFailed to encode calls\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA lottery is already in progress.\nThe call is not valid for an open lottery.\nA lottery has been started!\nThe manager origin.\nThe max number of calls available in a single lottery.\nNumber of time we should try to generate a random number …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA lottery has not been configured.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe Lottery’s pallet id\nSomething that provides randomness in the runtime.\nA dispatchable call.\nThe overarching event type.\nA ticket has been bought!\nToo many calls for a single lottery.\nUsed to determine if a call would be valid for purchasing …\nWeight information for extrinsics in this pallet.\nA winner has been chosen!\nThe account ID of the lottery pot.\nBuy a ticket to enter the lottery.\nBuy a ticket to enter the lottery.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>buy_ticket</code>.\nCreate a call with the variant <code>set_calls</code>.\nCreate a call with the variant <code>start_lottery</code>.\nCreate a call with the variant <code>stop_repeat</code>.\nSet calls in storage which can be used to purchase a …\nSet calls in storage which can be used to purchase a …\nStart a lottery using the provided configuration.\nStart a lottery using the provided configuration.\nIf a lottery is repeating, you can use this to stop the …\nIf a lottery is repeating, you can use this to stop the …\nAuto-generated docs-only module listing all (public and …\nBuy a ticket to enter the lottery.\nSet calls in storage which can be used to purchase a …\nStart a lottery using the provided configuration.\nIf a lottery is repeating, you can use this to stop the …\nThe calls stored in this pallet to be used in an active …\nThe configuration for the current lottery.\nWarning: Doc-Only\nUsers who have purchased a ticket. (Lottery Index, Tickets …\nEach ticket’s owner.\nTotal number of tickets sold.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_lottery</code> using the Substrate node and …\nWeight functions needed for <code>pallet_lottery</code>.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>RandomnessCollectiveFlip::RandomMaterial</code> (r:1 w:0)\nStorage: <code>RandomnessCollectiveFlip::RandomMaterial</code> (r:1 w:0)\nStorage: <code>Lottery::CallIndices</code> (r:0 w:1) Proof: …\nStorage: <code>Lottery::Lottery</code> (r:1 w:1) Proof: <code>Lottery::Lottery</code>…\nStorage: <code>Lottery::Lottery</code> (r:1 w:1) Proof: <code>Lottery::Lottery</code>…")