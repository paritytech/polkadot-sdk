searchState.loadedDescShard("cumulus_relay_chain_rpc_interface", 0, "Client that maps RPC methods and deserializes results\nRelayChainRpcInterface is used to interact with a full …\nA parsed URL record.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nReturns information regarding the current epoch.\nCall a call to <code>state_call</code> rpc method.\nSame as <code>call_remote_runtime_function</code> but work on encoded …\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nGet hash of n-th block.\nGet hash of last finalized block.\nGet hash of the n-th block in the canon chain.\nGet header at specified hash\nEntry point to create <code>RelayChainRpcClient</code> and start a …\nEntry point to create <code>RelayChainRpcClient</code> and start a …\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a stream of new best relay chain headers\nGet a stream of finalized relay chain headers\nGet a stream of all imported relay chain headers\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nParse a string as an URL, with this URL as the base URL.\nCreates a relative URL if possible, with this URL as the …\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nReturns the persisted validation data for the given <code>ParaId</code> …\nYields information on all availability cores as relevant …\nGet a vector of events concerning candidates that occurred …\nGet the receipt of a candidate pending availability. This …\nGet the receipt of all candidates pending availability.\nChecks if the given validation outputs pass the acceptance …\nReturns all onchain disputes.\nGet all the pending inbound messages in the downward …\nGet the contents of all channels addressed to the given …\nReturns a merkle proof of a validator session key in a …\nGet the minimum number of backing votes for a candidate.\nScrape dispute relevant from on-chain, backing votes and …\nYields the persisted validation data for the given <code>ParaId</code> …\nReturns code hashes of PVFs that require pre-checking by …\nGet the executor parameters for the given session, if …\nReturns the session index expected at a child of the block.\nGet the session info for the given session, if stored.\nSubmits a PVF pre-checking statement into the transaction …\nSubmits an unsigned extrinsic to slash validators who lost …\nReturns a list of validators that lost a past session …\nFetch the validation code used by a para, making the given …\nGet the validation code from its hash.\nFetch the hash of the validation code used by a para, …\nReturns the validator groups and rotation info localized …\nGet the current validators.\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nGet runtime version\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nGet read proof for <code>storage_keys</code>\nRetrieve storage item at <code>storage_key</code>\nGet system health information\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturn the username for this URL (typically the empty …\nWait for a given relay chain block")