searchState.loadedDescShard("snowbridge_pallet_outbound_queue", 0, "Pallet for committing outbound messages for delivery to …\nA generated merkle proof.\nHelpers for implementing runtime api\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nLeaf content (hashed).\nIndex of the leaf the proof is for (0-based).\nNumber of leaves in the original tree.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nImplementation for <code>frame_support::traits::ProcessMessage</code>\nProof items (does not contain the leaf hash, nor the root …\nRoot hash of generated merkle tree.\nImplementation for <code>snowbridge_core::outbound::SendMessage</code>\nAutogenerated weights for <code>snowbridge-pallet-outbound-queue</code>\nContains a variant per dispatchable extrinsic that this …\nCheck whether a channel exists\nConfiguration trait of this pallet.\nNumber of decimal places in native currency\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nMeasures the maximum gas used to execute a command on …\nThe pallet is halted\nInvalid Channel\nMax bytes in a message payload\nMax number of messages processed per block\nMessage will be committed at the end of current block. …\nMessage has been queued and will be processed in the future\nThe message is too large\nSome messages have been committed\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe current nonce for each message origin\nThe current operating mode of the pallet.\nSet OperatingMode\nThe <code>Pallet</code> struct, the main type that implements traits …\nWeight information for extrinsics in this pallet\nConvert a weight value into a deductible fee based.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe local component of the message processing fees in …\nAn auto-generated getter for <code>MessageLeaves</code>.\nCreate a call with the variant <code>set_operating_mode</code>.\nAn auto-generated getter for <code>OperatingMode</code>.\nHalt or resume all pallet operations. May only be called …\nHalt or resume all pallet operations. May only be called …\nAuto-generated docs-only module listing all (public and …\nnumber of committed messages\nID of the message. Usually the XCM message hash or a …\nID of the message\nThe nonce assigned to this message\nMerkle root of the committed messages\nHalt or resume all pallet operations. May only be called …\nHashes of the ABI-encoded messages in the <code>Messages</code> storage …\nMessages to be committed in the current block. This …\nThe current nonce for each message origin\nThe current operating mode of the pallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximal length of an enqueued message, as determined …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMessage which has been assigned a nonce and will be …\nA generated merkle proof.\nMessage channel\nCommand to execute in the Gateway contract\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMessage ID (Used for tracing messages across route, has no …\nCalls <code>U::from(self)</code>.\nLeaf content (hashed).\nIndex of the leaf the proof is for (0-based).\nMaximum gas allowed for message dispatch\nMaximum fee per gas\nUnique nonce to prevent replaying messages\nNumber of leaves in the original tree.\nParams for the command\nProof items (does not contain the leaf hash, nor the root …\nReward in ether for delivering this message, in addition …\nRoot hash of generated merkle tree.\nWeight functions needed for …")