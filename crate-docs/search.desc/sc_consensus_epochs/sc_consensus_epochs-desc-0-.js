searchState.loadedDescShard("sc_consensus_epochs", 0, "Generic utilities for epoch-based consensus engines.\nEpoch data, distinguish whether it is genesis or not.\nTree of all epoch changes across all <em>seen</em> forks. Data …\nType alias to produce the epoch-changes tree from a block …\nHeader of epoch data, consisting of start and end slot.\nEpoch identifier.\nPosition of the epoch identifier.\nThe error returned by the function.\nGenesis persisted epoch data. epoch_0, epoch_1.\nGenesis persisted epoch header. epoch_0, epoch_1.\nThe identifier points to a genesis epoch <code>epoch_0</code>.\nThe identifier points to a genesis epoch <code>epoch_1</code>.\nWrapper to get around unconstrained type errors when …\nA fresh, incremented epoch to import into the underlying …\nA function that can tell you if the second parameter is a …\nA builder for <code>is_descendent_of</code> functions.\nDescriptor for the next epoch.\nPersisted epoch stored in EpochChanges.\nPersisted epoch header stored in ForkTree.\nThe identifier points to a regular epoch.\nRegular persisted epoch data. epoch_n.\nRegular persisted epoch header. epoch_n.\nA shared epoch changes tree.\nRegular viable epoch data.\nThe epoch is signaled and has been imported, with given …\nType of the slot number.\nUnimported genesis viable epoch data.\nThe epoch is an unimported genesis, with given start slot …\nThe viable epoch under which a block can be verified.\nDescriptor for a viable epoch.\nBuild an <code>is_descendent_of</code> function.\nProduce a descendent query object given the client.\nProduce the “end slot” of the epoch. This is NOT …\nThe end slot of the epoch. This is NOT inclusive to the …\nGet a reference to an epoch with given identifier.\nGet the epoch data from an epoch descriptor.\nFinds the epoch data for a child of the given block. …\nFinds the epoch for a child of the given block, assuming …\nGet a mutable reference to an epoch with given identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHash of the block when the epoch is signaled.\nImport a new epoch-change, signalled at the given block.\nIncrement the epoch data, using the next epoch descriptor.\nIncrement the epoch, yielding an <code>IncrementedEpoch</code> to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet cloned value for the viable epoch.\nExtract the underlying epoch, disregarding the fact that a …\nReturns if this is a genesis epoch.\nMap the epoch to a different type using a conversion …\nMap the epoch header to a different type.\nMap the epoch changes from one storing data to a different …\nMigration types for epoch changes.\nCreate a new epoch change.\nNumber of the block when the epoch is signaled.\nLocation of the epoch.\nPrune out finalized epochs, except for the ancestor of the …\nRebalances the tree of epoch changes so that it is sorted …\nReset to a specified pair of epochs, as if they were …\nRevert to a specified block given its <code>hash</code> and <code>number</code>. …\nThe starting slot of the epoch.\nStart slot of the descriptor.\nThe starting slot of the epoch.\nReturn the inner fork tree (mostly useful for testing)\nGet a reference to a viable epoch with given descriptor.\nGet a mutable reference to a viable epoch with given …\nLegacy definition of epoch changes.\nType alias for v0 definition of epoch changes.\nLegacy definition of epoch changes.\nType alias for v1 and v2 definition of epoch changes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreate a new value of this type from raw.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigrate the type into current epoch changes definition.\nMigrate the type into current epoch changes definition.")