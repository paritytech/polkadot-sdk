searchState.loadedDescShard("sp_application_crypto", 0, "Traits and macros for constructing application specific …\nApplication-specific cryptographic object.\nApplication-specific key pair.\nApplication-specific public key.\nApplication-specific signature.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nIdentifier of the crypto type of this application-specific …\nAn identifier for a specific cryptographic algorithm used …\nA since derivation junction description. It is the single …\nThe wrapped type which is just a plain instance of <code>Pair</code>.\nThe wrapped type which is just a plain instance of <code>Public</code>.\nThe wrapped type which is just a plain instance of …\nHard (“hardened”) derivation. Public keys do not have …\nIdentifier for application-specific key type.\nAn identifier for this application-specific key type.\nAn identifier for a type of cryptographic key.\nType which implements Hash in std, not when no-std (std …\nThe corresponding key pair type in this application scheme.\nThe corresponding public key type in this application …\nThe <code>RuntimeAppPublic</code> this type is bound to.\nRuntime interface for an application’s public key.\nRuntime interface for a public key.\nThe corresponding signature type in this application …\nThe signature that will be generated when signing with the …\nThe signature that will be generated when signing with the …\nSoft (vanilla) derivation. Public keys have a …\nKey that can be encoded to/from SS58.\nReturns all public keys for the given key type in the …\nReturns all public keys for this application in the …\nDeclares <code>Public</code>, <code>Pair</code> and <code>Signature</code> types which are …\nDeclares <code>Pair</code> type which is functionally equivalent to …\nBandersnatch VRF application crypto types.\nBLS12-381 crypto applications.\nEcdsa crypto types.\nECDSA and BLS12-381 paired crypto applications.\nEd25519 crypto types.\nA format filterer, can be used to ensure that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check …\nSome if the string is a properly encoded SS58Check …\nGenerate a public/private pair for the given key type with …\nGenerate a public/private pair with an optional <code>seed</code> and …\nCreate a new hard (hardened) DeriveJunction from a given, …\nConsume self to return a hard derive junction with the …\nGet a reference to the inner junction id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the junction is hard.\nReturn <code>true</code> if the junction is soft.\nKnown key types; this also functions as a global registry …\nSign the given message with the corresponding private key …\nSign the given message with the corresponding private key …\nCreate a new soft (vanilla) DeriveJunction from a given, …\nConsume self to return a soft derive junction with the …\nSr25519 crypto types.\nReturns <code>Self</code> as raw vec.\nReturns <code>Self</code> as raw vec.\nReturn the ss58-check string for this key.\nReturn the ss58-check string for this key.\nConsume self to return the chain code.\nVerify that the given signature matches the given message …\nVerify that the given signature matches the given message …\nGenerate the given code if the pair type is available.\nImplement bidirectional <code>From</code> and on-way <code>AsRef</code>/<code>AsMut</code> for …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nIdentifier used to match public keys against …\nThe byte length of serialized pre-output.\nThe byte length of serialized public key.\nBandersnatch secret key.\nBandersnatch public key.\nThe byte length of secret key seed.\nThe byte length of serialized signature.\nContext used to produce a plain signature without any VRF …\nBandersnatch signature.\nDummy implementation. Returns an empty vector.\nDerive a child key from a series of given (hard) junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGenerate an arbitrary number of bytes from the given …\nBandersnatch Ring-VRF types and operations.\nProduce a ring-vrf signature.\nGet the key seed.\nDummy implementation. Returns <code>None</code>.\nSign a message.\nReturn a vector filled with the seed (32 bytes).\nDummy implementation. Returns <code>false</code>.\nBandersnatch VRF types and operations.\nOverhead in the domain size with respect to the supported …\nContext used to construct ring prover and verifier.\nremove as soon as soon as serialization is implemented by …\nRing VRF signature.\nDomain size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n<code>k</code> is the prover secret index in [0..keyset_size).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the keyset max size.\nBuild an dummy instance for testing purposes.\nVRF pre-outputs.\nGet ring prover for the key at index <code>public_idx</code> in the …\nVerify a ring-vrf signature.\nRing signature.\nGet ring verifier for the <code>public_keys</code> set.\nInformation required for a lazy construction of a ring …\nVerifier key.\nMax number of inputs/pre-outputs which can be handled by …\nVRF input to construct a <code>VrfPreOutput</code> instance and …\nBounded vector used for VRF inputs and pre-outputs.\nVRF pre-output derived from <code>VrfInput</code> using a <code>VrfSecret</code>.\nData to be signed via one of the two provided vrf flavors.\nVRF signature.\nGet the challenge associated to the <code>transcript</code> contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nVRF inputs to be signed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate an arbitrary number of bytes from the given …\nConstruct a new VRF input.\nConstruct a new data to be signed.\nConstruct a new data to be signed.\nVRF pre-outputs.\nAppend a message to the transcript.\nTries to append a <code>VrfInput</code> to the vrf inputs list.\nTranscript signature.\nAssociated protocol transcript.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against BLS12-381 …\nPublic key serialized size\nBLS12-381 key pair.\nBLS12-381 public key.\nSignature serialized size\nBLS12-381 signature.\nDummy implementation. Returns an empty vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nDummy implementation. Returns <code>None</code>.\nDummy implementation. Returns <code>false</code>.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against ecdsa keys\nThe byte length of public key\nA key pair.\nThe ECDSA compressed public key.\nThe byte length of signature\nA signature (a 512-bit value, plus 8 bits for recovery ID).\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGet the public key.\nGet the seed for this key.\nSign a message.\nSign a pre-hashed message\nReturn a vec filled with raw data.\nVerify a signature on a message. Returns true if the …\nVerify a signature on a message. Returns true if the …\nVerify a signature on a pre-hashed message. Return <code>true</code> if …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against BLS12-381 …\n(ECDSA,BLS12-381) key-pair pair.\n(ECDSA,BLS12-381) public key pair.\n(ECDSA,BLS12-381) signature pair.\nDummy implementation. Returns an empty vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nDummy implementation. Returns <code>None</code>.\nDummy implementation. Returns <code>false</code>.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against ed25519 …\nThe byte length of public key\nA key pair.\nA public key.\nThe byte length of signature\nA signature.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGet the public key.\nGet the seed for this key.\nSign a message.\nReturn a vec filled with raw data.\nVerify a signature on a message.\nKey type for controlling an account in a Substrate …\nKey type for Aura module, built-in. Identified as <code>aura</code>.\nKey type for AuthorityDiscovery module, built-in. …\nKey type for Babe module, built-in. Identified as <code>babe</code>.\nKey type for BEEFY module.\nA key type ID useful for tests.\nKey type for Grandpa module, built-in. Identified as <code>gran</code>.\nKey type for ImOnline module, built-in. Identified as <code>imon</code>.\nKey type for Mixnet module, used to sign key-exchange …\nKey type for Sassafras module, built-in. Identified as <code>sass</code>…\nKey type for staking, built-in. Identified as <code>stak</code>.\nA key type for signing statements\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF pre-output.\nVRF proof.\nAdd some extra data to be signed.")