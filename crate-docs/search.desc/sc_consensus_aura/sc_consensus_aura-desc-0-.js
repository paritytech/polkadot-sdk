searchState.loadedDescShard("sc_consensus_aura", 0, "Aura (Authority-round) consensus in substrate.\nThe <code>ConsensusEngineId</code> of AuRa.\nAPI necessary for block authorship with aura.\nThe type of the Aura inherent.\nA verifier for Aura blocks.\nThe authorities have changed.\nBad signature\nParameters of <code>build_aura_worker</code>.\nParameters of <code>build_verifier</code>.\nShould we check for equivocation of a block author?\nClient Error\nRun <code>AURA</code> in a compatibility mode.\nA digest item which is usable with aura consensus.\nAn consensus log item for Aura.\nAura Errors\nHeader has a bad seal\nHeader is unsealed\nThe Aura inherent identifier.\nParameters of <code>import_queue</code>.\nInherents Error\nProvides the slot duration inherent data for <code>Aura</code>.\nMultiple Aura pre-runtime headers\nNo, don’t check for equivocation.\nNo Aura pre-runtime digest found\nDon’t use any compatibility mode.\nDisable the authority with given index.\nSlot Author not found\nA slot duration defined in milliseconds.\nA unit type wrapper to express the proportion of a slot.\nParameters of <code>start_aura</code>.\nAn oracle for when major synchronization work is being …\nUnknown inherent error for identifier\nCall <code>initialize_block</code> before doing any runtime calls.\nYes, check for equivocation.\nIf this item is an AuRa pre-digest, return the slot number\nIf this item is an Aura seal, return the signature.\nReturns <code>self</code> as <code>core::time::Duration</code>.\nReturns <code>self</code> as a <code>u64</code> representing the duration in …\nConstruct a digest item which contains the slot number\nConstruct a digest item which contains a signature on the …\nReturn the current set of authorities.\nThe backoff strategy when we miss slots.\nThe backoff strategy when we miss slots.\nThe block import to use.\nThe block import.\nThe block import.\nThe proportion of the slot dedicated to proposing.\nThe proportion of the slot dedicated to proposing.\nBuild the aura worker.\nBuild the <code>AuraVerifier</code>\nShould we check for equivocation?\nShould we check for equivocation?\nThe client to interact with the chain.\nThe client to interact with the chain.\nThe client to interact with the chain.\nThe client to interact with the chain.\nCompatibility mode that should be used.\nCompatibility mode that should be used.\nCompatibility mode that should be used.\nCompatibility mode that should be used.\nSomething that can create the inherent data providers.\nSomething that can create the inherent data providers.\nSomething that can create the inherent data providers.\nShould we force the authoring of blocks?\nShould we force the authoring of blocks?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize from the given milliseconds.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates the inherent data provider by calculating the slot …\nReturns the inner that is guaranteed to be in the range …\nStart an import queue for the Aura consensus algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the synchronization service is undergoing major …\nWhether the synchronization service is offline. Returns …\nThe justification import.\nHook into the sync module to control the justification …\nHook into the sync module to control the justification …\nThe keystore used by the node.\nThe keystore used by the node.\nThe maximum proportion of the slot dedicated to proposing …\nThe maximum proportion of the slot dedicated to proposing …\nCreate a new instance with the given slot.\nCreate a new proportion.\nThe proposer factory to build proposer instances.\nThe proposer factory to build proposer instances.\nThe prometheus registry.\nA select chain implementation to select the best block.\nReturns the slot duration for Aura.\nThe duration of a slot.\nThe spawner to spawn background tasks.\nStandalone functions used within the implementation of …\nStart the aura worker. The returned future should be run …\nThe sync oracle that can give us the current sync status.\nThe sync oracle that can give us the current sync status.\nTelemetry instance used to report telemetry metrics.\nTelemetry instance used to report telemetry metrics.\nTelemetry instance used to report telemetry metrics.\nTelemetry instance used to report telemetry metrics.\nThe block number until this compatibility mode should be …\nThe header has a malformed seal.\nThe header has a bad signature.\nHeader is deferred to the future.\nHeader has no valid slot pre-digest.\nMultiple Aura pre-runtime headers\nNo Aura pre-runtime digest found\nErrors in pre-digest lookup.\nErrors in slot and seal verification.\nNo slot author found.\nThe header has no seal digest.\nChecks if the header is an equivocation and returns the …\nCheck a header has been signed by the right key. If the …\nAttempt to claim a slot using a keystore.\nLoad the current set of authorities from a runtime at a …\nFetch the current set of authorities from the runtime at a …\nExtract a pre-digest from a block header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduce the pre-runtime digest containing the slot info.\nProduce the seal digest item by signing the hash of a …\nGet the slot author for given block along with authorities.\nGet the slot duration for Aura by reading from a runtime …\nGet the slot duration for Aura by reading from a runtime …")