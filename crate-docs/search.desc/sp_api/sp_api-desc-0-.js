searchState.loadedDescShard("sp_api", 0, "Substrate runtime api\nThe concrete type that provides the api.\nAn error describing which API call failed.\nExtends the runtime api implementation with some common …\nAuxiliary wrapper that holds an api instance and binds it …\nSomething that can call into the an api at a given block.\nParameters for <code>CallApiAt::call_api_at</code>.\nThe context in which a call is done.\nCommit the transaction.\nSomething that can be constructed to a runtime api.\nThe <code>Core</code> runtime api that every Substrate runtime needs to …\nThe identifier of the runtime api.\nMaximum nesting level for extrinsics.\nThe <code>Metadata</code> api trait that returns metadata for the …\nThe call is happening in some offchain context.\nThe call is happening in some on-chain context like …\nA type that records all accessed trie nodes and generates …\nSomething that provides a runtime api.\nThe number of bytes required to encode a <code>RuntimeApiInfo</code>.\nRollback the transaction.\nThe actual runtime api that will be constructed.\nSomething that provides information about a runtime api.\nThe state backend that is used to store the block states.\nA proof that some set of key-value pairs are included in …\nDescribes on what should happen with a storage transaction.\nThe version of the runtime api.\nReturns the version of the given api.\nThe encoded arguments of the function.\nThe block id that determines the state that should be …\nCalls the given api function with the given encoded …\nThe call context of this call.\nAll changes to the child storages.\nConstruct an instance of the runtime api.\nDeclares given traits as runtime apis.\nDeserialize the runtime API info serialized by …\nReturns a new empty proof.\nReturns the estimated encoded size of the compact proof.\nExecute the given block.\nExecute the given closure inside a new transaction.\nThe extensions that should be used for this call.\nExtract the recorded proof.\nEnable/disable the given code depending on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe name of the function that should be called.\nChecks if the given api is implemented and versions match.\nCheck if the given api is implemented and the version …\nTags given trait implementations as runtime apis.\nInit the <code>RuntimeLogger</code>.\nInitialize a block with the given header and return the …\nInitialize a block with the given header.\nInitialize the <code>extensions</code> for the given block <code>at</code> by using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode as a compact proof with default trie layout.\nConvert into the inner type.\nConvert into an iterator over encoded trie nodes in …\nCreates a <code>MemoryDB</code> from <code>Self</code>.\nConvert into plain node vector.\nConvert the api object into the storage changes that were …\nReturns whether this is an empty proof.\nCreate an iterator over encoded trie nodes in …\nReturns the number of nodes in the proof.\nAll changes to the main storage.\nMerges multiple storage proofs covering potentially …\nReturns the metadata of a runtime.\nReturns the metadata at a given version.\nReturns the supported metadata versions.\nMocks given trait implementations as runtime apis.\nConstructs a storage proof from a subset of encoded trie …\nConstructs a storage proof from a subset of encoded trie …\nOffchain state changes to write to the offchain database.\nThe overlayed changes that are on top of the state.\nReturns the current active proof recorder.\nStart recording all accessed trie nodes for generating …\nThe optional proof recorder for recording storage accesses.\nRegister an <code>Extension</code> that will be accessible while …\nReturns the runtime api. The returned instance will keep …\nReturns the runtime version at the given block.\nCrude and simple way to serialize the <code>RuntimeApiInfo</code> into …\nSet the <code>CallContext</code> to be used by the runtime api calls …\nGet the state <code>at</code> the given block.\nEnable/disable the given code depending on …\nEnable/disable the given code depending on <code>feature = &quot;std&quot;</code> …\nEncode as a compact proof with default trie layout.\nCreates a <code>MemoryDB</code> from <code>Self</code> reference.\nA transaction for the backend that contains all changes …\nChanges to the transaction index,\nThe storage root after applying the transaction.\nReturns the version of the runtime.")