searchState.loadedDescShard("polkadot_sdk_frame", 0, "FRAME\nThe arithmetic types used for safe math.\nAccess to all of the dependencies of this crate. In case …\nAll derive macros used in frame.\nThe logging library of the runtime. Can normally be the …\nMacros used within the main <code>pallet</code> macro.\nThe main prelude of FRAME.\nLow level primitive types used in FRAME pallets.\nAll of the types and tools needed to build FRAME-based …\nThe main testing prelude of FRAME.\nAll traits often used in FRAME pallets.\nThe accuracy of this type.\nArithmetic errors.\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast16Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast8Bit</code>, but …\nA meta trait for arithmetic type operations, regardless of …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nPrecision of this fixed point implementation. It should be …\nDivision by zero.\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nA trait implementing integer square root.\nA collection-like object that is made of values of type <code>T</code> …\nDefines a multiplicative identity element for <code>Self</code>.\nOverflow.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA wrapper for any rational number with a 128 bit numerator …\nA wrapper for any rational number with infinitely large …\nThe rounding method to use for unsigned quantities.\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nUseful functions for signed numbers (i.e. numbers that can …\nThe rounding method to use.\nTrait for comparing two numbers with an threshold.\nUnderflow.\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nA trait for values which cannot be negative\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nThe positive difference of two numbers.\nPrecision of this fixed point implementation.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nCopied from <code>sp-runtime</code> and documented there.\nInfinite precision unsigned integer for substrate runtime.\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nAddition. Simply tries to unify the denominators and add …\nDivides two numbers, checking for underflow, overflow and …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nMultiplies two numbers, checking for underflow or …\nChecked multiplication for integer type <code>N</code>. Equal to …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nSubtraction. Simply tries to unify the denominators and …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nReturn the denominator reference.\nReturn the denominator.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nAdds two numbers, checking for overflow.\nAdds two numbers overwriting the left hand one, checking …\nDivides two numbers, checking for overflow.\nDivides two numbers overwriting the left hand one, …\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers overwriting the left hand one, …\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nRaises a value to the power of exp, returning …\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers overwriting the left hand one, …\nDecimal Fixed Point implementations for Substrate runtime. …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nConverts a fraction into <code>Self</code>.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSame as <code>Self::from_float</code>.\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nBuild this type from a percent. Equivalent to …\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value for <code>Rounding</code> which would give the same …\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nBuild from a raw <code>n/d</code>. This could lead to / 0 if not …\nSome helper functions to work with 128bit numbers. Note …\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nFind the integer square root.\nFind the integer square root, returning <code>None</code> if the number …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nConsumes <code>self</code> and returns the inner raw value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nReturn <code>true</code> if this is one.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturn <code>true</code> if this is nothing.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nIf it is zero or not\nA saturating add that assumes <code>self</code> and <code>other</code> have the same …\nA saturating subtraction that assumes <code>self</code> and <code>other</code> have …\nGet the least common divisor of <code>self</code> and <code>other</code>.\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiplication that always rounds the result up to a whole …\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nMultiplication that always rounds down to a whole number. …\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nReturn the numerator reference.\nReturn the numerator.\nNegate the value.\nNegate the value.\nNegate the value.\nNegate the value.\nNormalize <code>input</code> so that the sum of all elements reaches …\nNormalize self around <code>targeted_sum</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nOne.\nOne\nTypes that implement <code>PerThing</code> can be used as a …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nReturns the number rounded to the nearest integer. Rounds …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nSaturating absolute value.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the sign of the number.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nReturn the product of multiplication of this value by …\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nCompare if <code>self</code> is <code>threshold</code> greater or less than <code>other</code>.\nConvert <code>self</code> to a similar rational number where …\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nPrimitive traits for the runtime arithmetic.\nReturns the integer part.\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nZero.\nZero.\nSimple wrapper around an infinitely large integer, …\nRepresentation of two limbs.\nRepresentation of a single limb.\nAdds <code>self</code> with <code>other</code>. self and other do not have to have …\nAssumed as a given primitive.\nA naive getter for limb at <code>index</code>. Note that the order is …\nDivides an <code>n + m</code> limb self by a <code>n</code> limb <code>other</code>. The result …\nDivides <code>self</code> by a single limb <code>other</code>. This can be used in …\nReturns the argument unchanged.\nRaw constructor from custom limbs. If <code>limbs</code> is empty, …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nA naive getter for limb at <code>index</code>. Note that the order is …\nCalls <code>U::from(self)</code>.\nNumber of limbs.\nZero-pad <code>self</code> from left to reach <code>size</code> limbs. Will not make …\nreturns the least significant limb of the number.\nStrips zeros from the left side (the most significant …\nreturns the most significant limb of the number.\nMultiplies n-limb number <code>self</code> with m-limb number <code>other</code>.\nAssumed as a given primitive.\nA naive setter for limb at <code>index</code>. Note that the order is …\nSplits a <code>Double</code> limb number into a tuple of two <code>Single</code> …\nSubtracts <code>other</code> from <code>self</code>. self and other do not have to …\nCreate a new instance with <code>size</code> limbs. This prevents any …\nPrecision of this fixed point implementation. It should be …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nThe underlying data type used for this fixed point number.\nIndicates if this fixed point implementation is signed or …\nPrecision of this fixed point implementation.\nReturns the smallest integer greater than or equal to a …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nChecked multiplication for integer type <code>N</code>. Equal to …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part.\nBuilds this type from an integer number.\nConsumes <code>self</code> and returns the inner raw value.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nReturns the number rounded to the nearest integer. Rounds …\nSaturating absolute value.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nReturns the integer part.\nHelper gcd function used in Rational128 implementation.\nReturns <code>a * b / c</code> (wrapping to 128 bits) or <code>None</code> in the …\nsplit a u128 into two u64 limbs\nConvert a u128 to a u32 based biguint.\nThe accuracy of this type.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nThe rounding method to use for unsigned quantities.\nThe rounding method to use.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nConsume self and return the number of parts per thing.\nConverts a fraction into <code>Self</code>.\nSame as <code>Self::from_float</code>.\nBuild this type from a number of parts per thing.\nBuild this type from a percent. Equivalent to …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nSame as <code>Self::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is nothing.\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds down to a whole number. …\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nReturn the product of multiplication of this value by …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nEquivalent to <code>Self::from_parts(0)</code>.\nA wrapper for any rational number with a 128 bit numerator …\nA wrapper for any rational number with infinitely large …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast16Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast8Bit</code>, but …\nA meta trait for arithmetic type operations, regardless of …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nA trait implementing integer square root.\nDefines a multiplicative identity element for <code>Self</code>.\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nUseful functions for signed numbers (i.e. numbers that can …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nA trait for values which cannot be negative\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nThe positive difference of two numbers.\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nAdds two numbers, checking for overflow.\nAdds two numbers overwriting the left hand one, checking …\nDivides two numbers, checking for overflow.\nDivides two numbers overwriting the left hand one, …\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers overwriting the left hand one, …\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nRaises a value to the power of exp, returning …\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers overwriting the left hand one, …\nFind the integer square root.\nFind the integer square root, returning <code>None</code> if the number …\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the sign of the number.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nDerive [<code>Clone</code>] but do not bound any generic.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nDerive [<code>Debug</code>] but do not bound any generics.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> and for struct and enum.\nderive <code>Default</code> but do no bound any generic. Docs are at …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nDeriveEq but do no bound any generic.\nThe type identifying for which type info is provided.\nDerive [<code>Ord</code>] but do no bound any generic. Docs are at …\nDerive [<code>PartialEq</code>] but do not bound any generic.\nDerive [<code>PartialOrd</code>] but do not bound any generic. Docs are …\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nImplementors return their meta type information.\nAttempt to deserialise the value from input.\nAttempt to deserialize the value from input into a …\nConvert self to an owned vector.\nConvert self to a slice and append it to the destination.\nReturns the fixed encoded size of the type.\nCalculates the encoded size.\nFormats the value using the given formatter.\nIf possible give a hint of expected size of the encoding.\nAttempt to skip the encoded value from input.\nReturns the static type identifier for <code>Self</code>.\nConvert self to a slice and then invoke the given closure …\nThe full account information for a particular account ID.\nData to be associated with an account (other than …\nData to be associated with an account (other than …\nThe user account identifier type for the runtime.\nThe user account identifier type for the runtime.\nInformation of an account.\nTotal length (in bytes) for all extrinsics put together, …\nApplying an extrinsic.\nThe basic call filter to use in Origin. All origins are …\nThe basic call filter to use in Origin. All origins are …\nThe Block type used by the runtime. This is used by …\nMap of block numbers to block hashes.\nMaximum number of block number to block hash mappings to …\nMaximum number of block number to block hash mappings to …\nThe maximum length of a block (in bytes).\nThe maximum length of a block (in bytes).\nThe current weight for the block.\nBlock &amp; extrinsics weights: base values and limits.\nBlock &amp; extrinsics weights: base values and limits.\nContains a variant per dispatchable extrinsic that this …\nThe origin filter prevent the call to be dispatched.\nCheck for transaction mortality.\nGenesis hash check to provide replay protection between …\nCheck for transaction mortality.\nCheck to ensure that the sender is not the zero address.\nNonce check and increment to give replay protection for …\nEnsure the runtime version registered in the transaction …\nEnsure the transaction version registered in the …\nBlock resource (weight) limit check.\n<code>:code</code> was updated.\nInformation needed when a new runtime binary is submitted …\nConfiguration trait of this pallet.\nAn object to track the currently used extrinsic weight in …\nEvent handler which registers a consumer when created.\nNumeric limits over the ability to add a consumer ref …\nAccount was created.\nThe weight of runtime database operations the runtime can …\nThe weight of runtime database operations the runtime can …\nSome resultant status relevant to decrementing a …\nBased on <code>Config</code>. Auto-generated by …\nAlways fail.\nEnsure the origin is <code>None</code>. i.e. unsigned transaction.\nEnsure the origin is Root.\nEnsure the origin is Root and return the provided <code>Success</code> …\nEnsure the origin is any <code>Signed</code> origin.\nEnsure the origin is <code>Signed</code> origin from the given <code>AccountId</code>…\nEnsure the origin is provided <code>Ensure</code> origin and return the …\nError for the System pallet\nEvent for the System pallet.\nRecord of an event happening.\nAccount already existed.\nAccount still exists.\nAn extrinsic failed.\nAn extrinsic completed successfully.\nThe specified <code>Task</code> failed during execution.\nFailed to extract the runtime version from the new runtime.\nFinalizing the block.\nCan be used to configure the genesis state of this pallet.\nThe output of the <code>Hashing</code> function.\nThe output of the <code>Hashing</code> function.\nThe hashing system (algorithm) being used in the runtime …\nThe hashing system (algorithm) being used in the runtime …\nSome resultant status relevant to incrementing a …\nWhether all inherents have been applied.\nInitializing the block.\nThe name of specification does not match between the …\nThe specified <code>Task</code> is not valid.\nAn account was reaped.\nStores the <code>spec_version</code> and <code>spec_name</code> of when the last …\nStores the <code>spec_version</code> and <code>spec_name</code> of when the last …\nConverting trait to take a source type and convert to …\nConverting trait to take a source type and convert to …\nThe maximum number of consumers allowed on a single …\nThe maximum number of consumers allowed on a single …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA multi-block migration is ongoing and prevents the …\nThe migrator that is used to run Multi-Block-Migrations.\nThe migrator that is used to run Multi-Block-Migrations.\nA new account was created.\nSuicide called when the account has non-default composite …\nThere is a non-zero reference count preventing the account …\nThis stores the number of previous transactions associated …\nThis stores the number of previous transactions associated …\nIt is signed by nobody, can be either:\nIt is signed by nobody, can be either:\nNo upgrade authorized.\nA function that is invoked when an account has been …\nA function that is invoked when an account has been …\nHandler for when a new account has just been created.\nHandler for when a new account has just been created.\nWhat to do if the runtime wants to change the code to …\nWhat to do if the runtime wants to change the code to …\nExposed trait-generic origin type.\nThe <code>Pallet</code> struct, the main type that implements traits …\nProvides information about the pallet setup in the runtime.\nProvides information about the pallet setup in the runtime.\nA phase of a block’s execution.\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly before …\nA callback that executes in <em>every block</em> directly before …\nEvent handler which registers a provider when created.\nOrigin for the System pallet.\nAccount was destroyed.\nType used to encode the number of references an account …\nReference status; can be either referenced or unreferenced.\nOn on-chain remark happened.\nThe system itself ordained this dispatch to happen: this …\nThe system itself ordained this dispatch to happen: this …\nThe aggregated <code>RuntimeCall</code> type.\nThe aggregated <code>RuntimeCall</code> type.\nThe aggregated event type of the runtime.\nThe aggregated event type of the runtime.\nThe <code>RuntimeOrigin</code> type used by dispatchable calls.\nThe <code>RuntimeOrigin</code> type used by dispatchable calls.\nThe aggregated <code>RuntimeTask</code> type.\nThe aggregated <code>RuntimeTask</code> type.\nThe designated SS58 prefix of this chain.\nThe designated SS58 prefix of this chain.\nEvent handler which registers a self-sufficient when …\nDo something when we should be setting the code.\nIt is signed by some public key and we provide the …\nIt is signed by some public key and we provide the …\nAll migrations that should run in the next runtime upgrade.\nAll migrations that should run in the next runtime upgrade.\nThe specification version is not allowed to decrease …\nA <code>Task</code> has finished executing.\nA <code>Task</code> failed during execution.\nA <code>Task</code> has started executing\nThe submitted code is not authorized.\nAn upgrade was authorized.\nGet the chain’s in-code version.\nGet the chain’s in-code version.\nWeight functions needed for <code>frame_system</code>.\nAn auto-generated getter for <code>Account</code>.\nReturns true if the given account exists.\nRetrieve the account transaction counter from storage.\nTrue if the account has no outstanding references.\nProvide the preimage (runtime binary) <code>code</code> for an upgrade …\nProvide the preimage (runtime binary) <code>code</code> for an upgrade …\nReturns <code>Some</code> with a reference to the <code>AccountId</code> if <code>self</code> is …\nAssert the given <code>event</code> exists.\nAssert the last event equal to the given <code>event</code>.\nAuthorize an upgrade to a given <code>code_hash</code> for the runtime. …\nAuthorize an upgrade to a given <code>code_hash</code> for the runtime. …\nAuthorize an upgrade to a given <code>code_hash</code> for the runtime. …\nAuthorize an upgrade to a given <code>code_hash</code> for the runtime. …\nAn auto-generated getter for <code>AuthorizedUpgrade</code>.\nAn auto-generated getter for <code>BlockHash</code>.\nAn auto-generated getter for <code>Number</code>.\nAn auto-generated getter for <code>BlockWeight</code>.\nTrue if the account has at least one provider reference …\nTrue if the account has no outstanding consumer references …\nTrue if the account has at least one provider reference …\nDetermine whether or not it is possible to update the code.\nThe number of outstanding references for the account <code>who</code>.\nThe number of other modules that currently depend on this …\nThe additional data that belongs to this account. Used to …\nDecrement the reference counter on an account. This <em>MUST</em> …\nDecrement the provider reference counter on an account.\nDecrement the reference counter on an account. This <em>MUST</em> …\nDecrement the sufficients reference counter on an account.\nDeposits an event into this block’s event record.\nDeposits an event into this block’s event record adding …\nDeposits a log and ensures it matches the block’s log …\nAn auto-generated getter for <code>Digest</code>.\nApply an authorized upgrade, performing any validation …\nTo be called after any origin/privilege checks. Put the …\nDo the pre-dispatch checks. This can be applied to both …\nDo the validate checks. This can be applied to both signed …\nEnsure that the origin <code>o</code> represents an unsigned extrinsic. …\nEnsure that the origin <code>o</code> represents the root. Returns <code>Ok</code> …\nEnsure that the origin <code>o</code> represents a signed extrinsic …\nEnsure that the origin <code>o</code> represents either a signed …\nThe event itself.\nAn auto-generated getter for <code>EventCount</code>.\nGet a single event at specified index.\nAn auto-generated getter for <code>EventTopics</code>.\nGet the current events deposited by the runtime.\nGet the basic externalities for this pallet, useful for …\nGets extrinsics count.\nAn auto-generated getter for <code>ExtrinsicData</code>.\nGets the index of extrinsic that is currently executing.\nCompute the trie root of a list of extrinsics.\nCompute the trie root of a list of extrinsics.\nRemove temporary “environment” entries in storage, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nutility constructor. Used only in client/factory code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nutility constructor. Used only in client/factory code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nIncrement a particular account’s nonce by 1.\nIncrement the reference counter on an account.\nIncrement the reference counter on an account, ignoring …\nIncrement the provider reference counter on an account.\nIncrement the reference counter on an account.\nIncrement the self-sufficient reference counter on an …\nWhether all inherents have been applied.\nStart the execution of a particular block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is <code>None</code>, <code>None</code> otherwise.\nTrue if the account has some outstanding consumer …\nReturns <code>true</code> if <code>self</code> is <code>Root</code>, <code>None</code> otherwise.\nKill all storage items with a key that starts with the …\nKill all storage items with a key that starts with the …\nKill some items from storage.\nKill some items from storage.\nReturns the <code>spec_version</code> of the last runtime upgrade.\nBlock resource limits configuration structures.\nThe number of consumers over which <code>inc_consumers</code> will …\nThe maximum number of additional consumers expected to be …\nMigrate the reference counting state.\nProvide types to help defining a mock environment when …\nCreates new <code>SignedExtension</code> to check genesis hash.\nCreate new <code>SignedExtension</code> to check runtime version.\nCreate new <code>SignedExtension</code> to check runtime version.\nCreate new <code>SignedExtension</code> to check transaction version.\nCreates new <code>SignedExtension</code> to check weight of the …\nCreate a call with the variant <code>apply_authorized_upgrade</code>.\nCreate a call with the variant <code>authorize_upgrade</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>do_task</code>.\nCreate a call with the variant <code>kill_prefix</code>.\nCreate a call with the variant <code>kill_storage</code>.\nCreate a call with the variant <code>remark</code>.\nCreate a call with the variant <code>remark_with_event</code>.\nCreate a call with the variant <code>set_code</code>.\nCreate a call with the variant <code>set_code_without_checks</code>.\nCreate a call with the variant <code>set_heap_pages</code>.\nCreate a call with the variant <code>set_storage</code>.\nThe number of transactions this account has sent.\nTo be called immediately after an extrinsic has been …\nNote what the extrinsic data of the current extrinsic …\nTo be called immediately after <code>note_applied_extrinsic</code> of …\nTo be called immediately after finishing the …\nNote that all inherents have been applied.\nModule helpers for off-chain calls.\nAn account is being created.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPrelude to be used alongside pallet macro, for ease of use.\nAn auto-generated getter for <code>ParentHash</code>.\nThe phase of the block it happened in.\nThe number of outstanding provider references for the …\nThe number of other modules that allow this account to …\nRead and return the events of a specific pallet, as …\nGet the current events deposited by the runtime.\nThe number of outstanding provider and sufficient …\nThe number of outstanding references for the account <code>who</code>.\nInform the system pallet of some additional weight that …\nMake some on-chain remark.\nMake some on-chain remark.\nMake some on-chain remark and emit event.\nMake some on-chain remark and emit event.\nReset events.\nReturn the chain’s current runtime version.\nSet the current block weight. This should only be used in …\nSet the block number to something in particular. Can be …\nSet the code to the given blob.\nSet the new runtime code.\nSet the new runtime code.\nSet the new runtime code without doing any checks of the …\nSet the new runtime code without doing any checks of the …\nSets the index of extrinsic that is currently executing.\nSet the number of pages in the WebAssembly environment’s …\nSet the number of pages in the WebAssembly environment’s …\nSet the parent hash number to something in particular. Can …\nSet some items of storage.\nSet some items of storage.\nSplit an <code>option</code> into two constituent options, as defined …\nThe number of outstanding sufficient references for the …\nThe number of modules that allow this account to exist for …\nThe list of the topics this event has.\nReturns a 32 byte datum which is guaranteed to be …\nWrite code to the storage and emit related events and …\nCheck that provided <code>code</code> can be upgraded to. Namely, check …\nReturns if the runtime was upgraded in comparison of <code>self</code> …\nAutogenerated weights for <code>frame_system</code>\nBlock length limit configuration.\nBlock weight limits &amp; base values configuration.\nAn opinionated builder for <code>Weights</code> object.\nContains the error value\nContains the success value\nA result of validating <code>BlockWeights</code> correctness.\n<code>DispatchClass</code>-specific weight configuration.\nAverage block initialization weight cost.\nSet base block weight.\nBase weight of block execution.\nBase weight of single extrinsic of given class.\nConstruct the <code>BlockWeights</code> object.\nConstruct the <code>BlockWeights</code> object or panic if it’s …\nStart constructing new <code>BlockWeights</code> object.\nSet parameters for particular class.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet per-class weight settings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>BlockLength</code> with <code>max</code> for every class.\nMaximal total length in bytes for each extrinsic class.\nMaximal total weight consumed by all kinds of extrinsics …\nMaximal weight of single extrinsic. Should NOT include …\nBlock maximal total weight for all extrinsics of given …\nCreate new <code>BlockLength</code> with <code>max</code> for <code>Operational</code> &amp; <code>Mandatory</code>\nWeight limits for extrinsics of given dispatch class.\nBlock reserved allowance for all extrinsics of a …\nCreate new weights definition, with both <code>Normal</code> and …\nVerifies correctness of this <code>BlockWeights</code> object.\nCreate a sensible default weights system given only …\nSystem config account data\nSystem config account id\nSystem config nonce\nThe system pallet.\nTrait to implement to give information about types used …\nMigrate from dual <code>u32</code> reference counting to triple <code>u32</code> …\nMigrate from unique <code>u32</code> reference counting to triple <code>u32</code> …\nMigrate from unique <code>u8</code> reference counting to triple <code>u32</code> …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn unchecked extrinsic type to be used in tests.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe function that should be called.\nThe block header.\nThe block header.\nThe block header.\nThe signature, address, number of extrinsics have come …\nDetails of an account for which a private key is contained …\nA type binding runtime-level <code>Public/Signature</code> pair with …\nCreate signed transaction.\nThe extrinsic type expected by the runtime.\nMarker struct used to flag using all supported keys to …\nMarker struct used to flag using any of the supported keys …\nA raw crypto public key wrapped by <code>RuntimeAppPublic</code>.\nA matching raw crypto <code>Signature</code> type.\nThe runtime’s call type.\nA public key that is capable of identifying <code>AccountId</code>s.\nA submission result.\nA submission result.\nA application-specific crypto.\nSubmit a signed transaction to the transaction pool.\nA definition of types required to submit transactions from …\nSubmit an unsigned transaction onchain with a signed …\nA message signer.\nA matching <code>Signature</code> type.\nA signature data.\nUtility trait to be implemented on payloads that can be …\nProvides an implementation for signing transaction …\nA wrapper around the types which are used for signing.\nProvides the ability to directly submit signed and unsigned\nReturn a vector of the intersection between all available …\nUse all available keys for signing.\nUse any of the available keys for signing.\nCheck if there are any keys that could be used for signing.\nAttempt to create signed extrinsic data that encodes call …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRuntime-specific <code>AccountId</code>.\nIndex on the provided list of accounts or list of all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn all available accounts in keystore.\nCreate a new Account instance\nReturn a public key that is expected to have a matching …\nA runtime-specific <code>Public</code> key for that key pair.\nSubmit a signed transaction to the local pool.\nWraps the call into transaction, signs using given account …\nSend an unsigned transaction with a signed payload.\nConstruct and sign given payload.\nSign payload with the private key to maps to the provided …\nSign the payload using the implementor’s provided public …\nSign a message.\nSubmit transaction onchain by providing the call and an …\nA convenience method to submit an unsigned transaction …\nSubmits an unsigned call to the transaction pool.\nVerify signature against the provided public key.\nVerify signature against payload.\nUse provided <code>accounts</code> for signing.\nThe full account information for a particular account ID.\nData to be associated with an account (other than …\nData to be associated with an account (other than …\nThe user account identifier type for the runtime.\nThe user account identifier type for the runtime.\nTotal length (in bytes) for all extrinsics put together, …\nThe basic call filter to use in Origin. All origins are …\nThe basic call filter to use in Origin. All origins are …\nThe Block type used by the runtime. This is used by …\nMap of block numbers to block hashes.\nMaximum number of block number to block hash mappings to …\nMaximum number of block number to block hash mappings to …\nThe maximum length of a block (in bytes).\nThe maximum length of a block (in bytes).\nThe current weight for the block.\nBlock &amp; extrinsics weights: base values and limits.\nBlock &amp; extrinsics weights: base values and limits.\nContains a variant per dispatchable extrinsic that this …\nThe origin filter prevent the call to be dispatched.\n<code>:code</code> was updated.\nConfiguration trait of this pallet.\nThe weight of runtime database operations the runtime can …\nThe weight of runtime database operations the runtime can …\nBased on <code>Config</code>. Auto-generated by …\nError for the System pallet\nEvent for the System pallet.\nAn extrinsic failed.\nAn extrinsic completed successfully.\nThe specified <code>Task</code> failed during execution.\nFailed to extract the runtime version from the new runtime.\nCan be used to configure the genesis state of this pallet.\nThe output of the <code>Hashing</code> function.\nThe output of the <code>Hashing</code> function.\nThe hashing system (algorithm) being used in the runtime …\nThe hashing system (algorithm) being used in the runtime …\nWhether all inherents have been applied.\nThe name of specification does not match between the …\nThe specified <code>Task</code> is not valid.\nAn account was reaped.\nStores the <code>spec_version</code> and <code>spec_name</code> of when the last …\nConverting trait to take a source type and convert to …\nConverting trait to take a source type and convert to …\nThe maximum number of consumers allowed on a single …\nThe maximum number of consumers allowed on a single …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA multi-block migration is ongoing and prevents the …\nThe migrator that is used to run Multi-Block-Migrations.\nThe migrator that is used to run Multi-Block-Migrations.\nA new account was created.\nSuicide called when the account has non-default composite …\nThere is a non-zero reference count preventing the account …\nThis stores the number of previous transactions associated …\nThis stores the number of previous transactions associated …\nIt is signed by nobody, can be either:\nNo upgrade authorized.\nA function that is invoked when an account has been …\nA function that is invoked when an account has been …\nHandler for when a new account has just been created.\nHandler for when a new account has just been created.\nWhat to do if the runtime wants to change the code to …\nWhat to do if the runtime wants to change the code to …\nExposed trait-generic origin type.\nThe <code>Pallet</code> struct, the main type that implements traits …\nProvides information about the pallet setup in the runtime.\nProvides information about the pallet setup in the runtime.\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly after all …\nA callback that executes in <em>every block</em> directly before …\nA callback that executes in <em>every block</em> directly before …\nOn on-chain remark happened.\nThe system itself ordained this dispatch to happen: this …\nThe aggregated <code>RuntimeCall</code> type.\nThe aggregated <code>RuntimeCall</code> type.\nThe aggregated event type of the runtime.\nThe aggregated event type of the runtime.\nThe <code>RuntimeOrigin</code> type used by dispatchable calls.\nThe <code>RuntimeOrigin</code> type used by dispatchable calls.\nThe aggregated <code>RuntimeTask</code> type.\nThe aggregated <code>RuntimeTask</code> type.\nThe designated SS58 prefix of this chain.\nThe designated SS58 prefix of this chain.\nIt is signed by some public key and we provide the …\nAll migrations that should run in the next runtime upgrade.\nAll migrations that should run in the next runtime upgrade.\nThe specification version is not allowed to decrease …\nA <code>Task</code> has finished executing.\nA <code>Task</code> failed during execution.\nA <code>Task</code> has started executing\nThe submitted code is not authorized.\nAn upgrade was authorized.\nGet the chain’s in-code version.\nGet the chain’s in-code version.\nProvide the preimage (runtime binary) <code>code</code> for an upgrade …\nAuthorize an upgrade to a given <code>code_hash</code> for the runtime. …\nAuthorize an upgrade to a given <code>code_hash</code> for the runtime. …\nDefault implementations of <code>DefaultConfig</code>, which can be …\nKill all storage items with a key that starts with the …\nKill some items from storage.\nMake some on-chain remark.\nMake some on-chain remark and emit event.\nSet the new runtime code.\nSet the new runtime code without doing any checks of the …\nSet the number of pages in the WebAssembly environment’s …\nSet some items of storage.\nDefault configurations of this pallet in a parachain …\nDefault configurations of this pallet in a relay-chain …\nDefault configurations of this pallet in a solochain …\nA predefined adapter that covers <code>BlockNumberFor&lt;T&gt;</code> for …\nProvides a viable default config that can be used with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType alias for the <code>BlockNumber</code> associated type of system …\nType alias for the <code>Extrinsic</code> associated type of system …\nType alias for the <code>Header</code>.\nType alias for the <code>Origin</code> associated type of system config.\nType alias for the <code>RuntimeCall</code> associated type of system …\nEnsure that the origin <code>o</code> represents an unsigned extrinsic. …\nEnsure that the origin <code>o</code> represents the root. Returns <code>Ok</code> …\nEnsure that the origin <code>o</code> represents a signed extrinsic …\nEnsure that the origin <code>o</code> represents either a signed …\nWeights for <code>frame_system</code> using the Substrate node and …\nWeight functions needed for <code>frame_system</code>.\nStorage: <code>System::AuthorizedUpgrade</code> (r:1 w:1) Proof: …\nStorage: <code>System::AuthorizedUpgrade</code> (r:0 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Skipped::Metadata</code> (r:0 w:0) Proof: …\nStorage: <code>Skipped::Metadata</code> (r:0 w:0) Proof: …\nThe range of component <code>b</code> is <code>[0, 3932160]</code>.\nThe range of component <code>b</code> is <code>[0, 3932160]</code>.\nStorage: <code>MultiBlockMigrations::Cursor</code> (r:1 w:0) Proof: …\nStorage: <code>System::Digest</code> (r:1 w:1) Proof: <code>System::Digest</code> (…\nStorage: <code>Skipped::Metadata</code> (r:0 w:0) Proof: …\nBlake2-256 Hash implementation.\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nAbstraction around hashing\nKeccak-256 Hash implementation.\nMaximum value.\nMaximum value.\nThe hash type produced.\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nProduce the hash of some byte-slice.\nProduce the hash of some codec-encodable value.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nThe ordered Patricia tree root of the given <code>input</code>.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nThe Patricia tree root of the given mapping.\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nTypes and traits for runtimes that implement runtime APIs.\nThe main prelude of <code>FRAME</code> for building runtimes.\nThe main prelude of FRAME for building runtimes, and in …\nA set of opinionated types aliases commonly used in …\nThe <code>ConsensusEngineId</code> of AuRa.\nThe API to query account nonce.\nThe concrete type that provides the api.\nAn error describing which API call failed.\nExtends the runtime api implementation with some common …\nAuxiliary wrapper that holds an api instance and binds it …\nAPI necessary for block authorship with aura.\nIdentity of a Grandpa authority.\nA list of Grandpa authorities with associated weights.\nThe grandpa crypto scheme defined via the keypair type.\nSignature for a Grandpa authority.\nThe weight of an authority.\nThe <code>BlockBuilder</code> api trait that provides the required …\nThe log target to be used by client code.\nSomething that can call into the an api at a given block.\nParameters for <code>CallApiAt::call_api_at</code>.\nThe context in which a call is done.\nA catch up message for this chain’s block type.\nA commit message for this chain’s block type.\nCommit the transaction.\nA compact commit message for this chain’s block type.\nSomething that can be constructed to a runtime api.\nThe <code>Core</code> runtime api that every Substrate runtime needs to …\nWrapper object for GRANDPA equivocation proofs, useful for …\nProof of voter misbehavior on a given set id. …\nThe <code>ConsensusEngineId</code> of GRANDPA.\nAPIs for integrating the GRANDPA finality gadget into …\nA GRANDPA justification for block finality, it includes a …\nThe identifier of the runtime api.\nKey type for GRANDPA module.\nAn identifier for a type of cryptographic key.\nMaximum nesting level for extrinsics.\nA GRANDPA message for a substrate chain.\nThe <code>Metadata</code> api trait that returns metadata for the …\nThe call is happening in some offchain context.\nThe offchain worker api.\nThe call is happening in some on-chain context like …\nAn opaque type used to represent the key ownership proof …\nA precommit message for this chain’s block type.\nA precommit message.\nProof of equivocation at precommit stage.\nA prevote message for this chain’s block type.\nA prevote message.\nProof of equivocation at prevote stage.\nA primary propose message for this chain’s block type.\nA primary proposal message.\nA type that records all accessed trie nodes and generates …\nSomething that provides a runtime api.\nThe number of bytes required to encode a <code>RuntimeApiInfo</code>.\nThe log target to be used by runtime code.\nRollback the transaction.\nThe round indicator.\nThe actual runtime api that will be constructed.\nSomething that provides information about a runtime api.\nPersistent storage prefix used by the Offchain Worker API …\nA scheduled change of authority set.\nSession keys runtime api.\nThe monotonic identifier of a GRANDPA set of authorities.\nA signed message.\nUnit type wrapper that represents a slot.\nA slot duration defined in milliseconds.\nThe state backend that is used to store the block states.\nA proof that some set of key-value pairs are included in …\nThe <code>TaggedTransactionQueue</code> api trait for interfering with …\nDescribes on what should happen with a storage transaction.\nThe version of the runtime api.\nGet current account nonce of given <code>AccountId</code>.\nReturns the version of the given api.\nApply the given extrinsic.\nThe encoded arguments of the function.\nReturns <code>self</code> as <code>core::time::Duration</code>.\nReturns <code>self</code> as a <code>u64</code> representing the duration in …\nThe block id that determines the state that should be …\nAuthentication data for the commit.\nReturn the current set of authorities.\nThe base hash. See struct docs.\nThe base number. See struct docs.\nCalls the given api function with the given encoded …\nThe call context of this call.\nVerifies the equivocation proof by making sure that both …\nCheck that the inherents are valid. The inherent data will …\nCheck a message signature by encoding the message as a …\nCheck a message signature by encoding the message as a …\nAll changes to the child storages.\nConstruct an instance of the runtime api.\nGet current GRANDPA authority set id.\nDecode the given public session keys.\nThe number of blocks to delay.\nDeserialize the runtime API info serialized by …\nAura (Authority-Round) digests\nReturns a new empty proof.\nReturns the estimated encoded size of the compact proof.\nExecute the given block.\nExecute the given closure inside a new transaction.\nThe extensions that should be used for this call.\nExtract the recorded proof.\nFinish the current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize from the given milliseconds.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new slot by calculating it from the given …\nThe name of the function that should be called.\nGenerates a proof of key ownership for the given authority …\nGenerate a set of session keys with optionally using the …\nGet the current GRANDPA authorities and weights. This …\nChecks if the given api is implemented and versions match.\nCheck if the given api is implemented and the version …\nThe Id of the signer\nGenerate inherent extrinsics. The inherent data will vary …\nInit the <code>RuntimeLogger</code>.\nInitialize a block with the given header and return the …\nInitialize a block with the given header.\nInitialize the <code>extensions</code> for the given block <code>at</code> by using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode as a compact proof with default trie layout.\nConvert into the inner type.\nConvert into an iterator over encoded trie nodes in …\nCreates a <code>MemoryDB</code> from <code>Self</code>.\nConvert into plain node vector.\nConvert the api object into the storage changes that were …\nReturns whether this is an empty proof.\nCreate an iterator over encoded trie nodes in …\nReturns the number of nodes in the proof.\nEncode round message localized to a given round and set id.\nEncode round message localized to a given round and set id …\nAll changes to the main storage.\nMerges multiple storage proofs covering potentially …\nThe internal message which has been signed.\nReturns the metadata of a runtime.\nReturns the metadata at a given version.\nReturns the supported metadata versions.\nCreate a new <code>EquivocationProof</code> for the given set id and …\nConstructs a storage proof from a subset of encoded trie …\nConstructs a storage proof from a subset of encoded trie …\nThe new authorities after the change, along with their …\nOffchain state changes to write to the offchain database.\nStarts the off-chain task for given block header.\nStarts the off-chain task for given block number.\nReturns the authority id of the equivocator.\nReturns the authority id of the equivocator.\nThe overlayed changes that are on top of the state.\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nPrevotes for target block or any block after it that …\nReturns the current active proof recorder.\nStart recording all accessed trie nodes for generating …\nThe optional proof recorder for recording storage accesses.\nRegister an <code>Extension</code> that will be accessible while …\nReturns the round number at which the equivocation …\nReturns the round number when the equivocation happened.\nRound number.\nReturns the runtime api. The returned instance will keep …\nReturns the runtime version at the given block.\nSaturating addition.\nSaturating subtraction.\nCrude and simple way to serialize the <code>RuntimeApiInfo</code> into …\nSet the <code>CallContext</code> to be used by the runtime api calls …\nReturns the set id at which the equivocation occurred.\nLocalizes the message to the given set and round and signs …\nThe signature on the message.\nReturns the slot duration for Aura.\nGet the state <code>at</code> the given block.\nSubmits an unsigned extrinsic to report an equivocation. …\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s number\nThe target block’s number.\nThe target block’s number\nThe target block’s number.\nThe target block’s number.\nTimestamp of the start of the slot.\nEncode as a compact proof with default trie layout.\nCreates a <code>MemoryDB</code> from <code>Self</code> reference.\nA transaction for the backend that contains all changes …\nChanges to the transaction index,\nThe storage root after applying the transaction.\nValidate the transaction.\nValidate the transaction.\nValidate the transaction.\nReturns the version of the runtime.\nA digest item which is usable with aura consensus.\nIf this item is an AuRa pre-digest, return the slot number\nIf this item is an Aura seal, return the signature.\nConstruct a digest item which contains the slot number\nConstruct a digest item which contains a signature on the …\nAn Aura authority identifier using Ed25519 as its crypto.\nAn Aura authority keypair using Ed25519 as its crypto.\nAn Aura authority signature using Ed25519 as its crypto.\nAuxiliary trait to extract Aura inherent data.\nThe Aura inherent identifier.\nProvides the slot duration inherent data for <code>Aura</code>.\nThe type of the Aura inherent.\nGet aura inherent data.\nReplace aura inherent data.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates the inherent data provider by calculating the slot …\nCalls <code>U::from(self)</code>.\nCreate a new instance with the given slot.\nAn Aura authority identifier using S/R 25519 as its crypto.\nAn Aura authority keypair using S/R 25519 as its crypto.\nAn Aura authority signature using S/R 25519 as its crypto.\nAll extrinsics are allowed to be included in this block.\nThe result of applying of an extrinsic.\nAll of the types related to the FRAME runtime executive.\nThe result of checking inherents.\nAll of the types related to the FRAME runtime executive.\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nConst types that can easily be used in conjuncture with <code>Get</code>…\nPrimary types used to parameterize <code>EnsureOrigin</code> and …\nPrimary types used to parameterize <code>EnsureOrigin</code> and …\nPrimary types used to parameterize <code>EnsureOrigin</code> and …\nPrimary types used to parameterize <code>EnsureOrigin</code> and …\nPrimary types used to parameterize <code>EnsureOrigin</code> and …\nPrimary types used to parameterize <code>EnsureOrigin</code> and …\nContains the error value\nAll of the types related to the FRAME runtime executive. …\nConfines the kind of extrinsics that can be included in a …\nUsed for simple fee calculation. Implementor of <code>WeightToFee</code>…\nInherent data to include in a block.\nThe version of the native runtime.\nUsed for simple fee calculation. An implementation of …\nContains the success value\nInherents are allowed to be included.\nStores the encoded <code>RuntimeMetadata</code> for the native side as …\nAll of the types related to the FRAME runtime executive.\nTypes to define your runtime version. Runtime version. …\nReturns the api version found for api with <code>id</code>.\nList of supported API “features” along with their …\nApply extrinsic outside of the block execution function.\n<code>authoring_version</code> is the version of the authorship …\nFor building genesis config. Build <code>GenesisConfig</code> from a …\nCheck if this version matches other version for authoring …\nAuthoring runtimes (<code>spec_version</code>s) that this native …\nCheck if this version matches other version for calling …\nMacro to amalgamate the runtime into <code>struct Runtime</code>.\nTypes to define your runtime version. Create a const …\n<code>Decode</code> while giving a “version hint”\nMacro to easily derive the <code>Config</code> trait of various pallet …\nActually execute all transitions for <code>block</code>.\nExecute all <code>OnRuntimeUpgrade</code> of this runtime, and return …\nReturns the state version to use for Extrinsics root.\nIs this a fatal error?\nFinalize the block - it is up the caller to ensure that …\nMacro to amalgamate the runtime into <code>struct Runtime</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the data for the requested inherent.\nGet an error out of the result.\nFor building genesis config. Get the default <code>GenesisConfig</code> …\nCheck if the given api with <code>api_id</code> is implemented and the …\nName of the implementation of the spec. This is of little …\nMacro to implement runtime APIs.\nVersion of the implementation of the specification.\nLogic that runs directly after inherent application.\nStart the execution of a particular block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an iterator over all contained errors.\nGet the number of inherents in this instance\nCreate a new instance.\nCreate a new instance.\nCreates a new instance with the given metadata blob.\nStart an offchain worker and generate extrinsics.\nIs this result ok?\nMacros to easily impl traits such as <code>Get</code> for types. Macro …\nMacros to easily impl traits such as <code>Get</code> for types. Create …\nPut data for an inherent into the internal storage.\nPut an error into the result.\nReplace the data for an inherent.\nBasic runtime version info.\nTypes to define your runtime version.\nIdentifies the different Substrate runtimes. There’ll be …\nVersion of the runtime specification.\nReturns state version to use for update.\nVersion of the system implementation used by this runtime. …\nAll existing calls (dispatchables) are fully compatible …\nExecute given block, but don’t as strict is the normal …\nExecute all Migrations of this runtime.\nCheck a given signed transaction for validity. This doesn…\nUsed for simple fee calculation. Re-exports <code>sp-weights</code> …\nThe type that is returned as result from calculation.\nThe type that is returned as result from polynomial …\nImplementor of <code>WeightToFee</code> that uses a constant multiplier.\nA list of coefficients that represent a polynomial.\nImplementor of <code>WeightToFee</code> such that it maps any unit of …\nImplementor of <code>WeightToFee</code> that maps one unit of weight to …\nThe maximal weight in all dimensions.\nAn implementation of <code>WeightToFee</code> that collects no fee.\nThe weight of database operations that the runtime can …\nMeters consumed weight and a hard limit for the maximal …\nA trait that describes the weight to fee calculation.\nOne coefficient and its position in the <code>WeightToFee</code>.\nA list of coefficients that represent a polynomial.\nA trait that describes the weight to fee calculation as …\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nCheck if the given weight can be consumed.\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nChecked <code>Weight</code> scalar division. Computes …\nCalculates how many <code>other</code> fit into <code>self</code>.\nChecked <code>Weight</code> scalar multiplication. Computes …\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nThe fractional part of the coefficient.\nThe integral part of the coefficient.\nThese constants are specific to FRAME, and the current …\nConsume some weight and defensively fail if it is over the …\nThe already consumed weight.\nThe ratio of consumed weight to the limit.\nConsume some weight and defensively fail if it is over the …\nDegree/exponent of the term.\nConstant version of Div with u64.\nEvaluate the polynomial at a specific <code>x</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe limit can ever be accrued.\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nConstant version of Mul with u64.\nTrue iff the coefficient should be interpreted as negative.\nCreates <code>Self</code> with the maximal possible limit for the …\nReturns a polynomial that describes the weight to fee …\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nReclaim the given weight.\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\nThe remaining weight that can still be consumed.\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nSaturating <code>Weight</code> scalar division. Computes …\nEvaluate the term at <code>x</code> and saturatingly amalgamate into …\nSaturating <code>Weight</code> scalar multiplication. Computes …\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nConsume the given weight after checking that it can be …\nCalculates the fee from the passed <code>weight</code>.\nCreates <code>Self</code> from a limit for the maximal consumable …\nReturn a <code>Weight</code> where all fields are zero.\nTime to execute an empty block. Calculated by multiplying …\nTime to execute a NO-OP extrinsic, for example …\nParityDB can be enabled with a feature flag, but is still …\nBy default, Substrate uses RocksDB, so this will be the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComplex storage builder stuff.\nStruct containing data needed for a storage.\nAssimilate the storage for this module into pre-existing …\nBuild the storage out of this builder.\nChildren trie storage data. Key does not include prefix, …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTop trie storage data.\nThe corresponding account-id type of <code>Signature</code>.\nThe block-number type, which should be fed into …\nThe block type, which should be fed into …\nAn ECDSA/SECP256k1 signature.\nAn Ed25519 signature.\nThe opaque block type. This is the same <code>BlockOf</code>, but it has\nA signature type compatible capably of handling multiple …\nAn Sr25519 signature.\nDefault set of signed extensions exposed from the …\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe block header.\nThe block header.\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn unchecked extrinsic type to be used in tests.\nType alias for Externalities implementation used in tests.\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nStorage backend.\nExtensions.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe function that should be called.\nThe block header.\nThe block header.\nThe block header.\nThe signature, address, number of extrinsics have come …\nState version to use during tests.\nOther helper macros from <code>frame_support</code> that help with …\nThe account ID that this can be transformed into.\nType of the signer.\nThe type which encodes the sender identity.\nThe AccountId used across the system.\nThis type can be converted into and possibly from an …\nA lookup implementation returning the <code>AccountId</code> from a …\nTrait for touching/creating an asset account with a …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nAny additional data that will go into the signed payload. …\nAll of them.\nRun the <code>try_state</code>, <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nOperation may result in account going out of existence.\nSafe mode is already entered.\nSafe mode is already exited.\nCall is already paused.\nThe message was already processed.\nCall is already unpaused.\nMeans of signature verification of an application key.\nInput that adds infinite number of zero after wrapped …\nAn “executable” piece of information, used by the …\nAdapter struct for turning an <code>OrderedMembership</code> impl into …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nSome amount of backing from a group. The precise …\nThe message data format is unknown (e.g. unrecognised …\nAn error type that indicates that the origin is invalid.\nThe balance of an account.\nThe type for currency units of the deposit.\nStatus of funds.\nImplemented by pallets, allows defining logic to run prior …\nImplements <code>VerifyExistenceProof</code> using a binary merkle tree.\nBlake2-256 Hash implementation.\nA “checkable” piece of information, used by the …\nSomething which fulfills the abstract idea of a Substrate …\nSomething that can convert a <code>BlockId</code> to a number or a hash.\nSuper trait with all the attributes for a block number.\nType of <code>BlockNumber</code> to provide.\nBlock number type.\nGet current block number\nA trait to define the build function of a genesis config …\nThe function call.\nThe type which encodes the call to be dispatched.\nType by which we can dispatch. Restricts the …\nThe call to validate\nRuntime call type, as in <code>frame_system::Config::Call</code>\nHow to unambiguously identify a call.\nThe function and pallet name of the Call.\nThe trait implemented by the overarching enumeration of …\nTrait for type that can handle incremental changes to a …\nSomething that can be checked for equality and printed out …\nExtract the digest type for a block. A “checkable” …\nReturned if <code>check</code> succeeds.\nReturned if <code>check</code> succeeds.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nA <code>TryMorph</code> implementation to reduce a scalar by a …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nTrait for things that can be clear (have no bits set). For …\nGuard type for clearing all pushed constraints from a …\n…\nSome sort of cost taken from account temporarily in order …\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nA trait for querying whether a type can be said to “…\nA trait for querying bound for the length of an …\nA trait for querying whether a type can be said to “…\nInfallible conversion trait. Generic over both source and …\nReversing infallible conversion trait. Generic over both …\nA structure that performs standard conversion using the …\nAdapter which turns a Get implementation into a Convert …\nThe message data is bad (e.g. decoding returns an error).\nThe version of a crate.\nAbstraction over a fungible assets system.\nThe currency that this schedule applies to.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait to handle errors and options when you are really …\nDefensively calculates the maximum of two values.\nDefensively calculates the minimum of two values.\nSubset of methods similar to <code>Defensive</code> that can only work …\nSubset of methods similar to <code>Defensive</code> that can only work …\nA variant of <code>Defensive</code> with the same rationale, for the …\nConstruct an object by defensively truncating an input if …\nTrait used to check whether a given validator is currently …\nShortcut to reference the <code>Info</code> type of a <code>Dispatchable</code>.\nA lazy call (module function and argument values) that can …\n“OR gate” implementation of <code>EnsureOrigin</code>, <code>Success</code> type …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nCan enqueue messages for multiple origins.\nAdapter type to transform an <code>EnqueueMessage</code> with an origin …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nA trait to ensure the inherent are before non-inherent in …\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nSome sort of check on the origin is performed by this …\n<code>EnsureOrigin</code> implementation that checks that an origin has …\nSome sort of check on the origin is performed by this …\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nAn <code>Iterator</code> over tasks of this type used as the return …\nImplementation of <code>PrivilegeCmp</code> that only checks for equal …\nAn implementation of <code>Contains</code> which contains only equal …\nContains the error value\nThe error type that gets returned when a collection can’…\nThe error type that will be returned by the functions.\nSomething that can estimate the fee of a (frame-based) …\nSomething that can estimate at which block scheduling of …\nSomething that can estimate at which block the next …\nA <code>Contains</code> implementation that contains every value.\nA <code>Contains</code> implementation that contains everything except …\nSomething that can execute a given block.\nErrors that can happen when attempting to execute an …\nSimple boolean for whether an account needs to be kept in …\nSomething that acts like an <code>Extrinsic</code>.\nType for extrinsics.\nAn extrinsic on which we can get access to call.\nImplementor is an <code>Extrinsic</code> and provides metadata about …\nIn order to pay some other (higher-level) fees.\nTrait to add a constraint onto the filter.\nGuard type for pushing a constraint to a <code>FilterStack</code> and …\nA trait for finding the author of a block header based on …\nThe resource footprint of a bunch of blobs. We assume only …\nFunds are free, as corresponding to <code>free</code> item in Balances.\nA <code>ContainsPair</code> implementation that has a <code>Contains</code> …\nConverter <code>struct</code> to use a <code>ContainsPair</code> implementation for …\nA trait to define the build function of a genesis config, …\nA trait for querying a single value from a type.\nRetrieve the backing from an object’s ref.\nGets the function index of the Call.\nGets the metadata for the Call - function name and pallet …\nGets the function name of the Call.\nImplement Get by returning Default for any type that …\nA marker trait for something that knows the type of the …\nA marker trait for something that knows the type of the …\nProvides information about a pallet’s storage versions.\nThe hasher used in the runtime.\nA simple, generic one-parameter event notifier/handler.\nHandles incoming messages for a single origin.\nAbstraction around hashing\nHeader hash type\nBlock hash type.\nThe hash type.\nSuper trait with all the attributes for a hashing output.\nHashing algorithm\nExtract the hashing type for a block.\nSomething which fulfills the abstract idea of a Substrate …\nHeader type.\nThe pallet hooks trait. This is merely an umbrella trait …\nUnique identifier of this signed extension.\nUnique numerical identifier for an instance.\nFull identification of <code>ValidatorId</code>.\nA type for converting <code>ValidatorId</code> to <code>Identification</code>.\nThe full identification of a key owner and the stash …\nSome type that is able to be collapsed into an account ID. …\nA structure that performs identity conversion.\nA lookup implementation returning the input value.\nA trait for a not-quite Linear Type that tracks an …\nThis type is generated by the <code>pallet</code> macro.\nA trait representing an incrementable type.\nAn opaque set of information attached to the transaction. …\nTrait for type that can handle the initialization of …\nA <code>Contains</code> implementation which contains all members of …\nA inspect interface for a currency whose accounts can have …\nAn instance of a pallet in the storage.\nSimple trait for providing a filter over a reference to …\nThe available weight was insufficient to execute the …\nA trait implementing integer square root.\nSee <code>Hooks::integrity_test</code>.\nTrivial utility for implementing <code>Contains</code>/<code>OrderedMembership</code>…\nA trait to check if an extrinsic is an inherent.\nDetermine if a <code>MemberId</code> is a valid member.\nSomething that can be checked to be a of sub type <code>T</code>.\nTrait to be used when types are exactly same.\nKeccak-256 Hash implementation.\nOperation must not result in the account going out of …\nThe key type expected.\nSomething which can compute and check proofs of a …\nTypes bound to this opaque keys that provide the key type …\nTrait to be used by block producing consensus engine …\nA lazy value.\nAnything that can have a <code>::len()</code> method.\nA storage price that increases linearly with the number of …\nAn identifier for a lock. Used for disambiguating …\nA currency whose accounts can have liquidity restrictions.\nTrait to handle NFT locking mechanism to ensure …\nMeans of changing one type into another in a manner …\nAn error that indicates that a lookup failed.\nThe maximum encoded size for the implementing type.\nThe maximum length of preimage we can store.\nA derivative <code>EnsureOrigin</code> implementation. It mutates the …\nThe maximum number of locks a user should have on their …\nThe maximal length any enqueued message may have.\nThe maximal length any enqueued message may have.\nMaximum size of a preimage.\nAn extension of the <code>Consideration</code> trait that allows for …\nFallible conversion trait returning an Option. Generic …\nReversing fallible conversion trait returning an Option. …\nA type that implements Display when in std environment.\nDefinition for a bi-directional, fallible conversion …\nA type that implements FromStr when in std environment.\nA type that implements Hash when in std environment.\nA type that implements Serialize when in std environment …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nExtensible conversion trait. Generic over only source …\nImplementation of <code>Morph</code> which converts between types using …\nA <code>TryMorph</code> implementation to enforce an upper limit for a …\nA negative imbalance (funds have been destroyed but none …\nThe opaque token type for an imbalance. This is returned …\n<code>EnsureOrigin</code> implementation that always fails.\nSpecial marker struct used when <code>storage_version</code> is not …\nThe <code>NodeBlock</code> type.\nNo item.\nNone of them.\nRun no checks.\nServices queues by doing nothing.\nThe call could not be found in the runtime.\nThe referenced message was not found.\nA <code>Contains</code> implementation that contains no value.\nHeader number.\nExtract the number type for a block.\nOff-chain computation trait.\nContains the success value\nSee <code>Hooks::on_finalize</code>.\nA trait that will be called at genesis.\nSee <code>Hooks::on_idle</code>.\nSee <code>Hooks::on_initialize</code>.\nThe account with the given id was reaped.\nHandler for when a new account has been created.\nPeriodically executes logic. Is not guaranteed to run …\nSee <code>Hooks::on_runtime_upgrade</code>.\nA trait which is called when the timestamp is set in the …\nHandler for when some currency “account” decreased in …\nDefines a multiplicative identity element for <code>Self</code>.\nA session handler for specific key type.\nRun only pallets who’s name matches the given list.\nOpaque data type that may be destructured into a series of …\nThe oppositely imbalanced type. They come in pairs.\nThe transport from where a message originates.\nMethods available on <code>frame_system::Config::RuntimeOrigin</code>.\nAn item of the opposite type to the <code>Self</code> on which the …\nAn unspecified error.\nThe type into which <code>A</code> is mutated.\nThe type into which <code>A</code> is mutated.\nThe output type of the product of <code>self</code> and <code>Other</code>.\nThe hash type produced.\nMessage processing was not attempted because it was not …\nAddresses a specific overweight message.\nUnique module prefix. E.g. “InstanceNMyModule” or “…\nTrait indicating that the implementing type is going to be …\nProvides information about the pallet itself and its setup …\nProvides information about the pallet itself and its setup …\nInformation regarding an instance of a pallet.\nProvide information about a bunch of pallets.\nThe caller origin, overarching type of all pallets origins.\nSimilar to <code>StorageInfoTrait</code>, a trait to give partial …\nZero-sized type used to mark things that “act like” …\nA positive imbalance (funds have been created but none …\nThe opaque token type for an imbalance. This is returned …\nShortcut to reference the <code>PostInfo</code> type of a <code>Dispatchable</code>.\nAdditional information that is returned by <code>dispatch</code>. Can …\nProvides a callback to execute logic after the all …\nProvides a callback to execute logic before the all …\nThe type that encodes information that can be passed from …\nRun the <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nProvides a callback to execute logic before the all …\nA interface for looking up preimages from their hash on …\nA interface for managing preimages to hashes on chain.\nTrait for things which can be printed from the runtime.\nSomething that can compare privileges of two origins.\nCan process messages from a specific origin.\nErrors that can happen when attempting to process a …\nThe proof of membership itself.\nThe proof type.\nA interface for looking up preimages from their hash on …\nThe resource footprint of a queue.\nThe queue is paused and no message can be executed from it.\nProvides information on paused queues.\nIn order to reserve some funds for a later return or …\nA trait that is able to provide randomness.\nRanked membership data structure.\nHandler that can deal with the swap of two members.\nAnother call is currently ongoing and prevents this call …\nMutator which reduces a scalar by a particular amount.\nMorpher to disregard the source value and replace with …\nMorpher to disregard the source value and replace with the …\nA currency where funds can be reserved from the user.\nAn identifier for a reserve. Used for disambiguating …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nRun a fixed number of them in a round robin manner.\nThe <code>RuntimeBlock</code> type.\nEvery function call from your runtime has an origin, which …\nThe origin type of the runtime, (i.e. …\nPrefix given to a storage to isolate from other storages …\nThe storage key postfix that is used to store the …\nCan put the runtime into a safe mode.\nThe error type for <code>SafeMode</code>.\nA trait to notify when the runtime enters or exits safe …\nAn item of the same type as the <code>Self</code> on which the return …\nReturn type used when we need to return one of two items, …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nMultiply and divide by a number that isn’t necessarily …\nCan service queues and execute overweight messages.\nThe signature type of the extrinsic.\nThe type of the address that signed the extrinsic.\nThe additional data that is specific to the signed …\nSomething that acts like a <code>SignaturePayload</code> of an <code>Extrinsic</code>…\nThe payload we carry for signed extrinsics.\nMeans by which a transaction may be extended. This type …\nInformation about a <code>SignedExtension</code> for the runtime …\nSigned extensions attached to this <code>Extrinsic</code>.\nEither a positive or a negative imbalance.\nType of the signer.\nA meta trait for all bit ops.\nProof used by <code>SixteenPatriciaMerkleTreeProver</code> for …\nImplements <code>VerifyExistenceProof</code> using a 16-patricia merkle …\nA trait for a set which can enumerate its members in order.\nType to lookup from.\nType to lookup from.\nThe type used to archive the stack.\nThe message could not be processed for reaching the stack …\nMeans of changing one type into another in a manner …\nMetadata about storage from the runtime.\nA trait to give information about storage.\nAn instance of a storage in a pallet.\nA shim for placing around a storage item in order to use …\nThe storage version of a pallet.\nA interface for managing preimages to hashes on chain.\nAn abstraction of a value stored within storage, but …\nA return type.\nA return type.\nIn order to tip a validator for transaction inclusion.\nIn order to pay for (system) transaction costs.\nIn order to transfer ownership.\nImplementation of <code>Morph</code> to retrieve just the first element …\nType to lookup into.\nType to lookup into.\nA general-purpose trait which defines a type of service …\nA <code>Contains</code> implementation that contains all members of …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nStorage key with read/write tracking information.\nInput that adds infinite number of zero after wrapped …\nCan pause specific transactions from being processed.\nThe error type for <code>TransactionPause</code>.\nTransform the origin of an <code>EnqueueMessage</code> via <code>C::convert</code>.\nTry and collect into a collection <code>C</code>.\nFallible conversion trait which returns the argument in …\nReversing fallible conversion trait which returns the …\nA structure that performs standard conversion using the …\nDecode the entire data under the given storage type.\nA value could not be decoded.\nA type for which some values make sense to be able to drop …")