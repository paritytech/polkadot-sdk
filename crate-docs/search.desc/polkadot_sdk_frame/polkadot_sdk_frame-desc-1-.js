searchState.loadedDescShard("polkadot_sdk_frame", 1, "A derivative <code>EnsureOrigin</code> implementation. It mutates the …\nExtensible conversion trait. Generic over only source …\nImplementation of <code>TryMorph</code> which attempts to convert …\nExecute some checks to ensure the internal state of a …\nRun the <code>try_state</code> checks.\nWhich state tests to execute.\nThe type which is returned.\nA trait for querying a single value from a type defined in …\nThis trait is intended for use within <code>VersionedMigration</code> …\nType that can be dispatched with an origin but without …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nTrait to deal with unix time.\nUnknown error.\nUnknown error.\nCall cannot be paused.\nThe message format is unsupported (e.g. old XCM version).\nSelect which checks should be run when trying a runtime …\nGet the number of variants.\nThe format version of the <code>Extrinsic</code>.\nProvide validation for unsigned extrinsics.\nType for representing validator id in a session.\nA type for converting <code>AccountId</code> to <code>ValidatorId</code>.\nImplementors of this trait provide information about …\nA trait for online node inspection in a session.\n<code>ValidatorSet</code> combined with an identification.\nTrait to get the number of variants in any enum.\nAdapter for <code>Get&lt;u32&gt;</code> to access <code>VARIANT_COUNT</code> from …\nMeans of signature verification.\nSomething that can verify the existence of some data in a …\nA trait for verifying the seal of a header and returning …\nA vesting schedule over a currency. This allows a …\nAllows a pallet to specify storage keys to whitelist …\nReasons for moving funds out of an account.\nA wrapper for any type <code>T</code> which implement encode/decode in …\nA wrapper for any type <code>T</code> which implement encode/decode in …\nThe queue wants to give up its current processing slot.\nDefines an additive identity element for <code>Self</code>.\nThe total amount of issuance in the system excluding those …\nAdd an item that would satisfy <code>contains</code>. It does not make …\nAdd a filter to the origin.\nAdd a storage read to this key.\nAdds a vesting schedule to a given account.\nAdd a storage write to this key.\nConstruct any additional data that should be in the signed …\nThe type of the <code>SignedExtension</code> additional signed data for …\nReturns the set containing all flags.\nWhether to run any checks at all.\nWhether to run any checks at all.\nExecutes all necessary logic needed prior to dispatch and …\nReturns the approval ratio (positive to total votes) for …\nThe number of members of the group that back some motion.\n<code>Some</code> if the referendum <code>index</code> can be voted on, along with …\nExtract the signer from it if a system <code>Signed</code> origin, <code>None</code> …\nExtract the signer from the message if it is a <code>Signed</code> …\nExtract a reference to the system-level <code>RawOrigin</code> if it is …\nExtract a reference to the system origin, if that’s what …\nAssimilate the storage for this module into pre-existing …\nReturn the average length of a session.\nReturn the average length of a session.\nReturns the number of positive votes for the tally.\nAmount of funds locked for <code>who</code> associated with <code>id</code>.\nSomething that should happen before runtime migrations are …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nConvert an otherwise unbounded or large value into a type …\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nThe build function is called within an externalities …\nBuild the storage using <code>build</code> inside default storage.\nReduce the total issuance by <code>amount</code> and return the …\nConsume a ticket for some <code>old</code> footprint attributable to <code>who</code>…\nGet the call of the extrinsic.\nGet a reference to the caller (<code>CallerTrait</code> impl).\nChecks if <code>add_vesting_schedule</code> would work against <code>who</code>.\nWhether this call can be paused.\nSame result as <code>reserve(who, value)</code> (but without the …\nSame result as <code>slash(who, value)</code> (but without the …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>_incoming</code> just joined the set and …\nCheck self, given an instance of Context.\nCheck self.\nPerform the equality check.\nCheck a proof of membership on-chain. Return <code>Some</code> iff the …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nMultiplies two numbers, checking for underflow or …\nRaises a value to the power of exp, returning <code>None</code> if an …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nProvides a vec of values that <code>T</code> may take.\nReturn the value of Self that is clear.\nCompare the <code>left</code> to the <code>right</code> origin.\nReturns the complement of this set of flags.\nCompute diff between new and old members; they <strong>must </strong>…\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nReturn <code>true</code> if this “contains” the pair-value <code>(a, b)</code>.\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nMake conversion.\nAttempt to convert reference of <code>A</code> into value of <code>B</code>, …\nMake conversion back.\nAttempt to convert reference of <code>B</code> into value of <code>A</code>, …\nGet the number of items in the set.\nThe number of pallets’ information that this type …\nThe number of blobs.\nConvert the given pallet <code>P</code> into its containing crate …\nVersion of the crate containing the pallet.\nVersion of the crate containing the pallet.\nCreate an ongoing majority-carries poll of given class …\nAn account was created.\nReturns the current block number.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nReduce the active issuance by some amount.\nSplit the block into header and list of extrinsics.\nDoes not alter the inner value at all, but it will log …\nExactly the same as <code>map</code>, but it prints the appropriate …\nExactly the same as <code>map</code>, but it prints the appropriate …\nDefensively map the error into another return type, but …\nDefensively map and unpack the value to something else (<code>U</code>…\nPotentially map and unpack the value to something else (<code>U</code>…\nReturns the maximum and defensively asserts that <code>other</code> is …\nReturns the minimum and defensively checks that <code>self</code> is …\nDefensively transform this result into an option, …\nDefensively transform this option to a result, mapping <code>None</code>…\nDefensively transform this option to a result, mapping <code>None</code>…\nPrelude module for all defensive traits to be imported at …\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nIncrease <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> plus <code>other</code> defensively.\nDecrement <code>self</code> by one defensively.\nIncrement <code>self</code> by one defensively.\nReturn the product of <code>self</code> and <code>other</code> defensively.\nReduce <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> minus <code>other</code> defensively.\nReturns the maximum and defensively asserts that <code>other</code> is …\nReturns the minimum and defensively checks that <code>self</code> is …\nUse <code>TryFrom</code> first and defensively fall back to truncating …\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nDemote a member to the next lower rank; demoting beyond …\nAdds up to <code>value</code> to the free balance of <code>who</code>. If <code>who</code> doesn…\nMints <code>value</code> to the free balance of <code>who</code>.\nThe deposit amount of a native currency required for …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns a reference to the digest.\nGet a mutable reference to the digest.\nReturns all disabled validators\nActually dispatch this call and return the result of it.\nDispatch this call but do not check the filter in origin.\n@return the integer division of <code>self</code> and <code>other</code>.\nConsume a ticket for some <code>old</code> footprint attributable to <code>who</code>…\nNo longer request that the data required for decoding the …\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nDrop <code>Self</code> if and only if it is equal to zero. Return <code>Err</code> …\nTypes and traits for dynamic parameters.\nThe total count of group members.\nReturns an empty set of flags.\nCreates an encoded block from the given <code>header</code> and …\nReturns the encoded data.\nReturns the length of the encoded <code>T</code>.\nEnd the given ongoing poll and return the result.\nEnqueue a single <code>message</code> from a specific <code>origin</code>.\nEnqueue multiple <code>messages</code> from a specific <code>origin</code>.\nAdds two numbers, checking for overflow.\nAdds two numbers overwriting the left hand one, checking …\nReturns <code>Ok</code> iff the account is able to make a withdrawal of …\nDivides two numbers, checking for overflow.\nDivides two numbers overwriting the left hand one, …\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nEnsure the position of inherent is correct, i.e. they are …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers overwriting the left hand one, …\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nThe same as <code>ensure_origin</code> except that Root origin will …\nRaises a value to the power of exp, returning …\nEnsure the reserved balance is equal to <code>value</code>.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers overwriting the left hand one, …\nEnsure that creating a ticket for a given account and …\nEnter safe mode for <code>duration</code> blocks.\nCalled when the runtime enters safe mode.\nEstimate the fee of this call.\nReturn an estimate of the current session progress.\nReturn the block number at which the next new session is …\nReturn the block number at which the next session rotation …\nChoose all variants except for <code>one</code>.\nExecute the given <code>block</code>.\nExecutes a message that could not be executed by …\nReturns if the storage version key for the given pallet …\nExit safe mode immediately.\nCalled when the runtime exits safe mode.\nExtend safe mode for <code>duration</code> blocks.\nChanges a balance lock (selected by <code>id</code>) so that it becomes …\nMutate <code>self</code> by extracting a new instance with at most …\nReturns a reference to the list of extrinsics.\nReturns a reference to the extrinsics root.\nReturns the preimage for a given hash. If given, <code>len</code> must …\nDetermine if a given value should be allowed through the …\nFilter the call if caller is not root, if false is …\nFind the author of a block based on the pre-runtime …\nFormats the value using the given formatter.\nReturn the state footprint of the given queue.\nReturn the state footprint of the queue.\nThe ‘free’ balance of a given account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConstruct a footprint with one item, and size equal to the …\nCreate from the given encoded <code>data</code>.\nConstruct a footprint with one item, and size equal to the …\nCast mutable reference.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct a footprint directly from <code>items</code> and <code>len</code>.\nCast reference.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns an instance of the tally given some <code>approval</code> and …\nName of the function.\nReturn the current value.\nReturn the current value.\nGet a reference to the underlying value.\nGet the item, or its default if it doesn’t yet exist; we …\nGet the decoded key with key-type ID <code>i</code>.\nGet the storage version of the given pallet from the …\nReturns <code>Some</code> <code>Backing</code> if <code>self</code> represents a …\nReturn the index of this Call.\nReturn all call indices in the same order as <code>GetCallName</code>.\nReturn a <code>CallMetadata</code>, containing function and pallet name …\nReturn the function name of the Call.\nReturn all function names in the same order as <code>GetCallIndex</code>…\nReturn all function names for the given <code>module</code>.\nReturn all module names.\nReturns the preimage for a given hash.\nGet the current prime.\nGet the raw bytes of key with key-type ID <code>i</code>.\nEnqueue a single <code>message</code> with an implied origin.\nEnqueue multiple <code>messages</code> from an implied origin.\nCheck if this key has been “read”, i.e. it exists in …\nCheck if this key has been “written”, i.e. a new value …\nProduce the hash of some byte-slice.\nReturns the hash of the header.\nReturns the hash of the block.\nProduce the hash of some codec-encodable value.\nCheck to see if all data required for the given <code>bounded</code> …\nReturns whether a preimage exists for a given hash.\nReturns a reference to the header.\nRequest that the data required for decoding the given …\nThe unique identifier of the <code>SignedExtension</code>.\nReturns the in-code storage version as specified in the …\nIncrements the value.\nConvert the given pallet <code>P</code> into its index as configured in …\nIndex of the pallet as configured in the runtime.\nIndex of the pallet as configured in the runtime.\nAdd a member to the group at the <code>min_rank()</code>.\nThe storage info of the key.\nAll of the pallets’ information that this type …\nReturns the initial value.\nInitialize the members to the given <code>members</code>.\nSet the item to something new.\nInserts the specified flags in-place.\nFind the integer square root.\nFind the integer square root, returning <code>None</code> if the number …\nCheck the integrity of this pallet’s configuration.\nSee <code>Hooks::integrity_test</code>.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform into an account.\nConvert into an account ID. This is infallible, and may …\nConsume <code>self</code> and return the caller.\nCast mutable reference.\nCast reference.\nExtract the signer from the message if it is a <code>Signed</code> …\nConvert this value amalgamated with the a secondary “sub…\nExtract the signer from the message if it is a <code>Signed</code> …\nReturns <code>true</code> if all flags are currently set.\nTrue iff no bits are set.\nReturns true if the given validator is disabled.\nReturns <code>true</code> if no flags are currently stored.\nWhether safe mode is entered.\nWhether this extrinsic is an inherent.\nCheck if the asset should be locked and prevent …\nIs the given <code>MemberId</code> a valid member?\nReturns <code>true</code> if this <code>Consideration</code> represents a no-cost …\nReturns <code>true</code> if <code>self</code> is a system <code>None</code> origin, <code>None</code> …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nWhether this queue is paused.\nWhether this call is paused.\nReturns true if the provided validator ID has been …\nReturns whether a preimage request exists for a given hash.\nReturns <code>true</code> if <code>self</code> is a system <code>Root</code> origin, <code>None</code> …\nIs this <code>Extrinsic</code> signed? If no information are available …\nReturns <code>Some(_)</code> if <code>self</code> is an instance of sub type <code>T</code>.\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nChecks if a particular instance of this <code>Task</code> variant is a …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nIncrease the total issuance by <code>amount</code> and return the …\nInspects the pallet’s state and enumerates tasks of this …\nThe key of the value to prove.\nThe key of the undecodable value.\nReturn the key-type IDs supported by this set.\nAn account was killed.\nReturns a generic measure of how late the current block is …\nReturn the length of data type.\nReturns whether a preimage exists for a given hash and if …\nAttempt a lookup.\nAttempt a lookup.\nThe major version of the crate.\nEnsure an account’s free balance equals some value; this …\nMaximum number of elements contained\nThe maximum amount of ongoing polls within any single …\nThe maximum size of key/values in the storage, or none if …\nThe maximum number of values in the storage, or none if no …\nAttempt to make conversion.\nAttempt to make conversion back.\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nReturns the metadata for this signed extension.\nMinimum number of elements contained\nThe lowest rank possible in this membership organisation.\nThe minimum balance any single account may have. This is …\nThe minor version of the crate.\nConvert the given pallet <code>P</code> into its Rust module name as …\nName of the Rust module containing the pallet.\nName of the Rust module containing the pallet.\nMake conversion.\n@return the product of <code>self</code> and <code>other</code>.\nMutate the item.\nMutate the item, removing or resetting to default value if …\nConvert the given pallet <code>P</code> into its name as configured in …\nName of the pallet as configured in the runtime.\nName of the pallet as configured in the runtime.\nThe two128 hash of name.\nTwo128 hash of name.\nCreates new header.\nCreates new block from header and extrinsics.\nCreate a ticket for the <code>new</code> footprint attributable to <code>who</code>. …\nInitializes a new tally.\nCreate a default <code>TrackedStorageKey</code>\nCreate new instance of the extrinsic.\nCreate a new instance from the given byte array.\nCreate a new instance from the given byte array.\nCreate a new instance, adding a new <code>constraint</code> onto the …\nCreate a new instance, adding a new <code>constraint</code> onto the …\nCreates a new instance of <code>Self</code>.\nCreate with system none origin and …\nReturns the complement of this set of flags.\nRequest and attempt to store the bytes of a preimage on …\nStore the bytes of a preimage on chain infallible due to …\nReturn duration since <code>SystemTime::UNIX_EPOCH</code>.\nReturns a reference to the header number.\nImplementing this function on a pallet allows you to …\nThis function is being called after every block import …\nConsume self and along with an opposite counterpart to …\nA notification for end of the session.\nReturns the storage version of the pallet as last set in …\nA validator got disabled. Act accordingly until a new …\nBlock finalization hook. This is called at the very end of …\nSee <code>Hooks::on_finalize</code>.\nSomething that should happen at genesis.\nThe given validator set will be used for the genesis …\nSee <code>Hooks::on_idle</code>.\nHook to consume a block’s idle time. This will run when …\nSee <code>Hooks::on_initialize</code>.\nBlock initialization hook. This is called at the very …\nThe account with the given id was reaped.\nA new account <code>who</code> has been registered.\nSession set has changed; act appropriately. Note that this …\nActually handle a non-zero imbalance. You probably want to …\nCode to execute every now and then at the beginning of the …\nA hook to run logic after inherent application.\nSee <code>Hooks::on_runtime_upgrade</code>.\nCalled within <code>VersionedMigration</code> to execute the actual …\nHook executed when a code change (aka. a “runtime upgrade…\nCalled when the timestamp is set.\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nThe ordered Patricia tree root of the given <code>input</code>.\nVerify a proof of ownership for the keys.\nThe number of pages in the queue (including overweight …\nProduce a pair of imbalances that cancel each other out …\nName of the pallet to which the function belongs.\nEncoded string of pallet name.\nPrefix of a pallet to isolate it from other pallets.\nReturn the prefix hash of pallet instance.\nCreate new implementations of the <code>Get</code> trait.\nReturns a reference to the parent hash.\nThe patch version of the crate.\nPause this call immediately.\nThe raw value of self.\nConvert the given <code>bounded</code> instance back into its original …\nCreate a <code>Bounded</code> instance based on the <code>hash</code> and <code>len</code> of the …\nRemoves the most recently pushed, and not-yet-popped, …\nDo any post-flight stuff for an extrinsic.\nCalled after all inherents were applied.\nCalled after all transactions were applied but before …\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nExecute some post-checks after a runtime upgrade.\nWhether the pre- and post-upgrade checks are selected.\nDo any pre-flight stuff for a signed transaction.\nValidate the call right before dispatch.\nDo any pre-flight stuff for a unsigned transaction.\nCalled before all inherents were applied but after …\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nExecute some pre-checks prior to a runtime upgrade.\nThe prefix of the storage. All keys after the prefix are …\nReturn the prefix hash of instance.\nReturns whether a preimage request exists for a given hash.\nPrint the object.\nProcess the given message, using no more than the …\nPromote a member to the next higher rank.\nThe encoded nodes to prove the existence of the data under …\nProve membership of a key owner in the current block-state.\nAdd a new <code>constraint</code> onto the filter.\nPut this storage version for the given pallet into the …\nGet the most recently determined random seed, along with …\nGet the basic random seed.\nReturn the rank of the given ID, or <code>None</code> if they are not a …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nThe raw value.\nIncrease the active issuance by some amount, up to the …\nThe number of pages that are ready (not yet processed and …\nConvert the given <code>bounded</code> value back into its original …\nReturns an instance of the tally representing a rejecting …\n@return the modulo remainder of <code>self</code> and <code>other</code>.\nHow many more blocks safe mode will stay entered.\nRemove the item or otherwise replace it with its default …\nRemoves the specified flags in-place.\nRemove an existing lock.\nRemove a vesting schedule for a given account.\nMove all the named reserved balance of one account into …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nRequest that someone report a preimage. Providers use this …\nRequest that someone report a preimage. Providers use this …\nMoves <code>value</code> from balance to reserved balance.\nMoves <code>value</code> from balance to reserved balance.\nThe amount of the balance of a given account that is …\nThe amount of the balance of a given account that is …\nReset origin filters to default one, i.e …\nSimilar to deposit_creating, only accepts a …\nSimilar to deposit_creating, only accepts a …\nRestore the filter from a previous <code>take</code> operation.\nCreate with system root origin and …\nPerforms the work for this particular <code>Task</code> variant.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nTraits and associated utilities for scheduling …\nService all message queues in some fair manner.\nReturns current session index.\nInserts or removes the specified flags depending on the …\nUtility function only to be used in benchmarking scenarios …\nReplace the caller with caller from the other origin\nSets the extrinsic root.\nCreate a new balance lock on account <code>who</code>.\nSet the new members; they <strong>must already be sorted</strong>. This …\nSets the header number.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets the parent hash.\nSet the prime member.\nSets the state root.\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nSimilar to withdraw, only accepts a <code>PositiveImbalance</code> and …\nA function that should be called before any use of the …\nCheck if an account for a given asset should be touched to …\nCreate with system signed origin and …\nThe total size of the blobs in bytes.\nDeducts up to <code>value</code> from the combined balance of <code>who</code>, …\nSlash all the reserved balance, returning the negative …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nGet a vector of all members in the set, ordered.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nReturns a reference to the state root.\nThe storage footprint of the queue (including overweight …\nReturns the storage key for a storage version.\nEncoded string of storage name.\nReturn the prefix hash of storage instance.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nReturns the approval ratio (positive to total votes) for …\nMember <code>old</code> was swapped with <code>new</code> at <code>rank</code>.\nAny remaining unprocessed messages should happen only …\nAny remaining unprocessed messages should happen only …\nReturns the symmetric difference between the flags in <code>self</code> …\nClear the filter, returning a value that may be used later …\nA unique value representing this <code>Task</code> within the current …\nContains the <code>Task</code> trait, which defines a general-purpose …\nConvert the given <code>block_id</code> to the corresponding block hash.\nConvert the given <code>block_id</code> to the corresponding block …\nToggles the specified flags in-place.\nTraits for working with tokens and their associated …\nThe combined balance of <code>who</code>.\nThe total amount of issuance in the system.\nCreate an account for <code>who</code> of the <code>asset</code> with a deposit …\nTransfer some liquid free balance to another staker.\nThe Patricia tree root of the given mapping.\nConsume self and try to collect the results into <code>C</code>.\nAttempt to make conversion. If returning Result::Err, the …\nAttempt to make conversion back. If returning Result::Err, …\nTry to decode the wrapped type from the inner <code>data</code>.\nDecode the entire data under the given storage, returning …\nDrop an instance cleanly. Only works if its value …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nConvert into an account ID, checking that all bytes of the …\nSame as <code>into_sub_account_truncating</code>, but ensuring that all …\nMake conversion.\nMaybe mutate the item only if an <code>Ok</code> value is returned from …\nReturns <code>Ok</code> if <code>self</code> is <code>None</code>, otherwise returns <code>Err</code> with <code>self</code>…\nThe expected and default behavior of this method is to …\nPerform the origin check.\nPerform the origin check, returning the origin value if …\nPerform the origin check, returning the origin value if …\nThe same as <code>try_origin</code> except that Root origin will always …\nReturns <code>Ok</code> with the inner value of <code>Other</code> if <code>self</code> is that, …\nReturns <code>Ok</code> with the inner value of <code>Same</code> if <code>self</code> is that, …\nExecute the state checks.\nExecute the sanity checks of this pallet, per block.\nWhether the try-state checks are selected.\nAttempt to get an outer origin capable of passing …\nAttempt to get an outer origin capable of passing …\nReturns an outer origin capable of passing <code>try_origin</code> …\nDo something with the caller, consuming self but returning …\nThe type of the <code>SignedExtension</code>.\nReturns an instance of the tally representing a unanimous …\nBlindly check self.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nConvert from Target back to Source.\nAttempt to clear a previously noted preimage. Exactly the …\nClear a previously noted preimage. This is infallible and …\nUnpause this call immediately.\nCancel a previous preimage request.\nCancel a previous preimage request.\nMoves up to <code>value</code> from reserved balance to free balance. …\nUnreserve all the named reserved balances, returning …\nMoves up to <code>value</code> from reserved balance to free balance. …\nOptionally consume an old ticket and alter the footprint, …\nChecks to see if this is a valid <em>transaction</em>. It returns …\nValidate a signed transaction for the transaction queue.\nReturn the validity of the call\nValidate an unsigned transaction for the transaction queue.\nReturns the active set of validators.\nThe value for that the existence is proved.\nVerify a signature.\nVerify a signature. Return <code>true</code> if signature is valid for …\nVerify the given <code>proof</code>.\nVerify a header and return the author, if any.\nGet the amount that is currently being vested and cannot …\nReturns the weight of executing this <code>Task</code>.\nWhitelist this key.\nReturns a <code>Vec&lt;TrackedStorageKey&gt;</code> indicating the storage …\nRemoves some free balance from <code>who</code> account for <code>reason</code> if …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nCreate a <code>Positive</code> instance of <code>Self</code> whose value is zero.\nCreate a new instance which only contains zeroes as input.\nA trait to handle errors and options when you are really …\nSubset of methods similar to <code>Defensive</code> that can only work …\nSubset of methods similar to <code>Defensive</code> that can only work …\nDoes not alter the inner value at all, but it will log …\nExactly the same as <code>map</code>, but it prints the appropriate …\nExactly the same as <code>map</code>, but it prints the appropriate …\nDefensively map the error into another return type, but …\nDefensively map and unpack the value to something else (<code>U</code>…\nPotentially map and unpack the value to something else (<code>U</code>…\nDefensively transform this result into an option, …\nDefensively transform this option to a result, mapping <code>None</code>…\nDefensively transform this option to a result, mapping <code>None</code>…\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nThe aggregated key-value type of a dynamic parameter store.\nKey of a dynamic parameter.\nThe aggregated key type.\nA dynamic parameter store across a concrete KV type.\nAllows to create a <code>ParameterStore</code> from a …\nA dynamic parameter store across an aggregated KV type.\nThe value that the key is parametrized with.\nThe aggregated value type.\nAn opaque representation of <code>Self::Value</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the value of a parametrized key.\nGet the value of a parametrized key.\nCalls <code>U::from(self)</code>.\nSplit the aggregated key-value type into its parts.\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nAfter specified number of blocks.\nA type that can be used as a scheduler.\nAt specified block.\nThe preimage for this hash was known but could not be …\nThe dispatch time of a scheduled task.\nAnything of this value or lower will definitely be …\nThe highest priority. We invert the value so that normal …\nThe hash of the encoded value which this value represents.\nThe lowest priority. Most stuff should be around here.\nError type for <code>MaybeHashed::lookup</code>.\nType representing an encodable value or the hash of the …\nA type that can be used as a scheduler.\nInformation relating to the period of a scheduled task. …\nPriority with which a call is scheduled. It’s just a …\nA call of this hash was not known.\nThe value itself.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nA type that can be used as a scheduler.\nA type that can be used as a scheduler.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nA type that can be used as a scheduler.\nA means of expressing a call by the hash of its encoded …\nA means of expressing a call by the hash of its encoded …\nA type that can be used as a scheduler.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nA type that can be used as a scheduler.\nThe hasher used in the runtime.\nThe hasher used in the runtime.\nA type that can be used as a scheduler.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn <code>Iterator</code> over tasks of this type used as the return …\nA general-purpose trait which defines a type of service …\nChecks if a particular instance of this <code>Task</code> variant is a …\nInspects the pallet’s state and enumerates tasks of this …\nPerforms the work for this particular <code>Task</code> variant.\nA unique value representing this <code>Task</code> within the current …\nReturns the weight of executing this <code>Task</code>.\nOperation may result in account going out of existence.\nSimple amalgamation trait to collect together properties …\nThe type for the kinds of asset that are going to be paid.\nSimple amalgamation trait to collect together properties …\nThe type by which we measure units of the currency in …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nDeposit couldn’t happen due to the amount being too low. …\nThe type by which we identify the beneficiaries to whom a …\nThe operation may be considered successful even if less …\nAccount cannot receive the assets.\nDeposit cannot happen since the account cannot be created …\nConverts an asset balance value into balance.\nConverts a balance value into an asset balance.\nAdapter for a rank-to-salary <code>Convert</code> implementation into a …\nOne of a number of consequences of withdrawing a fungible …\nAn error which could be returned by the Pay type\nThe operation should must either proceed either exactly …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nPayment failed. It may safely be retried.\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are under the normal conditions.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nNot enough of the funds in the account are available for …\nRetrieve the salary for a member of a particular rank.\nAn identifier given to an individual payment.\nAn identifier and balance.\nA trait for a not-quite Linear Type that tracks an …\nPayment is in progress. Nothing to report yet.\nOperation must not result in the account going out of …\nTrait to handle NFT locking mechanism to ensure …\nThe funds will be minted into the system, increasing total …\nFunds are on hold.\nThe oppositely imbalanced type. They come in pairs.\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nThe operation should execute with regular privilege.\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nAccount balance would reduce to zero, potentially …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nThe mode under which usage of funds may be restricted.\nAccount continued in existence.\nAccount continued in existence.\nPayment happened successfully.\nThere has been an underflow in the system. This is …\nImplements <code>ConversionFromAssetBalance</code>, enabling a 1:1 …\nImplements <code>ConversionFromAssetBalance</code>, allowing for a 1:1 …\nPayment status is unknowable. It may already have reported …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nSome amount for this item.\nCheck how a payment has proceeded. <code>id</code> must have been …\nThe Currency trait and associated types.\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsures that a conversion for the <code>asset_id</code> will be …\nEnsure that a call to pay with the given parameters will …\nMutate <code>self</code> by extracting a new instance with at most …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe traits for dealing with a single fungible token class …\nThe traits for <em>sets</em> of <code>fungible</code> tokens and any associated …\nRetrieve the salary for a given rank. The account ID is …\nAn identifier for this item.\nThe imbalance trait type and its associates, which handles …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the type into a <code>Result</code> with <code>DispatchError</code> as the …\nConvert the type into a <code>Result</code> with <code>TokenError</code> as the …\nCheck if the asset should be locked and prevent …\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nTraits for dealing with a single non-fungible collection …\nTraits for dealing with a single non-fungible item.\nTraits for dealing with multiple collections of …\nTraits for dealing with multiple collections of …\nConsume self and along with an opposite counterpart to …\nThe Pay trait and associated types.\nMake a payment and return an identifier for later …\nThe raw value of self.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nThe balance of an account.\nAbstraction over a fungible assets system.\nThe currency that this schedule applies to.\nA inspect interface for a currency whose accounts can have …\nAn identifier for a lock. Used for disambiguating …\nA currency whose accounts can have liquidity restrictions.\nThe maximum number of locks a user should have on their …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe opaque token type for an imbalance. This is returned …\nThe opaque token type for an imbalance. This is returned …\nA currency where funds can be reserved from the user.\nAn identifier for a reserve. Used for disambiguating …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nA vesting schedule over a currency. This allows a …\nThe total amount of issuance in the system excluding those …\nAdds a vesting schedule to a given account.\nAmount of funds locked for <code>who</code> associated with <code>id</code>.\nReduce the total issuance by <code>amount</code> and return the …\nChecks if <code>add_vesting_schedule</code> would work against <code>who</code>.\nSame result as <code>reserve(who, value)</code> (but without the …\nSame result as <code>slash(who, value)</code> (but without the …\nReduce the active issuance by some amount.\nAdds up to <code>value</code> to the free balance of <code>who</code>. If <code>who</code> doesn…\nMints <code>value</code> to the free balance of <code>who</code>.\nReturns <code>Ok</code> iff the account is able to make a withdrawal of …\nEnsure the reserved balance is equal to <code>value</code>.\nChanges a balance lock (selected by <code>id</code>) so that it becomes …\nThe ‘free’ balance of a given account.\nIncrease the total issuance by <code>amount</code> and return the …\nEnsure an account’s free balance equals some value; this …\nThe minimum balance any single account may have. This is …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nRemove an existing lock.\nRemove a vesting schedule for a given account.\nMove all the named reserved balance of one account into …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves <code>value</code> from balance to reserved balance.\nMoves <code>value</code> from balance to reserved balance.\nThe amount of the balance of a given account that is …\nThe amount of the balance of a given account that is …\nSimilar to deposit_creating, only accepts a …\nSimilar to deposit_creating, only accepts a …\nCreate a new balance lock on account <code>who</code>.\nSimilar to withdraw, only accepts a <code>PositiveImbalance</code> and …\nDeducts up to <code>value</code> from the combined balance of <code>who</code>, …\nSlash all the reserved balance, returning the negative …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nThe combined balance of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer some liquid free balance to another staker.\nMoves up to <code>value</code> from reserved balance to free balance. …\nUnreserve all the named reserved balances, returning …\nMoves up to <code>value</code> from reserved balance to free balance. …\nGet the amount that is currently being vested and cannot …\nRemoves some free balance from <code>who</code> account for <code>reason</code> if …\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nSpecial dust type which can be type-safely converted into …\nConsideration method using a <code>fungible</code> balance frozen as …\nHandler for when an imbalance gets dropped. This could …\nConsideration method using a <code>fungible</code> balance frozen as …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nBasic consideration method using a <code>fungible</code> balance frozen …\nBasic consideration method using a <code>fungible</code> balance placed …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing freezes for …\nTrait for mutating a fungible asset which can be placed on …\nRepresents the native asset of the current chain.\nCriterion for <code>UnionOf</code> where a set for …\nThe <code>NativeOrWithId</code> enum classifies an asset as either …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nType to combine some <code>fungible::*</code> and <code>fungibles::*</code> …\nRepresents an asset identified by its underlying <code>AssetId</code>.\nThe total amount of issuance in the system excluding those …\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code>, burning the tokens.\nAttempt to decrease the balance of <code>who</code> which is held for …\nReturns <code>true</code> if the balance of <code>who</code> may be increased by …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Success</code> if the balance of <code>who</code> may be decreased by …\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nDecrease the amount which is being frozen for a particular …\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome something with the imbalance’s value which is being …\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Unbalanced::handle_dust</code>…\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nIncrease the amount which is being frozen for a particular …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nHold or release funds in the account of <code>who</code> to bring the …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nRemove an existing freeze.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nTest the <code>burn_from</code> function for successfully burning …\nTest the <code>burn_from</code> function for handling insufficient …\nTest the <code>burn_from</code> function for successfully burning an …\nTest the can_deposit function for returning a minimum …\nTest the can_deposit function for returning an overflow …\nTest the can_deposit function for returning a success …\nTest the can_withdraw function for returning a low balance …\nTest the can_withdraw function for withdrawal resulting in …\nTest the can_withdraw function for returning a success …\nTest the <code>mint_into</code> function for handling balances below …\nTest the <code>mint_into</code> function for overflow prevention.\nTest the <code>mint_into</code> function for successful token minting.\nTest the reducible_balance function with …\nTest the reducible_balance function with …\nTest the <code>restore</code> function for handling restoration below …\nTest the <code>restore</code> function for handling balance overflow.\nTest the <code>restore</code> function for successful restoration.\nTest the set_balance function for successful burning.\nTest the set_balance function for successful minting.\nTest the <code>shelve</code> function for handling insufficient funds.\nTest the <code>shelve</code> function for successful shelving.\nTest the <code>transfer</code> function with <code>Preservation::Expendable</code> …\nTest the transfer function with Preservation::Expendable …\nTest the <code>transfer</code> function with <code>Preservation::Protect</code> and …\nTest the <code>transfer</code> function for a successful transfer.\nTests <code>Balanced::deposit</code>.\nTests issuing and resolving <code>Credit</code> imbalances with …\nTests <code>Balanced::pair</code>.\nTests issuing and resolving <code>Debt</code> imbalances with …\nTests <code>Balanced::withdraw</code>.\nTest <code>Mutate::burn_from</code> for successfully burning tokens …\nTest <code>Mutate::burn_from</code> handling of insufficient funds when …\nTest <code>Mutate::burn_from</code> for successfully burning an exact …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> works correctly returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Mutate::mint_into</code> for handling balances below the …\nTest <code>Mutate::mint_into</code> for overflow prevention.\nTest <code>Mutate::mint_into</code> for successful token minting.\nTest <code>Inspect::reducible_balance</code> returns the full account …\nTests <code>Inspect::reducible_balance</code> returns <code>Inspect::balance</code> -\nTest <code>Mutate::restore</code> handles restoration below the minimum …\nTest <code>Mutate::restore</code> handles balance overflow.\nTest <code>Mutate::restore</code> for successful restoration.\nTest <code>Mutate::set_balance</code> burns balances correctly.\nTest <code>Mutate::set_balance</code> mints balances correctly.\nTest <code>Mutate::shelve</code> handles insufficient funds correctly.\nTest <code>Mutate::shelve</code> for successful shelving.\nTest calling <code>Mutate::transfer</code> with <code>Preservation::Expendable</code>…\nTest calling <code>Mutate::transfer</code> function with …\nTest <code>Mutate::transfer</code> with <code>Preservation::Protect</code> and …\nTest <code>Mutate::transfer</code> for a successful transfer.\nTests <code>Unbalanced::deactivate</code> and <code>Unbalanced::reactivate</code>.\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::increase_balance</code>.\nTests <code>Unbalanced::set_total_issuance</code>.\nTests <code>Unbalanced::write_balance</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing freezes for …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing freeze.\nTrait for slashing a fungible asset which can be place on …\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code> which is held for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nHold or release funds in the account of <code>who</code> to bring the …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nMeans of identifying one asset class from another.\nMeans of identifying one asset class from another.\nScalar type for representing deposit balance of an account.\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nTrait for providing the ability to create new fungible …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nTrait for providing the ability to destroy existing …\nSpecial dust type which can be type-safely converted into …\nHandler for when an imbalance gets dropped. This could …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a set of …\nInterface for enumerating assets in existence or owned by …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing locks to …\nTrait for mutating a fungible asset which can be placed on …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nTrait for refunding the existence deposit of a target …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nType to combine two <code>fungibles::*</code> implementations into one …\nThe total amount of issuance in the system excluding those …\nInspect and Mutate traits for Asset approvals\nReturns <code>true</code> if an <code>asset</code> exists.\nReturns an iterator of the collections in existence.\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nReturns <code>true</code> if the <code>asset</code> balance of <code>who</code> may be increased …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Failed</code> if the <code>asset</code> balance of <code>who</code> may not be …\nCreate a new fungible asset.\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nDecrease the amount which is being frozen for a particular …\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nReturns the amount of account deposit and depositor …\nDestroy all accounts associated with a given asset. …\nDestroy all approvals associated with a given asset up to …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nMutate <code>self</code> by extracting a new instance with at most …\nComplete destroying asset and unreserve currency. …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nIncrease the amount which is being frozen for a particular …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nInspect and Mutate traits for Asset metadata\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nReturn the deposit (if any) of a target asset account.\nRelease up to <code>amount</code> held funds in an account.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nInspect traits for Asset roles\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nStart the destruction an existing fungible asset.\nRemove an existing lock.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing locks to …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing lock.\nTrait for slashing a fungible asset which can be place on …\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nTrait for resetting the team configuration of an existing …\nReset the team for the asset with the given <code>id</code>.\nA trait for a not-quite Linear Type that tracks an …\nA negative imbalance (funds have been destroyed but none …\nHandler for when some currency “account” decreased in …\nThe oppositely imbalanced type. They come in pairs.\nA positive imbalance (funds have been created but none …\nResolves received asset credit to account <code>A</code>, implementing …\nResolves received asset credit to account <code>A</code>, implementing …\nEither a positive or a negative imbalance.\nSplit an unbalanced amount two ways between a common …\nTry to merge two imbalances.\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nMutate <code>self</code> by extracting a new instance with at most …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nConsume self and along with an opposite counterpart to …\nActually handle a non-zero imbalance. You probably want to …\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nThe raw value of self.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible set of items which can …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>nonfungibles</code> trait implementation into a …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for transferring and controlling the transfer of …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nClear attribute of <code>item</code>’s <code>key</code>.\nClear the metadata of an <code>item</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code>’s …\nReturns the custom attribute value of <code>item</code> corresponding …\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nSet the metadata <code>data</code> of an <code>item</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nReturns the system attribute value of <code>item</code> corresponding …\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible sets of items which can …\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nDestroy an existing fungible item.\nProvide the appropriate witness data needed to destroy an …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nTrait for providing an interface to check the account’s …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for trading non-fungible items.\nTrait for transferring non-fungible sets of items.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nAllows <code>buyer</code> to buy an <code>item</code> of <code>collection</code> if it’s up for …\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nClear attribute of <code>item</code> of <code>collection</code>’s <code>key</code>.\nClear attribute of <code>collection</code>’s <code>key</code>.\nClear the metadata of a <code>collection</code>.\nClear the metadata of an <code>item</code> of <code>collection</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code> of …\nAttempt to clear the strongly-typed attribute of <code>collection</code>…\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nReturns the custom attribute value of <code>item</code> of <code>collection</code> …\nDestroy an existing fungible item.\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nProvide the appropriate witness data needed to destroy an …\nReturns <code>true</code> if <code>who</code> is the admin of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the freezer of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the issuer of the <code>collection</code>.\nReturns the item price of <code>item</code> or <code>None</code> if the item is not …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nSet the metadata <code>data</code> of a <code>collection</code>.\nSet the metadata <code>data</code> of an <code>item</code> of <code>collection</code>.\nSets the item price for <code>item</code> to make it available for sale.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nReturns the system attribute value of <code>item</code> of <code>collection</code> …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nThe type by which we identify the beneficiaries to whom a …\nAn error which could be returned by the Pay type\nPayment failed. It may safely be retried.\nAn identifier given to an individual payment.\nPayment is in progress. Nothing to report yet.\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> for assets which makes a …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nPayment happened successfully.\nPayment status is unknowable. It may already have reported …\nCheck how a payment has proceeded. <code>id</code> must have been …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMake a payment and return an identifier for later …")