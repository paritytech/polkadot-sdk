searchState.loadedDescShard("pallet_statement", 0, "Supporting pallet for the statement store.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nCost of data byte used for priority calculation.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency which is used to calculate account limits.\nThe <code>Event</code> enum of this pallet\nMaximum data bytes allowed per account.\nMaximum number of statements allowed per account.\nMinimum data bytes allowed per account.\nMinimum number of statements allowed per account.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new statement is submitted\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nMin balance for priority statements.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuto-generated docs-only module listing all (public and …\nSubmit a statement event. The statement will be picked up …\nValidate a statement against current state. This is …")