searchState.loadedDescShard("frame_support", 1, "Slash all the reserved balance, returning the negative …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nThe combined balance of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer some liquid free balance to another staker.\nMoves up to <code>value</code> from reserved balance to free balance. …\nUnreserve all the named reserved balances, returning …\nUnreserve all the named reserved balances, returning …\nMoves up to <code>value</code> from reserved balance to free balance. …\nGet the amount that is currently being vested and cannot …\nRemoves some free balance from <code>who</code> account for <code>reason</code> if …\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nSpecial dust type which can be type-safely converted into …\nConsideration method using a <code>fungible</code> balance frozen as …\nHandler for when an imbalance gets dropped. This could …\nConsideration method using a <code>fungible</code> balance frozen as …\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a …\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nBasic consideration method using a <code>fungible</code> balance frozen …\nBasic consideration method using a <code>fungible</code> balance placed …\nTrait for providing a basic fungible asset.\nRepresents the native asset of the current chain.\nCriterion for <code>UnionOf</code> where a set for …\nThe <code>NativeOrWithId</code> enum classifies an asset as either …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nA fungible token class where the balance can be set …\nType to combine some <code>fungible::*</code> and <code>fungibles::*</code> …\nRepresents an asset identified by its underlying <code>AssetId</code>.\nThe total amount of issuance in the system excluding those …\nThe total amount of issuance in the system excluding those …\nGet the balance of <code>who</code> which does not include funds which …\nAttempt to decrease the balance of <code>who</code>, burning the tokens.\nAttempt to decrease the balance of <code>who</code>, burning the tokens.\nReturns <code>true</code> if the balance of <code>who</code> may be increased by …\nReturns <code>Success</code> if the balance of <code>who</code> may be decreased by …\nReduce the active issuance by some amount.\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance of <code>who</code> by <code>amount</code>.\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome something with the imbalance’s value which is being …\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Unbalanced::handle_dust</code>…\nCreate some dust and handle it with <code>Unbalanced::handle_dust</code>…\nThe traits for putting holds within a single fungible …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance of <code>who</code> by <code>amount</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nIncrease the total issuance by <code>amount</code> and return the …\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nReduce the total issuance by <code>amount</code> and return the …\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nSimple infallible function to force an account to have a …\nSimple infallible function to force an account to have a …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nGet the total amount of funds whose ultimate beneficial …\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer funds from one account into another.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nTest the <code>burn_from</code> function for successfully burning …\nTest the <code>burn_from</code> function for handling insufficient …\nTest the <code>burn_from</code> function for successfully burning an …\nTest the can_deposit function for returning a minimum …\nTest the can_deposit function for returning an overflow …\nTest the can_deposit function for returning a success …\nTest the can_withdraw function for returning a low balance …\nTest the can_withdraw function for withdrawal resulting in …\nTest the can_withdraw function for returning a success …\nTest the <code>mint_into</code> function for handling balances below …\nTest the <code>mint_into</code> function for overflow prevention.\nTest the <code>mint_into</code> function for successful token minting.\nTest the reducible_balance function with …\nTest the reducible_balance function with …\nTest the <code>restore</code> function for handling restoration below …\nTest the <code>restore</code> function for handling balance overflow.\nTest the <code>restore</code> function for successful restoration.\nTest the set_balance function for successful burning.\nTest the set_balance function for successful minting.\nTest the <code>shelve</code> function for handling insufficient funds.\nTest the <code>shelve</code> function for successful shelving.\nTest the <code>transfer</code> function with <code>Preservation::Expendable</code> …\nTest the transfer function with Preservation::Expendable …\nTest the <code>transfer</code> function with <code>Preservation::Protect</code> and …\nTest the <code>transfer</code> function for a successful transfer.\nTests <code>Balanced::deposit</code>.\nTests issuing and resolving <code>Credit</code> imbalances with …\nTests <code>Balanced::pair</code>.\nTests issuing and resolving <code>Debt</code> imbalances with …\nTests <code>Balanced::withdraw</code>.\nTest <code>Mutate::burn_from</code> for successfully burning tokens …\nTest <code>Mutate::burn_from</code> handling of insufficient funds when …\nTest <code>Mutate::burn_from</code> for successfully burning an exact …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> works correctly returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Mutate::mint_into</code> for handling balances below the …\nTest <code>Mutate::mint_into</code> for overflow prevention.\nTest <code>Mutate::mint_into</code> for successful token minting.\nTest <code>Inspect::reducible_balance</code> returns the full account …\nTests <code>Inspect::reducible_balance</code> returns <code>Inspect::balance</code> -\nTest <code>Mutate::restore</code> handles restoration below the minimum …\nTest <code>Mutate::restore</code> handles balance overflow.\nTest <code>Mutate::restore</code> for successful restoration.\nTest <code>Mutate::set_balance</code> burns balances correctly.\nTest <code>Mutate::set_balance</code> mints balances correctly.\nTest <code>Mutate::shelve</code> handles insufficient funds correctly.\nTest <code>Mutate::shelve</code> for successful shelving.\nTest calling <code>Mutate::transfer</code> with <code>Preservation::Expendable</code>…\nTest calling <code>Mutate::transfer</code> function with …\nTest <code>Mutate::transfer</code> with <code>Preservation::Protect</code> and …\nTest <code>Mutate::transfer</code> for a successful transfer.\nTests <code>Unbalanced::deactivate</code> and <code>Unbalanced::reactivate</code>.\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::increase_balance</code>.\nTests <code>Unbalanced::set_total_issuance</code>.\nTests <code>Unbalanced::write_balance</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing freezes for …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing freeze.\nTrait for slashing a fungible asset which can be place on …\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code> which is held for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nHold or release funds in the account of <code>who</code> to bring the …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nMeans of identifying one asset class from another.\nMeans of identifying one asset class from another.\nScalar type for representing deposit balance of an account.\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for providing the ability to create new fungible …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nTrait for providing the ability to destroy existing …\nSpecial dust type which can be type-safely converted into …\nHandler for when an imbalance gets dropped. This could …\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a set of …\nInterface for enumerating assets in existence or owned by …\nTrait for providing a basic fungible asset.\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nTrait for refunding the existence deposit of a target …\nA fungible token class where the balance can be set …\nType to combine two <code>fungibles::*</code> implementations into one …\nThe total amount of issuance in the system excluding those …\nThe total amount of issuance in the system excluding those …\nInspect and Mutate traits for Asset approvals\nReturns <code>true</code> if an <code>asset</code> exists.\nReturns an iterator of the collections in existence.\nGet the balance of <code>who</code> which does not include funds which …\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nReturns <code>true</code> if the <code>asset</code> balance of <code>who</code> may be increased …\nReturns <code>Failed</code> if the <code>asset</code> balance of <code>who</code> may not be …\nCreate a new fungible asset.\nReduce the active issuance by some amount.\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance of <code>who</code> by <code>amount</code>.\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nReturns the amount of account deposit and depositor …\nDestroy all accounts associated with a given asset. …\nDestroy all approvals associated with a given asset up to …\nMutate <code>self</code> by extracting a new instance with at most …\nComplete destroying asset and unreserve currency. …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nThe traits for putting holds within a single fungible …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance of <code>who</code> by <code>amount</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nIncrease the total issuance by <code>amount</code> and return the …\nInspect and Mutate traits for Asset metadata\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nReturn the deposit (if any) of a target asset account.\nReduce the total issuance by <code>amount</code> and return the …\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nInspect traits for Asset roles\nSimple infallible function to force an account to have a …\nSimple infallible function to force an account to have a …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nStart the destruction an existing fungible asset.\nGet the total amount of funds whose ultimate beneficial …\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer funds from one account into another.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing locks to …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing lock.\nTrait for slashing a fungible asset which can be place on …\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nTrait for resetting the team configuration of an existing …\nReset the team for the asset with the given <code>id</code>.\nA trait for a not-quite Linear Type that tracks an …\nA negative imbalance (funds have been destroyed but none …\nHandler for when some currency “account” decreased in …\nThe oppositely imbalanced type. They come in pairs.\nA positive imbalance (funds have been created but none …\nResolves received asset credit to account <code>A</code>, implementing …\nResolves received asset credit to account <code>A</code>, implementing …\nEither a positive or a negative imbalance.\nSplit an unbalanced amount two ways between a common …\nTry to merge two imbalances.\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nDrop <code>Self</code> if and only if it is equal to zero. Return <code>Err</code> …\nMutate <code>self</code> by extracting a new instance with at most …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nConsume self and along with an opposite counterpart to …\nActually handle a non-zero imbalance. You probably want to …\nActually handle a non-zero imbalance. You probably want to …\nHandler for some imbalance. Infallible.\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nHandler for some imbalances. The different imbalances …\nThe raw value of self.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nCreate a <code>Positive</code> instance of <code>Self</code> whose value is zero.\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible set of items which can …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>nonfungibles</code> trait implementation into a …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for transferring and controlling the transfer of …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nClear attribute of <code>item</code>’s <code>key</code>.\nClear the metadata of an <code>item</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code>’s …\nReturns the custom attribute value of <code>item</code> corresponding …\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nSet the metadata <code>data</code> of an <code>item</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nReturns the system attribute value of <code>item</code> corresponding …\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible sets of items which can …\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nDestroy an existing fungible item.\nProvide the appropriate witness data needed to destroy an …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nTrait for providing an interface to check the account’s …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for trading non-fungible items.\nTrait for transferring non-fungible sets of items.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nAllows <code>buyer</code> to buy an <code>item</code> of <code>collection</code> if it’s up for …\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nClear attribute of <code>item</code> of <code>collection</code>’s <code>key</code>.\nClear attribute of <code>collection</code>’s <code>key</code>.\nClear the metadata of a <code>collection</code>.\nClear the metadata of an <code>item</code> of <code>collection</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code> of …\nAttempt to clear the strongly-typed attribute of <code>collection</code>…\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nReturns the custom attribute value of <code>item</code> of <code>collection</code> …\nDestroy an existing fungible item.\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nProvide the appropriate witness data needed to destroy an …\nReturns <code>true</code> if <code>who</code> is the admin of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the freezer of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the issuer of the <code>collection</code>.\nReturns the item price of <code>item</code> or <code>None</code> if the item is not …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nSet the metadata <code>data</code> of a <code>collection</code>.\nSet the metadata <code>data</code> of an <code>item</code> of <code>collection</code>.\nSets the item price for <code>item</code> to make it available for sale.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nReturns the system attribute value of <code>item</code> of <code>collection</code> …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nThe type by which we identify the beneficiaries to whom a …\nAn error which could be returned by the Pay type\nPayment failed. It may safely be retried.\nAn identifier given to an individual payment.\nPayment is in progress. Nothing to report yet.\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> for assets which makes a …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nPayment happened successfully.\nPayment status is unknowable. It may already have reported …\nCheck how a payment has proceeded. <code>id</code> must have been …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a payment and return an identifier for later …\nThe type that is returned as result from calculation.\nThe type that is returned as result from polynomial …\nImplementor of <code>WeightToFee</code> that uses a constant multiplier.\nA list of coefficients that represent a polynomial.\nImplementor of <code>WeightToFee</code> such that it maps any unit of …\nImplementor of <code>WeightToFee</code> that maps one unit of weight to …\nAn implementation of <code>WeightToFee</code> that collects no fee.\nThe weight of database operations that the runtime can …\nMeters consumed weight and a hard limit for the maximal …\nA trait that describes the weight to fee calculation.\nOne coefficient and its position in the <code>WeightToFee</code>.\nA list of coefficients that represent a polynomial.\nA trait that describes the weight to fee calculation as …\nCheck if the given weight can be consumed.\nThe fractional part of the coefficient.\nThe integral part of the coefficient.\nThese constants are specific to FRAME, and the current …\nConsume some weight and defensively fail if it is over the …\nThe already consumed weight.\nThe ratio of consumed weight to the limit.\nConsume some weight and defensively fail if it is over the …\nDegree/exponent of the term.\nEvaluate the polynomial at a specific <code>x</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe limit can ever be accrued.\nTrue iff the coefficient should be interpreted as negative.\nCreates <code>Self</code> with the maximal possible limit for the …\nReturns a polynomial that describes the weight to fee …\nReclaim the given weight.\nThe remaining weight that can still be consumed.\nEvaluate the term at <code>x</code> and saturatingly amalgamate into …\nConsume the given weight after checking that it can be …\nCalculates the fee from the passed <code>weight</code>.\nCreates <code>Self</code> from a limit for the maximal consumable …\nTime to execute an empty block. Calculated by multiplying …\nTime to execute a NO-OP extrinsic, for example …\nParityDB can be enabled with a feature flag, but is still …\nBy default, Substrate uses RocksDB, so this will be the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")