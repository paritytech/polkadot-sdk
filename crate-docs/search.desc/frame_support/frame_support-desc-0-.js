searchState.loadedDescShard("frame_support", 0, "Support code for the runtime.\nHash storage keys with blake2 128\nHash storage keys with <code>concat(blake2_128(key), key)</code>\nHash storage keys with blake2 256\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nDerive <code>Clone</code> but do not bound any generic.\nConsensus engine unique ID.\nDerive <code>Debug</code> but do not bound any generic.\nDerive <code>Default</code> but do not bound any generic.\nDerive <code>Eq</code> but do not bound any generic.\nStore the key directly.\nA unified log target for support operations.\nThe number of bytes of the module-specific <code>error</code> field …\nA type that cannot be instantiated.\nDerive <code>Ord</code> but do not bound any generic.\nA pallet identifier. These are per pallet and should be …\nDerive <code>PartialEq</code> but do not bound any generic.\nDerive <code>PartialOrd</code> but do not bound any generic.\nTrait for things which can be printed from the runtime.\nHasher to use to hash keys to insert to storage.\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nHasher to use to hash keys to insert to storage.\nHash storage keys with twox 128\nHash storage keys with twox 256\nHash storage keys with <code>concat(twox64(key), key)</code>\nA weakly bounded vector.\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nAssert an expression returns an error specified.\nAssert an expression returns an error specified.\nAssert an expression returns error with the given weight.\nAssert that the maximum encoding size does not exceed the …\nEvaluate an expression, assert it returns an expected <code>Err</code> …\nPanic if an expression doesn’t evaluate to <code>Ok</code>.\nEvaluate any expression and assert that runtime storage …\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nClears the map, removing all elements.\nClears the set, removing all elements.\nExactly the same semantics as <code>Vec::clear</code>.\nConstruct a runtime, with the given name and the given …\nConvert the current crate version into a <code>CrateVersion</code>.\nUtilities for dealing with crypto primitives. Sometimes we …\nPrint out the debuggable type.\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nThis attribute can be used to derive a full implementation …\nDispatch system. Contains a macro for defining runtime …\nProvides functions to interact with the dispatch context.\nExact same semantics as <code>Vec::drain</code>.\nExperimental macros for defining dynamic params that can …\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nReturn Err of the expression: <code>return Err($expression);</code>.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHelper functions for implementing …\nReturn a mutable reference to the value corresponding to …\nExactly the same semantics as <code>slice::get_mut</code>.\nExactly the same semantics as <code>slice::get_mut</code>.\nDo something hypothetically by rolling back any changes …\nAssert something to be <em>hypothetically</em> <code>Ok</code>, without actually …\nSimple macro to explicitly implement EnsureOriginWithArg …\nSome instance placeholder to be used in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeMap</code>.\nConsume self, and return the inner <code>BTreeSet</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturns true of this collection is full.\nGets a mutable iterator over the entries of the map, …\nExactly the same semantics as <code>slice::iter_mut</code>.\nExactly the same semantics as <code>slice::last_mut</code>.\nConsume the map, applying <code>f</code> to each of it’s values and …\nMacro that inserts some tokens after the first match of …\nCreate a type which implements the <code>Contains</code> trait for a …\nCreate a type which implements the <code>Contains</code> trait for a …\nThe max length of the final hash, for the given key type.\nCreate a new <code>BoundedBTreeMap</code>.\nCreate a new <code>BoundedBTreeSet</code>.\nCreate <code>Self</code> with no items.\nMacro for easily creating a new implementation of both the …\nThe pallet macro has 2 purposes:\nContains macro stubs for all of the <code>pallet::</code> macros\nPrelude to be used alongside pallet macro, for ease of use.\nCreate new implementations of the <code>Get</code> trait.\nExactly the same semantics as <code>Vec::pop</code>.\nPrint something that implements <code>Printable</code> from the runtime.\nPrint the object.\nAttach this attribute to an impl statement that you want …\nRemove a key from the map, returning the value at the key …\nRemove an item from the set, returning whether it was …\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::remove</code>.\nRemove a key from the map, returning the value at the key …\nAssert the annotated function is executed within a storage …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nSplit the hash part out of the input.\nConstruct a runtime, with the given name and the given …\nPrint out a formatted message.\nMove the position of an item from one location to another …\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nEnable/disable the given code depending on <code>feature = &quot;std&quot;</code> …\nStuff to do with the runtime’s storage.\nGenerate a <code>#[pallet::storage]</code> alias outside of a pallet.\nExactly the same semantics as <code>slice::swap_remove</code>.\nExactly the same semantics as <code>Vec::swap_remove</code>.\nRemoves and returns the value in the set, if any, that is …\nPrelude to be used for pallet testing, for ease of use.\nTraits and associated utilities for use in the FRAME …\nExecute the annotated function in a new storage …\nExactly the same semantics as <code>Vec::truncate</code>.\nConsume and truncate the vector <code>v</code> in order to create a new …\nCreate an instance from the first elements of the given …\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nExactly the same semantics as <code>BTreeSet::insert</code>, but …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsume the map, applying <code>f</code> to each of it’s values as …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as [<code>Vec::rotate_left</code>], but …\nExactly the same semantics as [<code>Vec::rotate_right</code>], but …\nEnable/disable the given code depending on …\nEnable/disable the given code depending on …\nEnable/disable the given code depending on …\nRe-exports <code>sp-weights</code> public API, and contains benchmarked …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nSimple ECDSA secp256k1 API.\nExtension trait for <code>Public</code> to be used from inside the …\nReturns Ethereum address calculated from this ECDSA public …\nSerializable version of pallet dispatchable.\nMeans to checks if the dispatchable is feeless.\nMeans of classifying a dispatchable function.\nA generalized group of dispatch types.\nThe error type contained in a <code>DispatchResultWithPostInfo</code>.\nA bundle of static information collected from the …\nUn-augmented version of <code>DispatchResultWithPostInfo</code> that …\nThe return type of a <code>Dispatchable</code> in frame. When returned …\nContains the error value\nContains the error value\nA <code>Dispatchable</code> function (aka transaction) that can carry …\nThe iterator type.\nA mandatory dispatch. These kinds of dispatch are always …\nTransactor will NOT pay related fees.\nIt is signed by nobody, can be either:\nA normal dispatch.\nContains the success value\nContains the success value\nA trait that represents one or many values of given type.\nAn operational dispatch.\nThe Origin type of the runtime.\nA type that can be used as a parameter in a dispatchable …\nExplicit enum to denote if a transaction pays fee or not.\nIndicates if dispatch function should pay fees or not.\nA struct holding value for each <code>DispatchClass</code>.\nWeight information that is only available post dispatch. …\nOrigin for the System pallet.\nThe system itself ordained this dispatch to happen: this …\nIt is signed by some public key and we provide the …\nMeans of weighing some particular kind of data (<code>T</code>).\nAllows easy conversion from <code>DispatchError</code> to …\nTransactor will pay related fees.\nIncrease the weight of the given class. Saturates at the …\nActual weight consumed by a call or <code>None</code> which stands for …\nAdd some weight to the given class. Saturates at the …\nReturns an array containing all dispatch classes.\nReturns <code>Some</code> with a reference to the <code>AccountId</code> if <code>self</code> is …\nCalculate how much weight was actually spent by the …\nCalculate how much (if any) weight was not used by the …\nTry to increase the weight of the given class. Saturates …\nClass of this transaction.\nClassify the dispatch function based on input data <code>target</code> …\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nExtract the actual pays_fee from a dispatch result if any …\nExtract the actual weight from a dispatch result if any or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet current value for given class.\nReturn a <code>DispatchInfo</code>, containing relevant information of …\nGet a mutable reference to current value of given class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this item into an iterator.\nChecks if the dispatchable satisfies the feeless condition …\nReturns <code>true</code> if <code>self</code> is <code>None</code>, <code>None</code> otherwise.\nReturns <code>true</code> if <code>self</code> is <code>Root</code>, <code>None</code> otherwise.\nCreate new <code>PerDispatchClass</code> with the same value for every …\nReturns an array of all dispatch classes except <code>Mandatory</code>.\nDetermine if user should actually pay fees at the end of …\nDoes this transaction pay fees.\nWhether this transaction should pay fees when all is said …\nAdditional information about the <code>Dispatchable</code> which is …\nReduce the weight of the given class. Saturates at the …\nSet the value of given class.\nReturns the total weight consumed by all extrinsics in the …\nWeigh the data <code>T</code> given by <code>target</code>. When implementing this …\nWeight of this transaction.\nCall this on your modules custom errors type in order to …\nAbstraction over some optional value <code>T</code> that is stored in …\nClear the internal value.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the value as reference.\nGet the value as mutable reference.\nCalls <code>U::from(self)</code>.\nReturns a mutable reference to the value.\nRun the given closure <code>run</code> in a dispatch context.\nSet to the given value.\nRuns the given <code>callback</code> in the dispatch context and gives …\nDefine a module inside a <code>dynamic_params</code> module that …\nMark a module that contains dynamic parameters.\nBuild <code>GenesisConfig</code> from a JSON blob not using any …\nGet the default <code>GenesisConfig</code> as a JSON blob if <code>name</code> is …\nThe call type of the pallet.\nThe result of checking inherents.\nThe error returned by <code>check_inherent</code>.\nThe inherent identifier used by this inherent.\nInherent data to include in a block.\nAn identifier for an inherent.\nDid we encounter a fatal error while checking an inherent?\nAuxiliary to make any given error resolve to …\nA pallet that provides or verifies an inherent extrinsic …\nCheck whether the given inherent is valid. Checking the …\nCreate an inherent out of the given <code>InherentData</code>.\nIs this a fatal error?\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet an error out of the result.\nCalls <code>U::from(self)</code>.\nConvert into an iterator over all contained errors.\nIs this a fatal error?\nReturn whether the call is an inherent call.\nDetermines whether this inherent is required in this block.\nCreate a new instance.\nIs this result ok?\nPut an error into the result.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe cursor type that stores the progress (aka. state) of …\nEnter safe mode on a failed runtime upgrade.\nThe migration encountered a permanent error and cannot …\nHandles a failed runtime migration.\nHow to proceed after a runtime upgrade failed.\nResume extrinsic processing of the chain. This will not …\nDo now allow any transactions to be processed after a …\nThe unique identifier type of this migration.\nDon’t do anything with the cursor and let the handler …\nThe remaining weight is not enough to do anything.\nThe migration cannot decode its cursor and therefore not …\nSet the cursor to <code>Stuck</code> and keep blocking extrinsics.\nThe migration ran, inner vec contains pre_upgrade data.\nA generic migration identifier that can be used by MBMs.\nNotification handler for status updates regarding …\nSomething that can do multi step migrations.\nThis migration is a noop, do not run post_upgrade checks.\nTrait used by …\n<code>RemovePallet</code> is a utility struct used to remove all …\n<code>RemoveStorage</code> is a utility struct used to remove a storage …\nA migration that can proceed in multiple steps.\nError that can occur during a <code>SteppedMigration</code>.\nMultiple <code>SteppedMigration</code>.\nCan store the in-code pallet version on-chain.\nHandles storage migration pallet versioning.\nA helper enum to wrap the pre_upgrade bytes like an Option …\nNotifies of the completion of a runtime migration.\nThe maximal encoded length across all cursors.\nInfallibly handle a failed runtime migration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe unique identifier of this migration.\nThe maximal encoded length across all identifiers.\nAssert the integrity of the migrations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of migrations that <code>Self</code> aggregates.\nThe maximum number of steps that this migration can take.\nMigrate from the <code>PalletVersion</code> struct to the new …\nThe <code>n</code>th <code>SteppedMigration::id</code>.\nThe <code>SteppedMigration::max_steps</code> of the <code>n</code>th migration.\nCall the post-upgrade hooks of the <code>n</code>th migration.\nCall the pre-upgrade hooks of the <code>n</code>th migration.\nDo a <code>SteppedMigration::step</code> on the <code>n</code>th migration.\nDo a <code>SteppedMigration::transactional_step</code> on the <code>n</code>th …\nExecutes the versioned runtime upgrade.\nHint for whether <code>Self::step</code> should be called.\nExecutes <code>Inner::post_upgrade</code> if the migration just ran.\nHook for testing that is run after the migration is …\nExecutes pre_upgrade if the migration will run, and wraps …\nHook for testing that is run before the migration is …\nNotifies of the start of a runtime migration.\nTry to migrate as much as possible with the given weight.\nDo the next step in the MBM process.\nWrite the in-code storage version on-chain.\nSame as <code>Self::step</code>, but rolls back pending changes in the …\nAmount of weight required to make progress.\nAllows a pallet to declare a set of functions as a …\nEnforce the index of a variant in the generated <code>enum Call</code>.\nDeclares the arguments of a <code>call</code> function to be encoded …\nAllows defining an enum that gets composed as an aggregate …\nThe mandatory attribute allowing definition of …\nAllows adding an associated type trait bounded by <code>Get</code> from …\nAllows bypassing the <code>frame_system::Config</code> supertrait check.\nAllows whitelisting a storage item from decoding during …\nAllows defining an error enum that will be returned from …\nAllows defining pallet events.\nDefines constants that are added to the constant field of …\nAllows defining logic to make an extrinsic call feeless.\nGenerates a helper function on <code>Pallet</code> that handles deposit …\nAllows you to define how the state of your pallet at …\nAllows you to define the genesis configuration for the …\nAllows defining getter functions on <code>Pallet</code> storage.\nThe <code>#[pallet::hooks]</code> attribute allows you to specify a …\nSplits a pallet declaration into multiple parts.\nThe <code>#[pallet::inherent]</code> attribute allows the pallet to …\nEnsures the trait item will not be used as a default with …\nEnsures the generated <code>DefaultConfig</code> will not have any …\nAllows a pallet to declare a type as an origin.\nDeclares a module as importable into a pallet via …\nDeclares a type alias as a storage item.\nDefines what storage prefix to use for a storage item when …\nAllows defining a storage version for the pallet.\nAllows defining conditions for a task to run.\nAllows defining an index for a task.\nAllows defining an iterator over available work items for …\nAllows defining the weight of a task.\nAllows you to define some service work that can be …\nAllows defining a struct implementing the <code>Get</code> trait to …\nDeclares a storage as unbounded in potential size.\nAllows the pallet to validate unsigned transactions.\nAllows specifying the weight of a call.\nDeclare the storage as whitelisted from benchmarking.\nThe transaction birth block is ancient.\nAn arithmetic error.\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nA bad origin.\nGeneral error to do with the transaction’s proofs (e.g. …\nThe sending address is disabled or known to be invalid.\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded vector.\nThe call of the transaction is not expected.\nThe call to validate\nCould not lookup some information that is required to …\nFailed to lookup some data.\nDerive <code>Clone</code> but do not bound any generic.\nConst getter for a basic type.\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nDerive <code>Debug</code> but do not bound any generic.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> and for struct and enum.\nReason why a dispatch call failed.\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nDerive <code>Eq</code> but do not bound any generic.\nContains the error value\nResources exhausted, e.g. attempt to read/write data which …\nThe transaction would exhaust the resources of current …\nTransaction has been received externally.\nGeneral error to do with the transaction not yet being …\nA trait for querying a single value from a type.\nImplement Get by returning Default for any type that …\nThe type identifying for which type info is provided.\nTransaction is already included in block.\nInherent data to include in a block.\nAn identifier for an inherent.\nThe transaction is invalid.\nAn invalid transaction validity.\nTransaction is coming from a local source.\nThe maximal weight in all dimensions.\nThe number of bytes of the module-specific <code>error</code> field …\nAuxiliary to make any given error resolve to …\nAn extrinsic with a mandatory dispatch tried to be …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nA custom error in a module.\nThere are no providers so the account cannot be created.\nNo validator found for the given unsigned transaction.\nContains the success value\nSome error occurred.\nDerive <code>PartialEq</code> but do not bound any generic.\nGeneral error to do with the inability to pay some fees …\nZero-sized type used to mark things that “act like” …\nRoot origin is not allowed.\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nGeneral error to do with the transaction being outdated …\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\nMinimum number of blocks a transaction will remain valid …\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nTag for a transaction. No two transactions with the same …\nInformation on a transaction’s validity and, if valid, …\nErrors that can occur while checking the validity of a …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nThe type which is returned.\nImplementors return their meta type information.\nA trait for querying a single value from a type defined in …\nSome resource (e.g. a preimage) is unavailable right now. …\nTransaction validity can’t be determined.\nAn unknown transaction validity.\nInformation concerning a valid transaction.\nProvide validation for unsigned extrinsics.\nA weakly bounded vector.\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nChecked <code>Weight</code> scalar division. Computes …\nCalculates how many <code>other</code> fit into <code>self</code>.\nChecked <code>Weight</code> scalar multiplication. Computes …\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nCombine two instances into one, as a best effort. This …\nAttempt to deserialise the value from input.\nAttempt to deserialize the value from input into a …\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nConstant version of Div with u64.\nConvert self to an owned vector.\nConvert self to a slice and append it to the destination.\nReturns the fixed encoded size of the type.\nCalculates the encoded size.\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nReturns if the reason for the invalidity was block …\nReturns <code>true</code> if the reason for the error was block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the current value.\nReturn the current value.\nReturns the data for the requested inherent.\nThe optional attribute <code>#[inject_runtime_type]</code> can be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the number of inherents in this instance\nTransaction longevity\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nUpper bound, in bytes, of the maximum encoded size of this …\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nConstant version of Mul with u64.\nCreate a new instance.\nValidate the call right before dispatch.\nPriority of the transaction.\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nA flag indicating if the transaction should be propagated …\nProvided tags\nPut data for an inherent into the internal storage.\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\nAttach this attribute to an impl statement that you want …\nReplace the data for an inherent.\nTransaction dependencies\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nSaturating <code>Weight</code> scalar division. Computes …\nSaturating <code>Weight</code> scalar multiplication. Computes …\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nIf possible give a hint of expected size of the encoding.\nAttempt to skip the encoded value from input.\nReturn the same error but without the attached message.\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nReturns the static type identifier for <code>Self</code>.\nConvert self to a slice and then invoke the given closure …\nReturn the validity of the call\nReturns if the reason for the invalidity was a mandatory …\nReturns <code>true</code> if the reason for the error was it being a …\nInitiate <code>ValidTransaction</code> builder object with a particular …\nReturn a <code>Weight</code> where all fields are zero.\nAppend iterator for fast append operations.\nIterate over a prefix of a child trie and decode raw_key …\nCommit the transaction.\nThe type that iterates over all <code>(key1, key2)</code>.\nA strongly-typed double map in storage whose secondary …\nA strongly-typed map in storage whose keys and values can …\nA strongly-typed map with arbitrary number of keys in …\nIterator for normal and draining iteration.\nThe type that iterates over all <code>(key, value)</code>.\nThe type that iterates over all <code>(key1, key2, value)</code>.\nThe type that iterates over all …\nThe type that iterates over all <code>key</code>s.\nThe type that iterates over all …\nUtility type for converting a storage map into a <code>Get&lt;u32&gt;</code> …\nIterate over a prefix and decode raw_key into <code>T</code>.\nThe type that iterates over all <code>key2</code>.\nIterate or drain over a prefix and decode raw_key and …\nThe type that iterates over all <code>(key2, value)</code>.\nTrait for specialising on removal logic of <code>PrefixIterator</code>.\nThe type that get/take return.\nThe type that get/take return.\nThe type that get/take returns.\nThe type that get/take returns.\nRollback the transaction.\nMarker trait that will be implemented for types that …\nAppend iterator to append values to a storage struct.\nIt is expected that the length is at the beginning of the …\nIt is expected that the length is at the beginning of the …\nAn implementation of a map with a two keys.\nA non-continuous container type.\nA strongly-typed map in storage.\nAn implementation of a map with an arbitrary number of …\nTrait for storage types that store all its value after a …\nTrait for maps that store all its value after a unique …\nAn iterator that streams values directly from storage.\nMarker trait that is implemented for types that support …\nA trait for working with macro-generated storage values …\nDescribes on what should happen with a storage transaction.\nStorage double map that is capable of <code>StorageTryAppend</code>.\nStorage map that is capable of <code>StorageTryAppend</code>.\nStorage N map that is capable of <code>StorageTryAppend</code>.\nStorage value that is capable of <code>StorageTryAppend</code>.\nAppend the given item to the value in the storage.\nAppend a single item in constant time <code>O(1)</code>.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAppend many elements.\nAppend many items in linear time <code>O(items.count())</code>.\nAppend a single element.\nA fast append iterator.\nTraits, types and structs to support a bounded BTreeMap.\nTraits, types and structs to support a bounded <code>BTreeSet</code>.\nTraits, types and structs to support putting a bounded …\nOperation on runtime child storages.\nAttempt to remove all items from the map.\nRemove all values under the first key <code>k1</code> in the overlay …\nAttempt to remove items from the map matching a <code>partial_key</code>…\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes any value under the first key <code>k1</code> (explicitly) exist …\nDoes any value under a <code>partial_key</code> prefix (explicitly) …\nConverts to the same iterator but with the different ‘…\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nDecode the length of the storage value at <code>key</code>.\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nDecode the length of the storage value at <code>key</code>.\nDrain the elements in append order.\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nMutate this iterator into a draining iterator; items …\nMutate this iterator into a draining iterator; items …\nMutate this iterator into a draining iterator; items …\nRemove all elements from the map with first key <code>k1</code> and …\nRemove all elements from the map with prefix key <code>kp</code> and …\nDoes the value (explicitly) exist in storage?\nFinal full prefix that prefixes all keys.\nFinal full prefix that prefixes all keys.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nLoad the value from the provided storage instance.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the …\nLoad the value associated with the given key from the map.\nOperation on runtime storage using hashed keys.\nGet the storage key.\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given key from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the inner type.\nList the elements in append order.\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all keys in the map in lexicographical order of …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map in lexicographical …\nEnumerate all keys in the map in lexicographical order of …\nEnumerate all keys in the map after a specified …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map after a specified …\nEnumerate all keys in the map after <code>starting_raw_key</code> in …\nEnumerate all elements in the map with first key <code>k1</code> in …\nEnumerate all elements in the map with prefix key <code>kp</code> in …\nEnumerate all elements in the map with first key <code>k1</code> after …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nIterate over values that share the first key.\nIterate over values that share the partial prefix key.\nIter over all value of the storage.\nClear the storage value.\nGet the last key that has been iterated upon and return it.\nGet the last key that has been iterated upon and return it.\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from a <code>blake2_256</code> …\nMigrate an item with the given <code>key1</code> and <code>key2</code> from defunct …\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nSome utilities for helping access storage with arbitrary …\nMutate the value\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value under a key.\nMutate the value. Deletes the item if mutated to a <code>None</code>.\nMutate the value under a key.\nMutate the value under the given keys. Deletes the item if …\nMutate the value under a key.\nMutate the value under a key if the value already exists. …\nMutate the value under a key if the value already exists. …\nCreates a new <code>PrefixIterator</code>, iterating after <code>previous_key</code> …\nCreates a new <code>KeyPrefixIterator</code>, iterating after …\nThis function is called whenever a key/value is removed.\nPallet prefix. Used for generating final key.\nPallet prefix. Used for generating final key.\nGet the prefix that is being iterated upon for this …\nGet the prefix that is being iterated upon for this …\nStore a value under this key into the provided storage …\nRemove the value under a key.\nRemove the value under the given keys.\nRemove the value under a key.\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values under the first key <code>k1</code> in the overlay …\nRemove all values starting with <code>partial_key</code> in the overlay …\nStore a value under this key into the provided storage …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nSet the key that the iterator should start iterating after.\nSet the key that the iterator should start iterating after.\nContains the <code>crate::StorageNoopGuard</code> for conveniently …\nReturns the storage prefix for a specific pallet name and …\nStorage prefix. Used for generating final key.\nStorage prefix. Used for generating final key.\nCreate the streaming iterator.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nSwap the values of two keys.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nProvides functionality around the transaction storage.\nTranslate a value from some previous type (<code>O</code>) to the …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the next entry following <code>previous_key</code> by a …\nTranslate the values of all elements by a function <code>f</code>, in …\nTry and append the <code>item</code> into the storage item.\nTry and append the <code>item</code> into the storage map at the given …\nTry and append the <code>item</code> into the storage double map at the …\nTry and append the <code>item</code> into the storage N map at the …\nTry to get the underlying value from the provided storage …\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the double map.\nTry to get the value for the given key from the map.\nMutate the value if closure returns <code>Ok</code>\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value if closure returns <code>Ok</code>. Deletes the item …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nStorage types to build abstraction on storage, they …\nOperation on unhashed runtime storage.\nTraits, types and structs to support putting a bounded …\nConstruct iterator to iterate over child trie items in …\nConstruct iterator to iterate over child trie items in …\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nAll keys to remove were removed, return number of …\nInformation related to a child state.\nType of child. It does not strictly define different child …\nThe outcome of calling <code>storage_kill</code>. Returned value is the …\nResults concerning an operation to remove many keys.\nThis is the one used by default.\nIf runtime module ensures that the child key is a unique …\nNot all key to remove were removed, return number of …\nDifferent possible state version.\nOld state version, no value nodes.\nNew state version can use value nodes.\nThe number of items removed from the backend database.\nReturns the type for this child info.\nPartially clear the child storage of each key-value pair.\nDeconstruct into the internal components.\nCheck to see if <code>key</code> has an explicit entry in storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nTransform a prefixed key into a tuple of the child type …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the value of the item in storage under <code>key</code>, or <code>None</code> …\nReturn the value of the item in storage under <code>key</code>, or …\nReturn the value of the item in storage under <code>key</code>, or the …\nReturn the value of the item in storage under <code>key</code>, or …\nGet a Vec of bytes from storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the full location in the direct parent of this …\nReturns byte sequence (keyspace) that can be use by …\nEnsure <code>key</code> has no explicit entry in storage.\nRemove all <code>storage_key</code> key/values\nReturn the length in bytes of the value without reading …\nThe number of iterations (each requiring a storage …\nA continuation cursor which, if <code>Some</code> must be provided to …\nTry to get a child type from its <code>u32</code> representation.\nInstantiates child information for a default child trie of …\nSame as <code>new_default</code> but with <code>Vec&lt;u8&gt;</code> as input.\nReturns the location reserved for this child trie in their …\nReturn the full location in the direct parent of this trie.\nPut <code>value</code> in storage under <code>key</code>.\nPut a raw byte slice into storage.\nCalculate current child root value.\nIf defined, values in state of size bigger or equal to …\nReturns a reference to the location in the direct parent of\nRemove <code>key</code> from storage, returning its value if it had an …\nReturn the value of the item in storage under <code>key</code>, or …\nRemove <code>key</code> from storage, returning its value, or, if there …\nReturn the value of the item in storage under <code>key</code>, or …\nTry to update with another instance, return false if both …\nThe number of unique keys removed, taking into account …\nCheck to see if <code>key</code> has an explicit entry in storage.\nReturn the value of the item in storage under <code>key</code>, or <code>None</code> …\nReturn the value of the item in storage under <code>key</code>, or …\nReturn the value of the item in storage under <code>key</code>, or the …\nReturn the value of the item in storage under <code>key</code>, or …\nGet a Vec of bytes from storage.\nEnsure <code>key</code> has no explicit entry in storage.\nPut <code>value</code> in storage under <code>key</code>.\nPut a raw byte slice into storage.\nRemove <code>key</code> from storage, returning its value if it had an …\nReturn the value of the item in storage under <code>key</code>, or …\nRemove <code>key</code> from storage, returning its value, or, if there …\nReturn the value of the item in storage under <code>key</code>, or …\nUtility to iterate through raw items in storage.\nUtility to iterate through raw items in storage.\nAttempt to remove all values under a storage prefix by the …\nMutate this iterator into a draining iterator; items …\nMutate this iterator into a draining iterator; items …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a particular value in storage by the <code>module</code>, the map’…\nGet a particular value in storage by the <code>module</code>, the map’…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove all storages from a pallet prefix to another pallet …\nMove all <code>(key, value)</code> after some prefix to the another …\nMove a storage from a pallet prefix to another pallet …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nPut a particular value into storage by the <code>module</code>, the map…\nRemove all items under a storage prefix by the <code>module</code>, the …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nTake a particular item in storage by the <code>module</code>, the map’…\nTake a particular value in storage by the <code>module</code>, the map…\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nAsserts that no storage changes took place between con- …\nReturns the argument unchanged.\nCreates a new <code>StorageNoopGuard</code> with a custom error message.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nAlias to <code>default()</code>.\nSets a custom error message for a <code>StorageNoopGuard</code>.\nThe type that is being used to store the current number of …\nThe maximum number of nested layers.\nThe key that is holds the current number of active layers.\nExecute the supplied function, ensuring we are at least in …\nCheck if the current call is within a transactional layer.\nExecute the supplied function, adding a new storage layer.\nExecute the supplied function in a new storage transaction.\nSame as <code>with_transaction</code> but casts any internal error to <code>()</code>…\nSame as <code>with_transaction</code> but without a limit check on …\nA wrapper around a <code>StorageMap</code> and a <code>StorageValue</code> (with the …\nThe requirement for an instance of <code>CountedStorageMap</code>.\nA wrapper around a <code>StorageNMap</code> and a <code>StorageValue</code> (with …\nThe requirement for an instance of <code>CountedStorageNMap</code>.\nThe numeric counter type.\nThe prefix to use for the counter storage value.\nThe prefix to use for the counter storage value.\nMarker trait to indicate that each element in the tuple …\nTrait indicating whether a KeyGenerator has the prefix P.\nTrait indicating whether a ReversibleKeyGenerator has the …\nA type used exclusively by storage maps as their key type.\nA trait that contains the current key as an associated …\nThe maximum length used by the key in storage.\nMetadata for the storage kind.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Option&lt;_&gt;</code>.\nType returned on query\nTrait implementing how the storage optional value is …\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being …\nA trait that indicates the hashers for the keys generated …\nA type representing a <em>double map</em> in storage. This …\nBuild the metadata of a storage.\nA type representing a <em>map</em> in storage. A <em>storage map</em> is a …\nA type representing an <em>NMap</em> in storage. This structure …\nA type representing a <em>value</em> in storage. A <em>storage value</em> is …\nTrait to indicate that a tuple can be converted into an …\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Value</code>.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given item to the value in the storage.\nBuild into <code>entries</code> the storage metadata entries of a …\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove items from the map matching a <code>partial_key</code>…\nAttempt to remove items from the map matching a <code>first_key</code> …\nAttempt to remove items from the map matching a <code>partial_key</code>…\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nReturn the count.\nReturn the count.\nThe key used to store the counter of the map.\nThe key used to store the counter of the map.\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map with prefix key <code>kp</code> and …\nRemove all elements from the map with first key <code>k1</code> and …\nRemove all elements from the map with prefix key <code>kp</code> and …\nDoes the value (explicitly) exist in storage?\nGiven a <code>key</code> tuple, calculate the final key by encoding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConvert an optional value (i.e. some if trie contains the …\nConvert a query to an optional value.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the …\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the map.\nLoad the value from the provided storage instance.\nGet the storage key.\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nInitialize the counter with the actual number of items in …\nInitialize the counter with the actual number of items in …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the counted map after a …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all keys in the counted map.\nEnumerate all keys in the map in no particular order.\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map in no particular …\nEnumerate all keys in the map in no particular order.\nEnumerate all keys in the map in no particular order.\nEnumerate all keys in the map after a specified …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all elements in the map with prefix key <code>kp</code> in no …\nEnumerate all elements in the map with first key <code>k1</code> in no …\nEnumerate all elements in the map with prefix key <code>kp</code> in no …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nEnumerate all elements in the map with first key <code>k1</code> after …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nIterate over values that share the first key.\nIterate over values that share the first key.\nIterate over values that share the first key.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nClear the storage value.\nThe prefix used to generate the key of the map.\nThe prefix used to generate the key of the map.\nGiven a <code>key</code> tuple, migrate the keys from using the old …\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nMigrate an item with the given <code>key1</code> and <code>key2</code> from defunct …\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value under the given keys.\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value\nMutate the value under a key. Deletes the item if mutated …\nMutate the value under the given keys. Deletes the item if …\nMutate the value under the given keys. Deletes the item if …\nMutate the value under a key. Deletes the item if mutated …\nMutate the value under the given keys. Deletes the item if …\nMutate the value. Deletes the item if mutated to a <code>None</code>.\nMutate the value under a key iff it exists. Do nothing and …\nMutate the value under a key iff it exists. Do nothing and …\nStore a value under this key into the provided storage …\nRemove the value under a key.\nRemove the value under the given keys.\nRemove the value under the given keys.\nRemove the value under a key.\nRemove the value under the given keys.\nRemove all values in the map.\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values of the storage in the overlay and up to …\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values under <code>k1</code> in the overlay and up to <code>limit</code> …\nRemove all values starting with <code>partial_key</code> in the overlay …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore a value under this key into the provided storage …\nSwap the values of two keys.\nSwap the values of two key-pairs.\nSwap the values of two key-pairs.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake a value from storage, removing it afterwards.\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate a value from some previous type (<code>O</code>) to the …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the double map.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the map.\nTry to get the underlying value from the provided storage …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the value under the given keys when the closure …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the value if closure returns <code>Ok</code>\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the value if closure returns <code>Ok</code>. Deletes the item …\nPartially clear the storage of all keys under a common …\nReturns <code>true</code> if the storage contains any key, which starts …\nCheck to see if <code>key</code> has an explicit entry in storage.\nReturn the value of the item in storage under <code>key</code>, or <code>None</code> …\nReturn the value of the item in storage under <code>key</code>, or …\nReturn the value of the item in storage under <code>key</code>, or the …\nReturn the value of the item in storage under <code>key</code>, or …\nGet a Vec of bytes from storage.\nEnsure <code>key</code> has no explicit entry in storage.\nEnsure keys with the given <code>prefix</code> have no entries in …\nPut <code>value</code> in storage under <code>key</code>.\nPut a raw byte slice into storage.\nRemove <code>key</code> from storage, returning its value if it had an …\nReturn the value of the item in storage under <code>key</code>, or …\nRemove <code>key</code> from storage, returning its value, or, if there …\nReturn the value of the item in storage under <code>key</code>, or …\nA weakly bounded vector.\nA trait for querying a single value from a type.\nCopied from <code>sp-runtime</code> and documented there.\nAssert an expression returns an error specified.\nAssert an expression returns an error specified.\nAssert an expression returns error with the given weight.\nAssert that the maximum encoding size does not exceed the …\nEvaluate an expression, assert it returns an expected <code>Err</code> …\nPanic if an expression doesn’t evaluate to <code>Ok</code>.\nEvaluate any expression and assert that runtime storage …\nTraits, types and structs to support a bounded BTreeMap.\nBuild a bounded btree-map from the given literals.\nTraits, types and structs to support putting a bounded …\nBuild a bounded vec from the given literals.\nReturn the current value.\nCreate new implementations of the <code>Get</code> trait.\nA bounded map based on a B-Tree.\nA bounded slice.\nA bounded vector.\nCreate an object through truncation.\nCreate an object through truncation.\nThe AccountId used across the system.\nTrait for touching/creating an asset account with a …\nAll of them.\nRun the <code>try_state</code>, <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nSafe mode is already entered.\nSafe mode is already exited.\nCall is already paused.\nThe message was already processed.\nCall is already unpaused.\nAdapter struct for turning an <code>OrderedMembership</code> impl into …\nSome amount of backing from a group. The precise …\nThe message data format is unknown (e.g. unrecognised …\nThe type for currency units of the deposit.\nImplemented by pallets, allows defining logic to run prior …\nImplements <code>VerifyExistenceProof</code> using a binary merkle tree.\nBlock number type.\nA trait to define the build function of a genesis config …\nRuntime call type, as in <code>frame_system::Config::Call</code>\nHow to unambiguously identify a call.\nThe function and pallet name of the Call.\nThe trait implemented by the overarching enumeration of …\nTrait for type that can handle incremental changes to a …\nGuard type for clearing all pushed constraints from a …\nSome sort of cost taken from account temporarily in order …\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nA trait for querying whether a type can be said to “…\nA trait for querying bound for the length of an …\nA trait for querying whether a type can be said to “…\nThe message data is bad (e.g. decoding returns an error).\nThe version of a crate.\nA trait to handle errors and options when you are really …\nDefensively calculates the maximum of two values.\nDefensively calculates the minimum of two values.\nSubset of methods similar to <code>Defensive</code> that can only work …\nSubset of methods similar to <code>Defensive</code> that can only work …\nA variant of <code>Defensive</code> with the same rationale, for the …\nConstruct an object by defensively truncating an input if …\nTrait used to check whether a given validator is currently …\n“OR gate” implementation of <code>EnsureOrigin</code>, <code>Success</code> type …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nCan enqueue messages for multiple origins.\nAdapter type to transform an <code>EnqueueMessage</code> with an origin …\nA trait to ensure the inherent are before non-inherent in …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nSome sort of check on the origin is performed by this …\n<code>EnsureOrigin</code> implementation that checks that an origin has …\nSome sort of check on the origin is performed by this …\nImplementation of <code>PrivilegeCmp</code> that only checks for equal …\nAn implementation of <code>Contains</code> which contains only equal …\nContains the error value\nThe error type that gets returned when a collection can’…\nSomething that can estimate the fee of a (frame-based) …\nSomething that can estimate at which block scheduling of …\nSomething that can estimate at which block the next …\nA <code>Contains</code> implementation that contains every value.\nA <code>Contains</code> implementation that contains everything except …\nSomething that can execute a given block.\nErrors that can happen when attempting to execute an …\nAn extrinsic on which we can get access to call.\nTrait to add a constraint onto the filter.\nGuard type for pushing a constraint to a <code>FilterStack</code> and …\nA trait for finding the author of a block header based on …\nThe resource footprint of a bunch of blobs. We assume only …\nA <code>ContainsPair</code> implementation that has a <code>Contains</code> …\nConverter <code>struct</code> to use a <code>ContainsPair</code> implementation for …\nA trait to define the build function of a genesis config, …\nA trait for querying a single value from a type.\nRetrieve the backing from an object’s ref.\nGets the function index of the Call.\nGets the metadata for the Call - function name and pallet …\nGets the function name of the Call.\nImplement Get by returning Default for any type that …\nProvides information about a pallet’s storage versions.\nThe hasher used in the runtime.\nA simple, generic one-parameter event notifier/handler.\nHandles incoming messages for a single origin.\nThe hash type.\nThe pallet hooks trait. This is merely an umbrella trait …\nUnique numerical identifier for an instance.\nFull identification of <code>ValidatorId</code>.\nA type for converting <code>ValidatorId</code> to <code>Identification</code>.\nThe full identification of a key owner and the stash …\nThis type is generated by the <code>pallet</code> macro.\nA trait representing an incrementable type.\nTrait for type that can handle the initialization of …\nA an bounded <code>Call</code>. Its encoding must be at most 128 bytes.\nA <code>Contains</code> implementation which contains all members of …\nAn instance of a pallet in the storage.\nSimple trait for providing a filter over a reference to …\nThe available weight was insufficient to execute the …\nSee <code>Hooks::integrity_test</code>.\nTrivial utility for implementing <code>Contains</code>/<code>OrderedMembership</code>…\nA trait to check if an extrinsic is an inherent.\nSomething that can be checked to be a of sub type <code>T</code>.\nTrait to be used when types are exactly same.\nThe key type expected.\nSomething which can compute and check proofs of a …\nTrait to be used by block producing consensus engine …\nA hash with no preimage length. We do not support creation …\nAnything that can have a <code>::len()</code> method.\nA storage price that increases linearly with the number of …\nA hash of the call together with an upper limit for its …\nThe maximum encoded size for the implementing type.\nThe maximum length of preimage we can store.\nA derivative <code>EnsureOrigin</code> implementation. It mutates the …\nThe maximal length any enqueued message may have.\nThe maximal length any enqueued message may have.\nMaximum size of a preimage.\nAn extension of the <code>Consideration</code> trait that allows for …\n<code>EnsureOrigin</code> implementation that always fails.\nSpecial marker struct used when <code>storage_version</code> is not …\nNo item.\nNone of them.\nRun no checks.\nServices queues by doing nothing.\nThe call could not be found in the runtime.\nThe referenced message was not found.\nA <code>Contains</code> implementation that contains no value.\nOff-chain computation trait.\nContains the success value\nSee <code>Hooks::on_finalize</code>.\nA trait that will be called at genesis.\nSee <code>Hooks::on_idle</code>.\nSee <code>Hooks::on_initialize</code>.\nThe account with the given id was reaped.\nHandler for when a new account has been created.\nPeriodically executes logic. Is not guaranteed to run …\nSee <code>Hooks::on_runtime_upgrade</code>.\nA trait which is called when the timestamp is set in the …\nA session handler for specific key type.\nRun only pallets who’s name matches the given list.\nThe transport from where a message originates.\nMethods available on <code>frame_system::Config::RuntimeOrigin</code>.\nAn item of the opposite type to the <code>Self</code> on which the …\nAn unspecified error.\nMessage processing was not attempted because it was not …\nAddresses a specific overweight message.\nUnique module prefix. E.g. “InstanceNMyModule” or “…\nTrait indicating that the implementing type is going to be …\nProvides information about the pallet itself and its setup …\nProvides information about the pallet itself and its setup …\nInformation regarding an instance of a pallet.\nProvide information about a bunch of pallets.\nThe caller origin, overarching type of all pallets origins.\nSimilar to <code>StorageInfoTrait</code>, a trait to give partial …\nProvides a callback to execute logic after the all …\nProvides a callback to execute logic before the all …\nRun the <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nProvides a callback to execute logic before the all …\nA interface for looking up preimages from their hash on …\nA interface for managing preimages to hashes on chain.\nSomething that can compare privileges of two origins.\nCan process messages from a specific origin.\nErrors that can happen when attempting to process a …\nThe proof of membership itself.\nThe proof type.\nA interface for looking up preimages from their hash on …\nThe resource footprint of a queue.\nThe queue is paused and no message can be executed from it.\nProvides information on paused queues.\nA trait that is able to provide randomness.\nRanked membership data structure.\nHandler that can deal with the swap of two members.\nAnother call is currently ongoing and prevents this call …\nRun a fixed number of them in a round robin manner.\nThe origin type of the runtime, (i.e. …\nPrefix given to a storage to isolate from other storages …\nThe storage key postfix that is used to store the …\nCan put the runtime into a safe mode.\nThe error type for <code>SafeMode</code>.\nA trait to notify when the runtime enters or exits safe …\nAn item of the same type as the <code>Self</code> on which the return …\nReturn type used when we need to return one of two items, …\nCan service queues and execute overweight messages.\nProof used by <code>SixteenPatriciaMerkleTreeProver</code> for …\nImplements <code>VerifyExistenceProof</code> using a 16-patricia merkle …\nA trait for a set which can enumerate its members in order.\nThe type used to archive the stack.\nThe message could not be processed for reaching the stack …\nMetadata about storage from the runtime.\nA trait to give information about storage.\nAn instance of a storage in a pallet.\nA shim for placing around a storage item in order to use …\nThe storage version of a pallet.\nA interface for managing preimages to hashes on chain.\nAn abstraction of a value stored within storage, but …\nA return type.\nA return type.\nA <code>Contains</code> implementation that contains all members of …\nStorage key with read/write tracking information.\nCan pause specific transactions from being processed.\nThe error type for <code>TransactionPause</code>.\nTransform the origin of an <code>EnqueueMessage</code> via <code>C::convert</code>.\nTry and collect into a collection <code>C</code>.\nDecode the entire data under the given storage type.\nA value could not be decoded.\nA type for which some values make sense to be able to drop …\nA derivative <code>EnsureOrigin</code> implementation. It mutates the …\nExecute some checks to ensure the internal state of a …\nRun the <code>try_state</code> checks.\nWhich state tests to execute.\nThe type which is returned.\nA trait for querying a single value from a type defined in …\nThis trait is intended for use within <code>VersionedMigration</code> …\nType that can be dispatched with an origin but without …\nTrait to deal with unix time.\nUnknown error.\nUnknown error.\nCall cannot be paused.\nThe message format is unsupported (e.g. old XCM version).\nSelect which checks should be run when trying a runtime …\nGet the number of variants.\nType for representing validator id in a session.\nA type for converting <code>AccountId</code> to <code>ValidatorId</code>.\nImplementors of this trait provide information about …\nA trait for online node inspection in a session.\n<code>ValidatorSet</code> combined with an identification.\nTrait to get the number of variants in any enum.\nAdapter for <code>Get&lt;u32&gt;</code> to access <code>VARIANT_COUNT</code> from …\nSomething that can verify the existence of some data in a …\nA trait for verifying the seal of a header and returning …\nAllows a pallet to specify storage keys to whitelist …\nA wrapper for any type <code>T</code> which implement encode/decode in …\nA wrapper for any type <code>T</code> which implement encode/decode in …\nThe queue wants to give up its current processing slot.\nAdd an item that would satisfy <code>contains</code>. It does not make …\nAdd an item that would satisfy <code>contains</code>. It does not make …\nAdd a filter to the origin.\nAdd a storage read to this key.\nAdd a storage write to this key.\nWhether to run any checks at all.\nWhether to run any checks at all.\nReturns the approval ratio (positive to total votes) for …\nThe number of members of the group that back some motion.\n<code>Some</code> if the referendum <code>index</code> can be voted on, along with …\nExtract the signer from it if a system <code>Signed</code> origin, <code>None</code> …\nExtract the signer from it if a system <code>Signed</code> origin, <code>None</code> …\nExtract the signer from the message if it is a <code>Signed</code> …\nExtract the signer from the message if it is a <code>Signed</code> …\nExtract a reference to the system-level <code>RawOrigin</code> if it is …\nExtract a reference to the system origin, if that’s what …\nExtract a reference to the system origin, if that’s what …\nAssimilate the storage for this module into pre-existing …\nAssimilate the storage for this module into pre-existing …\nReturn the average length of a session.\nReturn the average length of a session.\nReturns the number of positive votes for the tally.\nSomething that should happen before runtime migrations are …\nSomething that should happen before runtime migrations are …\nConvert an otherwise unbounded or large value into a type …\nConvert an otherwise unbounded or large value into a type …\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nThe build function is called within an externalities …\nBuild the storage using <code>build</code> inside default storage.\nBuild the storage using <code>build</code> inside default storage.\nConsume a ticket for some <code>old</code> footprint attributable to <code>who</code>…\nConsume a ticket for some <code>old</code> footprint attributable to <code>who</code>…\nGet the call of the extrinsic.\nGet a reference to the caller (<code>CallerTrait</code> impl).\nWhether this call can be paused.\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>_incoming</code> just joined the set and …\nCheck a proof of membership on-chain. Return <code>Some</code> iff the …\nProvides a vec of values that <code>T</code> may take.\nCompare the <code>left</code> to the <code>right</code> origin.\nCompute diff between new and old members; they <strong>must </strong>…\nCompute diff between new and old members; they <strong>must </strong>…\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nReturn <code>true</code> if this “contains” the pair-value <code>(a, b)</code>.\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nGet the number of items in the set.\nGet the number of items in the set.\nThe number of pallets’ information that this type …\nThe number of pallets’ information that this type …\nThe number of blobs.\nConvert the given pallet <code>P</code> into its containing crate …\nVersion of the crate containing the pallet.\nVersion of the crate containing the pallet.\nCreate an ongoing majority-carries poll of given class …\nAn account was created.\nAn account was created.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDoes not alter the inner value at all, but it will log …\nExactly the same as <code>map</code>, but it prints the appropriate …\nExactly the same as <code>map</code>, but it prints the appropriate …\nDefensively map the error into another return type, but …\nDefensively map and unpack the value to something else (<code>U</code>…\nPotentially map and unpack the value to something else (<code>U</code>…\nReturns the maximum and defensively asserts that <code>other</code> is …\nReturns the minimum and defensively checks that <code>self</code> is …\nDefensively transform this result into an option, …\nDefensively transform this option to a result, mapping <code>None</code>…\nDefensively transform this option to a result, mapping <code>None</code>…\nPrelude module for all defensive traits to be imported at …\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nIncrease <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> plus <code>other</code> defensively.\nDecrement <code>self</code> by one defensively.\nIncrement <code>self</code> by one defensively.\nReturn the product of <code>self</code> and <code>other</code> defensively.\nReduce <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> minus <code>other</code> defensively.\nReturns the maximum and defensively asserts that <code>other</code> is …\nReturns the minimum and defensively checks that <code>self</code> is …\nUse <code>TryFrom</code> first and defensively fall back to truncating …\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nDemote a member to the next lower rank; demoting beyond …\nThe deposit amount of a native currency required for …\nReturns all disabled validators\nDispatch this call but do not check the filter in origin.\nConsume a ticket for some <code>old</code> footprint attributable to <code>who</code>…\nNo longer request that the data required for decoding the …\nNo longer request that the data required for decoding the …\nTypes and traits for dynamic parameters.\nThe total count of group members.\nReturns the encoded data.\nReturns the length of the encoded <code>T</code>.\nEnd the given ongoing poll and return the result.\nEnqueue a single <code>message</code> from a specific <code>origin</code>.\nEnqueue multiple <code>messages</code> from a specific <code>origin</code>.\nEnsure the position of inherent is correct, i.e. they are …\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nThe same as <code>ensure_origin</code> except that Root origin will …\nThe same as <code>ensure_origin</code> except that Root origin will …\nEnsure that creating a ticket for a given account and …\nEnter safe mode for <code>duration</code> blocks.\nCalled when the runtime enters safe mode.\nEstimate the fee of this call.\nReturn an estimate of the current session progress.\nReturn the block number at which the next new session is …\nReturn the block number at which the next session rotation …\nExecute the given <code>block</code>.\nExecutes a message that could not be executed by …\nExecutes a message that could not be executed by …\nReturns if the storage version key for the given pallet …\nExit safe mode immediately.\nCalled when the runtime exits safe mode.\nExtend safe mode for <code>duration</code> blocks.\nReturns the preimage for a given hash. If given, <code>len</code> must …\nDetermine if a given value should be allowed through the …\nFilter the call if caller is not root, if false is …\nFind the author of a block based on the pre-runtime …\nReturn the state footprint of the given queue.\nReturn the state footprint of the queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a footprint with one item, and size equal to the …\nCreate from the given encoded <code>data</code>.\nConstructs a <code>Legacy</code> bounded item.\nConstruct a footprint with one item, and size equal to the …\nCast mutable reference.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct a footprint directly from <code>items</code> and <code>len</code>.\nCast reference.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns an instance of the tally given some <code>approval</code> and …\nName of the function.\nReturn the current value.\nReturn the current value.\nGet the item, or its default if it doesn’t yet exist; we …\nGet the storage version of the given pallet from the …\nReturns <code>Some</code> <code>Backing</code> if <code>self</code> represents a …\nReturn the index of this Call.\nReturn all call indices in the same order as <code>GetCallName</code>.\nReturn a <code>CallMetadata</code>, containing function and pallet name …\nReturn the function name of the Call.\nReturn all function names in the same order as <code>GetCallIndex</code>…\nReturn all function names for the given <code>module</code>.\nReturn all module names.\nReturns the preimage for a given hash.\nGet the current prime.\nGet the current prime.\nEnqueue a single <code>message</code> with an implied origin.\nEnqueue multiple <code>messages</code> from an implied origin.\nCheck if this key has been “read”, i.e. it exists in …\nCheck if this key has been “written”, i.e. a new value …\nReturns the hash of the preimage.\nCheck to see if all data required for the given <code>bounded</code> …\nCheck to see if all data required for the given <code>bounded</code> …\nReturns whether a preimage exists for a given hash.\nRequest that the data required for decoding the given …\nRequest that the data required for decoding the given …\nReturns the in-code storage version as specified in the …\nIncrements the value.\nConvert the given pallet <code>P</code> into its index as configured in …\nIndex of the pallet as configured in the runtime.\nIndex of the pallet as configured in the runtime.\nAdd a member to the group at the <code>min_rank()</code>.\nThe storage info of the key.\nAll of the pallets’ information that this type …\nReturns the initial value.\nInitialize the members to the given <code>members</code>.\nSet the item to something new.\nSet the item to something new.\nSee <code>Hooks::integrity_test</code>.\nSee <code>Hooks::integrity_test</code>.\nCheck the integrity of this pallet’s configuration.\nCheck the integrity of this pallet’s configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and return the caller.\nCast mutable reference.\nCast reference.\nExtract the signer from the message if it is a <code>Signed</code> …\nExtract the signer from the message if it is a <code>Signed</code> …\nExtract the signer from the message if it is a <code>Signed</code> …\nReturns true if the given validator is disabled.\nWhether safe mode is entered.\nWhether safe mode is entered.\nWhether this extrinsic is an inherent.\nReturns <code>true</code> if this <code>Consideration</code> represents a no-cost …\nReturns <code>true</code> if <code>self</code> is a system <code>None</code> origin, <code>None</code> …\nReturns <code>true</code> if <code>self</code> is a system <code>None</code> origin, <code>None</code> …\nWhether this queue is paused.\nWhether this call is paused.\nReturns true if the provided validator ID has been …\nReturns whether a preimage request exists for a given hash.\nReturns <code>true</code> if <code>self</code> is a system <code>Root</code> origin, <code>None</code> …\nReturns <code>true</code> if <code>self</code> is a system <code>Root</code> origin, <code>None</code> …\nReturns <code>Some(_)</code> if <code>self</code> is an instance of sub type <code>T</code>.\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nThe key of the value to prove.\nThe key of the undecodable value.\nAn account was killed.\nAn account was killed.\nReturns a generic measure of how late the current block is …\nReturn the length of data type.\nReturns whether a preimage exists for a given hash and if …\nReturns the length of the preimage or <code>None</code> if the length …\nReturns the hash to lookup the preimage.\nThe maximum length of the lookup that is needed to peek …\nReturns whether the image will require a lookup to be …\nThe major version of the crate.\nMaximum number of elements contained\nThe maximum amount of ongoing polls within any single …\nThe maximum amount of ongoing polls within any single …\nThe maximum size of key/values in the storage, or none if …\nThe maximum number of values in the storage, or none if no …\nMinimum number of elements contained\nThe lowest rank possible in this membership organisation.\nThe minor version of the crate.\nConvert the given pallet <code>P</code> into its Rust module name as …\nName of the Rust module containing the pallet.\nName of the Rust module containing the pallet.\nMutate the item.\nMutate the item.\nMutate the item, removing or resetting to default value if …\nMutate the item, removing or resetting to default value if …\nConvert the given pallet <code>P</code> into its name as configured in …\nName of the pallet as configured in the runtime.\nName of the pallet as configured in the runtime.\nThe two128 hash of name.\nTwo128 hash of name.\nCreate a ticket for the <code>new</code> footprint attributable to <code>who</code>. …\nInitializes a new tally.\nCreate a default <code>TrackedStorageKey</code>\nCreate a new instance, adding a new <code>constraint</code> onto the …\nCreate a new instance, adding a new <code>constraint</code> onto the …\nCreates a new instance of <code>Self</code>.\nCreate with system none origin and …\nRequest and attempt to store the bytes of a preimage on …\nStore the bytes of a preimage on chain infallible due to …\nReturn duration since <code>SystemTime::UNIX_EPOCH</code>.\nThis function is being called after every block import …\nThis function is being called after every block import …\nImplementing this function on a pallet allows you to …\nImplementing this function on a pallet allows you to …\nA notification for end of the session.\nA notification for end of the session.\nReturns the storage version of the pallet as last set in …\nA validator got disabled. Act accordingly until a new …\nSee <code>Hooks::on_finalize</code>.\nSee <code>Hooks::on_finalize</code>.\nBlock finalization hook. This is called at the very end of …\nBlock finalization hook. This is called at the very end of …\nSomething that should happen at genesis.\nSomething that should happen at genesis.\nThe given validator set will be used for the genesis …\nSee <code>Hooks::on_idle</code>.\nSee <code>Hooks::on_idle</code>.\nHook to consume a block’s idle time. This will run when …\nHook to consume a block’s idle time. This will run when …\nSee <code>Hooks::on_initialize</code>.\nSee <code>Hooks::on_initialize</code>.\nBlock initialization hook. This is called at the very …\nBlock initialization hook. This is called at the very …\nThe account with the given id was reaped.\nA new account <code>who</code> has been registered.\nSession set has changed; act appropriately. Note that this …\nCode to execute every now and then at the beginning of the …\nCode to execute every now and then at the beginning of the …\nA hook to run logic after inherent application.\nA hook to run logic after inherent application.\nSee <code>Hooks::on_runtime_upgrade</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nCalled within <code>VersionedMigration</code> to execute the actual …\nCalled within <code>VersionedMigration</code> to execute the actual …\nHook executed when a code change (aka. a “runtime upgrade…\nHook executed when a code change (aka. a “runtime upgrade…\nCalled when the timestamp is set.\nThe number of pages in the queue (including overweight …\nName of the pallet to which the function belongs.\nEncoded string of pallet name.\nPrefix of a pallet to isolate it from other pallets.\nReturn the prefix hash of pallet instance.\nReturn the prefix hash of pallet instance.\nThe patch version of the crate.\nPause this call immediately.\nConvert the given <code>bounded</code> instance back into its original …\nConvert the given <code>bounded</code> instance back into its original …\nCreate a <code>Bounded</code> instance based on the <code>hash</code> and <code>len</code> of the …\nCreate a <code>Bounded</code> instance based on the <code>hash</code> and <code>len</code> of the …\nRemoves the most recently pushed, and not-yet-popped, …\nCalled after all inherents were applied.\nCalled after all inherents were applied.\nCalled after all transactions were applied but before …\nCalled after all transactions were applied but before …\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nExecute some post-checks after a runtime upgrade.\nExecute some post-checks after a runtime upgrade.\nWhether the pre- and post-upgrade checks are selected.\nCalled before all inherents were applied but after …\nCalled before all inherents were applied but after …\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nExecute some pre-checks prior to a runtime upgrade.\nExecute some pre-checks prior to a runtime upgrade.\nThe prefix of the storage. All keys after the prefix are …\nReturn the prefix hash of instance.\nReturn the prefix hash of instance.\nReturns whether a preimage request exists for a given hash.\nProcess the given message, using no more than the …\nPromote a member to the next higher rank.\nThe encoded nodes to prove the existence of the data under …\nProve membership of a key owner in the current block-state.\nAdd a new <code>constraint</code> onto the filter.\nPut this storage version for the given pallet into the …\nGet the most recently determined random seed, along with …\nGet the basic random seed.\nGet the basic random seed.\nReturn the rank of the given ID, or <code>None</code> if they are not a …\nThe raw value.\nThe number of pages that are ready (not yet processed and …\nConvert the given <code>bounded</code> value back into its original …\nConvert the given <code>bounded</code> value back into its original …\nReturns an instance of the tally representing a rejecting …\nHow many more blocks safe mode will stay entered.\nRemove the item or otherwise replace it with its default …\nRemove the item or otherwise replace it with its default …\nRequest that someone report a preimage. Providers use this …\nRequest that someone report a preimage. Providers use this …\nReset origin filters to default one, i.e …\nRestore the filter from a previous <code>take</code> operation.\nCreate with system root origin and …\nTraits and associated utilities for scheduling …\nService all message queues in some fair manner.\nReturns current session index.\nReplace the caller with caller from the other origin\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the prime member.\nSet the prime member.\nA function that should be called before any use of the …\nCheck if an account for a given asset should be touched to …\nCreate with system signed origin and …\nThe total size of the blobs in bytes.\nGet a vector of all members in the set, ordered.\nThe storage footprint of the queue (including overweight …\nReturns the storage key for a storage version.\nEncoded string of storage name.\nReturn the prefix hash of storage instance.\nReturn the prefix hash of storage instance.\nReturns the approval ratio (positive to total votes) for …\nMember <code>old</code> was swapped with <code>new</code> at <code>rank</code>.\nAny remaining unprocessed messages should happen only …\nAny remaining unprocessed messages should happen only …\nClear the filter, returning a value that may be used later …\nContains the <code>Task</code> trait, which defines a general-purpose …\nTraits for working with tokens and their associated …\nCreate an account for <code>who</code> of the <code>asset</code> with a deposit …\nCasts the wrapped type into something that encodes alike.\nConsume self and try to collect the results into <code>C</code>.\nTry to decode the wrapped type from the inner <code>data</code>.\nDecode the entire data under the given storage, returning …\nDrop an instance cleanly. Only works if its value …\nMaybe mutate the item only if an <code>Ok</code> value is returned from …\nReturns <code>Ok</code> if <code>self</code> is <code>None</code>, otherwise returns <code>Err</code> with <code>self</code>…\nThe expected and default behavior of this method is to …\nThe expected and default behavior of this method is to …\nPerform the origin check.\nPerform the origin check, returning the origin value if …\nPerform the origin check, returning the origin value if …\nThe same as <code>try_origin</code> except that Root origin will always …\nThe same as <code>try_origin</code> except that Root origin will always …\nReturns <code>Ok</code> with the inner value of <code>Other</code> if <code>self</code> is that, …\nReturns <code>Ok</code> with the inner value of <code>Same</code> if <code>self</code> is that, …\nExecute the state checks.\nExecute the sanity checks of this pallet, per block.\nExecute the sanity checks of this pallet, per block.\nWhether the try-state checks are selected.\nAttempt to get an outer origin capable of passing …\nAttempt to get an outer origin capable of passing …\nReturns an outer origin capable of passing <code>try_origin</code> …\nDo something with the caller, consuming self but returning …\nReturns an instance of the tally representing a unanimous …\nAttempt to clear a previously noted preimage. Exactly the …\nAttempt to clear a previously noted preimage. Exactly the …\nClear a previously noted preimage. This is infallible and …\nUnpause this call immediately.\nCancel a previous preimage request.\nCancel a previous preimage request.\nConstructs a <code>Lookup</code> bounded item.\nOptionally consume an old ticket and alter the footprint, …\nReturns the active set of validators.\nThe value for that the existence is proved.\nVerify the given <code>proof</code>.\nVerify a header and return the author, if any.\nWhitelist this key.\nReturns a <code>Vec&lt;TrackedStorageKey&gt;</code> indicating the storage …\nA trait to handle errors and options when you are really …\nSubset of methods similar to <code>Defensive</code> that can only work …\nSubset of methods similar to <code>Defensive</code> that can only work …\nDoes not alter the inner value at all, but it will log …\nExactly the same as <code>map</code>, but it prints the appropriate …\nExactly the same as <code>map</code>, but it prints the appropriate …\nDefensively map the error into another return type, but …\nDefensively map and unpack the value to something else (<code>U</code>…\nPotentially map and unpack the value to something else (<code>U</code>…\nDefensively transform this result into an option, …\nDefensively transform this option to a result, mapping <code>None</code>…\nDefensively transform this option to a result, mapping <code>None</code>…\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nThe aggregated key-value type of a dynamic parameter store.\nKey of a dynamic parameter.\nThe aggregated key type.\nA dynamic parameter store across a concrete KV type.\nAllows to create a <code>ParameterStore</code> from a …\nA dynamic parameter store across an aggregated KV type.\nThe value that the key is parametrized with.\nThe aggregated value type.\nAn opaque representation of <code>Self::Value</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the value of a parametrized key.\nGet the value of a parametrized key.\nCalls <code>U::from(self)</code>.\nSplit the aggregated key-value type into its parts.\nAfter specified number of blocks.\nAt specified block.\nThe preimage for this hash was known but could not be …\nThe dispatch time of a scheduled task.\nAnything of this value or lower will definitely be …\nThe highest priority. We invert the value so that normal …\nThe hash of the encoded value which this value represents.\nThe lowest priority. Most stuff should be around here.\nError type for <code>MaybeHashed::lookup</code>.\nType representing an encodable value or the hash of the …\nInformation relating to the period of a scheduled task. …\nPriority with which a call is scheduled. It’s just a …\nA call of this hash was not known.\nThe value itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nA type that can be used as a scheduler.\nA type that can be used as a scheduler.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nA type that can be used as a scheduler.\nA means of expressing a call by the hash of its encoded …\nA means of expressing a call by the hash of its encoded …\nA type that can be used as a scheduler.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn address which can be used for removing a scheduled task.\nAn address which can be used for removing a scheduled task.\nA type that can be used as a scheduler.\nThe hasher used in the runtime.\nThe hasher used in the runtime.\nA type that can be used as a scheduler.\nCancel a scheduled task. If periodic, then it will cancel …\nCancel a scheduled, named task. If periodic, then it will …\nReturn the next dispatch time for a given task.\nReturn the next dispatch time for a given task.\nReschedule a task. For one-off tasks, this dispatch is …\nReschedule a task. For one-off tasks, this dispatch is …\nSchedule a dispatch to happen at the beginning of some …\nSchedule a dispatch to happen at the beginning of some …\nAn <code>Iterator</code> over tasks of this type used as the return …\nA general-purpose trait which defines a type of service …\nChecks if a particular instance of this <code>Task</code> variant is a …\nInspects the pallet’s state and enumerates tasks of this …\nPerforms the work for this particular <code>Task</code> variant.\nA unique value representing this <code>Task</code> within the current …\nReturns the weight of executing this <code>Task</code>.\nOperation may result in account going out of existence.\nSimple amalgamation trait to collect together properties …\nSimple amalgamation trait to collect together properties …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nDeposit couldn’t happen due to the amount being too low. …\nThe operation may be considered successful even if less …\nAccount cannot receive the assets.\nDeposit cannot happen since the account cannot be created …\nConverts an asset balance value into balance.\nConverts a balance value into an asset balance.\nAdapter for a rank-to-salary <code>Convert</code> implementation into a …\nOne of a number of consequences of withdrawing a fungible …\nThe operation should must either proceed either exactly …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nIn order to pay some other (higher-level) fees.\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are under the normal conditions.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nNot enough of the funds in the account are available for …\nRetrieve the salary for a member of a particular rank.\nAn identifier and balance.\nOperation must not result in the account going out of …\nTrait to handle NFT locking mechanism to ensure …\nThe funds will be minted into the system, increasing total …\nFunds are on hold.\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nThe operation should execute with regular privilege.\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nIn order to reserve some funds for a later return or …\nAccount balance would reduce to zero, potentially …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nThe mode under which usage of funds may be restricted.\nAccount continued in existence.\nAccount continued in existence.\nIn order to tip a validator for transaction inclusion.\nIn order to pay for (system) transaction costs.\nIn order to transfer ownership.\nThere has been an underflow in the system. This is …\nImplements <code>ConversionFromAssetBalance</code>, enabling a 1:1 …\nImplements <code>ConversionFromAssetBalance</code>, allowing for a 1:1 …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nReturns the set containing all flags.\nSome amount for this item.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nThe Currency trait and associated types.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nEnsures that a conversion for the <code>asset_id</code> will be …\nChoose all variants except for <code>one</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe traits for dealing with a single fungible token class …\nThe traits for <em>sets</em> of <code>fungible</code> tokens and any associated …\nRetrieve the salary for a given rank. The account ID is …\nAn identifier for this item.\nThe imbalance trait type and its associates, which handles …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the type into a <code>Result</code> with <code>DispatchError</code> as the …\nConvert the type into a <code>Result</code> with <code>TokenError</code> as the …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nCheck if the asset should be locked and prevent …\nTraits for dealing with a single non-fungible collection …\nTraits for dealing with a single non-fungible item.\nTraits for dealing with multiple collections of …\nTraits for dealing with multiple collections of …\nReturns the complement of this set of flags.\nThe Pay trait and associated types.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nThe balance of an account.\nAbstraction over a fungible assets system.\nThe currency that this schedule applies to.\nA inspect interface for a currency whose accounts can have …\nAn identifier for a lock. Used for disambiguating …\nA currency whose accounts can have liquidity restrictions.\nThe maximum number of locks a user should have on their …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe opaque token type for an imbalance. This is returned …\nThe opaque token type for an imbalance. This is returned …\nA currency where funds can be reserved from the user.\nAn identifier for a reserve. Used for disambiguating …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nA vesting schedule over a currency. This allows a …\nThe total amount of issuance in the system excluding those …\nAdds a vesting schedule to a given account.\nAmount of funds locked for <code>who</code> associated with <code>id</code>.\nReduce the total issuance by <code>amount</code> and return the …\nChecks if <code>add_vesting_schedule</code> would work against <code>who</code>.\nSame result as <code>reserve(who, value)</code> (but without the …\nSame result as <code>slash(who, value)</code> (but without the …\nReduce the active issuance by some amount.\nAdds up to <code>value</code> to the free balance of <code>who</code>. If <code>who</code> doesn…\nMints <code>value</code> to the free balance of <code>who</code>.\nReturns <code>Ok</code> iff the account is able to make a withdrawal of …\nEnsure the reserved balance is equal to <code>value</code>.\nEnsure the reserved balance is equal to <code>value</code>.\nChanges a balance lock (selected by <code>id</code>) so that it becomes …\nThe ‘free’ balance of a given account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nEnsure an account’s free balance equals some value; this …\nThe minimum balance any single account may have. This is …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nRemove an existing lock.\nRemove a vesting schedule for a given account.\nMove all the named reserved balance of one account into …\nMove all the named reserved balance of one account into …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves <code>value</code> from balance to reserved balance.\nMoves <code>value</code> from balance to reserved balance.\nThe amount of the balance of a given account that is …\nThe amount of the balance of a given account that is …\nSimilar to deposit_creating, only accepts a …\nSimilar to deposit_creating, only accepts a …\nCreate a new balance lock on account <code>who</code>.\nSimilar to withdraw, only accepts a <code>PositiveImbalance</code> and …\nDeducts up to <code>value</code> from the combined balance of <code>who</code>, …\nSlash all the reserved balance, returning the negative …")