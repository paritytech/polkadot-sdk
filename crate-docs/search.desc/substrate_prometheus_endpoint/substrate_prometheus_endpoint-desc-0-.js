searchState.loadedDescShard("substrate_prometheus_endpoint", 0, "A duplicate metric collector has already been registered.\nThe underlying implementation for <code>Counter</code> and <code>IntCounter</code>.\nThe underlying implementation for <code>CounterVec</code> and …\nA atomic float.\nThe underlying implementation for <code>Gauge</code> and <code>IntGauge</code>.\nThe underlying implementation for <code>GaugeVec</code> and <code>IntGaugeVec</code>.\nA <code>Metric</code> counts individual observations from an event or …\nA struct that bundles the options for creating a <code>Histogram</code> …\nA <code>Collector</code> that bundles a set of Histograms that all …\nHttp request error.\nHyper internal error.\nA atomic signed integer.\nThe label cardinality was inconsistent.\ni/o error.\nAn error containing a <code>std::io::Error</code>.\nA source of values for a <code>SourcedMetric</code>.\nAn error message which is only a string.\nThe type of the collected values.\nA struct that bundles the options for creating most <code>Metric</code> …\nThe error types for prometheus.\nA struct for registering Prometheus collectors, collecting …\nA counter whose values are obtained from an existing …\nA gauge whose values are obtained from an existing source.\nA metric whose values are obtained from an existing source,\nA atomic unsigned integer.\nAdd the given value to the gauge. (The value can be …\n<code>buckets</code> set the buckets.\nDefines the buckets into which observations are counted. …\nCollects the current values of the metrics from the source.\nA container holding various options.\n<code>const_label</code> adds a const label.\n<code>const_label</code> adds a const label.\n<code>const_labels</code> sets the const labels.\n<code>const_labels</code> sets the const labels.\nconst_labels are used to attach fixed labels to this …\nDecrease the gauge by 1.\nCreate <code>count</code> buckets, where the lowest bucket has an upper …\n<code>fq_name</code> returns the fq_name.\n<code>fq_name</code> returns the fq_name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>gather</code> calls the Collect method of the registered …\nReturn the counter value.\nReturn the gauge value.\nReturn count of all samples.\nReturn accumulated sum of all samples.\nhelp provides information about this metric. Mandatory!\nIncrease the counter by 1.\nIncrease the gauge by 1.\nIncrease the given value to the counter.\nIncrement the value by a given amount with the provided …\nInitializes the metrics context, and starts an HTTP server …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>GenericLocalCounter</code> for single thread usage.\nReturn a <code>LocalHistogram</code> for single thread usage.\nnamespace, subsystem, and name are components of the …\n<code>namespace</code> sets the namespace.\n<code>namespace</code> sets the namespace.\nnamespace, subsystem, and name are components of the …\nCreates a new metric that obtains its values from the …\nCreate a <code>GenericCounter</code> with the <code>name</code> and <code>help</code> arguments.\nCreate a <code>GenericGauge</code> with the <code>name</code> and <code>help</code> arguments.\nCreate a <code>HistogramOpts</code> with the <code>name</code> and <code>help</code> arguments.\n<code>new</code> creates the Opts with the <code>name</code> and <code>help</code> arguments.\n<code>new</code> creates a Registry.\nCreate a new registry, with optional custom prefix and …\nAdd a single observation to the <code>Histogram</code>.\nObserve execution time of a closure, in second.\n<code>register</code> registers a new <code>Collector</code> to be included in …\nRestart the counter, resetting its value back to 0.\nSet the gauge to an arbitrary value.\nReturn a <code>HistogramTimer</code> to track a duration.\nSubtract the given value from the gauge. (The value can be …\n<code>subsystem</code> sets the sub system.\n<code>subsystem</code> sets the sub system.\nnamespace, subsystem, and name are components of the …\nStore the value, returning the previous value.\nStores a value into the atomic integer, returning the …\n<code>unregister</code> unregisters the <code>Collector</code> that equals the …\n<code>variable_label</code> adds a variable label.\n<code>variable_label</code> adds a variable label.\n<code>variable_labels</code> sets the variable labels.\n<code>variable_labels</code> sets the variable labels.\nvariable_labels contains names of labels for which the …\nCreate a <code>GenericCounter</code> with the <code>opts</code> options.\nCreate a <code>GenericGauge</code> with the <code>opts</code> options.\n<code>with_opts</code> creates a <code>Histogram</code> with the <code>opts</code> options.\nThe expected number of labels.\nThe actual number of labels.")