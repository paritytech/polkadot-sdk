searchState.loadedDescShard("pallet_conviction_voting", 0, "Voting Pallet\nA vote for a referendum of a particular account.\nPermitted to do everything.\nInformation concerning the direct vote-casting of some …\nThe account is voting directly.\nA value denoting the strength of conviction of a vote.\nInformation concerning the delegation of some voting power.\nThe account is delegating <code>balance</code> of its balance to a …\nAmount of votes and capital placed in delegation for an …\n1x votes, locked for an enactment period following a …\n2x votes, locked for 2x enactment periods following a …\n3x votes, locked for 4x…\n4x votes, locked for 8x…\n5x votes, locked for 16x…\n6x votes, locked for 32x…\n0.1x votes, unlocked.\nPermitted to do only the changes that do not need the owner…\nA split vote with balances given for both ways, and with …\nA split vote with balances given for both ways as well as …\nA standard vote, one-way (approve or reject) with a given …\nInfo regarding an ongoing referendum.\nWhether an <code>unvote</code> operation is able to make actions that …\nA number of lock periods, plus a vote, one way or the …\nAn indicator for what an account is doing; it can either …\nAdd an account’s vote into the tally.\nReturns <code>Some</code> with whether the vote is an aye vote if it is …\nThe number of aye votes, expressed in terms of …\nThe number of aye votes, expressed in terms of …\nThe total balance involved in this vote.\nThe amount of balance delegated.\nConvictionVoting pallet benchmarking.\nThe amount of raw capital, used for the support.\nThe conviction with which the voting power is delegated. …\nThe total amount of delegations that this account has …\nThe total amount of delegations that this account has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new tally.\nIncrement some amount of votes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of time (in number of periods) that our …\nThe amount of this account’s balance that must currently …\nReturns <code>Some</code> of the lock periods that the account is …\nThe number of nay votes, expressed in terms of …\nThe number of nay votes, expressed in terms of …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAny pre-existing locks from past voting/delegating …\nAny pre-existing locks from past voting/delegating …\nDecrement some amount of votes.\nRemove an account’s vote from the tally.\nThe basic number of aye votes, expressed pre-conviction.\nThe basic number of aye votes, expressed pre-conviction.\nThe account to which the voting power is delegated.\nThe votes of a voter of the given <code>balance</code> with our …\nThe number of votes (this is post-conviction).\nThe current votes of the account.\nAutogenerated weights for <code>pallet_conviction_voting</code>\nThe account is already delegating.\nThe account currently has votes attached to it and the …\nThe class ID supplied is invalid.\nContains a variant per dispatchable extrinsic that this …\nThe voting classes which have a non-zero lock requirement …\nThe class must be supplied since it is not easily …\nConfiguration trait of this pallet.\nCurrency type with which voting happens.\nAn account has delegated their vote to another account. …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nToo high a balance was provided that the account cannot …\nThe maximum amount of tokens which may be used for voting. …\nThe maximum number of concurrent votes an account may have.\nMaximum number of votes reached.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe actor has no permission to conduct the action.\nThe actor has no permission to conduct the action right …\nDelegation to oneself makes no sense.\nThe account is not currently delegating.\nPoll is not ongoing.\nThe given account did not vote on the poll.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe implementation of the logic which conducts polls.\nAn [account] has cancelled a previous delegation operation.\nThe minimum period of vote locking.\nA vote that been removed\nAn account that has voted\nAll voting for a particular voter in a particular voting …\nWeight information for extrinsics in this pallet.\nDelegate the voting power (with some given conviction) of …\nDelegate the voting power (with some given conviction) of …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>delegate</code>.\nCreate a call with the variant <code>remove_other_vote</code>.\nCreate a call with the variant <code>remove_vote</code>.\nCreate a call with the variant <code>undelegate</code>.\nCreate a call with the variant <code>unlock</code>.\nCreate a call with the variant <code>vote</code>.\nRemove a vote for a poll.\nRemove a vote for a poll.\nRemove a vote for a poll.\nRemove a vote for a poll.\nAuto-generated docs-only module listing all (public and …\nUndelegate the voting power of the sending account for a …\nUndelegate the voting power of the sending account for a …\nRemove the lock caused by prior voting/delegating which …\nRemove the lock caused by prior voting/delegating which …\nVote in a poll. If <code>vote.is_aye()</code>, the vote is to enact the …\nVote in a poll. If <code>vote.is_aye()</code>, the vote is to enact the …\nDelegate the voting power (with some given conviction) of …\nRemove a vote for a poll.\nRemove a vote for a poll.\nUndelegate the voting power of the sending account for a …\nRemove the lock caused by prior voting/delegating which …\nVote in a poll. If <code>vote.is_aye()</code>, the vote is to enact the …\nThe voting classes which have a non-zero lock requirement …\nAll voting for a particular voter in a particular voting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_conviction_voting</code> using the Substrate …\nWeight functions needed for <code>pallet_conviction_voting</code>.\nStorage: <code>ConvictionVoting::VotingFor</code> (r:2 w:2) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>ConvictionVoting::VotingFor</code> (r:1 w:1) Proof: …\nStorage: <code>ConvictionVoting::VotingFor</code> (r:1 w:1) Proof: …\nStorage: <code>ConvictionVoting::VotingFor</code> (r:2 w:2) Proof: …\nStorage: <code>ConvictionVoting::VotingFor</code> (r:1 w:1) Proof: …\nStorage: <code>Referenda::ReferendumInfoFor</code> (r:1 w:1) Proof: …\nStorage: <code>Referenda::ReferendumInfoFor</code> (r:1 w:1) Proof: …")