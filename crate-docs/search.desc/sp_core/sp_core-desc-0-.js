searchState.loadedDescShard("sp_core", 0, "Shareable Substrate types.\nConcrete implementation of Hasher using Blake2b 256-bit …\nHex-serialized shim for <code>Vec&lt;u8&gt;</code>.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\n<code>Debug</code> log level.\n<code>Debug</code> log level filter.\n<code>Error</code> log level.\n<code>Error</code> log level filter.\nThe error type that gets returned when a collection can’…\nA trait for querying a single value from a type.\nImplement Get by returning Default for any type that …\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nTrait describing an object that can hash a slice of bytes. …\n<code>Info</code> log level.\n<code>Info</code> log level filter.\nConcrete implementation of Hasher using Keccak 256-bit …\nThe length in bytes of the <code>Hasher</code> output.\nA log level matching the one from <code>log</code> crate.\nLog level filter that expresses which log levels should be …\nMaximum value.\nMaximum value.\nThe maximum number of bytes that can be allocated at one …\n<code>Off</code> log level filter.\nStores the encoded <code>RuntimeMetadata</code> for the native side as …\nSimple blob to hold a <code>PeerId</code> without committing to its …\nThe output type of the <code>Hasher</code>\nWhat to use to build <code>HashMap</code>s with this <code>Hasher</code>.\nSimple 4 byte identifier.\n<code>Trace</code> log level.\n<code>Trace</code> log level filter.\nTry and collect into a collection <code>C</code>.\nThe type which is returned.\nProvide a simple 4 byte identifier for a type.\nA trait for querying a single value from a type defined in …\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nThe void type - it cannot exist.\n<code>Warn</code> log level.\n<code>Warn</code> log level filter.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nVRFs backed by Bandersnatch, an elliptic curve built over …\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nDo a Blake2 128-bit hash and return result.\nDo a Blake2 256-bit hash and return result.\nDo a Blake2 512-bit hash and return result.\nDo a Blake2 512-bit hash and place result in <code>dest</code>.\nDo a Blake2 64-bit hash and return result.\nBLS (Boneh–Lynn–Shacham) Signature along with …\nTraits, types and structs to support a bounded BTreeMap.\nBuild a bounded btree-map from the given literals.\nTraits, types and structs to support putting a bounded …\nBuild a bounded vec from the given literals.\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nProvides a const function for converting a hex string to a …\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nCryptographic utilities.\nGeneric byte array which can be specialized with a marker …\nContains the <code>crate::defer!</code> macro for <em>deferring</em> the …\nExecutes the given code when the current scope is dropped.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nSimple ECDSA secp256k1 API.\nSimple Ed25519 API.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nGenerates a macro for checking if a certain feature is …\nReturn the current value.\nReturn the current value.\nA fixed hash type.\nCompute the hash of the provided slice of bytes returning …\nProvides a const array from given string literal.\nWrapper type for byte collections that outputs hex.\nMacro for creating <code>Maybe*</code> marker traits.\nMacro for creating <code>Maybe*</code> marker traits.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nDo a keccak 256-bit hash and return result.\nDo a keccak 512-bit hash and return result.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nInitialize a key-value collection from array.\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nCreates a new instance with the given metadata blob.\nCreate new <code>OpaquePeerId</code>\nOffchain workers types\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nAPI for using a pair of crypto schemes together.\nCreate new implementations of the <code>Get</code> trait.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nDo a sha2 256-bit hash and return result.\nSimple sr25519 (Schnorr-Ristretto) API.\nTypes that should only be used for testing!\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nShareable Substrate traits.\nConsume self and try to collect the results into <code>C</code>.\nDo a XX 128-bit hash and return result.\nDo a XX 128-bit hash and place result in <code>dest</code>.\nDo a XX 256-bit hash and return result.\nDo a XX 256-bit hash and place result in <code>dest</code>.\nDo a XX 64-bit hash and return result.\nDo a XX 64-bit hash and place result in <code>dest</code>.\nAn unsigned fixed-size integer.\nMacro for exporting functions from wasm in with the …\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nIdentifier used to match public keys against …\nThe byte length of serialized pre-output.\nThe byte length of serialized public key.\nBandersnatch secret key.\nBandersnatch public key.\nThe byte length of secret key seed.\nThe byte length of serialized signature.\nContext used to produce a plain signature without any VRF …\nBandersnatch signature.\nDerive a child key from a series of given (hard) junctions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate an arbitrary number of bytes from the given …\nBandersnatch Ring-VRF types and operations.\nProduce a ring-vrf signature.\nGet the key seed.\nSign a message.\nReturn a vector filled with the seed (32 bytes).\nBandersnatch VRF types and operations.\nOverhead in the domain size with respect to the supported …\nContext used to construct ring prover and verifier.\nremove as soon as soon as serialization is implemented by …\nRing VRF signature.\nDomain size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n<code>k</code> is the prover secret index in [0..keyset_size).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the keyset max size.\nBuild an dummy instance for testing purposes.\nVRF pre-outputs.\nGet ring prover for the key at index <code>public_idx</code> in the …\nVerify a ring-vrf signature.\nRing signature.\nGet ring verifier for the <code>public_keys</code> set.\nInformation required for a lazy construction of a ring …\nVerifier key.\nMax number of inputs/pre-outputs which can be handled by …\nVRF input to construct a <code>VrfPreOutput</code> instance and …\nBounded vector used for VRF inputs and pre-outputs.\nVRF pre-output derived from <code>VrfInput</code> using a <code>VrfSecret</code>.\nData to be signed via one of the two provided vrf flavors.\nVRF signature.\nGet the challenge associated to the <code>transcript</code> contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nVRF inputs to be signed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate an arbitrary number of bytes from the given …\nConstruct a new VRF input.\nConstruct a new data to be signed.\nConstruct a new data to be signed.\nVRF pre-outputs.\nAppend a message to the transcript.\nTries to append a <code>VrfInput</code> to the vrf inputs list.\nTranscript signature.\nAssociated protocol transcript.\nPublic key serialized size\nA key pair.\nA public key.\nSignature serialized size\nA generic BLS signature.\nBLS-377 specialized types\nBLS-381 specialized types\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nGet the seed for this key.\nAn identifier used to match public keys against BLS12-377 …\nBLS12-377 key pair.\nBLS12-377 public key.\nBLS12-377 signature.\nAn identifier used to match public keys against BLS12-381 …\nBLS12-381 key pair.\nBLS12-381 public key.\nBLS12-381 signature.\nA bounded map based on a B-Tree.\nGet the bound of the type in <code>usize</code>.\nClears the map, removing all elements.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn a mutable reference to the value corresponding to …\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeMap</code>.\nGets a mutable iterator over the entries of the map, …\nConsume the map, applying <code>f</code> to each of it’s values and …\nCreate a new <code>BoundedBTreeMap</code>.\nRemove a key from the map, returning the value at the key …\nRemove a key from the map, returning the value at the key …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nConsume the map, applying <code>f</code> to each of it’s values as …\nConsumes self and mutates self via the given <code>mutate</code> …\nA bounded slice.\nA bounded vector.\nCreate an object through truncation.\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nGet the bound of the type in <code>usize</code>.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nExactly the same semantics as <code>Vec::clear</code>.\nExact same semantics as <code>Vec::drain</code>.\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nExactly the same semantics as <code>slice::get_mut</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturns true of this collection is full.\nExactly the same semantics as <code>slice::iter_mut</code>.\nExactly the same semantics as <code>slice::last_mut</code>.\nCreate <code>Self</code> with no items.\nExactly the same semantics as <code>Vec::pop</code>.\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nMove the position of an item from one location to another …\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nExactly the same semantics as <code>slice::swap_remove</code>.\nExactly the same semantics as <code>Vec::truncate</code>.\nCreate an object through truncation.\nConsume and truncate the vector <code>v</code> in order to create a new …\nCreate an instance from the first elements of the given …\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsumes self and mutates self via the given <code>mutate</code> …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as [<code>Vec::rotate_left</code>], but …\nExactly the same semantics as [<code>Vec::rotate_right</code>], but …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nAcala - https://acala.network/\nAn opaque 32-byte cryptographic identifier.\nA container for results of parsing the address uri string.\nErrors that are possible during parsing the address URI.\nAjuna Network - https://ajuna.io\nAllfeat Network - https://allfeat.network\nAltair - https://centrifuge.io/\nAmplitude chain - https://pendulumchain.org/\nAnmol Network - https://anmol.network/\nAres Protocol - https://www.aresprotocol.com/\nAstar Network - https://astar.network\nAventus Mainnet - https://aventus.io\nBajun Network - https://ajuna.io\nBare 32-bit Ed25519 public key.\nBare 32-bit ECDSA SECP-256k1 public key.\nBare 32-bit Schnorr/Ristretto (S/R 25519) public key.\nBasilisk - https://bsx.fi\nBifrost - https://bifrost.finance/\nBitgreen - https://bitgreen.org/\nBittensor - https://bittensor.com\nTrait used for types that are really just a fixed-length …\nCalamari: Manta Canary Network - https://manta.network\nCentrifuge Chain - https://centrifuge.io/\nCere Network - https://cere.network\nCESS - https://cess.cloud\nCESS Testnet - https://cess.cloud\nChainflip - https://chainflip.io/\nChainX - https://chainx.org/\nCloudWalk Network Mainnet - …\nClover Finance - https://clover.finance\nComposable Finance - https://composable.finance\nAutomata ContextFree - https://ata.network\nCORD Network - https://cord.network/\nCrust Network - https://crust.network\nType which has a particular kind of crypto associated with …\nAn identifier for a specific cryptographic algorithm used …\nThe address of the associated root phrase for our publicly …\nThe root phrase for our publicly known keys.\nDark Mainnet\nDarwinia Network - https://darwinia.network\nDataHighway\nDENTNet - https://www.dentnet.io\nDerivable key trait.\nAn error when deriving a key.\nA since derivation junction description. It is the single …\nDICO - https://dico.io\nDock Mainnet - https://dock.io\nDorafactory Polkadot Network - https://dorafactory.org\nDummy cryptography. Doesn’t do anything.\nEdgeware - https://edgewa.re\nEfinity - https://efinity.io/\nEquilibrium Network - https://equilibrium.io\nEnergy Web X - https://www.energyweb.org\nExpose a reference to an inner secret\nFragnova Network - https://fragnova.com\nFrequency - https://www.frequency.xyz\nCreate random values of <code>Self</code> given a stream of entropy.\nĞ1 - https://duniter.org\nGEEK Network - https://geek.gl\nGenshiro Network - https://genshiro.equilibrium.io\nGM - https://gmordie.com\nGolden Gate - https://ggxchain.io/\nGolden Gate Sydney - https://ggxchain.io/\nGORO Network - https://goro.network\nHard (“hardened”) derivation. Public keys do not have …\nHashed Network - https://hashed.network\nHeiko - https://parallel.fi/\nHumanode Network - https://humanode.io\nHydraDX - https://hydradx.io\nAnmol Network Ibtida Canary network - …\nICE Network - https://icenetwork.io\nImpact Protocol Network - https://impactprotocol.network/\nThe inner type it is wrapping.\nIntegritee - https://integritee.network\nIntegritee Incognito - https://integritee.network\nInterlay - https://interlay.io/\nThe overall format was invalid (e.g. the seed phrase …\nThe supplied password was invalid.\nThe derivation path was invalid (e.g. contains soft …\nThe seed phrase provided is not a valid BIP39 phrase.\nThe seed is invalid (bad content).\nThe seed has an invalid length.\nOne type is wrapped by another.\nThe length of the junction identifier. Note that this is …\nJoystream - https://www.joystream.org\nJupiter - https://jupiter.patract.io\nKabocha - https://kabocha.network\nKapex - https://totemaccounting.com\nKarmacoin - https://karmaco.in\nKarura - https://karura.network/\nKatal Chain\nAn identifier for a type of cryptographic key.\nKICO - https://dico.io\nKILT Spiritnet - https://kilt.io/\nKintsugi - https://interlay.io/\nKrest Network - https://www.peaq.network/\nKrigan Network - https://krigan.network\nKulupu - https://kulupu.network/\nKusama Relay Chain - https://kusama.network\nThe “length” of the values of this type, which is …\nLaminar - http://laminar.network/\nLitentry Network - https://litentry.com/\nLitmus Network - https://litentry.com/\nlogion network - https://logion.network\nLuhn Network - https://luhn.network\nManta network - https://manta.network\nMathChain mainnet - https://mathwallet.org\nMathChain testnet - https://mathwallet.org\nMetaquity Network - https://metaquity.xyz/\nMoonbeam - https://moonbeam.network\nMoonriver - https://moonbeam.network\nMoonsama - https://moonsama.com\nNeatcoin Mainnet - https://neatcoin.org\nNFTMart - https://nftmart.io\nNodle Chain - https://nodle.io/\nOAK Network - https://oak.tech\nOriginTrail Parachain - https://parachain.origintrail.io/\n3DP network - https://3dpass.org\n3DP test network - https://3dpass.org\nTrait suitable for typical cryptographic PKI key pair type.\nThe pair key type of this crypto.\nParallel - https://parallel.fi/\nPeaq Network - https://www.peaq.network/\nPeerplays - https://www.peerplays.com/\nPendulum chain - https://pendulumchain.org/\nPhala Network - https://phala.network\nPicasso - https://picasso.composable.finance\nPioneer Network by Bit.Country - https://bit.country\nPolimec Chain - https://polimec.io/\nPolkadex Mainnet - https://polkadex.trade\nPolkadex Parachain - https://polkadex.trade\nPolkadot Relay Chain - https://polkadot.network\nPolkaFoundry Network - https://polkafoundry.com\nPolkaSmith Canary Network - https://polkafoundry.com\nPolymesh - https://polymath.network/\nPontem Network - https://pontem.network\nTrait suitable for cryptographic public keys.\nThe type which is used to encode a public key.\nAn error type for SS58 decoding.\nQUARTZ by UNIQUE - https://unique.network\nThis prefix is reserved.\nThis prefix is reserved.\nLaminar Reynolds Canary - http://laminar.network/\nRobonomics - https://robonomics.network\nSapphire by Unique - https://unique.network\nSeals Network - https://seals.app\nSecret strings\nAn error with the interpretation of a secret.\nA secret uri (<code>SURI</code>) that can be used to generate a key …\nThe type used to (minimally) encode the data required to …\nShiftNrg\nTrait suitable for cryptographic signatures.\nThe type used to represent a signature. Can be created …\nSNOW: ICE Canary Network - https://icenetwork.io\nSocial Network - https://social.network\nSocietal - https://www.sctl.xyz\nSoft (vanilla) derivation. Public keys have a …\nA soft key was found in the path (and is unsupported).\nSORA Network - https://sora.org\nSORA Polkadot Parachain - https://sora.org\nSORA Kusama Parachain - https://sora.org\nA custom address format. See also <code>Ss58AddressFormatRegistry</code>\nA known address (sub)format/network ID for SS58.\nKey that can be encoded to/from SS58.\nStafi - https://stafi.io\nSubsocial\nSubspace - https://subspace.network\nSubspace testnet - https://subspace.network\nSubstrate - https://substrate.io/\nSynesthesia - https://synesthesia.network/\nt3rn - https://t3rn.io/\nTangle Network - https://www.webb.tools/\nTernoa - https://www.ternoa.network\nTidefi - https://tidefi.com\nTinker - https://invarch.network\nTotem - https://totemaccounting.com\nSimilar to <code>From</code>, except that the onus is on the part of …\nThe counterpart to <code>UncheckedFrom</code>.\nUniArts Network - https://uniarts.me\nUnique Network - https://unique.network\nVara Network - https://vara-network.io/\nValiu Liquidity Network - https://valiu.com/\nTrait grouping types shared by a VRF signer and verifiers.\nVRF input.\nVRF pre-output.\nVRF Public Key.\nVRF Secret Key.\nVRF signing data.\nVRF signature.\nWatr Protocol - https://www.watr.org\nOpposite of <code>IsWrappedBy</code> - denotes a type which is a simple …\nxx network - https://xx.network\nZeitgeist - https://zeitgeist.pm\nZERO - https://zero.io\nZERO Alphaville - https://zero.io\nTrait to zeroize a memory buffer. Trait for securely …\nTrait to zeroize a memory buffer. Derive the <code>Zeroize</code> trait.\nAll known address formats.\nnames of all address formats\nGet a reference to the inner type that is wrapped.\nReturn a slice filled with raw data.\nCustom constructor\nReturns default SS58 format used by the current active …\nDerive a child key from a series of given junctions.\nDerive a child key from a series of given junctions.\nExpose secret: this is the only method providing access to …\nA format filterer, can be used to ensure that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a random value of <code>Self</code> given a stream of random …\nconst function to convert <code>Ss58AddressFormat</code> to u16\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nReturns the KeyPair from the English BIP39 seed <code>phrase</code>, or …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate new key pair from the provided <code>seed</code>.\nMake a new key pair from secret seed material. The slice …\nA new instance from the given slice that should be …\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check …\nInterprets the string <code>s</code> in order to generate a key pair.\nInterprets the string <code>s</code> in order to generate a key Pair. …\nSome if the string is a properly encoded SS58Check …\nGenerate new secure (random) key pair.\nGenerate new secure (random) key pair and provide the …\nCreate a new hard (hardened) DeriveJunction from a given, …\nConsume self to return a hard derive junction with the …\nCreates an instance of <code>Error::MissingCharacterInHardPath</code> …\nCreates an instance of <code>Error::InvalidCharacterInPass</code> using …\nCreates an instance of <code>Error::InvalidCharacterInPhrase</code> …\nCreates an instance of <code>Error::MissingCharacterInSoftPath</code> …\nGet a reference to the inner junction id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA custom format is one that is not already known.\nReturn <code>true</code> if the junction is hard.\nNetwork/AddressType is reserved for future use.\nReturn <code>true</code> if the junction is soft.\nThe junctions as part of the uri.\nKnown key types; this also functions as a global registry …\nCreate a new instance from its raw inner byte value.\nParses the given string.\nPassword.\nOptional password as given as part of the uri.\nKey derivation paths, ordered as in input string,\nThe phrase to derive the private key.\nPhrase, hexadecimal string, or ss58-compatible string.\nAddress prefix used on the network\nGet the public key.\nSet the default SS58 “version”.\nSign a message.\nCreate a new soft (vanilla) DeriveJunction from a given, …\nConsume self to return a soft derive junction with the …\nReturn a vec filled with raw data.\nReturn a <code>Vec&lt;u8&gt;</code> filled with raw data.\nReturn the ss58-check string for this key.\nReturn the ss58-check string for this key.\nTokens used on the given network.\nConvert from an instance of <code>T</code> to Self. This is not …\nThe counterpart to <code>unchecked_from</code>.\nConsume self to return the chain code.\nReturns either the input address format or the default.\nVerify a signature on a message. Returns true if the …\nGet VRF-specific pre-output.\nSign VRF-specific data.\nVerify input data signature.\nZero out this object from memory using Rust intrinsics …\nKey type for controlling an account in a Substrate …\nKey type for Aura module, built-in. Identified as <code>aura</code>.\nKey type for AuthorityDiscovery module, built-in. …\nKey type for Babe module, built-in. Identified as <code>babe</code>.\nKey type for BEEFY module.\nA key type ID useful for tests.\nKey type for Grandpa module, built-in. Identified as <code>gran</code>.\nKey type for ImOnline module, built-in. Identified as <code>imon</code>.\nKey type for Mixnet module, used to sign key-exchange …\nKey type for Sassafras module, built-in. Identified as <code>sass</code>…\nKey type for staking, built-in. Identified as <code>stak</code>.\nA key type for signing statements\nGeneric byte array holding some crypto-related raw data.\nGeneric encoded public key.\nTag used for generic public key bytes.\nGeneric encoded signature.\nTag used for generic signature bytes.\nReturn a slice filled with raw data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the given full public key.\nA new instance from an H256.\nA new instance from an H512.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct from raw array.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nRecover the public key from this signature and a message.\nRecover the public key from this signature and a …\nConstruct from raw array.\nExecutes the wrapped closure on drop.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DeferGuard</code> with the given closure.\nAn identifier used to match public keys against ecdsa keys\nThe byte length of public key\nA key pair.\nThe ECDSA compressed public key.\nThe byte length of signature\nA signature (a 512-bit value, plus 8 bits for recovery ID).\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nCreate a new instance from the given full public key.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nCalls <code>U::from(self)</code>.\nGet the public key.\nRecover the public key from this signature and a message.\nRecover the public key from this signature and a …\nGet the seed for this key.\nSign a message.\nSign a pre-hashed message\nReturn a vec filled with raw data.\nVerify a signature on a message. Returns true if the …\nVerify a signature on a message. Returns true if the …\nVerify a signature on a pre-hashed message. Return <code>true</code> if …\nAn identifier used to match public keys against ed25519 …\nThe byte length of public key\nA key pair.\nA public key.\nThe byte length of signature\nA signature.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nCalls <code>U::from(self)</code>.\nGet the public key.\nGet the seed for this key.\nSign a message.\nReturn a vec filled with raw data.\nVerify a signature on a message.\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nHash conversion. Used to convert between unbound …\nSimple trait to transform various types to <code>&amp;[u8]</code>\nSimple wrapper to display hex representation of bytes.\nTransform <code>self</code> into <code>&amp;[u8]</code>.\nFormat into ASCII + # + hex, suitable for storage key …\nReturns the argument unchanged.\nCreate new instance that will display <code>d</code> as a hex string …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nExecution context extra capabilities.\nA externalities extension for accessing the Offchain DB.\nThe requested action couldn’t been completed within a …\nDeadline was reached while we waited for this request to …\nDuration type\nAn extended externalities for offchain workers.\nThe request has finished with given status code.\nExternal http calls.\nAn error enum returned by some http methods.\nOpaque type for offchain http requests.\nStatus of the HTTP request\nThe ID of the request is invalid in this context.\nThe passed ID is invalid in this context.\nThere was an IO Error while processing the request.\nAn error has occurred during the request, for example a …\nKeystore access.\nLocal storage is revertible and fork-aware. It means that …\nAn <code>*Externalities</code> implementation with limited capabilities.\nAccess to opaque network state.\nManage the authorized nodes\nAccess to offchain worker DB (read only).\nAccess to offchain worker DB (writes).\nThe offchain database extension that will be registered at …\nChange to be applied to the offchain worker db in regards …\nOffchain DB persistent (non-fork-aware) storage.\nThe offchain worker extension that will be registered at …\nSimple blob to hold a <code>Multiaddr</code> without committing to its …\nA blob to hold information about the local node’s …\nPersistent storage is non-revertible and not fork-aware. …\nRandomness source.\nRemove the data associated with the key\nPersistent storage prefix used by the Offchain Worker API …\nOverwrite the value of an associated key\nA type of supported crypto.\nAccess time related functionality\nOpaque timestamp type\nAbstraction over transaction pool.\nAn externalities extension to submit transactions to the …\nIncrease the timestamp by given <code>Duration</code>.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReplace the value in storage if given old_value matches …\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns a saturated difference (Duration) between two …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nList of addresses the node knows it can be reached as.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nCreate new duration representing given number of …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates new <code>Timestamp</code> given unix timestamp in milliseconds.\nRetrieve a value from storage under given key and prefix.\nAppend header to the request.\nInitiates a http request given HTTP verb and the URL.\nWrite a chunk of request body.\nRead all response headers.\nRead a chunk of body response to given buffer.\nBlock and wait for the responses for given requests.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns if the local node is a potential validator.\nRemoves a value in the local storage.\nSets a value in the local storage if it matches current …\nGets a value from the local storage.\nSets a value in the local storage.\nReturns number of milliseconds this Duration represents.\nReturns information about the local node’s network state.\nCreate new externalities limited to given <code>capabilities</code>.\nCreate new <code>OpaqueMultiaddr</code>\nCreate a new instance of <code>Self</code>.\nCreate a new instance of <code>OffchainDbExt</code>.\nCreate a new instance of <code>TransactionPoolExt</code>.\nReturns the complement of this set of flags.\nPeerId of the local node in SCALE encoded.\nReturns a random seed.\nClear a storage entry under given key and prefix.\nRemoves the specified flags in-place.\nPersist a value in storage under given key and prefix.\nInserts or removes the specified flags depending on the …\nSet the authorized nodes from runtime.\nPause the execution until <code>deadline</code> is reached.\nIn-memory implementation of offchain workers database.\nDecrease the timestamp by given <code>Duration</code>\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nSubmit transaction.\nReturns the symmetric difference between the flags in <code>self</code> …\nUtilities for offchain calls testing.\nReturns current UNIX timestamp (in millis)\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturn number of milliseconds since UNIX epoch.\nIn-memory storage for offchain workers.\nOffchain DB that implements <code>DbExternalities</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the offchain storage and iterate over all key …\nIterate over all key value pairs by reference.\nCreate new instance of Offchain DB.\nRemove a key and its associated value from the offchain …\nInternal state of the externalities.\nPending request.\nThe internal state of the fake transaction pool.\nImplementation of offchain externalities used for tests.\nSharable “persistent” offchain storage for test.\nImplementation of transaction pool used for test.\nApply a set of off-chain changes directly to the test …\nRequest body\nAdd expected HTTP request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAsserts that pending request has been submitted and fills …\nRetrieve a key from the test backend.\nRequest headers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal storage\nEncoded Metadata\nHTTP method\nCreate a new and empty offchain storage db for persistent …\nCreate new <code>TestOffchainExt</code> and a reference to the internal …\nCreate new <code>TestTransactionPoolExt</code> and a reference to the …\nPersistent local storage\nNumber of bytes already read from the response body.\nA list of pending requests.\nResponse body\nResponse headers\nA supposedly random seed.\nHas the request been sent already.\nA timestamp simulating the current time.\nA vector of transactions submitted from the runtime.\nURI\nCreate new <code>TestOffchainExt</code> and a reference to the internal …\nA key pair.\nA public key.\nA pair of signatures of different types\nDerive a child key from a series of given junctions.\nECDSA and BLS12-377 paired crypto scheme\nECDSA and BLS12-381 paired crypto scheme\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nGet the seed/secret key for each key and then concatenate …\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nAn identifier used to match public keys against BLS12-377 …\n(ECDSA,BLS12-377) key-pair pair.\n(ECDSA,BLS12-377) public key pair.\n(ECDSA,BLS12-377) signature pair.\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nAn identifier used to match public keys against BLS12-381 …\n(ECDSA,BLS12-381) key-pair pair.\n(ECDSA,BLS12-381) public key pair.\n(ECDSA,BLS12-381) signature pair.\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nHashes the <code>message</code> with the specified <code>Hasher</code> before …\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF pre-output.\nVRF proof.\nAdd some extra data to be signed.\nKey type for generic Bandersnatch key.\nKey type for generic BLS12-377 key.\nKey type for generic BLS12-381 key.\nKey type for generic ECDSA key.\nKey type for (ECDSA,BLS12-377) key pair\nKey type for (ECDSA,BLS12-381) key pair\nKey type for generic Ed25519 key.\nKey type for generic Sr25519 key.\nA task executor that can be used in tests.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Self</code>.\nThe context in which a call is done.\nCode execution engine.\nCould not find the <code>:code</code> in the externalities while …\nExternalities error type.\nThe Substrate externalities.\nExtension for the <code>Externalities</code> trait.\nSomething that can fetch the runtime <code>:code</code>.\nType that implements <code>FetchRuntimeCode</code> and always returns …\nThe call is happening in some offchain context.\nThe call is happening in some on-chain context like …\nA trait that allows reading version information from the …\nAn extension that provides functionality to read version …\nThe Wasm code of a Substrate runtime.\nSomething that can spawn essential tasks (blocking and …\nSomething that can spawn tasks (blocking and non-blocking) …\nWrapper to use a <code>u8</code> slice or <code>Vec</code> as <code>FetchRuntimeCode</code>.\nCall a given method in the runtime.\nRead child runtime storage.\nGet child storage value hash.\nGet the trie root of a child storage map.\nClear child storage entries which keys are start with the …\nClear a child storage entry (<code>key</code>) of current contract …\nClear storage entries which keys are start with the given …\nClear a storage entry (<code>key</code>) of current contract being …\nThe code fetcher that can be used to lazily fetch the code.\n…\nDeregister and drop extension of <code>T</code> type.\nCreate an empty instance.\nWhether a child storage entry exists.\nWhether a storage entry exists.\nTries to find a registered extension and returns a mutable …\nFetch the runtime <code>:code</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n…\n…\nThe hash of <code>code</code>.\nThe optional heap pages this <code>code</code> should be executed with.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClear an entire child storage.\nCreates a new instance of the extension given a version …\nReturns the key immediately following the given key, if it …\nReturns the key immediately following the given key, if it …\nSet or clear a child storage entry.\nSet or clear a storage entry (<code>key</code>) of current contract …\n…\nReads the runtime version information from the given wasm …\n…\nRegister extension <code>ext</code>.\n…\nSet child storage entry <code>key</code> of current contract being …\nWrite a key value pair to the offchain storage database.\nSet storage entry <code>key</code> of current contract being called …\n…\nSpawn the given non-blocking future.\nSpawn the given blocking future.\nSpawn the given non-blocking future.\nSpawn the given blocking future.\nRead runtime storage.\nAppend storage item.\nCommit the last transaction started by …\nGet storage value hash.\nIndex specified transaction slice and store it.\nRenew existing piece of transaction storage.\nRollback the last transaction started by …\nGet the trie root of the current storage map.\nStart a new nested transaction.\n…\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.")