searchState.loadedDescShard("frame_benchmarking_cli", 0, "Contains the root <code>BenchmarkCmd</code> command and exports its …\nThe base path that is used for everything that needs to be …\nThe root <code>benchmarking</code> command.\nBenchmark the execution time of historic blocks.\nUsed by the benchmark to build signed extrinsics.\nBenchmark the execution time of different extrinsics.\nHelper to manage <code>ExtrinsicBuilder</code> instances.\nCommand to benchmark the hardware.\nBenchmark the execution overhead per-block and …\nBenchmark the extrinsic weight of FRAME Pallets.\nThe hardware requirements as measured on reference …\nBenchmark the storage speed of a chain snapshot.\nAdjust the PoV estimation by adding additional trie layers …\nRun benchmarks for all pallets and extrinsics.\nDo not return an error if any check fails.\nDo not fail if there are unknown but also unused host …\nBuilds an extrinsic.\nReturns the configuration directory inside this base path.\nLimit the memory the database cache can use.\nThe PoV estimation mode of a benchmark if no <code>pov_mode</code> …\nTime limit for each disk benchmark.\nEnable the Trie cache.\nDEPRECATED: This argument has no effect.\nSelect how many repetitions of this benchmark should run …\nDisplay and run extra benchmarks that would otherwise not …\nName of the extrinsic this builder is for.\nSelect an extrinsic inside the pallet to benchmark, or <code>*</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreate a base path from values describing the project.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHow to construct the genesis state.\nThe preset that we expect to find in the GenesisBuilder …\nTime limit for the hash function benchmark.\nAdd a header file to your outputted benchmarks.\nSet the heap pages while running benchmarks. If not set, …\nIndicates highest values for each of the component ranges.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite the raw results in JSON format into the given file.\nA path to a <code>.json</code> file with existing benchmark results …\nPrint the raw results in JSON format.\nList and print available benchmarks in a csv-friendly …\nIndicates lowest values for each of the component ranges.\nTime limit for the memory benchmark.\nName of this builder in CSV format: <code>pallet, extrinsic</code>.\nCreate a <code>BasePath</code> instance based on an existing path on …\nCreate a <code>BasePath</code> instance using a temporary directory …\nDon’t include csv header when listing benchmarks.\nDon’t print the median-slopes linear regression analysis.\nDon’t print the min-squares linear regression analysis.\nIf enabled, the storage info is not displayed in the …\nDisable verification logic when running benchmarks.\nOutput the benchmarks to a Rust file at the given path.\nWhich analysis function to use when outputting benchmarks:\nWhich analysis function to use when analyzing measured …\nName of the pallet this builder is for.\nSelect a FRAME Pallet to benchmark, or <code>*</code> for all (in which …\nRetrieve the base path.\nSelect how many repetitions of this benchmark should run …\nBenchmark the execution time of historic blocks and …\nBenchmark the execution time of a specific type of …\nExecute the benchmark and print the results.\nMeasure the per-block and per-extrinsic execution overhead.\nRuns the command and benchmarks a pallet.\nCalls into the Read and Write benchmarking functions. …\nRuns the pallet benchmarking command.\nOptional runtime blob to use instead of the one from the …\nSelect how many samples we should take across the variable …\nPath to Handlebars template file used for outputting …\nSet a fault tolerance for passing a requirement.\nReturns a builder for a pallet and extrinsic name.\nAllow overwriting a single file with multiple results.\nTime limit for the verification benchmark.\nMethod for executing Wasm runtime code.\nThe WASM instantiation method to use.\nThe assumed default maximum size of any <code>StorageMap</code>.")