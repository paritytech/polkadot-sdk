searchState.loadedDescShard("pallet_assets", 0, "Assets Pallet\nThe status of an asset account.\nData concerning an approval.\nThe asset is not present in storage.\nThe asset is not sufficient and thus does not have a …\nTrait with callbacks that are executed after successful …\nAuto-increment the <code>NextAssetId</code> when an asset is created.\nConverts a balance value into an asset balance based on …\nAsset account cannot receive and transfer the assets.\nA consumer reference was used to create this account.\nPossible errors when converting between external and asset …\nSome other <code>AccountId</code> has placed a deposit to make this …\nThe account holder has placed a deposit to exist within an …\nA deposit was placed for this account to exist, but it has …\nThe reason for an account’s existence within an asset …\nA mutator type allowing inspection and possible …\nAsset account cannot transfer the assets.\nTrait for allowing a minimum balance on the account to be …\nAsset account can receive and transfer the assets.\nThe external minimum balance must not be zero.\nThe asset class is <code>sufficient</code> for account existence.\nAssets pallet benchmarking.\nCommit any changes to storage.\nIndicates that asset with <code>id</code> was successfully created by …\nIndicates that asset with <code>id</code> has just been destroyed\nCalled after an account has been removed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the frozen balance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRevert any changes, even those already committed by <code>self</code> …\nEnable/disable the given code depending on …\nConvert the given balance value into an asset balance …\nAutogenerated weights for <code>pallet_assets</code>\nSet <code>NextAssetId</code> to the value of <code>ID</code> if <code>NextAssetId</code> does not …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccounts were destroyed for given asset.\nThe asset-account already exists.\nAn approval for account <code>delegate</code> was cancelled by <code>owner</code>.\nThe amount of funds that must be reserved when creating a …\nThe amount of funds that must be reserved when creating a …\nApprovals were destroyed for given asset.\n(Additional) funds have been approved for transfer to a …\nThe amount of funds that must be reserved for a …\nThe amount of funds that must be reserved for a …\nThe basic amount of funds that must be reserved for an …\nThe basic amount of funds that must be reserved for an …\nSome asset <code>asset_id</code> was frozen.\nIdentifier for the class of asset.\nIdentifier for the class of asset.\nWrapper around <code>Self::AssetId</code> to use in dispatchable call …\nWrapper around <code>Self::AssetId</code> to use in dispatchable call …\nThe min_balance of an asset has been updated by the asset …\nThe asset is not live, and likely being destroyed.\nAn asset has had its attributes changed by the <code>Force</code> …\nSome asset <code>asset_id</code> was thawed.\nThe asset ID must be equal to the <code>NextAssetId</code>.\nInvalid metadata given.\nInvalid witness data given.\nThe units in which we record balances.\nThe units in which we record balances.\nAccount balance must be greater than or equal to the …\nHelper trait for benchmarks.\nHelper trait for benchmarks.\nSome account <code>who</code> was blocked.\nSome assets were destroyed.\nContains a variant per dispatchable extrinsic that this …\nCallback action resulted in error\nCallback methods for asset state change (e.g. asset …\nCallback methods for asset state change (e.g. asset …\nConfiguration trait of this pallet.\nStandard asset class creation is only allowed if the …\nSome asset class was created.\nThe currency mechanism.\nBased on <code>Config</code>. Auto-generated by …\nSome assets were deposited (e.g. for transaction fees).\nAn asset class was destroyed.\nAn asset class is in the process of being destroyed.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nAdditional data to be stored with an account’s asset …\nAdditional data to be stored with an account’s asset …\nSome asset class was force-created.\nThe origin which may forcibly create or destroy an asset …\nA hook to allow a per-asset, per-account minimum balance …\nSome account <code>who</code> was frozen.\nThe origin account is frozen.\nCan be used to configure the genesis state of this pallet.\nThe asset ID is already taken.\nThe asset status is not the expected status.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nSome assets were issued.\nThe asset is a live asset and is actively being used. …\nMetadata has been cleared for an asset.\nThe basic amount of funds that must be reserved when …\nThe basic amount of funds that must be reserved when …\nThe additional funds that must be reserved for the number …\nThe additional funds that must be reserved for the number …\nNew metadata has been set for an asset.\nMinimum balance should be non-zero.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe asset ID enforced for the next asset creation, if any …\nThe account to alter does not exist.\nThe asset-account doesn’t have an associated deposit.\nThe signing account has no permission to do the operation.\nThe asset should be frozen before the given operation.\nThe owner changed.\nThe <code>Pallet</code> struct, the main type that implements traits …\nMax number of items to destroy per <code>destroy_accounts</code> and …\nMax number of items to destroy per <code>destroy_accounts</code> and …\nThe overarching event type.\nThe overarching event type.\nThe maximum length of a name or symbol stored on-chain.\nThe maximum length of a name or symbol stored on-chain.\nThe management team changed.\nSome account <code>who</code> was thawed.\nSome account <code>who</code> was created with a deposit from <code>depositor</code>.\nSome assets were transferred.\nAn <code>amount</code> was transferred in its entirety from <code>owner</code> to …\nNo approval exists that would allow the transfer.\nUnable to increment the consumer reference counters on the …\nThe given asset ID is unknown.\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nSome assets were withdrawn from the account (e.g. for …\nThe operation would result in funds being burned.\nThe source account would not survive the transfer and it …\nReturns all the non-zero balances for all assets of the …\nGenesis accounts: id, account_id, balance\nReturn the extra “sid-car” data for <code>id</code>/<code>who</code>, or <code>None</code> if …\nApprove an amount of asset for transfer by a delegated …\nApprove an amount of asset for transfer by a delegated …\nReturns an iterator of the assets in existence.\nGenesis assets: id, owner, is_sufficient, min_balance\nGet the asset <code>id</code> balance of <code>who</code>, or zero if the …\nDisallow further unprivileged transfers of an asset <code>id</code> to …\nDisallow further unprivileged transfers of an asset <code>id</code> to …\nReduce the balance of <code>who</code> by as much as possible up to …\nReduce the balance of <code>who</code> by as much as possible up to …\nCancel all of some asset approved for delegated transfer …\nCancel all of some asset approved for delegated transfer …\nClear the metadata for an asset.\nClear the metadata for an asset.\nDefault implementations of <code>DefaultConfig</code>, which can be …\nCheck if an account with the given asset ID and account …\nIssue a new class of fungible assets from a public origin.\nIssue a new class of fungible assets from a public origin.\nDestroy all accounts associated with a given asset.\nDestroy all accounts associated with a given asset.\nDestroy all approvals associated with a given asset up to …\nDestroy all approvals associated with a given asset up to …\nAuto-generated docs-only module listing all defined …\nComplete destroying asset and unreserve currency.\nComplete destroying asset and unreserve currency.\nAlter the attributes of a given asset.\nAlter the attributes of a given asset.\nCancel all of some asset approved for delegated transfer …\nCancel all of some asset approved for delegated transfer …\nClear the metadata for an asset.\nClear the metadata for an asset.\nIssue a new class of fungible assets from a privileged …\nIssue a new class of fungible assets from a privileged …\nForce the metadata for an asset to some value.\nForce the metadata for an asset to some value.\nMove some assets from one account to another.\nMove some assets from one account to another.\nDisallow further unprivileged transfers of an asset <code>id</code> …\nDisallow further unprivileged transfers of an asset <code>id</code> …\nDisallow further unprivileged transfers for the asset …\nDisallow further unprivileged transfers for the asset …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the asset <code>id</code> balance of <code>who</code> if the asset-account …\nGet the total supply of an asset <code>id</code> if the asset exists.\nGenesis metadata: id, name, symbol, decimals\nMint assets of a particular class.\nMint assets of a particular class.\nCreate a call with the variant <code>approve_transfer</code>.\nCreate a call with the variant <code>block</code>.\nCreate a call with the variant <code>burn</code>.\nCreate a call with the variant <code>cancel_approval</code>.\nCreate a call with the variant <code>clear_metadata</code>.\nCreate a call with the variant <code>create</code>.\nCreate a call with the variant <code>destroy_accounts</code>.\nCreate a call with the variant <code>destroy_approvals</code>.\nCreate a call with the variant <code>finish_destroy</code>.\nCreate a call with the variant <code>force_asset_status</code>.\nCreate a call with the variant <code>force_cancel_approval</code>.\nCreate a call with the variant <code>force_clear_metadata</code>.\nCreate a call with the variant <code>force_create</code>.\nCreate a call with the variant <code>force_set_metadata</code>.\nCreate a call with the variant <code>force_transfer</code>.\nCreate a call with the variant <code>freeze</code>.\nCreate a call with the variant <code>freeze_asset</code>.\nCreate a call with the variant <code>mint</code>.\nCreate a call with the variant <code>refund</code>.\nCreate a call with the variant <code>refund_other</code>.\nCreate a call with the variant <code>set_metadata</code>.\nCreate a call with the variant <code>set_min_balance</code>.\nCreate a call with the variant <code>set_team</code>.\nCreate a call with the variant <code>start_destroy</code>.\nCreate a call with the variant <code>thaw</code>.\nCreate a call with the variant <code>thaw_asset</code>.\nCreate a call with the variant <code>touch</code>.\nCreate a call with the variant <code>touch_other</code>.\nCreate a call with the variant <code>transfer</code>.\nCreate a call with the variant <code>transfer_all</code>.\nCreate a call with the variant <code>transfer_approved</code>.\nCreate a call with the variant <code>transfer_keep_alive</code>.\nCreate a call with the variant <code>transfer_ownership</code>.\nGenesis <code>NextAssetId</code>.\nReturn the deposit (if any) of an asset account or a …\nReturn the deposit (if any) of an asset account or a …\nReturn the deposit (if any) of a target asset account. …\nReturn the deposit (if any) of a target asset account. …\nSet the metadata for an asset.\nSet the metadata for an asset.\nSets the minimum balance of an asset.\nSets the minimum balance of an asset.\nChange the Issuer, Admin and Freezer of an asset.\nChange the Issuer, Admin and Freezer of an asset.\nStart the process of destroying a fungible asset class.\nStart the process of destroying a fungible asset class.\nAuto-generated docs-only module listing all (public and …\nAllow unprivileged transfers to and from an account again.\nAllow unprivileged transfers to and from an account again.\nAllow unprivileged transfers for the asset again.\nAllow unprivileged transfers for the asset again.\nGet the total supply of an asset <code>id</code>.\nCreate an asset account for non-provider assets.\nCreate an asset account for non-provider assets.\nCreate an asset account for <code>who</code>.\nCreate an asset account for <code>who</code>.\nMove some assets from the sender account to another.\nMove some assets from the sender account to another.\nTransfer the entire transferable balance from the caller …\nTransfer the entire transferable balance from the caller …\nTransfer some asset balance from a previously delegated …\nTransfer some asset balance from a previously delegated …\nMove some assets from the sender account to another, …\nMove some assets from the sender account to another, …\nChange the Owner of an asset.\nChange the Owner of an asset.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nApprove an amount of asset for transfer by a delegated …\nDisallow further unprivileged transfers of an asset <code>id</code> to …\nReduce the balance of <code>who</code> by as much as possible up to …\nCancel all of some asset approved for delegated transfer …\nClear the metadata for an asset.\nIssue a new class of fungible assets from a public origin.\nDestroy all accounts associated with a given asset.\nDestroy all approvals associated with a given asset up to …\nComplete destroying asset and unreserve currency.\nAlter the attributes of a given asset.\nCancel all of some asset approved for delegated transfer …\nClear the metadata for an asset.\nIssue a new class of fungible assets from a privileged …\nForce the metadata for an asset to some value.\nMove some assets from one account to another.\nDisallow further unprivileged transfers of an asset <code>id</code> …\nDisallow further unprivileged transfers for the asset …\nMint assets of a particular class.\nReturn the deposit (if any) of an asset account or a …\nReturn the deposit (if any) of a target asset account. …\nSet the metadata for an asset.\nSets the minimum balance of an asset.\nChange the Issuer, Admin and Freezer of an asset.\nStart the process of destroying a fungible asset class.\nAllow unprivileged transfers to and from an account again.\nAllow unprivileged transfers for the asset again.\nCreate an asset account for non-provider assets.\nCreate an asset account for <code>who</code>.\nMove some assets from the sender account to another.\nTransfer the entire transferable balance from the caller …\nTransfer some asset balance from a previously delegated …\nMove some assets from the sender account to another, …\nChange the Owner of an asset.\nThe holdings of a specific account for a specific asset.\nApproved balance transfers. First balance is the amount …\nDetails of an asset.\nMetadata of an asset.\nThe asset ID enforced for the next asset creation, if any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_assets</code> using the Substrate node and …\nWeight functions needed for <code>pallet_assets</code>.\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Account</code> (r:1 w:1) Proof: <code>Assets::Account</code> (…\nStorage: <code>Assets::Account</code> (r:1 w:1) Proof: <code>Assets::Account</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:0) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Account</code> (r:1 w:1) Proof: <code>Assets::Account</code> (…\nStorage: <code>Assets::Account</code> (r:1 w:1) Proof: <code>Assets::Account</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…")