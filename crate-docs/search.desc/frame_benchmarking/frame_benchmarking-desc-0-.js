searchState.loadedDescShard("frame_benchmarking", 0, "Macro for benchmarking a FRAME runtime.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nA set of benchmarks which can establish a global baseline …\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nGet the benchmark metadata available for this runtime.\nGet the benchmark metadata available for this runtime.\nInterface that provides functions for benchmarking the …\nGet the benchmarks available for this pallet. Generally …\nConstruct pallet benchmarks for weighing dispatchables.\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nReturn the components and their ranges which should be …\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nDispatch the given benchmark.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nNumber of times to repeat benchmark within the Wasm …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nStart the benchmark.\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nSame as <code>instance</code> but passing a no-op recording for unit …\nMacros for benchmarking a FRAME runtime.\nContains macros, structs, and traits associated with v2 of …\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nProvides implementations for the extern host functions.\nCommit pending storage changes to the trie database and …\nGet the number of nanoseconds passed since the UNIX epoch\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the DB whitelist.\nCalls <code>U::from(self)</code>.\nGet current estimated proof size.\nGet the read/write count.\nReset the read/write count.\nSet the DB whitelist.\nReset the trie database to the genesis state.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nConstruct pallet benchmarks for weighing dispatchables.\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nDefines pallet configs that <code>add_benchmarks</code> and …\nThis creates a test suite which runs the module’s …\nThis macro allows users to easily generate a list of …\nshow error message and debugging info for the case of an …\nWhitelist the given account.\nUsed by the new benchmarking code to specify that a …\nTrait that must be implemented by all structs that can be …\nAn attribute macro used to declare a benchmark within a …\nAn attribute macro that can be attached to a (non-empty) …\nAn attribute macro used to specify that a block should be …\nRepresents the (inclusive) ending number of this <code>ParamRange</code>…\nAn attribute macro used to specify the extrinsic call …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAn attribute macro that can be attached to a (non-empty) …\nCalls <code>U::from(self)</code>.\nRepresents the (inclusive) starting number of this …")