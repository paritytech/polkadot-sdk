searchState.loadedDescShard("sc_consensus_slots", 0, "Slots functionality for Substrate.\nAuxiliary data necessary for authoring.\nTrait for providing the strategy for when to backoff block …\nA simple default strategy for how to decide backing off …\nA handle to a <code>BlockImport</code>.\nA header which is fully checked, including signature. This …\nA header which has been checked\nData associated with a slot claim.\nThe type of future resolving to the proposer.\nA header which has slot in the future. this is the full …\nIncrease the lenience exponentially with the number of …\nSlot specific extension that the inherent data provider …\nA handle to a <code>JustificationSyncLink</code>, allows hooking into …\nIncrease the lenience linearly with the number of skipped …\nWe keep at least this number of slots in database.\nWe prune slots when they reach this number.\nThe type of proposer to use to build blocks.\nA skeleton implementation for <code>SlotWorker</code> which tries to …\nA type that implements <code>SlotWorker</code> for a type that …\nInformation about a slot.\nThe strategy used to calculate the slot lenience used to …\nA unit type wrapper to express the proportion of a slot.\nThe result of <code>SlotWorker::on_slot</code>.\nA worker that should be invoked at every new slot.\nThe changes that need to applied to the storage to create …\nA handle to a <code>SyncOracle</code>.\nScales the backoff rate. A higher value effectively means …\nReturns the number of authorities. None indicate that the …\nReturns the auxiliary data necessary for authoring.\nThe block that was built.\nA handle to a <code>BlockImport</code>.\nReturns a function which produces a <code>BlockImportParams</code>.\nSome potential block size limit for the block to be …\nThe chain header this slot is based on.\nChecks if the header is an equivocation and returns the …\nAll changes to the child storages.\nTries to claim the given slot, returning an object with …\nCalls <code>create_inherent_data</code> and handles errors.\nThe inherent data provider.\nSlot duration.\nThe instant at which the slot ends.\nWhether to force authoring if offline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the inner that is guaranteed to be in the range …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a handle to a <code>JustificationSyncLink</code>.\nThe logging target to use when logging messages.\nAll changes to the main storage.\nThe max interval to backoff when authoring blocks, …\nCreate a new <code>SlotInfo</code>.\nCreate a new proportion.\nNotifies the given slot. Similar to <code>claim_slot</code>, but will …\nOffchain state changes to write to the offchain database.\nCalled when a new slot is triggered.\nImplements <code>SlotWorker::on_slot</code>.\nReturn the pre digest data to include in a block authored …\nPropose a block by <code>Proposer</code>.\nReturns a <code>Proposer</code> to author on top of the given block.\nCalculate the remaining duration for block proposal taking …\nRemaining duration for proposing.\nReturns true if we should backoff authoring new blocks.\nReturns whether the block production should back off.\nThe current slot that will be found in the <code>InherentData</code>.\nThe slot number as found in the inherent data.\nCalculate a slot duration lenience based on the number of …\nCalculate a slot duration lenience based on the number of …\nStart a new slot worker.\nThe storage proof that was recorded while building the …\nReturns a handle to a <code>SyncOracle</code>.\nReturns a <code>TelemetryHandle</code> if any.\nReturns the duration until the next slot from now.\nA transaction for the backend that contains all changes …\nChanges to the transaction index,\nThe storage root after applying the transaction.\nThe number of unfinalized blocks allowed before starting …")