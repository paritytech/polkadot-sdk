(function() {var type_impls = {
"sc_consensus_epochs":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SharedData%3CT%3E\" class=\"impl\"><a href=\"#impl-SharedData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SharedData&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(shared_data: T) -&gt; SharedData&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new instance of [<code>SharedData</code>] to share the given <code>shared_data</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shared_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shared_data</a>(&amp;self) -&gt; MappedMutexGuard&lt;'_, RawMutex, T&gt;</h4></section></summary><div class=\"docblock\"><p>Acquire access to the shared data.</p>\n<p>This will give mutable access to the shared data. After the returned mutex guard is dropped,\nthe shared data is accessible by other threads. So, this function should be used when\nreading/writing of the shared data in a local context is required.</p>\n<p>When requiring to lock shared data for some longer time, even with temporarily releasing the\nlock, [<code>Self::shared_data_locked</code>] should be used.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shared_data_locked\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shared_data_locked</a>(&amp;self) -&gt; SharedDataLocked&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Acquire access to the shared data and lock it.</p>\n<p>This will give mutable access to the shared data. The returned [<code>SharedDataLocked</code>]\nprovides the function [<code>SharedDataLocked::release_mutex</code>] to release the mutex, but\nkeeping the data locked. This is useful in async contexts for example where the data needs\nto be locked, but a mutex guard can not be held.</p>\n<p>For an example see [<code>SharedData</code>].</p>\n</div></details></div></details>",0,"sc_consensus_epochs::SharedEpochChanges"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SharedData%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-SharedData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for SharedData&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; SharedData&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sc_consensus_epochs::SharedEpochChanges"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()