(function() {var type_impls = {
"parachain_template_node":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(ctx: Context) -&gt; RpcModule&lt;Context&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new module with a given shared <code>Context</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_context</a>(self) -&gt; RpcModule&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Transform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).</p>\n</div></details></div></details>",0,"parachain_template_node::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_method</a>&lt;R, F&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: IntoResponse + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Context</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new synchronous RPC method, which computes the response with the given callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_async_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_async_method</a>&lt;R, Fun, Fut&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: Fun\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    R: IntoResponse + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    Fun: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'static&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new asynchronous RPC method, which computes the response with the given callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_blocking_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_blocking_method</a>&lt;R, F&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: IntoResponse + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new <strong>blocking</strong> synchronous RPC method, which computes the response with the given callback.\nUnlike the regular <a href=\"RpcModule::register_method\"><code>register_method</code></a>, this method can block its thread and perform\nexpensive computations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_subscription\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_subscription</a>&lt;R, F, Fut&gt;(\n    &amp;mut self,\n    subscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    notif_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    unsubscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'static&gt;, PendingSubscriptionSink, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    R: IntoSubscriptionCloseResponse + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</span></h4></section></summary><div class=\"docblock\"><p>Register a new publish/subscribe interface using JSON-RPC notifications.</p>\n<p>It implements the <a href=\"https://geth.ethereum.org/docs/rpc/pubsub\">ethereum pubsub specification</a>\nwith an option to choose custom subscription ID generation.</p>\n<p>Furthermore, it generates the <code>unsubscribe implementation</code> where a <code>bool</code> is used as\nthe result to indicate whether the subscription was successfully unsubscribed to or not.\nFor instance an <code>unsubscribe call</code> may fail if a non-existent subscription ID is used in the call.</p>\n<p>This method ensures that the <code>subscription_method_name</code> and <code>unsubscription_method_name</code> are unique.\nThe <code>notif_method_name</code> argument sets the content of the <code>method</code> field in the JSON document that\nthe server sends back to the client. The uniqueness of this value is not machine checked and itโs up to\nthe user to ensure it is not used in any other [<code>RpcModule</code>] used in the server.</p>\n<h5 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h5>\n<ul>\n<li><code>subscription_method_name</code> - name of the method to call to initiate a subscription</li>\n<li><code>notif_method_name</code> - name of method to be used in the subscription payload (technically a JSON-RPC\nnotification)</li>\n<li><code>unsubscription_method</code> - name of the method to call to terminate a subscription</li>\n<li><code>callback</code> - A callback to invoke on each subscription; it takes three parameters:\n<ul>\n<li>[<code>Params</code>]: JSON-RPC parameters in the subscription call.</li>\n<li>[<code>PendingSubscriptionSink</code>]: A pending subscription waiting to be accepted, in order to send out messages\non the subscription</li>\n<li>Context: Any type that can be embedded into the [<code>RpcModule</code>].</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns\"><a href=\"#returns\">Returns</a></h5>\n<p>An async block which returns something that implements [<code>crate::server::IntoSubscriptionCloseResponse</code>] which\ndecides what action to take when the subscription ends whether such as to sent out another message\non the subscription stream before closing down it.</p>\n<p>NOTE: The return value is ignored if [<code>PendingSubscriptionSink</code>] hasnโt been called or is unsuccessful, as the subscription\nis not allowed to send out subscription notifications before the actual subscription has been established.</p>\n<p>This is implemented for <code>Result&lt;T, E&gt;</code> and <code>()</code>.</p>\n<p>Itโs recommended to use <code>Result</code> if you want to propagate the error as special error notification\nAnother option is to implement [<code>crate::server::IntoSubscriptionCloseResponse</code>] if you want customized behaviour.</p>\n<p>The error notification has the following format:</p>\n<div class=\"example-wrap\"><pre class=\"language-json\"><code>{\n &quot;jsonrpc&quot;: &quot;2.0&quot;,\n &quot;method&quot;: &quot;&lt;method&gt;&quot;,\n &quot;params&quot;: {\n   &quot;subscription&quot;: &quot;&lt;subscriptionID&gt;&quot;,\n   &quot;error&quot;: &lt;your msg&gt;\n   }\n }\n}\n</code></pre></div><h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">use </span>jsonrpsee_core::server::{RpcModule, SubscriptionSink, SubscriptionMessage};\n<span class=\"kw\">use </span>jsonrpsee_types::ErrorObjectOwned;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ctx = RpcModule::new(<span class=\"number\">99_usize</span>);\nctx.register_subscription(<span class=\"string\">&quot;sub&quot;</span>, <span class=\"string\">&quot;notif_name&quot;</span>, <span class=\"string\">&quot;unsub&quot;</span>, |params, pending, ctx| <span class=\"kw\">async move </span>{\n\n    <span class=\"kw\">let </span>x = <span class=\"kw\">match </span>params.one::&lt;usize&gt;() {\n        <span class=\"prelude-val\">Ok</span>(x) =&gt; x,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n           pending.reject(ErrorObjectOwned::from(e)).<span class=\"kw\">await</span>;\n           <span class=\"comment\">// If the subscription has not been &quot;accepted&quot; then\n           // the return value will be &quot;ignored&quot; as it&#39;s not\n           // allowed to send out any further notifications on\n           // on the subscription.\n           </span><span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(());\n        }\n    };\n\n    <span class=\"comment\">// Mark the subscription is accepted after the params has been parsed successful.\n    // This is actually responds the underlying RPC method call and may fail if the\n    // connection is closed.\n    </span><span class=\"kw\">let </span>sink = pending.accept().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>sum = x + (<span class=\"kw-2\">*</span>ctx);\n\n    <span class=\"comment\">// This will send out an error notification if it fails.\n    //\n    // If you need some other behavior implement or custom format of the error field\n    // you need to manually handle that.\n    </span><span class=\"kw\">let </span>msg = SubscriptionMessage::from_json(<span class=\"kw-2\">&amp;</span>sum)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// This fails only if the connection is closed\n    </span>sink.send(msg).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_subscription_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_subscription_raw</a>&lt;R, F&gt;(\n    &amp;mut self,\n    subscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    notif_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    unsubscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, PendingSubscriptionSink, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    R: IntoSubscriptionCloseResponse,</span></h4></section></summary><div class=\"docblock\"><p>Similar to [<code>RpcModule::register_subscription</code>] but a little lower-level API\nwhere handling the subscription is managed the user i.e, polling the subscription\nsuch as spawning a separate task to do so.</p>\n<p>This is more efficient as this doesnโt require cloning the <code>params</code> in the subscription\nand it wonโt send out a close message. Such things are delegated to the user of this API</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">use </span>jsonrpsee_core::server::{RpcModule, SubscriptionSink, SubscriptionMessage};\n<span class=\"kw\">use </span>jsonrpsee_types::ErrorObjectOwned;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ctx = RpcModule::new(<span class=\"number\">99_usize</span>);\nctx.register_subscription_raw(<span class=\"string\">&quot;sub&quot;</span>, <span class=\"string\">&quot;notif_name&quot;</span>, <span class=\"string\">&quot;unsub&quot;</span>, |params, pending, ctx| {\n\n    <span class=\"comment\">// The params are parsed outside the async block below to avoid cloning the bytes.\n    </span><span class=\"kw\">let </span>val = <span class=\"kw\">match </span>params.one::&lt;usize&gt;() {\n        <span class=\"prelude-val\">Ok</span>(val) =&gt; val,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"comment\">// If the subscription has not been &quot;accepted&quot; then\n            // the return value will be &quot;ignored&quot; as it&#39;s not\n            // allowed to send out any further notifications on\n            // on the subscription.\n            </span>tokio::spawn(pending.reject(ErrorObjectOwned::from(e)));\n            <span class=\"kw\">return</span>;\n        }\n    };\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"comment\">// Mark the subscription is accepted after the params has been parsed successful.\n        // This is actually responds the underlying RPC method call and may fail if the\n        // connection is closed.\n        </span><span class=\"kw\">let </span>sink = pending.accept().<span class=\"kw\">await</span>.unwrap();\n        <span class=\"kw\">let </span>sum = val + (<span class=\"kw-2\">*</span>ctx);\n\n        <span class=\"kw\">let </span>msg = SubscriptionMessage::from_json(<span class=\"kw-2\">&amp;</span>sum).unwrap();\n\n        <span class=\"comment\">// This fails only if the connection is closed\n        </span>sink.send(msg).<span class=\"kw\">await</span>.unwrap();\n    });\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_alias\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_alias</a>(\n    &amp;mut self,\n    alias: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    existing_method: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Register an alias for an existing_method. Alias uniqueness is enforced.</p>\n</div></details></div></details>",0,"parachain_template_node::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","parachain_template_node::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Clone-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; RpcModule&lt;Context&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","parachain_template_node::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Deref-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = Methods</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Methods</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","parachain_template_node::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Methods</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","parachain_template_node::rpc::RpcExtension"]],
"polkadot_parachain":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(ctx: Context) -&gt; RpcModule&lt;Context&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new module with a given shared <code>Context</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_context</a>(self) -&gt; RpcModule&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Transform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).</p>\n</div></details></div></details>",0,"polkadot_parachain::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_method</a>&lt;R, F&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: IntoResponse + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Context</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new synchronous RPC method, which computes the response with the given callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_async_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_async_method</a>&lt;R, Fun, Fut&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: Fun\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    R: IntoResponse + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    Fun: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'static&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new asynchronous RPC method, which computes the response with the given callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_blocking_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_blocking_method</a>&lt;R, F&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: IntoResponse + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new <strong>blocking</strong> synchronous RPC method, which computes the response with the given callback.\nUnlike the regular <a href=\"RpcModule::register_method\"><code>register_method</code></a>, this method can block its thread and perform\nexpensive computations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_subscription\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_subscription</a>&lt;R, F, Fut&gt;(\n    &amp;mut self,\n    subscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    notif_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    unsubscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'static&gt;, PendingSubscriptionSink, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    R: IntoSubscriptionCloseResponse + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</span></h4></section></summary><div class=\"docblock\"><p>Register a new publish/subscribe interface using JSON-RPC notifications.</p>\n<p>It implements the <a href=\"https://geth.ethereum.org/docs/rpc/pubsub\">ethereum pubsub specification</a>\nwith an option to choose custom subscription ID generation.</p>\n<p>Furthermore, it generates the <code>unsubscribe implementation</code> where a <code>bool</code> is used as\nthe result to indicate whether the subscription was successfully unsubscribed to or not.\nFor instance an <code>unsubscribe call</code> may fail if a non-existent subscription ID is used in the call.</p>\n<p>This method ensures that the <code>subscription_method_name</code> and <code>unsubscription_method_name</code> are unique.\nThe <code>notif_method_name</code> argument sets the content of the <code>method</code> field in the JSON document that\nthe server sends back to the client. The uniqueness of this value is not machine checked and itโs up to\nthe user to ensure it is not used in any other [<code>RpcModule</code>] used in the server.</p>\n<h5 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h5>\n<ul>\n<li><code>subscription_method_name</code> - name of the method to call to initiate a subscription</li>\n<li><code>notif_method_name</code> - name of method to be used in the subscription payload (technically a JSON-RPC\nnotification)</li>\n<li><code>unsubscription_method</code> - name of the method to call to terminate a subscription</li>\n<li><code>callback</code> - A callback to invoke on each subscription; it takes three parameters:\n<ul>\n<li>[<code>Params</code>]: JSON-RPC parameters in the subscription call.</li>\n<li>[<code>PendingSubscriptionSink</code>]: A pending subscription waiting to be accepted, in order to send out messages\non the subscription</li>\n<li>Context: Any type that can be embedded into the [<code>RpcModule</code>].</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns\"><a href=\"#returns\">Returns</a></h5>\n<p>An async block which returns something that implements [<code>crate::server::IntoSubscriptionCloseResponse</code>] which\ndecides what action to take when the subscription ends whether such as to sent out another message\non the subscription stream before closing down it.</p>\n<p>NOTE: The return value is ignored if [<code>PendingSubscriptionSink</code>] hasnโt been called or is unsuccessful, as the subscription\nis not allowed to send out subscription notifications before the actual subscription has been established.</p>\n<p>This is implemented for <code>Result&lt;T, E&gt;</code> and <code>()</code>.</p>\n<p>Itโs recommended to use <code>Result</code> if you want to propagate the error as special error notification\nAnother option is to implement [<code>crate::server::IntoSubscriptionCloseResponse</code>] if you want customized behaviour.</p>\n<p>The error notification has the following format:</p>\n<div class=\"example-wrap\"><pre class=\"language-json\"><code>{\n &quot;jsonrpc&quot;: &quot;2.0&quot;,\n &quot;method&quot;: &quot;&lt;method&gt;&quot;,\n &quot;params&quot;: {\n   &quot;subscription&quot;: &quot;&lt;subscriptionID&gt;&quot;,\n   &quot;error&quot;: &lt;your msg&gt;\n   }\n }\n}\n</code></pre></div><h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">use </span>jsonrpsee_core::server::{RpcModule, SubscriptionSink, SubscriptionMessage};\n<span class=\"kw\">use </span>jsonrpsee_types::ErrorObjectOwned;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ctx = RpcModule::new(<span class=\"number\">99_usize</span>);\nctx.register_subscription(<span class=\"string\">&quot;sub&quot;</span>, <span class=\"string\">&quot;notif_name&quot;</span>, <span class=\"string\">&quot;unsub&quot;</span>, |params, pending, ctx| <span class=\"kw\">async move </span>{\n\n    <span class=\"kw\">let </span>x = <span class=\"kw\">match </span>params.one::&lt;usize&gt;() {\n        <span class=\"prelude-val\">Ok</span>(x) =&gt; x,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n           pending.reject(ErrorObjectOwned::from(e)).<span class=\"kw\">await</span>;\n           <span class=\"comment\">// If the subscription has not been &quot;accepted&quot; then\n           // the return value will be &quot;ignored&quot; as it&#39;s not\n           // allowed to send out any further notifications on\n           // on the subscription.\n           </span><span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(());\n        }\n    };\n\n    <span class=\"comment\">// Mark the subscription is accepted after the params has been parsed successful.\n    // This is actually responds the underlying RPC method call and may fail if the\n    // connection is closed.\n    </span><span class=\"kw\">let </span>sink = pending.accept().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>sum = x + (<span class=\"kw-2\">*</span>ctx);\n\n    <span class=\"comment\">// This will send out an error notification if it fails.\n    //\n    // If you need some other behavior implement or custom format of the error field\n    // you need to manually handle that.\n    </span><span class=\"kw\">let </span>msg = SubscriptionMessage::from_json(<span class=\"kw-2\">&amp;</span>sum)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// This fails only if the connection is closed\n    </span>sink.send(msg).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_subscription_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_subscription_raw</a>&lt;R, F&gt;(\n    &amp;mut self,\n    subscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    notif_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    unsubscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, PendingSubscriptionSink, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    R: IntoSubscriptionCloseResponse,</span></h4></section></summary><div class=\"docblock\"><p>Similar to [<code>RpcModule::register_subscription</code>] but a little lower-level API\nwhere handling the subscription is managed the user i.e, polling the subscription\nsuch as spawning a separate task to do so.</p>\n<p>This is more efficient as this doesnโt require cloning the <code>params</code> in the subscription\nand it wonโt send out a close message. Such things are delegated to the user of this API</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">use </span>jsonrpsee_core::server::{RpcModule, SubscriptionSink, SubscriptionMessage};\n<span class=\"kw\">use </span>jsonrpsee_types::ErrorObjectOwned;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ctx = RpcModule::new(<span class=\"number\">99_usize</span>);\nctx.register_subscription_raw(<span class=\"string\">&quot;sub&quot;</span>, <span class=\"string\">&quot;notif_name&quot;</span>, <span class=\"string\">&quot;unsub&quot;</span>, |params, pending, ctx| {\n\n    <span class=\"comment\">// The params are parsed outside the async block below to avoid cloning the bytes.\n    </span><span class=\"kw\">let </span>val = <span class=\"kw\">match </span>params.one::&lt;usize&gt;() {\n        <span class=\"prelude-val\">Ok</span>(val) =&gt; val,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"comment\">// If the subscription has not been &quot;accepted&quot; then\n            // the return value will be &quot;ignored&quot; as it&#39;s not\n            // allowed to send out any further notifications on\n            // on the subscription.\n            </span>tokio::spawn(pending.reject(ErrorObjectOwned::from(e)));\n            <span class=\"kw\">return</span>;\n        }\n    };\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"comment\">// Mark the subscription is accepted after the params has been parsed successful.\n        // This is actually responds the underlying RPC method call and may fail if the\n        // connection is closed.\n        </span><span class=\"kw\">let </span>sink = pending.accept().<span class=\"kw\">await</span>.unwrap();\n        <span class=\"kw\">let </span>sum = val + (<span class=\"kw-2\">*</span>ctx);\n\n        <span class=\"kw\">let </span>msg = SubscriptionMessage::from_json(<span class=\"kw-2\">&amp;</span>sum).unwrap();\n\n        <span class=\"comment\">// This fails only if the connection is closed\n        </span>sink.send(msg).<span class=\"kw\">await</span>.unwrap();\n    });\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_alias\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_alias</a>(\n    &amp;mut self,\n    alias: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    existing_method: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Register an alias for an existing_method. Alias uniqueness is enforced.</p>\n</div></details></div></details>",0,"polkadot_parachain::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","polkadot_parachain::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Clone-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; RpcModule&lt;Context&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","polkadot_parachain::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Deref-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = Methods</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Methods</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","polkadot_parachain::rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Methods</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","polkadot_parachain::rpc::RpcExtension"]],
"polkadot_rpc":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(ctx: Context) -&gt; RpcModule&lt;Context&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new module with a given shared <code>Context</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_context</a>(self) -&gt; RpcModule&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Transform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).</p>\n</div></details></div></details>",0,"polkadot_rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_method</a>&lt;R, F&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: IntoResponse + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Context</a>) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new synchronous RPC method, which computes the response with the given callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_async_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_async_method</a>&lt;R, Fun, Fut&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: Fun\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    R: IntoResponse + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    Fun: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'static&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new asynchronous RPC method, which computes the response with the given callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_blocking_method\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_blocking_method</a>&lt;R, F&gt;(\n    &amp;mut self,\n    method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: IntoResponse + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</span></h4></section></summary><div class=\"docblock\"><p>Register a new <strong>blocking</strong> synchronous RPC method, which computes the response with the given callback.\nUnlike the regular <a href=\"RpcModule::register_method\"><code>register_method</code></a>, this method can block its thread and perform\nexpensive computations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_subscription\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_subscription</a>&lt;R, F, Fut&gt;(\n    &amp;mut self,\n    subscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    notif_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    unsubscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'static&gt;, PendingSubscriptionSink, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; Fut + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = R&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    R: IntoSubscriptionCloseResponse + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</span></h4></section></summary><div class=\"docblock\"><p>Register a new publish/subscribe interface using JSON-RPC notifications.</p>\n<p>It implements the <a href=\"https://geth.ethereum.org/docs/rpc/pubsub\">ethereum pubsub specification</a>\nwith an option to choose custom subscription ID generation.</p>\n<p>Furthermore, it generates the <code>unsubscribe implementation</code> where a <code>bool</code> is used as\nthe result to indicate whether the subscription was successfully unsubscribed to or not.\nFor instance an <code>unsubscribe call</code> may fail if a non-existent subscription ID is used in the call.</p>\n<p>This method ensures that the <code>subscription_method_name</code> and <code>unsubscription_method_name</code> are unique.\nThe <code>notif_method_name</code> argument sets the content of the <code>method</code> field in the JSON document that\nthe server sends back to the client. The uniqueness of this value is not machine checked and itโs up to\nthe user to ensure it is not used in any other [<code>RpcModule</code>] used in the server.</p>\n<h5 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h5>\n<ul>\n<li><code>subscription_method_name</code> - name of the method to call to initiate a subscription</li>\n<li><code>notif_method_name</code> - name of method to be used in the subscription payload (technically a JSON-RPC\nnotification)</li>\n<li><code>unsubscription_method</code> - name of the method to call to terminate a subscription</li>\n<li><code>callback</code> - A callback to invoke on each subscription; it takes three parameters:\n<ul>\n<li>[<code>Params</code>]: JSON-RPC parameters in the subscription call.</li>\n<li>[<code>PendingSubscriptionSink</code>]: A pending subscription waiting to be accepted, in order to send out messages\non the subscription</li>\n<li>Context: Any type that can be embedded into the [<code>RpcModule</code>].</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"returns\"><a href=\"#returns\">Returns</a></h5>\n<p>An async block which returns something that implements [<code>crate::server::IntoSubscriptionCloseResponse</code>] which\ndecides what action to take when the subscription ends whether such as to sent out another message\non the subscription stream before closing down it.</p>\n<p>NOTE: The return value is ignored if [<code>PendingSubscriptionSink</code>] hasnโt been called or is unsuccessful, as the subscription\nis not allowed to send out subscription notifications before the actual subscription has been established.</p>\n<p>This is implemented for <code>Result&lt;T, E&gt;</code> and <code>()</code>.</p>\n<p>Itโs recommended to use <code>Result</code> if you want to propagate the error as special error notification\nAnother option is to implement [<code>crate::server::IntoSubscriptionCloseResponse</code>] if you want customized behaviour.</p>\n<p>The error notification has the following format:</p>\n<div class=\"example-wrap\"><pre class=\"language-json\"><code>{\n &quot;jsonrpc&quot;: &quot;2.0&quot;,\n &quot;method&quot;: &quot;&lt;method&gt;&quot;,\n &quot;params&quot;: {\n   &quot;subscription&quot;: &quot;&lt;subscriptionID&gt;&quot;,\n   &quot;error&quot;: &lt;your msg&gt;\n   }\n }\n}\n</code></pre></div><h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">use </span>jsonrpsee_core::server::{RpcModule, SubscriptionSink, SubscriptionMessage};\n<span class=\"kw\">use </span>jsonrpsee_types::ErrorObjectOwned;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ctx = RpcModule::new(<span class=\"number\">99_usize</span>);\nctx.register_subscription(<span class=\"string\">&quot;sub&quot;</span>, <span class=\"string\">&quot;notif_name&quot;</span>, <span class=\"string\">&quot;unsub&quot;</span>, |params, pending, ctx| <span class=\"kw\">async move </span>{\n\n    <span class=\"kw\">let </span>x = <span class=\"kw\">match </span>params.one::&lt;usize&gt;() {\n        <span class=\"prelude-val\">Ok</span>(x) =&gt; x,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n           pending.reject(ErrorObjectOwned::from(e)).<span class=\"kw\">await</span>;\n           <span class=\"comment\">// If the subscription has not been &quot;accepted&quot; then\n           // the return value will be &quot;ignored&quot; as it&#39;s not\n           // allowed to send out any further notifications on\n           // on the subscription.\n           </span><span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(());\n        }\n    };\n\n    <span class=\"comment\">// Mark the subscription is accepted after the params has been parsed successful.\n    // This is actually responds the underlying RPC method call and may fail if the\n    // connection is closed.\n    </span><span class=\"kw\">let </span>sink = pending.accept().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>sum = x + (<span class=\"kw-2\">*</span>ctx);\n\n    <span class=\"comment\">// This will send out an error notification if it fails.\n    //\n    // If you need some other behavior implement or custom format of the error field\n    // you need to manually handle that.\n    </span><span class=\"kw\">let </span>msg = SubscriptionMessage::from_json(<span class=\"kw-2\">&amp;</span>sum)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// This fails only if the connection is closed\n    </span>sink.send(msg).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_subscription_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_subscription_raw</a>&lt;R, F&gt;(\n    &amp;mut self,\n    subscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    notif_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    unsubscribe_method_name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    callback: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut MethodCallback, Error&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Params&lt;'_&gt;, PendingSubscriptionSink, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Context&gt;) -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    R: IntoSubscriptionCloseResponse,</span></h4></section></summary><div class=\"docblock\"><p>Similar to [<code>RpcModule::register_subscription</code>] but a little lower-level API\nwhere handling the subscription is managed the user i.e, polling the subscription\nsuch as spawning a separate task to do so.</p>\n<p>This is more efficient as this doesnโt require cloning the <code>params</code> in the subscription\nand it wonโt send out a close message. Such things are delegated to the user of this API</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">use </span>jsonrpsee_core::server::{RpcModule, SubscriptionSink, SubscriptionMessage};\n<span class=\"kw\">use </span>jsonrpsee_types::ErrorObjectOwned;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ctx = RpcModule::new(<span class=\"number\">99_usize</span>);\nctx.register_subscription_raw(<span class=\"string\">&quot;sub&quot;</span>, <span class=\"string\">&quot;notif_name&quot;</span>, <span class=\"string\">&quot;unsub&quot;</span>, |params, pending, ctx| {\n\n    <span class=\"comment\">// The params are parsed outside the async block below to avoid cloning the bytes.\n    </span><span class=\"kw\">let </span>val = <span class=\"kw\">match </span>params.one::&lt;usize&gt;() {\n        <span class=\"prelude-val\">Ok</span>(val) =&gt; val,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"comment\">// If the subscription has not been &quot;accepted&quot; then\n            // the return value will be &quot;ignored&quot; as it&#39;s not\n            // allowed to send out any further notifications on\n            // on the subscription.\n            </span>tokio::spawn(pending.reject(ErrorObjectOwned::from(e)));\n            <span class=\"kw\">return</span>;\n        }\n    };\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"comment\">// Mark the subscription is accepted after the params has been parsed successful.\n        // This is actually responds the underlying RPC method call and may fail if the\n        // connection is closed.\n        </span><span class=\"kw\">let </span>sink = pending.accept().<span class=\"kw\">await</span>.unwrap();\n        <span class=\"kw\">let </span>sum = val + (<span class=\"kw-2\">*</span>ctx);\n\n        <span class=\"kw\">let </span>msg = SubscriptionMessage::from_json(<span class=\"kw-2\">&amp;</span>sum).unwrap();\n\n        <span class=\"comment\">// This fails only if the connection is closed\n        </span>sink.send(msg).<span class=\"kw\">await</span>.unwrap();\n    });\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_alias\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">register_alias</a>(\n    &amp;mut self,\n    alias: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    existing_method: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Register an alias for an existing_method. Alias uniqueness is enforced.</p>\n</div></details></div></details>",0,"polkadot_rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","polkadot_rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Clone-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for RpcModule&lt;Context&gt;<span class=\"where fmt-newline\">where\n    Context: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; RpcModule&lt;Context&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","polkadot_rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-Deref-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = Methods</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Methods</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","polkadot_rpc::RpcExtension"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-RpcModule%3CContext%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-RpcModule%3CContext%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Context&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for RpcModule&lt;Context&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Methods</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","polkadot_rpc::RpcExtension"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()