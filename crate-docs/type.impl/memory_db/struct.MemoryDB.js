(function() {var type_impls = {
"sc_client_api":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    KF: KeyFunction&lt;H&gt;,</span></h3></section></summary><div class=\"docblock\"><p>Create a new <code>MemoryDB</code> from a given null key/data</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_and_purge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_and_purge</a>(\n    &amp;mut self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove an element and delete it from storage if reference count reaches zero.\nIf the value was purged, return the old value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n</div></details></div></details>",0,"sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,\n    KF: KeyFunction&lt;H&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_null_node\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_null_node</a>(null_key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], null_node_data: T) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new <code>MemoryDB</code> from a given null key/data</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new instance of <code>Self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_with_root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">default_with_root</a>() -&gt; (MemoryDB&lt;H, KF, T&gt;, &lt;H as Hasher&gt;::Out)</h4></section></summary><div class=\"docblock\"><p>Create a new default instance of <code>Self</code> and returns <code>Self</code> and the root hash.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clear all data from the database.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>hash_db;\n<span class=\"kw\">extern crate </span>keccak_hasher;\n<span class=\"kw\">extern crate </span>memory_db;\n\n<span class=\"kw\">use </span>hash_db::{Hasher, HashDB, EMPTY_PREFIX};\n<span class=\"kw\">use </span>keccak_hasher::KeccakHasher;\n<span class=\"kw\">use </span>memory_db::{MemoryDB, HashKey};\n\n<span class=\"kw\">fn </span>main() {\n  <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = MemoryDB::&lt;KeccakHasher, HashKey&lt;<span class=\"kw\">_</span>&gt;, Vec&lt;u8&gt;&gt;::default();\n  <span class=\"kw\">let </span>hello_bytes = <span class=\"string\">&quot;Hello world!&quot;</span>.as_bytes();\n  <span class=\"kw\">let </span>hash = m.insert(EMPTY_PREFIX, hello_bytes);\n  <span class=\"macro\">assert!</span>(m.contains(<span class=\"kw-2\">&amp;</span>hash, EMPTY_PREFIX));\n  m.clear();\n  <span class=\"macro\">assert!</span>(!m.contains(<span class=\"kw-2\">&amp;</span>hash, EMPTY_PREFIX));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.purge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">purge</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Purge all zero-referenced data from the database.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key, (T, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return the internal key-value Map, clearing the current state.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">raw</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Grab the raw information associated with a key. Returns None if the key\ndoesn’t exist.</p>\n<p>Even when Some is returned, the data is only guaranteed to be useful\nwhen the refs &gt; 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.consolidate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">consolidate</a>(&amp;mut self, other: MemoryDB&lt;H, KF, T&gt;)</h4></section></summary><div class=\"docblock\"><p>Consolidate all the entries of <code>other</code> into <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the keys in the database together with number of underlying references.</p>\n</div></details></div></details>",0,"sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsHashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-AsHashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; AsHashDB&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hash_db\" class=\"method trait-impl\"><a href=\"#method.as_hash_db\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_hash_db</a>(&amp;self) -&gt; &amp;dyn HashDB&lt;H, T&gt;</h4></section></summary><div class='docblock'>Perform upcast to HashDB for anything that derives from HashDB.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hash_db_mut\" class=\"method trait-impl\"><a href=\"#method.as_hash_db_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_hash_db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn HashDB&lt;H, T&gt;</h4></section></summary><div class='docblock'>Perform mutable upcast to HashDB for anything that derives from HashDB.</div></details></div></details>","AsHashDB<H, T>","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Default-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,\n    KF: KeyFunction&lt;H&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","sc_client_api::backend::BackendTransaction"],["<section id=\"impl-Eq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Eq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MaybeDebug,</span></h3></section>","Eq","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MaybeDebug,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;MemoryDB&lt;H, KF, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + KeyFunction&lt;H&gt;,\n    &lt;KF as KeyFunction&lt;H&gt;&gt;::Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existence of a hash-key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emplace\" class=\"method trait-impl\"><a href=\"#method.emplace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">emplace</a>(&amp;mut self, key: &lt;H as Hasher&gt;::Out, value: T)</h4></section></summary><div class='docblock'>Insert a datum item into the DB. Insertions are counted and the equivalent\nnumber of <code>remove()</code>s must be performed before the data is considered dead.\nThe caller should ensure that a key only corresponds to one value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(&amp;mut self, key: &amp;&lt;H as Hasher&gt;::Out)</h4></section></summary><div class='docblock'>Remove a datum previously inserted. Insertions can be “owed” such that the\nsame number of <code>insert()</code>s may happen without the data being eventually\nbeing inserted into the DB. It can be “owed” more than once.\nThe caller should ensure that a key only corresponds to one value.</div></details></div></details>","PlainDB<<H as Hasher>::Out, T>","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashDBRef%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-HashDBRef%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; HashDBRef&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existance of a hash-key.</div></details></div></details>","HashDBRef<H, T>","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PlainDBRef%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PlainDBRef%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; PlainDBRef&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + KeyFunction&lt;H&gt;,\n    &lt;KF as KeyFunction&lt;H&gt;&gt;::Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existance of a hash-key.</div></details></div></details>","PlainDBRef<<H as Hasher>::Out, T>","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-AsPlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; AsPlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;KF as KeyFunction&lt;H&gt;&gt;::Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_plain_db\" class=\"method trait-impl\"><a href=\"#method.as_plain_db\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_plain_db</a>(&amp;self) -&gt; &amp;dyn PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt;</h4></section></summary><div class='docblock'>Perform upcast to PlainDB for anything that derives from PlainDB.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_plain_db_mut\" class=\"method trait-impl\"><a href=\"#method.as_plain_db_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_plain_db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt;</h4></section></summary><div class='docblock'>Perform mutable upcast to PlainDB for anything that derives from PlainDB.</div></details></div></details>","AsPlainDB<<H as Hasher>::Out, T>","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashDBT%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-HashDBT%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; HashDB&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existence of a hash-key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emplace\" class=\"method trait-impl\"><a href=\"#method.emplace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">emplace</a>(\n    &amp;mut self,\n    key: &lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;),\n    value: T\n)</h4></section></summary><div class='docblock'>Like <code>insert()</code>, except you provide the key and the data is all moved.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method trait-impl\"><a href=\"#method.insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert</a>(\n    &amp;mut self,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;),\n    value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]\n) -&gt; &lt;H as Hasher&gt;::Out</h4></section></summary><div class='docblock'>Insert a datum item into the DB and return the datum’s hash for a later lookup. Insertions\nare counted and the equivalent number of <code>remove()</code>s must be performed before the data\nis considered dead.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(&amp;mut self, key: &amp;&lt;H as Hasher&gt;::Out, prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;))</h4></section></summary><div class='docblock'>Remove a datum previously inserted. Insertions can be “owed” such that the same number of\n<code>insert()</code>s may happen without the data being eventually being inserted into the DB.\nIt can be “owed” more than once.</div></details></div></details>","HashDB<H, T>","sc_client_api::backend::BackendTransaction"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrieBackendStorage%3CH%3E-for-MemoryDB%3CH,+KF,+Vec%3Cu8%3E%3E\" class=\"impl\"><a href=\"#impl-TrieBackendStorage%3CH%3E-for-MemoryDB%3CH,+KF,+Vec%3Cu8%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF&gt; TrieBackendStorage&lt;H&gt; for MemoryDB&lt;H, KF, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class='docblock'>Get the value stored at key.</div></details></div></details>","TrieBackendStorage<H>","sc_client_api::backend::BackendTransaction"]],
"sp_state_machine":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    KF: KeyFunction&lt;H&gt;,</span></h3></section></summary><div class=\"docblock\"><p>Create a new <code>MemoryDB</code> from a given null key/data</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_and_purge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_and_purge</a>(\n    &amp;mut self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove an element and delete it from storage if reference count reaches zero.\nIf the value was purged, return the old value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n</div></details></div></details>",0,"sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,\n    KF: KeyFunction&lt;H&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_null_node\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_null_node</a>(null_key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], null_node_data: T) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new <code>MemoryDB</code> from a given null key/data</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new instance of <code>Self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_with_root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">default_with_root</a>() -&gt; (MemoryDB&lt;H, KF, T&gt;, &lt;H as Hasher&gt;::Out)</h4></section></summary><div class=\"docblock\"><p>Create a new default instance of <code>Self</code> and returns <code>Self</code> and the root hash.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clear all data from the database.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>hash_db;\n<span class=\"kw\">extern crate </span>keccak_hasher;\n<span class=\"kw\">extern crate </span>memory_db;\n\n<span class=\"kw\">use </span>hash_db::{Hasher, HashDB, EMPTY_PREFIX};\n<span class=\"kw\">use </span>keccak_hasher::KeccakHasher;\n<span class=\"kw\">use </span>memory_db::{MemoryDB, HashKey};\n\n<span class=\"kw\">fn </span>main() {\n  <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = MemoryDB::&lt;KeccakHasher, HashKey&lt;<span class=\"kw\">_</span>&gt;, Vec&lt;u8&gt;&gt;::default();\n  <span class=\"kw\">let </span>hello_bytes = <span class=\"string\">&quot;Hello world!&quot;</span>.as_bytes();\n  <span class=\"kw\">let </span>hash = m.insert(EMPTY_PREFIX, hello_bytes);\n  <span class=\"macro\">assert!</span>(m.contains(<span class=\"kw-2\">&amp;</span>hash, EMPTY_PREFIX));\n  m.clear();\n  <span class=\"macro\">assert!</span>(!m.contains(<span class=\"kw-2\">&amp;</span>hash, EMPTY_PREFIX));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.purge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">purge</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Purge all zero-referenced data from the database.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key, (T, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return the internal key-value Map, clearing the current state.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">raw</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Grab the raw information associated with a key. Returns None if the key\ndoesn’t exist.</p>\n<p>Even when Some is returned, the data is only guaranteed to be useful\nwhen the refs &gt; 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.consolidate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">consolidate</a>(&amp;mut self, other: MemoryDB&lt;H, KF, T&gt;)</h4></section></summary><div class=\"docblock\"><p>Consolidate all the entries of <code>other</code> into <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the keys in the database together with number of underlying references.</p>\n</div></details></div></details>",0,"sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CStorageProof%3E-for-MemoryDB%3CH,+HashKey%3CH%3E,+Vec%3Cu8%3E%3E\" class=\"impl\"><a href=\"#impl-From%3CStorageProof%3E-for-MemoryDB%3CH,+HashKey%3CH%3E,+Vec%3Cu8%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"sp_state_machine/struct.StorageProof.html\" title=\"struct sp_state_machine::StorageProof\">StorageProof</a>&gt; for MemoryDB&lt;H, HashKey&lt;H&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(proof: <a class=\"struct\" href=\"sp_state_machine/struct.StorageProof.html\" title=\"struct sp_state_machine::StorageProof\">StorageProof</a>) -&gt; MemoryDB&lt;H, HashKey&lt;H&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<StorageProof>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26StorageProof%3E-for-MemoryDB%3CH,+HashKey%3CH%3E,+Vec%3Cu8%3E%3E\" class=\"impl\"><a href=\"#impl-From%3C%26StorageProof%3E-for-MemoryDB%3CH,+HashKey%3CH%3E,+Vec%3Cu8%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"sp_state_machine/struct.StorageProof.html\" title=\"struct sp_state_machine::StorageProof\">StorageProof</a>&gt; for MemoryDB&lt;H, HashKey&lt;H&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(proof: &amp;<a class=\"struct\" href=\"sp_state_machine/struct.StorageProof.html\" title=\"struct sp_state_machine::StorageProof\">StorageProof</a>) -&gt; MemoryDB&lt;H, HashKey&lt;H&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&StorageProof>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsHashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-AsHashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; AsHashDB&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hash_db\" class=\"method trait-impl\"><a href=\"#method.as_hash_db\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_hash_db</a>(&amp;self) -&gt; &amp;dyn HashDB&lt;H, T&gt;</h4></section></summary><div class='docblock'>Perform upcast to HashDB for anything that derives from HashDB.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hash_db_mut\" class=\"method trait-impl\"><a href=\"#method.as_hash_db_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_hash_db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn HashDB&lt;H, T&gt;</h4></section></summary><div class='docblock'>Perform mutable upcast to HashDB for anything that derives from HashDB.</div></details></div></details>","AsHashDB<H, T>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Default-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,\n    KF: KeyFunction&lt;H&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","sp_state_machine::MemoryDB"],["<section id=\"impl-Eq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Eq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MaybeDebug,</span></h3></section>","Eq","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: KeyFunction&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MaybeDebug,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;MemoryDB&lt;H, KF, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + KeyFunction&lt;H&gt;,\n    &lt;KF as KeyFunction&lt;H&gt;&gt;::Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existence of a hash-key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emplace\" class=\"method trait-impl\"><a href=\"#method.emplace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">emplace</a>(&amp;mut self, key: &lt;H as Hasher&gt;::Out, value: T)</h4></section></summary><div class='docblock'>Insert a datum item into the DB. Insertions are counted and the equivalent\nnumber of <code>remove()</code>s must be performed before the data is considered dead.\nThe caller should ensure that a key only corresponds to one value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(&amp;mut self, key: &amp;&lt;H as Hasher&gt;::Out)</h4></section></summary><div class='docblock'>Remove a datum previously inserted. Insertions can be “owed” such that the\nsame number of <code>insert()</code>s may happen without the data being eventually\nbeing inserted into the DB. It can be “owed” more than once.\nThe caller should ensure that a key only corresponds to one value.</div></details></div></details>","PlainDB<<H as Hasher>::Out, T>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashDBRef%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-HashDBRef%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; HashDBRef&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existance of a hash-key.</div></details></div></details>","HashDBRef<H, T>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PlainDBRef%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PlainDBRef%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; PlainDBRef&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + KeyFunction&lt;H&gt;,\n    &lt;KF as KeyFunction&lt;H&gt;&gt;::Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existance of a hash-key.</div></details></div></details>","PlainDBRef<<H as Hasher>::Out, T>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-AsPlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; AsPlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;KF as KeyFunction&lt;H&gt;&gt;::Key: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_plain_db\" class=\"method trait-impl\"><a href=\"#method.as_plain_db\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_plain_db</a>(&amp;self) -&gt; &amp;dyn PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt;</h4></section></summary><div class='docblock'>Perform upcast to PlainDB for anything that derives from PlainDB.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_plain_db_mut\" class=\"method trait-impl\"><a href=\"#method.as_plain_db_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_plain_db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt;</h4></section></summary><div class='docblock'>Perform mutable upcast to PlainDB for anything that derives from PlainDB.</div></details></div></details>","AsPlainDB<<H as Hasher>::Out, T>","sp_state_machine::MemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-HashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; HashDB&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: KeyFunction&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existence of a hash-key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emplace\" class=\"method trait-impl\"><a href=\"#method.emplace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">emplace</a>(\n    &amp;mut self,\n    key: &lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;),\n    value: T\n)</h4></section></summary><div class='docblock'>Like <code>insert()</code>, except you provide the key and the data is all moved.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method trait-impl\"><a href=\"#method.insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert</a>(\n    &amp;mut self,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;),\n    value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]\n) -&gt; &lt;H as Hasher&gt;::Out</h4></section></summary><div class='docblock'>Insert a datum item into the DB and return the datum’s hash for a later lookup. Insertions\nare counted and the equivalent number of <code>remove()</code>s must be performed before the data\nis considered dead.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(&amp;mut self, key: &amp;&lt;H as Hasher&gt;::Out, prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;))</h4></section></summary><div class='docblock'>Remove a datum previously inserted. Insertions can be “owed” such that the same number of\n<code>insert()</code>s may happen without the data being eventually being inserted into the DB.\nIt can be “owed” more than once.</div></details></div></details>","HashDB<H, T>","sp_state_machine::MemoryDB"]],
"sp_trie":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,</span></h3></section></summary><div class=\"docblock\"><p>Create a new <code>MemoryDB</code> from a given null key/data</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_and_purge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_and_purge</a>(\n    &amp;mut self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove an element and delete it from storage if reference count reaches zero.\nIf the value was purged, return the old value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n</div></details></div></details>",0,"sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_null_node\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_null_node</a>(null_key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], null_node_data: T) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new <code>MemoryDB</code> from a given null key/data</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new instance of <code>Self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_with_root\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">default_with_root</a>() -&gt; (MemoryDB&lt;H, KF, T&gt;, &lt;H as Hasher&gt;::Out)</h4></section></summary><div class=\"docblock\"><p>Create a new default instance of <code>Self</code> and returns <code>Self</code> and the root hash.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clear all data from the database.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>hash_db;\n<span class=\"kw\">extern crate </span>keccak_hasher;\n<span class=\"kw\">extern crate </span>memory_db;\n\n<span class=\"kw\">use </span>hash_db::{Hasher, HashDB, EMPTY_PREFIX};\n<span class=\"kw\">use </span>keccak_hasher::KeccakHasher;\n<span class=\"kw\">use </span>memory_db::{MemoryDB, HashKey};\n\n<span class=\"kw\">fn </span>main() {\n  <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = MemoryDB::&lt;KeccakHasher, HashKey&lt;<span class=\"kw\">_</span>&gt;, Vec&lt;u8&gt;&gt;::default();\n  <span class=\"kw\">let </span>hello_bytes = <span class=\"string\">&quot;Hello world!&quot;</span>.as_bytes();\n  <span class=\"kw\">let </span>hash = m.insert(EMPTY_PREFIX, hello_bytes);\n  <span class=\"macro\">assert!</span>(m.contains(<span class=\"kw-2\">&amp;</span>hash, EMPTY_PREFIX));\n  m.clear();\n  <span class=\"macro\">assert!</span>(!m.contains(<span class=\"kw-2\">&amp;</span>hash, EMPTY_PREFIX));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.purge\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">purge</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Purge all zero-referenced data from the database.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;&lt;KF as <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.KeyFunction.html#associatedtype.Key\" title=\"type sp_trie::KeyFunction::Key\">Key</a>, (T, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return the internal key-value Map, clearing the current state.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">raw</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Grab the raw information associated with a key. Returns None if the key\ndoesn’t exist.</p>\n<p>Even when Some is returned, the data is only guaranteed to be useful\nwhen the refs &gt; 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.consolidate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">consolidate</a>(&amp;mut self, other: MemoryDB&lt;H, KF, T&gt;)</h4></section></summary><div class=\"docblock\"><p>Consolidate all the entries of <code>other</code> into <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;&lt;KF as <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.KeyFunction.html#associatedtype.Key\" title=\"type sp_trie::KeyFunction::Key\">Key</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the keys in the database together with number of underlying references.</p>\n</div></details></div></details>",0,"sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsHashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-AsHashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; AsHashDB&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hash_db\" class=\"method trait-impl\"><a href=\"#method.as_hash_db\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_hash_db</a>(&amp;self) -&gt; &amp;dyn <a class=\"trait\" href=\"sp_trie/trait.HashDBT.html\" title=\"trait sp_trie::HashDBT\">HashDB</a>&lt;H, T&gt;</h4></section></summary><div class='docblock'>Perform upcast to HashDB for anything that derives from HashDB.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_hash_db_mut\" class=\"method trait-impl\"><a href=\"#method.as_hash_db_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_hash_db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn <a class=\"trait\" href=\"sp_trie/trait.HashDBT.html\" title=\"trait sp_trie::HashDBT\">HashDB</a>&lt;H, T&gt;</h4></section></summary><div class='docblock'>Perform mutable upcast to HashDB for anything that derives from HashDB.</div></details></div></details>","AsHashDB<H, T>","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Default-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; MemoryDB&lt;H, KF, T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<section id=\"impl-Eq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-Eq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MaybeDebug,</span></h3></section>","Eq","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MaybeDebug,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;MemoryDB&lt;H, KF, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,\n    &lt;KF as <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.KeyFunction.html#associatedtype.Key\" title=\"type sp_trie::KeyFunction::Key\">Key</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existence of a hash-key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emplace\" class=\"method trait-impl\"><a href=\"#method.emplace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">emplace</a>(&amp;mut self, key: &lt;H as Hasher&gt;::Out, value: T)</h4></section></summary><div class='docblock'>Insert a datum item into the DB. Insertions are counted and the equivalent\nnumber of <code>remove()</code>s must be performed before the data is considered dead.\nThe caller should ensure that a key only corresponds to one value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(&amp;mut self, key: &amp;&lt;H as Hasher&gt;::Out)</h4></section></summary><div class='docblock'>Remove a datum previously inserted. Insertions can be “owed” such that the\nsame number of <code>insert()</code>s may happen without the data being eventually\nbeing inserted into the DB. It can be “owed” more than once.\nThe caller should ensure that a key only corresponds to one value.</div></details></div></details>","PlainDB<<H as Hasher>::Out, T>","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashDBRef%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-HashDBRef%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; HashDBRef&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existance of a hash-key.</div></details></div></details>","HashDBRef<H, T>","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PlainDBRef%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-PlainDBRef%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; PlainDBRef&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;,\n    &lt;KF as <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.KeyFunction.html#associatedtype.Key\" title=\"type sp_trie::KeyFunction::Key\">Key</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, key: &amp;&lt;H as Hasher&gt;::Out) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existance of a hash-key.</div></details></div></details>","PlainDBRef<<H as Hasher>::Out, T>","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-AsPlainDB%3C%3CH+as+Hasher%3E::Out,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; AsPlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;KF as <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt;&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.KeyFunction.html#associatedtype.Key\" title=\"type sp_trie::KeyFunction::Key\">Key</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_plain_db\" class=\"method trait-impl\"><a href=\"#method.as_plain_db\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_plain_db</a>(&amp;self) -&gt; &amp;dyn PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt;</h4></section></summary><div class='docblock'>Perform upcast to PlainDB for anything that derives from PlainDB.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_plain_db_mut\" class=\"method trait-impl\"><a href=\"#method.as_plain_db_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_plain_db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn PlainDB&lt;&lt;H as Hasher&gt;::Out, T&gt;</h4></section></summary><div class='docblock'>Perform mutable upcast to PlainDB for anything that derives from PlainDB.</div></details></div></details>","AsPlainDB<<H as Hasher>::Out, T>","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"impl\"><a href=\"#impl-HashDB%3CH,+T%3E-for-MemoryDB%3CH,+KF,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, KF, T&gt; <a class=\"trait\" href=\"sp_trie/trait.HashDBT.html\" title=\"trait sp_trie::HashDBT\">HashDB</a>&lt;H, T&gt; for MemoryDB&lt;H, KF, T&gt;<span class=\"where fmt-newline\">where\n    H: Hasher,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    KF: <a class=\"trait\" href=\"sp_trie/trait.KeyFunction.html\" title=\"trait sp_trie::KeyFunction\">KeyFunction</a>&lt;H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sp_trie/trait.HashDBT.html#tymethod.get\" class=\"fn\">get</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sp_trie/trait.HashDBT.html#tymethod.contains\" class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;&lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;)\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check for the existence of a hash-key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emplace\" class=\"method trait-impl\"><a href=\"#method.emplace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sp_trie/trait.HashDBT.html#tymethod.emplace\" class=\"fn\">emplace</a>(\n    &amp;mut self,\n    key: &lt;H as Hasher&gt;::Out,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;),\n    value: T\n)</h4></section></summary><div class='docblock'>Like <code>insert()</code>, except you provide the key and the data is all moved.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method trait-impl\"><a href=\"#method.insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sp_trie/trait.HashDBT.html#tymethod.insert\" class=\"fn\">insert</a>(\n    &amp;mut self,\n    prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;),\n    value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]\n) -&gt; &lt;H as Hasher&gt;::Out</h4></section></summary><div class='docblock'>Insert a datum item into the DB and return the datum’s hash for a later lookup. Insertions\nare counted and the equivalent number of <code>remove()</code>s must be performed before the data\nis considered dead.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sp_trie/trait.HashDBT.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, key: &amp;&lt;H as Hasher&gt;::Out, prefix: (&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;))</h4></section></summary><div class='docblock'>Remove a datum previously inserted. Insertions can be “owed” such that the same number of\n<code>insert()</code>s may happen without the data being eventually being inserted into the DB.\nIt can be “owed” more than once.</div></details></div></details>","HashDB<H, T>","sp_trie::PrefixedMemoryDB","sp_trie::MemoryDB","sp_trie::GenericMemoryDB"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()