(function() {var type_impls = {
"cumulus_primitives_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Port of the <code>Vec&lt;T&gt;</code> inherent API.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty, bit-vector.</p>\n<p>This does not allocate until bits are <a href=\"Self::push\"><code>.push()</code></a>ed into it, or space is\nexplicitly <a href=\"Self::reserve\"><code>.reserve()</code></a>d.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.new\" title=\"associated function alloc::vec::Vec::new\"><code>Vec::new</code></a></p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = BitVec::&lt;u8, Msb0&gt;::new();\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocates a new, empty, bit-vector with space for at least <code>capacity</code>\nbits before reallocating.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>Vec::with_capacity</code></a></p>\n<h6 id=\"panics\"><a href=\"#panics\">Panics</a></h6>\n<p>This panics if the requested capacity is longer than what the bit-vector\ncan represent. See <a href=\"crate::slice::BitSlice::MAX_BITS\"><code>BitSlice::MAX_BITS</code></a>.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">128</span>);\n\n<span class=\"macro\">assert!</span>(bv.is_empty());\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">128</span>);\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0 </span>.. <span class=\"number\">128 </span>{\n  bv.push(i &amp; <span class=\"number\">0xC0 </span>== i);\n}\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">128</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">128</span>);\n\nbv.push(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">129</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">129</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw_parts</a>(\n    bitptr: BitPtr&lt;Mut, T, O&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a bit-vector handle from its constituent fields.</p>\n<h6 id=\"original-2\"><a href=\"#original-2\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>Vec::from_raw_parts</code></a></p>\n<h6 id=\"safety\"><a href=\"#safety\">Safety</a></h6>\n<p>The <strong>only</strong> acceptable argument values for this function are those that\nwere previously produced by calling <a href=\"Self::into_raw_parts\"><code>.into_raw_parts()</code></a>. Furthermore,\nyou may only call this <strong>at most once</strong> on any set of arguments. Using\nthe same arguments in more than one call to this function will result in\na double- or use-after free error.</p>\n<p>Attempting to conjure your own values and pass them into this function\nwill break the allocator state.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>(bitptr, len, capa) = bv.into_raw_parts();\n<span class=\"kw\">let </span>bv2 = <span class=\"kw\">unsafe </span>{\n  BitVec::from_raw_parts(bitptr, len, capa)\n};\n<span class=\"macro\">assert_eq!</span>(bv2, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw_parts</a>(self) -&gt; (BitPtr&lt;Mut, T, O&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Decomposes a bit-vector into its constituent member fields.</p>\n<p>This disarms the destructor. In order to prevent a memory leak, you must\npass <strong>these exact values</strong> back into <a href=\"Self::from_raw_parts\"><code>::from_raw_parts()</code></a>.</p>\n<h6 id=\"original-3\"><a href=\"#original-3\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.into_raw_parts\" title=\"method alloc::vec::Vec::into_raw_parts\"><code>Vec::into_raw_parts</code></a></p>\n<h6 id=\"api-differences\"><a href=\"#api-differences\">API Differences</a></h6>\n<p>This method is still unstable as of 1.54. It is provided here as a\nconvenience, under the expectation that the standard-library method will\nstabilize as-is.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the allocation capacity, measured in bits.</p>\n<p>This counts how many total bits the bit-vector can store before it must\nperform a reällocation to acquire more memory.</p>\n<p>If the capacity is not a multiple of 8, you should call\n<a href=\"Self::force_align\"><code>.force_align()</code></a>.</p>\n<h6 id=\"original-4\"><a href=\"#original-4\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>Vec::capacity</code></a></p>\n<h6 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that the bit-vector has allocation capacity for <em>at least</em>\n<code>additional</code> more bits to be appended to it.</p>\n<p>For convenience, this method <em>guarantees</em> that the underlying memory for\n<code>self[.. self.len() + additional]</code> is initialized, and may be safely\naccessed directly without requiring use of <code>.push()</code> or <code>.extend()</code> to\ninitialize it.</p>\n<p>Newly-allocated memory is always initialized to zero. It is still <em>dead</em>\nuntil the bit-vector is grown (by <code>.push()</code>, <code>.extend()</code>, or\n<code>.set_len()</code>), but direct access will not trigger UB.</p>\n<h6 id=\"original-5\"><a href=\"#original-5\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>Vec::reserve</code></a></p>\n<h6 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h6>\n<p>This panics if the new capacity exceeds the bit-vector’s maximum.</p>\n<h6 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">80</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">80</span>);\nbv.reserve(<span class=\"number\">800</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">800</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that the bit-vector has allocation capacity for <em>at least</em>\n<code>additional</code> more bits to be appended to it.</p>\n<p>This differs from <a href=\"Self::reserve\"><code>.reserve()</code></a> by requesting that the allocator\nprovide the minimum capacity necessary, rather than a potentially larger\namount that the allocator may find more convenient.</p>\n<p>Remember that this is a <em>request</em>: the allocator provides what it\nprovides, and you cannot rely on the new capacity to be exactly minimal.\nYou should still prefer <code>.reserve()</code>, especially if you expect to append\nto the bit-vector in the future.</p>\n<h6 id=\"original-6\"><a href=\"#original-6\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.reserve_exact\" title=\"method alloc::vec::Vec::reserve_exact\"><code>Vec::reserve_exact</code></a></p>\n<h6 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h6>\n<p>This panics if the new capacity exceeds the bit-vector’s maximum.</p>\n<h6 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">80</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">80</span>);\nbv.reserve_exact(<span class=\"number\">800</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">800</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Releases excess capacity back to the allocator.</p>\n<p>Like <a href=\"Self::reserve_exact\"><code>.reserve_exact()</code></a>, this is a <em>request</em> to the allocator, not a\ncommand. The allocator may reclaim excess memory or may not.</p>\n<h6 id=\"original-7\"><a href=\"#original-7\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit</code></a></p>\n<h6 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">1000</span>);\nbv.push(<span class=\"bool-val\">true</span>);\nbv.shrink_to_fit();</code></pre></div>\n</div></details><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(self) -&gt; BitBox&lt;T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: prefer `.into_boxed_bitslice() instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the bit-vector, keeping the first <code>new_len</code> bits and discarding\nthe rest.</p>\n<p>If <code>len</code> is greater than the bit-vector’s current length, this has no\neffect.</p>\n<p>The <a href=\"Self::drain\"><code>.drain()</code></a> method can emulate <code>.truncate()</code>, except that it yields\nthe excess bits rather than discarding them.</p>\n<p>Note that this has no effect on the allocated capacity of the\nbit-vector, <strong>nor does it erase truncated memory</strong>. Bits in the\nallocated memory that are outside of the <a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> view are\nalways considered to have <em>initialized</em>, but <strong>unspecified</strong>, values,\nand you cannot rely on them to be zero.</p>\n<h6 id=\"original-8\"><a href=\"#original-8\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a></p>\n<h6 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h6>\n<p>Truncating a five-bit vector to two bits:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>].count_ones() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the bit-vector’s current\nlength:</p>\n</div></details><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_bitslice()</code> instead</span></div></span><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_mut_bitslice()</code> instead</span></div></span><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; BitPtr&lt;Const, T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_bitptr()</code> instead</span></div></span><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; BitPtr&lt;Mut, T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_mut_bitptr()</code> instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Resizes a bit-vector to a new length.</p>\n<h6 id=\"original-9\"><a href=\"#original-9\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>Vec::set_len</code></a></p>\n<h6 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h6>\n<p><strong>NOT ALL MEMORY IN THE ALLOCATION IS INITIALIZED!</strong></p>\n<p>Memory in a bit-vector’s allocation is only initialized when the\nbit-vector grows into it normally (through <a href=\"Self::push\"><code>.push()</code></a> or one of the\nvarious <code>.extend*()</code> methods). Setting the length to a value beyond what\nwas previously initialized, but still within the allocation, is\nundefined behavior.</p>\n<p>The caller is responsible for ensuring that all memory up to (but not\nincluding) the new length has already been initialized.</p>\n<h6 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h6>\n<p>This panics if <code>new_len</code> exceeds the capacity as reported by\n<a href=\"Self::capacity\"><code>.capacity()</code></a>.</p>\n<h6 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">unsafe </span>{\n  <span class=\"comment\">// The default storage type, `usize`, is at least 32 bits.\n  </span>bv.set_len(<span class=\"number\">32</span>);\n}\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[\n  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n]);\n<span class=\"comment\">//  `BitVec` guarantees that newly-initialized memory is zeroed.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Takes a bit out of the bit-vector.</p>\n<p>The empty slot is filled with the last bit in the bit-vector, rather\nthan shunting <code>index + 1 .. self.len()</code> down by one.</p>\n<h6 id=\"original-10\"><a href=\"#original-10\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a></p>\n<h6 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (<code>self.len()</code> or greater).</p>\n<h6 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"macro\">assert!</span>(!bv.swap_remove(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a bit at a given position, shifting all bits after it one spot\nto the right.</p>\n<p><code>index</code> may be any value up to <em>and including</em> <code>self.len()</code>. If it is\n<code>self.len()</code>, it behaves equivalently to <code>.push()</code>.</p>\n<h6 id=\"original-11\"><a href=\"#original-11\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>Vec::insert</code></a></p>\n<h6 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (including <code>self.len()</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a bit at a given position, shifting all bits after it one spot\nto the left.</p>\n<p><code>index</code> may be any value up to, but <strong>not</strong> including, <code>self.len()</code>.</p>\n<h6 id=\"original-12\"><a href=\"#original-12\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a></p>\n<h6 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (excluding <code>self.len()</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, func: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Retains only the bits that the predicate allows.</p>\n<p>Bits are deleted from the vector when the predicate function returns\nfalse. This function is linear in <code>self.len()</code>.</p>\n<h6 id=\"original-13\"><a href=\"#original-13\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.retain\" title=\"method alloc::vec::Vec::retain\"><code>Vec::retain</code></a></p>\n<h6 id=\"api-differences-1\"><a href=\"#api-differences-1\">API Differences</a></h6>\n<p>The predicate receives both the index of the bit as well as its value,\nin order to allow the predicate to have more than one bit of\nkeep/discard information.</p>\n<h6 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.retain(|idx, <span class=\"kw\">_</span>| idx % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>,    <span class=\"number\">0</span>,    <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">push</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a single bit to the vector.</p>\n<h6 id=\"original-14\"><a href=\"#original-14\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>Vec::push</code></a></p>\n<h6 id=\"panics-7\"><a href=\"#panics-7\">Panics</a></h6>\n<p>This panics if the push would cause the bit-vector to exceed its maximum\ncapacity.</p>\n<h6 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>];\nbv.push(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_bitslice(), <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to remove the trailing bit from the bit-vector.</p>\n<p>This returns <code>None</code> if the bit-vector is empty.</p>\n<h6 id=\"original-15\"><a href=\"#original-15\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.pop\" title=\"method alloc::vec::Vec::pop\"><code>Vec::pop</code></a></p>\n<h6 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"macro\">assert!</span>(bv.pop().unwrap());\n<span class=\"macro\">assert!</span>(!bv.pop().unwrap());\n<span class=\"macro\">assert!</span>(bv.pop().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;mut BitVec&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section></summary><div class=\"docblock\"><p>Moves all the bits out of <code>other</code> into the back of <code>self</code>.</p>\n<p>The <code>other</code> bit-vector is emptied after this occurs.</p>\n<h6 id=\"original-16\"><a href=\"#original-16\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>Vec::append</code></a></p>\n<h6 id=\"api-differences-2\"><a href=\"#api-differences-2\">API Differences</a></h6>\n<p>This permits <code>other</code> to have different type parameters than <code>self</code>, and\ndoes not require that it be literally <code>Self</code>.</p>\n<h6 id=\"panics-8\"><a href=\"#panics-8\">Panics</a></h6>\n<p>This panics if <code>self.len() + other.len()</code> exceeds the maximum capacity\nof a bit-vector.</p>\n<h6 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv1 = <span class=\"macro\">bitvec!</span>[u16, Msb0; <span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv2 = <span class=\"macro\">bitvec!</span>[u32, Lsb0; <span class=\"number\">1</span>; <span class=\"number\">10</span>];\n\nbv1.append(<span class=\"kw-2\">&amp;mut </span>bv2);\n\n<span class=\"macro\">assert_eq!</span>(bv1.count_ones(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(bv1.count_zeros(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bv2.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; Drain&lt;'_, T, O&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Iterates over a portion of the bit-vector, <em>removing</em> all yielded bits\nfrom it.</p>\n<p>When the iterator drops, <em>all</em> bits in its coverage are removed from\n<code>self</code>, even if the iterator did not yield them. If the iterator is\nleaked or otherwise forgotten, and its destructor never runs, then the\namount of un-yielded bits removed from the bit-vector is not specified.</p>\n<h6 id=\"original-17\"><a href=\"#original-17\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a></p>\n<h6 id=\"panics-9\"><a href=\"#panics-9\">Panics</a></h6>\n<p>This panics if <code>range</code> departs <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv2 = bv.drain(<span class=\"number\">1 </span>..= <span class=\"number\">3</span>).collect::&lt;BitVec&gt;();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>,          <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(bv2, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"comment\">// A full range clears the bit-vector.\n</span>bv.drain(..);\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Empties the bit-vector.</p>\n<p>This does not affect the allocated capacity.</p>\n<h6 id=\"original-18\"><a href=\"#original-18\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>Vec::clear</code></a></p>\n<h6 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.clear();\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the length of the bit-vector.</p>\n<p>This is equivalent to <code>BitSlice::len</code>; it is provided as an inherent\nmethod here rather than relying on <code>Deref</code> forwarding so that you can\nwrite <code>BitVec::len</code> as a named function item.</p>\n<h6 id=\"original-19\"><a href=\"#original-19\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests if the bit-vector is empty.</p>\n<p>This is equivalent to <code>BitSlice::is_empty</code>; it is provided as an\ninherent method here rather than relying on <code>Deref</code> forwarding so that\nyou can write <code>BitVec::is_empty</code> as a named function item.</p>\n<h6 id=\"original-20\"><a href=\"#original-20\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.is_empty\" title=\"method alloc::vec::Vec::is_empty\"><code>Vec::is_empty</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits the bit-vector in half at an index, moving <code>self[at ..]</code> out into\na new bit-vector.</p>\n<h6 id=\"original-21\"><a href=\"#original-21\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.split_off\" title=\"method alloc::vec::Vec::split_off\"><code>Vec::split_off</code></a></p>\n<h6 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv2 = bv.split_off(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"kw-2\">&amp;*</span>bv, <span class=\"kw-2\">&amp;*</span>bv2), (<span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, func: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Resizes the bit-vector to a new length, using a function to produce each\ninserted bit.</p>\n<p>If <code>new_len</code> is less than <code>self.len()</code>, this is a truncate operation; if\nit is greater, then <code>self</code> is extended by repeatedly pushing <code>func()</code>.</p>\n<h6 id=\"original-22\"><a href=\"#original-22\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a></p>\n<h6 id=\"api-differences-3\"><a href=\"#api-differences-3\">API Differences</a></h6>\n<p>The generator function receives the index into which its bit will be\nplaced.</p>\n<h6 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">1</span>; <span class=\"number\">2</span>];\nbv.resize_with(<span class=\"number\">5</span>, |idx| idx % <span class=\"number\">2 </span>== <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;a mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Destroys the <code>BitVec</code> handle without destroying the bit-vector\nallocation. The allocation is returned as an <code>&amp;mut BitSlice</code> that lasts\nfor the remaining program lifetime.</p>\n<p>You <em>may</em> call [<code>BitBox::from_raw</code>] on this slice handle exactly once in\norder to reap the allocation before program exit. That function takes a\nmutable pointer, not a mutable reference, so you must ensure that the\nreturned reference is never used again after restoring the allocation\nhandle.</p>\n<h6 id=\"original-23\"><a href=\"#original-23\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.leak\" title=\"method alloc::vec::Vec::leak\"><code>Vec::leak</code></a></p>\n<h6 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>static_bits: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">&#39;static </span><span class=\"kw-2\">mut </span>BitSlice = bv.leak();\nstatic_bits.set(<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(static_bits, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span>bb = <span class=\"kw\">unsafe </span>{ BitBox::from_raw(static_bits) };\n<span class=\"comment\">// static_bits may no longer be used.\n</span>drop(bb); <span class=\"comment\">// explicitly reap memory before program exit</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Resizes the bit-vector to a new length. New bits are initialized to\n<code>value</code>.</p>\n<h6 id=\"original-24\"><a href=\"#original-24\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a></p>\n<h6 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>; <span class=\"number\">2</span>];\nbv.resize(<span class=\"number\">5</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><section id=\"method.extend_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_slice</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;BitSlice&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.extend_from_bitslice()</code> or <code>.extend_from_raw_slice()</code> instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<span class=\"where fmt-newline\">where\n    R: RangeExt&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Extends <code>self</code> by copying an internal range of its bit-slice as the\nregion to append.</p>\n<h6 id=\"original-25\"><a href=\"#original-25\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>Vec::extend_from_within</code></a></p>\n<h6 id=\"panics-10\"><a href=\"#panics-10\">Panics</a></h6>\n<p>This panics if <code>src</code> is not within <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.extend_from_within(<span class=\"number\">1 </span>.. <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I\n) -&gt; Splice&lt;'_, T, O, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Modifies <a href=\"Self::drain\"><code>self.drain()</code></a> so that the removed bit-slice is instead\nreplaced with the contents of another bit-stream.</p>\n<p>As with <code>.drain()</code>, the specified range is always removed from the\nbit-vector even if the splicer is not fully consumed, and the splicer\ndoes not specify how many bits are removed if it leaks.</p>\n<p>The replacement source is only consumed when the splicer drops; however,\nit may be pulled before then. The replacement source cannot assume that\nthere will be a delay between creation of the splicer and when it must\nbegin producing bits.</p>\n<p>This copies the <code>Vec::splice</code> implementation; see its documentation for\nmore details about how the replacement should act.</p>\n<h6 id=\"original-26\"><a href=\"#original-26\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.splice\" title=\"method alloc::vec::Vec::splice\"><code>Vec::splice</code></a></p>\n<h6 id=\"panics-11\"><a href=\"#panics-11\">Panics</a></h6>\n<p>This panics if <code>range</code> departs <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];\n<span class=\"comment\">//                   a  b  c\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>yank = bv.splice(\n  .. <span class=\"number\">2</span>,\n  <span class=\"macro\">bits!</span>[<span class=\"kw\">static </span><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>].iter().by_vals(),\n<span class=\"comment\">//             d  e  f\n</span>);\n\n<span class=\"macro\">assert!</span>(!yank.next().unwrap()); <span class=\"comment\">// a\n</span><span class=\"macro\">assert!</span>(yank.next().unwrap()); <span class=\"comment\">// b\n</span>drop(yank);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"comment\">//                   d  e  f  c</span></code></pre></div>\n</div></details></div></details>",0,"cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Constructors.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">EMPTY</a>: BitVec&lt;T, O&gt; = _</h4></section></summary><div class=\"docblock\"><p>An empty bit-vector with no backing allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.repeat\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">repeat</a>(bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new bit-vector by repeating a bit for the desired length.</p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>zeros = BitVec::&lt;u8, Msb0&gt;::repeat(<span class=\"bool-val\">false</span>, <span class=\"number\">50</span>);\n<span class=\"kw\">let </span>ones = BitVec::&lt;u16, Lsb0&gt;::repeat(<span class=\"bool-val\">true</span>, <span class=\"number\">50</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bitslice</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Copies the contents of a bit-slice into a new heap allocation.</p>\n<p>This copies the raw underlying elements into a new allocation, and sets\nthe produced bit-vector to use the same memory layout as the originating\nbit-slice. This means that it may begin at any bit in the first element,\nnot just the zeroth bit. If you require this property, call\n<a href=\"Self::force_align\"><code>.force_align()</code></a>.</p>\n<p>Dead bits in the copied memory elements are guaranteed to be zeroed.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bits = <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv = BitVec::from_bitslice(bits);\n<span class=\"macro\">assert_eq!</span>(bv, bits);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_element\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_element</a>(elem: T) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new bit-vector from a single element.</p>\n<p>This copies <code>elem</code> into a new heap allocation, and sets the bit-vector\nto cover it entirely.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::from_element(<span class=\"number\">1u8</span>);\n<span class=\"macro\">assert!</span>(bv[<span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new bit-vector from a slice of memory elements.</p>\n<p>This copies <code>slice</code> into a new heap allocation, and sets the bit-vector\nto cover it entirely.</p>\n<h6 id=\"panics\"><a href=\"#panics\">Panics</a></h6>\n<p>This panics if <code>slice</code> exceeds bit-vector capacity.</p>\n<h6 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Lsb0&gt;::from_slice(slice);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, BitSpanError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Fallibly constructs a new bit-vector from a slice of memory elements.</p>\n<p>This fails early if <code>slice</code> exceeds bit-vector capacity. If it is not,\nthen <code>slice</code> is copied into a new heap allocation and fully spanned by\nthe returned bit-vector.</p>\n<h6 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Lsb0&gt;::try_from_slice(slice).unwrap();\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a regular vector in-place into a bit-vector.</p>\n<p>The produced bit-vector spans every bit in the original vector. No\nreällocation occurs; this is purely a transform of the handle.</p>\n<h6 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h6>\n<p>This panics if the source vector is too long to view as a bit-slice.</p>\n<h6 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::from_vec(v);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a regular vector in-place into a bit-vector.</p>\n<p>This fails if the source vector is too long to view as a bit-slice. On\nsuccess, the produced bit-vector spans every bit in the original vector.\nNo reällocation occurs; this is purely a transform of the handle.</p>\n<h6 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>; <span class=\"number\">20</span>];\n<span class=\"macro\">assert_eq!</span>(BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::try_from_vec(v).unwrap().len(), <span class=\"number\">160</span>);</code></pre></div>\n<p>It is not practical to allocate a vector that will fail this conversion.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_bitslice</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;BitSlice&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section></summary><div class=\"docblock\"><p>Appends the contents of a bit-slice to a bit-vector.</p>\n<p>This can extend from a bit-slice of any type parameters; it is not\nrestricted to using the same parameters as <code>self</code>. However, when the\ntype parameters <em>do</em> match, it is possible for this to use a batch-copy\noptimization to go faster than the individual-bit crawl that is\nnecessary when they differ.</p>\n<p>Until Rust provides extensive support for specialization in trait\nimplementations, you should use this method whenever you are extending\nfrom a <code>BitSlice</code> proper, and only use the general <a href=\"https://docs.rs/bitvec/latest/bitvec/vec/struct.Vec.html#impl-Extend\"><code>.extend()</code></a>\nimplementation if you are required to use a generic <code>bool</code> source.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>Vec::extend_from_slice</code></a></p>\n<h6 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.extend_from_bitslice(<span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_raw_slice</a>(&amp;mut self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a slice of <code>T</code> elements to a bit-vector.</p>\n<p>The slice is viewed as a <code>BitSlice&lt;T, O&gt;</code>, then appended directly to the\nbit-vector.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>Vec::extend_from_slice</code></a></p>\n</div></details></div></details>",0,"cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Converters.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitslice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-vector as a bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitslice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-vector as a mutable bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-vector as a slice of its underlying memory elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-vector as a mutable slice of its underlying memory\nelements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitptr</a>(&amp;self) -&gt; BitPtr&lt;Const, T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unsafe shared bit-pointer to the start of the buffer.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>Vec::as_ptr</code></a></p>\n<h6 id=\"safety\"><a href=\"#safety\">Safety</a></h6>\n<p>You must initialize the contents of the underlying buffer before\naccessing memory through this pointer. See the <code>BitPtr</code> documentation\nfor more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitptr</a>(&amp;mut self) -&gt; BitPtr&lt;Mut, T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unsafe writable bit-pointer to the start of the buffer.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>Vec::as_mut_ptr</code></a></p>\n<h6 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h6>\n<p>You must initialize the contents of the underlying buffer before\naccessing memory through this pointer. See the <code>BitPtr</code> documentation\nfor more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_bitslice</a>(self) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a bit-vector into a boxed bit-slice.</p>\n<p>This may cause a reällocation to drop any excess capacity.</p>\n<h6 id=\"original-2\"><a href=\"#original-2\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.into_boxed_slice\" title=\"method alloc::vec::Vec::into_boxed_slice\"><code>Vec::into_boxed_slice</code></a></p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bb = bv.into_boxed_bitslice();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a bit-vector into a <code>Vec</code> of its underlying storage.</p>\n<p>The produced vector contains all elements that contained live bits. Dead\nbits have an unspecified value; you should call <a href=\"Self::set_uninitialized\"><code>.set_uninitialized()</code></a>\nbefore converting into a vector.</p>\n<p>This does not affect the allocated memory; it is purely a conversion of\nthe handle.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[u8, Msb0; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>v = bv.into_vec();\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xF8</span>, <span class=\"number\">0b01001_000</span>);</code></pre></div>\n</div></details></div></details>",0,"cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Utilities.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_elements\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_elements</a>(&amp;mut self, element: &lt;T as BitStore&gt;::Mem)</h4></section></summary><div class=\"docblock\"><p>Overwrites each element (visible in <a href=\"Self::as_raw_mut_slice\"><code>.as_raw_mut_slice()</code></a>) with a new\nbit-pattern.</p>\n<p>This unconditionally writes <code>element</code> into each element in the backing\nslice, without altering the bit-vector’s length or capacity.</p>\n<p>This guarantees that dead bits visible in <a href=\"Self::as_raw_slice\"><code>.as_raw_slice()</code></a> but not\n<a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> are initialized according to the bit-pattern of\n<code>element.</code> The elements not visible in the raw slice, but present in the\nallocation, do <em>not</em> specify a value. You may not rely on them being\nzeroed <em>or</em> being set to the <code>element</code> bit-pattern.</p>\n<h6 id=\"parameters\"><a href=\"#parameters\">Parameters</a></h6>\n<ul>\n<li><code>&amp;mut self</code></li>\n<li><code>element</code>: The bit-pattern with which each live element in the backing\nstore is initialized.</li>\n</ul>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[u8, Msb0; <span class=\"number\">0</span>; <span class=\"number\">20</span>];\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice(), [<span class=\"number\">0</span>; <span class=\"number\">3</span>]);\nbv.set_elements(<span class=\"number\">0xA5</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice(), [<span class=\"number\">0xA5</span>; <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_uninitialized\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_uninitialized</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the uninitialized bits of a bit-vector to a known value.</p>\n<p>This method modifies all bits that are observable in <a href=\"Self::as_raw_slice\"><code>.as_raw_slice()</code></a>\nbut <em>not</em> observable in <a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> to a known value.\nMemory beyond the raw-slice view, but still within the allocation, is\nconsidered fully dead and will never be seen.</p>\n<p>This can be used to zero the unused memory so that when viewed as a raw\nslice, unused bits have a consistent and predictable value.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"number\">0b1101_1100u8</span>.view_bits::&lt;Lsb0&gt;().to_bitvec();\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1101_1100u8</span>);\n\nbv.truncate(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(bv.count_ones(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1101_1100u8</span>);\n\nbv.set_uninitialized(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b0000_1100u8</span>);\n\nbv.set_uninitialized(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1111_1100u8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_align\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">force_align</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Ensures that the live region of the bit-vector’s contents begin at the\nfront edge of the buffer.</p>\n<p><code>BitVec</code> has performance optimizations where it moves its view of its\nbuffer contents in order to avoid needless moves of its data within the\nbuffer. This can lead to unexpected contents of the raw memory values,\nso this method ensures that the semantic contents of the bit-vector\nmatch its in-memory storage.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>data = <span class=\"number\">0b00_1111_00u8</span>;\n<span class=\"kw\">let </span>bits = data.view_bits::&lt;Msb0&gt;();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = bits[<span class=\"number\">2 </span>.. <span class=\"number\">6</span>].to_bitvec();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>; <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], data);\n\nbv.force_align();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>; <span class=\"number\">4</span>]);\n<span class=\"comment\">// BitVec does not specify the value of dead bits in its buffer.\n</span><span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xF0</span>, <span class=\"number\">0xF0</span>);</code></pre></div>\n</div></details></div></details>",0,"cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Encode-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; Encode for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Encode,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to\" class=\"method trait-impl\"><a href=\"#method.encode_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_to</a>&lt;W&gt;(&amp;self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut W</a>)<span class=\"where fmt-newline\">where\n    W: Output + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Convert self to a slice and append it to the destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>If possible give a hint of expected size of the encoding. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convert self to an owned vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.using_encoded\" class=\"method trait-impl\"><a href=\"#method.using_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">using_encoded</a>&lt;R, F&gt;(&amp;self, f: F) -&gt; R<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; R,</span></h4></section></summary><div class='docblock'>Convert self to a slice and then invoke the given closure with it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_size\" class=\"method trait-impl\"><a href=\"#method.encoded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the encoded size. <a>Read more</a></div></details></div></details>","Encode","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<section id=\"impl-EncodeLike-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-EncodeLike-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; EncodeLike for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Encode,</span></h3></section>","EncodeLike","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Decode-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; Decode for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Decode,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a href=\"#method.decode_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"https://doc.rust-lang.org/1.75.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;DecodeFinished, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a href=\"#method.encoded_fixed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a>Read more</a></div></details></div></details>","Decode","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Pointer-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a bool>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a T>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-collection\"><a href=\"#bit-vector-collection\">Bit-Vector Collection</a></h4>\n<p>This collects a bit-vector from anything that produces individual bits.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-FromIterator%3CT%3E\"><code>impl&lt;T&gt; FromIterator&lt;T&gt; for Vec&lt;T&gt;</code></a></p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>This <code>.collect()</code> call is the second-slowest possible way to collect bits into a\nbit-vector, faster only than calling <code>iter.for_each(|bit| bv.push(bit))</code>.\n<strong>DO NOT</strong> use this if you have any other choice.</p>\n<p>If you are collecting a bit-vector from the contents of a bit-slice, then you\nshould use <a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>::from_bitslice()</code></a> instead. That method is specialized to\nperform upfront allocation and, where possible, use a batch copy rather than\ncopying each bit individually from the source into the bit-vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<bool>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M, T1, T2, O1, O2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;BitRef&lt;'a, M, T2, O2&gt;&gt; for BitVec&lt;T1, O1&gt;<span class=\"where fmt-newline\">where\n    M: Mutability,\n    T1: BitStore,\n    T2: BitStore,\n    O1: BitOrder,\n    O2: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-collection-from-proxy-references\"><a href=\"#bit-vector-collection-from-proxy-references\">Bit-Vector Collection from Proxy References</a></h4>\n<p><strong>DO NOT</strong> use this. You <em>clearly</em> have a bit-slice. Use\n<a href=\"crate::vec::BitVec::from_bitslice\"><code>::from_bitslice()</code></a> instead!</p>\n<p>Iterating over a bit-slice requires loading from memory and constructing a proxy\nreference for each bit. This is needlessly slow; the specialized method is able\nto avoid this per-bit cost and possibly even use batched operations.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T1, O1&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T1, O1&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = BitRef&lt;'a, M, T2, O2&gt;&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<BitRef<'a, M, T2, O2>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<section id=\"impl-Sync-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Sync","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Clone-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Default-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitSlice<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitVec&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitVec<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Hash-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: Idx) -&gt; &amp;mut &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;BitVec&lt;T, O&gt; as Index&lt;Idx&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<Idx>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Drop-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<section id=\"impl-Unpin-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Unpin","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-iteration\"><a href=\"#bit-vector-iteration\">Bit-Vector Iteration</a></h4>\n<p>Bit-vectors have the advantage that iteration consumes the whole structure, so\nthey can simply freeze the allocation into a bit-box, then use its iteration and\ndestructor.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-IntoIterator\"><code>impl&lt;T&gt; IntoIterator for Vec&lt;T&gt;</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitSlice<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitVec&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitVec<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Write-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"writing-into-a-bit-vector\"><a href=\"#writing-into-a-bit-vector\">Writing Into a Bit-Vector</a></h4>\n<p>The implementation appends bytes to the referenced bit-vector until the source\nbuffer is exhausted.</p>\n<p>Note that the return value of <code>.write()</code> is always the number of <em>bytes</em> of\n<code>buf</code> consumed!</p>\n<p>The implementation uses <a href=\"crate::field::BitField::store_be\"><code>BitField::store_be</code></a> to fill bytes. Note that unlike\nthe standard library, it is implemented on bit-vectors of <em>any</em> underlying\nelement type. However, using a <code>BitVec&lt;_, u8&gt;</code> is still likely to be fastest.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-Write\"><code>impl Write for Vec&lt;u8&gt;</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1543\">source</a></span><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1558\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1620\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1685\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1741\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1797-1799\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Read-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"reading-from-a-bit-vector\"><a href=\"#reading-from-a-bit-vector\">Reading From a Bit-Vector</a></h4>\n<p>The implementation loads bytes out of the reference bit-vector until either the\ndestination buffer is filled or the source has no more bytes to provide. When\n<code>.read()</code> returns, the provided bit-vector will have its contents shifted down\nso that it begins at the first bit <em>after</em> the last byte copied out into <code>buf</code>.</p>\n<p>Note that the return value of <code>.read()</code> is always the number of <em>bytes</em> of <code>buf</code>\nfilled!</p>\n<h5 id=\"api-differences\"><a href=\"#api-differences\">API Differences</a></h5>\n<p>The standard library does not <code>impl Read for Vec&lt;u8&gt;</code>. It is provided here as a\ncourtesy.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#707\">source</a></span><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#720\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#771\">source</a></span><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#814\">source</a></span><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#869\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#880\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Pull some bytes from this source into the specified buffer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#903\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#955-957\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#998-1000\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Transforms this <code>Read</code> instance to an <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1036-1038\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an adapter which will chain this stream with another. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1075-1077\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.take\">Read more</a></div></details></div></details>","Read","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<BitSlice<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;BitVec&lt;T, O&gt; as Deref&gt;::Target\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitOr&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, O&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</span></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"impl\"><a href=\"#impl-Extend%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M, T1, T2, O1, O2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;BitRef&lt;'a, M, T2, O2&gt;&gt; for BitVec&lt;T1, O1&gt;<span class=\"where fmt-newline\">where\n    M: Mutability,\n    T1: BitStore,\n    T2: BitStore,\n    O1: BitOrder,\n    O2: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-extension-by-proxy-references\"><a href=\"#bit-vector-extension-by-proxy-references\">Bit-Vector Extension by Proxy References</a></h4>\n<p><strong>DO NOT</strong> use this. You <em>clearly</em> have a bit-slice. Use\n<a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>.extend_from_bitslice()</code></a> instead!</p>\n<p>Iterating over a bit-slice requires loading from memory and constructing a proxy\nreference for each bit. This is needlessly slow; the specialized method is able\nto avoid this per-bit cost and possibly even use batched operations.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = BitRef&lt;'a, M, T2, O2&gt;&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<BitRef<'a, M, T2, O2>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-extension\"><a href=\"#bit-vector-extension\">Bit-Vector Extension</a></h4>\n<p>This extends a bit-vector from anything that produces individual bits.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-Extend%3CT%3E\"><code>impl&lt;T&gt; Extend&lt;T&gt; for Vec&lt;T&gt;</code></a></p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>This <code>.extend()</code> call is the second-slowest possible way to append bits into a\nbit-vector, faster only than calling <code>iter.for_each(|bit| bv.push(bit))</code>.\n<strong>DO NOT</strong> use this if you have any other choice.</p>\n<p>If you are extending a bit-vector from the contents of a bit-slice, then you\nshould use <a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>.extend_from_bitslice()</code></a> instead. That method is specialized to\nperform upfront allocation and, where possible, use a batch copy rather than\ncopying each bit individually from the source into the bit-vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<bool>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a bool>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deref-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = BitSlice&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;BitVec&lt;T, O&gt; as Deref&gt;::Target\">ⓘ</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-LowerHex-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Display-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Octal-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<T>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Debug-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<section id=\"impl-Eq-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Eq-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Eq","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitField-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitField-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitField for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_le\" class=\"method trait-impl\"><a href=\"#method.load_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_le</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Little-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_be\" class=\"method trait-impl\"><a href=\"#method.load_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_be</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Big-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_le\" class=\"method trait-impl\"><a href=\"#method.store_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_le</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Little-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_be\" class=\"method trait-impl\"><a href=\"#method.store_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_be</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Big-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a href=\"#method.store\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Integer Storing <a>Read more</a></div></details></div></details>","BitField","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Not-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>This implementation inverts all elements in the live buffer. You cannot rely\non the value of bits in the buffer that are outside the domain of\n[<code>BitVec::as_mut_bitslice</code>].</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" title=\"type core::ops::bit::Not::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as Not&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitXor&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Ord-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;BitVec&lt;T, O&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#826-828\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#846-848\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#871-874\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;mut BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut BitSlice<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: 'a + BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Cow<'a, BitSlice<T, O>>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitArray&lt;A, O&gt;&gt; for BitVec&lt;&lt;A as BitView&gt;::Store, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    A: BitViewSized,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: BitArray&lt;A, O&gt;) -&gt; BitVec&lt;&lt;A as BitView&gt;::Store, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;&lt;A as BitView&gt;::Store, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitArray<A, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&BitSlice<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitBox&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: BitBox&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitBox<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Index%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;BitSlice&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Idx) -&gt; &amp;&lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;BitVec&lt;T, O&gt; as Index&lt;Idx&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Idx>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-UpperHex-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitAnd&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<Rhs>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<section id=\"impl-Send-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Send-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Send","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<BitSlice<T, O>>","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Binary-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TypeInfo-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; TypeInfo for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore + TypeInfo + 'static,\n    O: BitOrder + TypeInfo + 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Identity\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Identity</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; Type</h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","cumulus_primitives_core::relay_chain::vstaging::NodeFeatures"]],
"polkadot_node_core_approval_voting":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Port of the <code>Vec&lt;T&gt;</code> inherent API.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty, bit-vector.</p>\n<p>This does not allocate until bits are <a href=\"Self::push\"><code>.push()</code></a>ed into it, or space is\nexplicitly <a href=\"Self::reserve\"><code>.reserve()</code></a>d.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.new\" title=\"associated function alloc::vec::Vec::new\"><code>Vec::new</code></a></p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = BitVec::&lt;u8, Msb0&gt;::new();\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocates a new, empty, bit-vector with space for at least <code>capacity</code>\nbits before reallocating.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>Vec::with_capacity</code></a></p>\n<h6 id=\"panics\"><a href=\"#panics\">Panics</a></h6>\n<p>This panics if the requested capacity is longer than what the bit-vector\ncan represent. See <a href=\"crate::slice::BitSlice::MAX_BITS\"><code>BitSlice::MAX_BITS</code></a>.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">128</span>);\n\n<span class=\"macro\">assert!</span>(bv.is_empty());\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">128</span>);\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0 </span>.. <span class=\"number\">128 </span>{\n  bv.push(i &amp; <span class=\"number\">0xC0 </span>== i);\n}\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">128</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">128</span>);\n\nbv.push(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">129</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">129</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw_parts</a>(\n    bitptr: BitPtr&lt;Mut, T, O&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a bit-vector handle from its constituent fields.</p>\n<h6 id=\"original-2\"><a href=\"#original-2\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>Vec::from_raw_parts</code></a></p>\n<h6 id=\"safety\"><a href=\"#safety\">Safety</a></h6>\n<p>The <strong>only</strong> acceptable argument values for this function are those that\nwere previously produced by calling <a href=\"Self::into_raw_parts\"><code>.into_raw_parts()</code></a>. Furthermore,\nyou may only call this <strong>at most once</strong> on any set of arguments. Using\nthe same arguments in more than one call to this function will result in\na double- or use-after free error.</p>\n<p>Attempting to conjure your own values and pass them into this function\nwill break the allocator state.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>(bitptr, len, capa) = bv.into_raw_parts();\n<span class=\"kw\">let </span>bv2 = <span class=\"kw\">unsafe </span>{\n  BitVec::from_raw_parts(bitptr, len, capa)\n};\n<span class=\"macro\">assert_eq!</span>(bv2, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw_parts</a>(self) -&gt; (BitPtr&lt;Mut, T, O&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Decomposes a bit-vector into its constituent member fields.</p>\n<p>This disarms the destructor. In order to prevent a memory leak, you must\npass <strong>these exact values</strong> back into <a href=\"Self::from_raw_parts\"><code>::from_raw_parts()</code></a>.</p>\n<h6 id=\"original-3\"><a href=\"#original-3\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.into_raw_parts\" title=\"method alloc::vec::Vec::into_raw_parts\"><code>Vec::into_raw_parts</code></a></p>\n<h6 id=\"api-differences\"><a href=\"#api-differences\">API Differences</a></h6>\n<p>This method is still unstable as of 1.54. It is provided here as a\nconvenience, under the expectation that the standard-library method will\nstabilize as-is.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the allocation capacity, measured in bits.</p>\n<p>This counts how many total bits the bit-vector can store before it must\nperform a reällocation to acquire more memory.</p>\n<p>If the capacity is not a multiple of 8, you should call\n<a href=\"Self::force_align\"><code>.force_align()</code></a>.</p>\n<h6 id=\"original-4\"><a href=\"#original-4\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>Vec::capacity</code></a></p>\n<h6 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that the bit-vector has allocation capacity for <em>at least</em>\n<code>additional</code> more bits to be appended to it.</p>\n<p>For convenience, this method <em>guarantees</em> that the underlying memory for\n<code>self[.. self.len() + additional]</code> is initialized, and may be safely\naccessed directly without requiring use of <code>.push()</code> or <code>.extend()</code> to\ninitialize it.</p>\n<p>Newly-allocated memory is always initialized to zero. It is still <em>dead</em>\nuntil the bit-vector is grown (by <code>.push()</code>, <code>.extend()</code>, or\n<code>.set_len()</code>), but direct access will not trigger UB.</p>\n<h6 id=\"original-5\"><a href=\"#original-5\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>Vec::reserve</code></a></p>\n<h6 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h6>\n<p>This panics if the new capacity exceeds the bit-vector’s maximum.</p>\n<h6 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">80</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">80</span>);\nbv.reserve(<span class=\"number\">800</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">800</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that the bit-vector has allocation capacity for <em>at least</em>\n<code>additional</code> more bits to be appended to it.</p>\n<p>This differs from <a href=\"Self::reserve\"><code>.reserve()</code></a> by requesting that the allocator\nprovide the minimum capacity necessary, rather than a potentially larger\namount that the allocator may find more convenient.</p>\n<p>Remember that this is a <em>request</em>: the allocator provides what it\nprovides, and you cannot rely on the new capacity to be exactly minimal.\nYou should still prefer <code>.reserve()</code>, especially if you expect to append\nto the bit-vector in the future.</p>\n<h6 id=\"original-6\"><a href=\"#original-6\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.reserve_exact\" title=\"method alloc::vec::Vec::reserve_exact\"><code>Vec::reserve_exact</code></a></p>\n<h6 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h6>\n<p>This panics if the new capacity exceeds the bit-vector’s maximum.</p>\n<h6 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">80</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">80</span>);\nbv.reserve_exact(<span class=\"number\">800</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">800</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Releases excess capacity back to the allocator.</p>\n<p>Like <a href=\"Self::reserve_exact\"><code>.reserve_exact()</code></a>, this is a <em>request</em> to the allocator, not a\ncommand. The allocator may reclaim excess memory or may not.</p>\n<h6 id=\"original-7\"><a href=\"#original-7\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit</code></a></p>\n<h6 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">1000</span>);\nbv.push(<span class=\"bool-val\">true</span>);\nbv.shrink_to_fit();</code></pre></div>\n</div></details><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(self) -&gt; BitBox&lt;T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: prefer `.into_boxed_bitslice() instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the bit-vector, keeping the first <code>new_len</code> bits and discarding\nthe rest.</p>\n<p>If <code>len</code> is greater than the bit-vector’s current length, this has no\neffect.</p>\n<p>The <a href=\"Self::drain\"><code>.drain()</code></a> method can emulate <code>.truncate()</code>, except that it yields\nthe excess bits rather than discarding them.</p>\n<p>Note that this has no effect on the allocated capacity of the\nbit-vector, <strong>nor does it erase truncated memory</strong>. Bits in the\nallocated memory that are outside of the <a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> view are\nalways considered to have <em>initialized</em>, but <strong>unspecified</strong>, values,\nand you cannot rely on them to be zero.</p>\n<h6 id=\"original-8\"><a href=\"#original-8\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a></p>\n<h6 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h6>\n<p>Truncating a five-bit vector to two bits:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>].count_ones() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the bit-vector’s current\nlength:</p>\n</div></details><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_bitslice()</code> instead</span></div></span><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_mut_bitslice()</code> instead</span></div></span><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; BitPtr&lt;Const, T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_bitptr()</code> instead</span></div></span><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; BitPtr&lt;Mut, T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_mut_bitptr()</code> instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Resizes a bit-vector to a new length.</p>\n<h6 id=\"original-9\"><a href=\"#original-9\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>Vec::set_len</code></a></p>\n<h6 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h6>\n<p><strong>NOT ALL MEMORY IN THE ALLOCATION IS INITIALIZED!</strong></p>\n<p>Memory in a bit-vector’s allocation is only initialized when the\nbit-vector grows into it normally (through <a href=\"Self::push\"><code>.push()</code></a> or one of the\nvarious <code>.extend*()</code> methods). Setting the length to a value beyond what\nwas previously initialized, but still within the allocation, is\nundefined behavior.</p>\n<p>The caller is responsible for ensuring that all memory up to (but not\nincluding) the new length has already been initialized.</p>\n<h6 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h6>\n<p>This panics if <code>new_len</code> exceeds the capacity as reported by\n<a href=\"Self::capacity\"><code>.capacity()</code></a>.</p>\n<h6 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">unsafe </span>{\n  <span class=\"comment\">// The default storage type, `usize`, is at least 32 bits.\n  </span>bv.set_len(<span class=\"number\">32</span>);\n}\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[\n  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n]);\n<span class=\"comment\">//  `BitVec` guarantees that newly-initialized memory is zeroed.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Takes a bit out of the bit-vector.</p>\n<p>The empty slot is filled with the last bit in the bit-vector, rather\nthan shunting <code>index + 1 .. self.len()</code> down by one.</p>\n<h6 id=\"original-10\"><a href=\"#original-10\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a></p>\n<h6 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (<code>self.len()</code> or greater).</p>\n<h6 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"macro\">assert!</span>(!bv.swap_remove(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a bit at a given position, shifting all bits after it one spot\nto the right.</p>\n<p><code>index</code> may be any value up to <em>and including</em> <code>self.len()</code>. If it is\n<code>self.len()</code>, it behaves equivalently to <code>.push()</code>.</p>\n<h6 id=\"original-11\"><a href=\"#original-11\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>Vec::insert</code></a></p>\n<h6 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (including <code>self.len()</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a bit at a given position, shifting all bits after it one spot\nto the left.</p>\n<p><code>index</code> may be any value up to, but <strong>not</strong> including, <code>self.len()</code>.</p>\n<h6 id=\"original-12\"><a href=\"#original-12\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a></p>\n<h6 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (excluding <code>self.len()</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, func: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Retains only the bits that the predicate allows.</p>\n<p>Bits are deleted from the vector when the predicate function returns\nfalse. This function is linear in <code>self.len()</code>.</p>\n<h6 id=\"original-13\"><a href=\"#original-13\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.retain\" title=\"method alloc::vec::Vec::retain\"><code>Vec::retain</code></a></p>\n<h6 id=\"api-differences-1\"><a href=\"#api-differences-1\">API Differences</a></h6>\n<p>The predicate receives both the index of the bit as well as its value,\nin order to allow the predicate to have more than one bit of\nkeep/discard information.</p>\n<h6 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.retain(|idx, <span class=\"kw\">_</span>| idx % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>,    <span class=\"number\">0</span>,    <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">push</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a single bit to the vector.</p>\n<h6 id=\"original-14\"><a href=\"#original-14\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>Vec::push</code></a></p>\n<h6 id=\"panics-7\"><a href=\"#panics-7\">Panics</a></h6>\n<p>This panics if the push would cause the bit-vector to exceed its maximum\ncapacity.</p>\n<h6 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>];\nbv.push(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_bitslice(), <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to remove the trailing bit from the bit-vector.</p>\n<p>This returns <code>None</code> if the bit-vector is empty.</p>\n<h6 id=\"original-15\"><a href=\"#original-15\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.pop\" title=\"method alloc::vec::Vec::pop\"><code>Vec::pop</code></a></p>\n<h6 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"macro\">assert!</span>(bv.pop().unwrap());\n<span class=\"macro\">assert!</span>(!bv.pop().unwrap());\n<span class=\"macro\">assert!</span>(bv.pop().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;mut BitVec&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section></summary><div class=\"docblock\"><p>Moves all the bits out of <code>other</code> into the back of <code>self</code>.</p>\n<p>The <code>other</code> bit-vector is emptied after this occurs.</p>\n<h6 id=\"original-16\"><a href=\"#original-16\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>Vec::append</code></a></p>\n<h6 id=\"api-differences-2\"><a href=\"#api-differences-2\">API Differences</a></h6>\n<p>This permits <code>other</code> to have different type parameters than <code>self</code>, and\ndoes not require that it be literally <code>Self</code>.</p>\n<h6 id=\"panics-8\"><a href=\"#panics-8\">Panics</a></h6>\n<p>This panics if <code>self.len() + other.len()</code> exceeds the maximum capacity\nof a bit-vector.</p>\n<h6 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv1 = <span class=\"macro\">bitvec!</span>[u16, Msb0; <span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv2 = <span class=\"macro\">bitvec!</span>[u32, Lsb0; <span class=\"number\">1</span>; <span class=\"number\">10</span>];\n\nbv1.append(<span class=\"kw-2\">&amp;mut </span>bv2);\n\n<span class=\"macro\">assert_eq!</span>(bv1.count_ones(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(bv1.count_zeros(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bv2.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; Drain&lt;'_, T, O&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Iterates over a portion of the bit-vector, <em>removing</em> all yielded bits\nfrom it.</p>\n<p>When the iterator drops, <em>all</em> bits in its coverage are removed from\n<code>self</code>, even if the iterator did not yield them. If the iterator is\nleaked or otherwise forgotten, and its destructor never runs, then the\namount of un-yielded bits removed from the bit-vector is not specified.</p>\n<h6 id=\"original-17\"><a href=\"#original-17\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a></p>\n<h6 id=\"panics-9\"><a href=\"#panics-9\">Panics</a></h6>\n<p>This panics if <code>range</code> departs <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv2 = bv.drain(<span class=\"number\">1 </span>..= <span class=\"number\">3</span>).collect::&lt;BitVec&gt;();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>,          <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(bv2, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"comment\">// A full range clears the bit-vector.\n</span>bv.drain(..);\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Empties the bit-vector.</p>\n<p>This does not affect the allocated capacity.</p>\n<h6 id=\"original-18\"><a href=\"#original-18\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>Vec::clear</code></a></p>\n<h6 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.clear();\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the length of the bit-vector.</p>\n<p>This is equivalent to <code>BitSlice::len</code>; it is provided as an inherent\nmethod here rather than relying on <code>Deref</code> forwarding so that you can\nwrite <code>BitVec::len</code> as a named function item.</p>\n<h6 id=\"original-19\"><a href=\"#original-19\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests if the bit-vector is empty.</p>\n<p>This is equivalent to <code>BitSlice::is_empty</code>; it is provided as an\ninherent method here rather than relying on <code>Deref</code> forwarding so that\nyou can write <code>BitVec::is_empty</code> as a named function item.</p>\n<h6 id=\"original-20\"><a href=\"#original-20\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.is_empty\" title=\"method alloc::vec::Vec::is_empty\"><code>Vec::is_empty</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits the bit-vector in half at an index, moving <code>self[at ..]</code> out into\na new bit-vector.</p>\n<h6 id=\"original-21\"><a href=\"#original-21\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.split_off\" title=\"method alloc::vec::Vec::split_off\"><code>Vec::split_off</code></a></p>\n<h6 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv2 = bv.split_off(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"kw-2\">&amp;*</span>bv, <span class=\"kw-2\">&amp;*</span>bv2), (<span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, func: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Resizes the bit-vector to a new length, using a function to produce each\ninserted bit.</p>\n<p>If <code>new_len</code> is less than <code>self.len()</code>, this is a truncate operation; if\nit is greater, then <code>self</code> is extended by repeatedly pushing <code>func()</code>.</p>\n<h6 id=\"original-22\"><a href=\"#original-22\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a></p>\n<h6 id=\"api-differences-3\"><a href=\"#api-differences-3\">API Differences</a></h6>\n<p>The generator function receives the index into which its bit will be\nplaced.</p>\n<h6 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">1</span>; <span class=\"number\">2</span>];\nbv.resize_with(<span class=\"number\">5</span>, |idx| idx % <span class=\"number\">2 </span>== <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;a mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Destroys the <code>BitVec</code> handle without destroying the bit-vector\nallocation. The allocation is returned as an <code>&amp;mut BitSlice</code> that lasts\nfor the remaining program lifetime.</p>\n<p>You <em>may</em> call [<code>BitBox::from_raw</code>] on this slice handle exactly once in\norder to reap the allocation before program exit. That function takes a\nmutable pointer, not a mutable reference, so you must ensure that the\nreturned reference is never used again after restoring the allocation\nhandle.</p>\n<h6 id=\"original-23\"><a href=\"#original-23\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.leak\" title=\"method alloc::vec::Vec::leak\"><code>Vec::leak</code></a></p>\n<h6 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>static_bits: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">&#39;static </span><span class=\"kw-2\">mut </span>BitSlice = bv.leak();\nstatic_bits.set(<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(static_bits, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span>bb = <span class=\"kw\">unsafe </span>{ BitBox::from_raw(static_bits) };\n<span class=\"comment\">// static_bits may no longer be used.\n</span>drop(bb); <span class=\"comment\">// explicitly reap memory before program exit</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Resizes the bit-vector to a new length. New bits are initialized to\n<code>value</code>.</p>\n<h6 id=\"original-24\"><a href=\"#original-24\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a></p>\n<h6 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>; <span class=\"number\">2</span>];\nbv.resize(<span class=\"number\">5</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><section id=\"method.extend_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_slice</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;BitSlice&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.extend_from_bitslice()</code> or <code>.extend_from_raw_slice()</code> instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<span class=\"where fmt-newline\">where\n    R: RangeExt&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Extends <code>self</code> by copying an internal range of its bit-slice as the\nregion to append.</p>\n<h6 id=\"original-25\"><a href=\"#original-25\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>Vec::extend_from_within</code></a></p>\n<h6 id=\"panics-10\"><a href=\"#panics-10\">Panics</a></h6>\n<p>This panics if <code>src</code> is not within <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.extend_from_within(<span class=\"number\">1 </span>.. <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I\n) -&gt; Splice&lt;'_, T, O, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Modifies <a href=\"Self::drain\"><code>self.drain()</code></a> so that the removed bit-slice is instead\nreplaced with the contents of another bit-stream.</p>\n<p>As with <code>.drain()</code>, the specified range is always removed from the\nbit-vector even if the splicer is not fully consumed, and the splicer\ndoes not specify how many bits are removed if it leaks.</p>\n<p>The replacement source is only consumed when the splicer drops; however,\nit may be pulled before then. The replacement source cannot assume that\nthere will be a delay between creation of the splicer and when it must\nbegin producing bits.</p>\n<p>This copies the <code>Vec::splice</code> implementation; see its documentation for\nmore details about how the replacement should act.</p>\n<h6 id=\"original-26\"><a href=\"#original-26\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.splice\" title=\"method alloc::vec::Vec::splice\"><code>Vec::splice</code></a></p>\n<h6 id=\"panics-11\"><a href=\"#panics-11\">Panics</a></h6>\n<p>This panics if <code>range</code> departs <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];\n<span class=\"comment\">//                   a  b  c\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>yank = bv.splice(\n  .. <span class=\"number\">2</span>,\n  <span class=\"macro\">bits!</span>[<span class=\"kw\">static </span><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>].iter().by_vals(),\n<span class=\"comment\">//             d  e  f\n</span>);\n\n<span class=\"macro\">assert!</span>(!yank.next().unwrap()); <span class=\"comment\">// a\n</span><span class=\"macro\">assert!</span>(yank.next().unwrap()); <span class=\"comment\">// b\n</span>drop(yank);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"comment\">//                   d  e  f  c</span></code></pre></div>\n</div></details></div></details>",0,"polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Constructors.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">EMPTY</a>: BitVec&lt;T, O&gt; = _</h4></section></summary><div class=\"docblock\"><p>An empty bit-vector with no backing allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.repeat\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">repeat</a>(bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new bit-vector by repeating a bit for the desired length.</p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>zeros = BitVec::&lt;u8, Msb0&gt;::repeat(<span class=\"bool-val\">false</span>, <span class=\"number\">50</span>);\n<span class=\"kw\">let </span>ones = BitVec::&lt;u16, Lsb0&gt;::repeat(<span class=\"bool-val\">true</span>, <span class=\"number\">50</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bitslice</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Copies the contents of a bit-slice into a new heap allocation.</p>\n<p>This copies the raw underlying elements into a new allocation, and sets\nthe produced bit-vector to use the same memory layout as the originating\nbit-slice. This means that it may begin at any bit in the first element,\nnot just the zeroth bit. If you require this property, call\n<a href=\"Self::force_align\"><code>.force_align()</code></a>.</p>\n<p>Dead bits in the copied memory elements are guaranteed to be zeroed.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bits = <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv = BitVec::from_bitslice(bits);\n<span class=\"macro\">assert_eq!</span>(bv, bits);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_element\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_element</a>(elem: T) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new bit-vector from a single element.</p>\n<p>This copies <code>elem</code> into a new heap allocation, and sets the bit-vector\nto cover it entirely.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::from_element(<span class=\"number\">1u8</span>);\n<span class=\"macro\">assert!</span>(bv[<span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new bit-vector from a slice of memory elements.</p>\n<p>This copies <code>slice</code> into a new heap allocation, and sets the bit-vector\nto cover it entirely.</p>\n<h6 id=\"panics\"><a href=\"#panics\">Panics</a></h6>\n<p>This panics if <code>slice</code> exceeds bit-vector capacity.</p>\n<h6 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Lsb0&gt;::from_slice(slice);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, BitSpanError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Fallibly constructs a new bit-vector from a slice of memory elements.</p>\n<p>This fails early if <code>slice</code> exceeds bit-vector capacity. If it is not,\nthen <code>slice</code> is copied into a new heap allocation and fully spanned by\nthe returned bit-vector.</p>\n<h6 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Lsb0&gt;::try_from_slice(slice).unwrap();\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a regular vector in-place into a bit-vector.</p>\n<p>The produced bit-vector spans every bit in the original vector. No\nreällocation occurs; this is purely a transform of the handle.</p>\n<h6 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h6>\n<p>This panics if the source vector is too long to view as a bit-slice.</p>\n<h6 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::from_vec(v);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a regular vector in-place into a bit-vector.</p>\n<p>This fails if the source vector is too long to view as a bit-slice. On\nsuccess, the produced bit-vector spans every bit in the original vector.\nNo reällocation occurs; this is purely a transform of the handle.</p>\n<h6 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>; <span class=\"number\">20</span>];\n<span class=\"macro\">assert_eq!</span>(BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::try_from_vec(v).unwrap().len(), <span class=\"number\">160</span>);</code></pre></div>\n<p>It is not practical to allocate a vector that will fail this conversion.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_bitslice</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;BitSlice&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section></summary><div class=\"docblock\"><p>Appends the contents of a bit-slice to a bit-vector.</p>\n<p>This can extend from a bit-slice of any type parameters; it is not\nrestricted to using the same parameters as <code>self</code>. However, when the\ntype parameters <em>do</em> match, it is possible for this to use a batch-copy\noptimization to go faster than the individual-bit crawl that is\nnecessary when they differ.</p>\n<p>Until Rust provides extensive support for specialization in trait\nimplementations, you should use this method whenever you are extending\nfrom a <code>BitSlice</code> proper, and only use the general <a href=\"https://docs.rs/bitvec/latest/bitvec/vec/struct.Vec.html#impl-Extend\"><code>.extend()</code></a>\nimplementation if you are required to use a generic <code>bool</code> source.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>Vec::extend_from_slice</code></a></p>\n<h6 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.extend_from_bitslice(<span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_raw_slice</a>(&amp;mut self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a slice of <code>T</code> elements to a bit-vector.</p>\n<p>The slice is viewed as a <code>BitSlice&lt;T, O&gt;</code>, then appended directly to the\nbit-vector.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>Vec::extend_from_slice</code></a></p>\n</div></details></div></details>",0,"polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Converters.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitslice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-vector as a bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitslice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-vector as a mutable bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-vector as a slice of its underlying memory elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-vector as a mutable slice of its underlying memory\nelements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitptr</a>(&amp;self) -&gt; BitPtr&lt;Const, T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unsafe shared bit-pointer to the start of the buffer.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>Vec::as_ptr</code></a></p>\n<h6 id=\"safety\"><a href=\"#safety\">Safety</a></h6>\n<p>You must initialize the contents of the underlying buffer before\naccessing memory through this pointer. See the <code>BitPtr</code> documentation\nfor more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitptr</a>(&amp;mut self) -&gt; BitPtr&lt;Mut, T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unsafe writable bit-pointer to the start of the buffer.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>Vec::as_mut_ptr</code></a></p>\n<h6 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h6>\n<p>You must initialize the contents of the underlying buffer before\naccessing memory through this pointer. See the <code>BitPtr</code> documentation\nfor more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_bitslice</a>(self) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a bit-vector into a boxed bit-slice.</p>\n<p>This may cause a reällocation to drop any excess capacity.</p>\n<h6 id=\"original-2\"><a href=\"#original-2\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.into_boxed_slice\" title=\"method alloc::vec::Vec::into_boxed_slice\"><code>Vec::into_boxed_slice</code></a></p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bb = bv.into_boxed_bitslice();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a bit-vector into a <code>Vec</code> of its underlying storage.</p>\n<p>The produced vector contains all elements that contained live bits. Dead\nbits have an unspecified value; you should call <a href=\"Self::set_uninitialized\"><code>.set_uninitialized()</code></a>\nbefore converting into a vector.</p>\n<p>This does not affect the allocated memory; it is purely a conversion of\nthe handle.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[u8, Msb0; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>v = bv.into_vec();\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xF8</span>, <span class=\"number\">0b01001_000</span>);</code></pre></div>\n</div></details></div></details>",0,"polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Utilities.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_elements\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_elements</a>(&amp;mut self, element: &lt;T as BitStore&gt;::Mem)</h4></section></summary><div class=\"docblock\"><p>Overwrites each element (visible in <a href=\"Self::as_raw_mut_slice\"><code>.as_raw_mut_slice()</code></a>) with a new\nbit-pattern.</p>\n<p>This unconditionally writes <code>element</code> into each element in the backing\nslice, without altering the bit-vector’s length or capacity.</p>\n<p>This guarantees that dead bits visible in <a href=\"Self::as_raw_slice\"><code>.as_raw_slice()</code></a> but not\n<a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> are initialized according to the bit-pattern of\n<code>element.</code> The elements not visible in the raw slice, but present in the\nallocation, do <em>not</em> specify a value. You may not rely on them being\nzeroed <em>or</em> being set to the <code>element</code> bit-pattern.</p>\n<h6 id=\"parameters\"><a href=\"#parameters\">Parameters</a></h6>\n<ul>\n<li><code>&amp;mut self</code></li>\n<li><code>element</code>: The bit-pattern with which each live element in the backing\nstore is initialized.</li>\n</ul>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[u8, Msb0; <span class=\"number\">0</span>; <span class=\"number\">20</span>];\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice(), [<span class=\"number\">0</span>; <span class=\"number\">3</span>]);\nbv.set_elements(<span class=\"number\">0xA5</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice(), [<span class=\"number\">0xA5</span>; <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_uninitialized\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_uninitialized</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the uninitialized bits of a bit-vector to a known value.</p>\n<p>This method modifies all bits that are observable in <a href=\"Self::as_raw_slice\"><code>.as_raw_slice()</code></a>\nbut <em>not</em> observable in <a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> to a known value.\nMemory beyond the raw-slice view, but still within the allocation, is\nconsidered fully dead and will never be seen.</p>\n<p>This can be used to zero the unused memory so that when viewed as a raw\nslice, unused bits have a consistent and predictable value.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"number\">0b1101_1100u8</span>.view_bits::&lt;Lsb0&gt;().to_bitvec();\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1101_1100u8</span>);\n\nbv.truncate(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(bv.count_ones(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1101_1100u8</span>);\n\nbv.set_uninitialized(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b0000_1100u8</span>);\n\nbv.set_uninitialized(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1111_1100u8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_align\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">force_align</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Ensures that the live region of the bit-vector’s contents begin at the\nfront edge of the buffer.</p>\n<p><code>BitVec</code> has performance optimizations where it moves its view of its\nbuffer contents in order to avoid needless moves of its data within the\nbuffer. This can lead to unexpected contents of the raw memory values,\nso this method ensures that the semantic contents of the bit-vector\nmatch its in-memory storage.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>data = <span class=\"number\">0b00_1111_00u8</span>;\n<span class=\"kw\">let </span>bits = data.view_bits::&lt;Msb0&gt;();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = bits[<span class=\"number\">2 </span>.. <span class=\"number\">6</span>].to_bitvec();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>; <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], data);\n\nbv.force_align();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>; <span class=\"number\">4</span>]);\n<span class=\"comment\">// BitVec does not specify the value of dead bits in its buffer.\n</span><span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xF0</span>, <span class=\"number\">0xF0</span>);</code></pre></div>\n</div></details></div></details>",0,"polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Encode-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; Encode for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Encode,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to\" class=\"method trait-impl\"><a href=\"#method.encode_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_to</a>&lt;W&gt;(&amp;self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut W</a>)<span class=\"where fmt-newline\">where\n    W: Output + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Convert self to a slice and append it to the destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>If possible give a hint of expected size of the encoding. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convert self to an owned vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.using_encoded\" class=\"method trait-impl\"><a href=\"#method.using_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">using_encoded</a>&lt;R, F&gt;(&amp;self, f: F) -&gt; R<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; R,</span></h4></section></summary><div class='docblock'>Convert self to a slice and then invoke the given closure with it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_size\" class=\"method trait-impl\"><a href=\"#method.encoded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the encoded size. <a>Read more</a></div></details></div></details>","Encode","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<section id=\"impl-EncodeLike-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-EncodeLike-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; EncodeLike for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Encode,</span></h3></section>","EncodeLike","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Decode-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; Decode for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Decode,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a href=\"#method.decode_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"https://doc.rust-lang.org/1.75.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;DecodeFinished, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a href=\"#method.encoded_fixed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a>Read more</a></div></details></div></details>","Decode","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Pointer-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a bool>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a T>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-collection\"><a href=\"#bit-vector-collection\">Bit-Vector Collection</a></h4>\n<p>This collects a bit-vector from anything that produces individual bits.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-FromIterator%3CT%3E\"><code>impl&lt;T&gt; FromIterator&lt;T&gt; for Vec&lt;T&gt;</code></a></p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>This <code>.collect()</code> call is the second-slowest possible way to collect bits into a\nbit-vector, faster only than calling <code>iter.for_each(|bit| bv.push(bit))</code>.\n<strong>DO NOT</strong> use this if you have any other choice.</p>\n<p>If you are collecting a bit-vector from the contents of a bit-slice, then you\nshould use <a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>::from_bitslice()</code></a> instead. That method is specialized to\nperform upfront allocation and, where possible, use a batch copy rather than\ncopying each bit individually from the source into the bit-vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<bool>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M, T1, T2, O1, O2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;BitRef&lt;'a, M, T2, O2&gt;&gt; for BitVec&lt;T1, O1&gt;<span class=\"where fmt-newline\">where\n    M: Mutability,\n    T1: BitStore,\n    T2: BitStore,\n    O1: BitOrder,\n    O2: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-collection-from-proxy-references\"><a href=\"#bit-vector-collection-from-proxy-references\">Bit-Vector Collection from Proxy References</a></h4>\n<p><strong>DO NOT</strong> use this. You <em>clearly</em> have a bit-slice. Use\n<a href=\"crate::vec::BitVec::from_bitslice\"><code>::from_bitslice()</code></a> instead!</p>\n<p>Iterating over a bit-slice requires loading from memory and constructing a proxy\nreference for each bit. This is needlessly slow; the specialized method is able\nto avoid this per-bit cost and possibly even use batched operations.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T1, O1&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T1, O1&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = BitRef&lt;'a, M, T2, O2&gt;&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<BitRef<'a, M, T2, O2>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<section id=\"impl-Sync-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Sync","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Clone-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Default-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitSlice<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitVec&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitVec<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Hash-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: Idx) -&gt; &amp;mut &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;BitVec&lt;T, O&gt; as Index&lt;Idx&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<Idx>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Drop-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<section id=\"impl-Unpin-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Unpin","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-iteration\"><a href=\"#bit-vector-iteration\">Bit-Vector Iteration</a></h4>\n<p>Bit-vectors have the advantage that iteration consumes the whole structure, so\nthey can simply freeze the allocation into a bit-box, then use its iteration and\ndestructor.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-IntoIterator\"><code>impl&lt;T&gt; IntoIterator for Vec&lt;T&gt;</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitSlice<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitVec&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitVec<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Write-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"writing-into-a-bit-vector\"><a href=\"#writing-into-a-bit-vector\">Writing Into a Bit-Vector</a></h4>\n<p>The implementation appends bytes to the referenced bit-vector until the source\nbuffer is exhausted.</p>\n<p>Note that the return value of <code>.write()</code> is always the number of <em>bytes</em> of\n<code>buf</code> consumed!</p>\n<p>The implementation uses <a href=\"crate::field::BitField::store_be\"><code>BitField::store_be</code></a> to fill bytes. Note that unlike\nthe standard library, it is implemented on bit-vectors of <em>any</em> underlying\nelement type. However, using a <code>BitVec&lt;_, u8&gt;</code> is still likely to be fastest.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-Write\"><code>impl Write for Vec&lt;u8&gt;</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1543\">source</a></span><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1558\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1620\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1685\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1741\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1797-1799\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Read-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"reading-from-a-bit-vector\"><a href=\"#reading-from-a-bit-vector\">Reading From a Bit-Vector</a></h4>\n<p>The implementation loads bytes out of the reference bit-vector until either the\ndestination buffer is filled or the source has no more bytes to provide. When\n<code>.read()</code> returns, the provided bit-vector will have its contents shifted down\nso that it begins at the first bit <em>after</em> the last byte copied out into <code>buf</code>.</p>\n<p>Note that the return value of <code>.read()</code> is always the number of <em>bytes</em> of <code>buf</code>\nfilled!</p>\n<h5 id=\"api-differences\"><a href=\"#api-differences\">API Differences</a></h5>\n<p>The standard library does not <code>impl Read for Vec&lt;u8&gt;</code>. It is provided here as a\ncourtesy.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#707\">source</a></span><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#720\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#771\">source</a></span><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#814\">source</a></span><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#869\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#880\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Pull some bytes from this source into the specified buffer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#903\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#955-957\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#998-1000\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Transforms this <code>Read</code> instance to an <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1036-1038\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an adapter which will chain this stream with another. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1075-1077\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.take\">Read more</a></div></details></div></details>","Read","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<BitSlice<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;BitVec&lt;T, O&gt; as Deref&gt;::Target\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitOr&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, O&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</span></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"impl\"><a href=\"#impl-Extend%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M, T1, T2, O1, O2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;BitRef&lt;'a, M, T2, O2&gt;&gt; for BitVec&lt;T1, O1&gt;<span class=\"where fmt-newline\">where\n    M: Mutability,\n    T1: BitStore,\n    T2: BitStore,\n    O1: BitOrder,\n    O2: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-extension-by-proxy-references\"><a href=\"#bit-vector-extension-by-proxy-references\">Bit-Vector Extension by Proxy References</a></h4>\n<p><strong>DO NOT</strong> use this. You <em>clearly</em> have a bit-slice. Use\n<a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>.extend_from_bitslice()</code></a> instead!</p>\n<p>Iterating over a bit-slice requires loading from memory and constructing a proxy\nreference for each bit. This is needlessly slow; the specialized method is able\nto avoid this per-bit cost and possibly even use batched operations.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = BitRef&lt;'a, M, T2, O2&gt;&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<BitRef<'a, M, T2, O2>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-extension\"><a href=\"#bit-vector-extension\">Bit-Vector Extension</a></h4>\n<p>This extends a bit-vector from anything that produces individual bits.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-Extend%3CT%3E\"><code>impl&lt;T&gt; Extend&lt;T&gt; for Vec&lt;T&gt;</code></a></p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>This <code>.extend()</code> call is the second-slowest possible way to append bits into a\nbit-vector, faster only than calling <code>iter.for_each(|bit| bv.push(bit))</code>.\n<strong>DO NOT</strong> use this if you have any other choice.</p>\n<p>If you are extending a bit-vector from the contents of a bit-slice, then you\nshould use <a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>.extend_from_bitslice()</code></a> instead. That method is specialized to\nperform upfront allocation and, where possible, use a batch copy rather than\ncopying each bit individually from the source into the bit-vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<bool>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a bool>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deref-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = BitSlice&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;BitVec&lt;T, O&gt; as Deref&gt;::Target\">ⓘ</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-LowerHex-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Display-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Octal-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<T>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Debug-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<section id=\"impl-Eq-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Eq-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Eq","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitField-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitField-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitField for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_le\" class=\"method trait-impl\"><a href=\"#method.load_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_le</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Little-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_be\" class=\"method trait-impl\"><a href=\"#method.load_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_be</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Big-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_le\" class=\"method trait-impl\"><a href=\"#method.store_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_le</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Little-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_be\" class=\"method trait-impl\"><a href=\"#method.store_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_be</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Big-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a href=\"#method.store\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Integer Storing <a>Read more</a></div></details></div></details>","BitField","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Not-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>This implementation inverts all elements in the live buffer. You cannot rely\non the value of bits in the buffer that are outside the domain of\n[<code>BitVec::as_mut_bitslice</code>].</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" title=\"type core::ops::bit::Not::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as Not&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitXor&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Ord-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;BitVec&lt;T, O&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#826-828\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#846-848\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#871-874\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;mut BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut BitSlice<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: 'a + BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Cow<'a, BitSlice<T, O>>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitArray&lt;A, O&gt;&gt; for BitVec&lt;&lt;A as BitView&gt;::Store, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    A: BitViewSized,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: BitArray&lt;A, O&gt;) -&gt; BitVec&lt;&lt;A as BitView&gt;::Store, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;&lt;A as BitView&gt;::Store, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitArray<A, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&BitSlice<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitBox&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: BitBox&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitBox<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Index%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;BitSlice&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Idx) -&gt; &amp;&lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;BitVec&lt;T, O&gt; as Index&lt;Idx&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Idx>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-UpperHex-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitAnd&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<Rhs>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<section id=\"impl-Send-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Send-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Send","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<BitSlice<T, O>>","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Binary-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TypeInfo-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; TypeInfo for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore + TypeInfo + 'static,\n    O: BitOrder + TypeInfo + 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Identity\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Identity</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; Type</h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","polkadot_node_core_approval_voting::approval_db::v2::Bitfield"]],
"polkadot_primitives":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Port of the <code>Vec&lt;T&gt;</code> inherent API.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty, bit-vector.</p>\n<p>This does not allocate until bits are <a href=\"Self::push\"><code>.push()</code></a>ed into it, or space is\nexplicitly <a href=\"Self::reserve\"><code>.reserve()</code></a>d.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.new\" title=\"associated function alloc::vec::Vec::new\"><code>Vec::new</code></a></p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = BitVec::&lt;u8, Msb0&gt;::new();\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocates a new, empty, bit-vector with space for at least <code>capacity</code>\nbits before reallocating.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>Vec::with_capacity</code></a></p>\n<h6 id=\"panics\"><a href=\"#panics\">Panics</a></h6>\n<p>This panics if the requested capacity is longer than what the bit-vector\ncan represent. See <a href=\"crate::slice::BitSlice::MAX_BITS\"><code>BitSlice::MAX_BITS</code></a>.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">128</span>);\n\n<span class=\"macro\">assert!</span>(bv.is_empty());\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">128</span>);\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0 </span>.. <span class=\"number\">128 </span>{\n  bv.push(i &amp; <span class=\"number\">0xC0 </span>== i);\n}\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">128</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">128</span>);\n\nbv.push(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">129</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">129</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw_parts</a>(\n    bitptr: BitPtr&lt;Mut, T, O&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a bit-vector handle from its constituent fields.</p>\n<h6 id=\"original-2\"><a href=\"#original-2\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>Vec::from_raw_parts</code></a></p>\n<h6 id=\"safety\"><a href=\"#safety\">Safety</a></h6>\n<p>The <strong>only</strong> acceptable argument values for this function are those that\nwere previously produced by calling <a href=\"Self::into_raw_parts\"><code>.into_raw_parts()</code></a>. Furthermore,\nyou may only call this <strong>at most once</strong> on any set of arguments. Using\nthe same arguments in more than one call to this function will result in\na double- or use-after free error.</p>\n<p>Attempting to conjure your own values and pass them into this function\nwill break the allocator state.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>(bitptr, len, capa) = bv.into_raw_parts();\n<span class=\"kw\">let </span>bv2 = <span class=\"kw\">unsafe </span>{\n  BitVec::from_raw_parts(bitptr, len, capa)\n};\n<span class=\"macro\">assert_eq!</span>(bv2, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw_parts</a>(self) -&gt; (BitPtr&lt;Mut, T, O&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Decomposes a bit-vector into its constituent member fields.</p>\n<p>This disarms the destructor. In order to prevent a memory leak, you must\npass <strong>these exact values</strong> back into <a href=\"Self::from_raw_parts\"><code>::from_raw_parts()</code></a>.</p>\n<h6 id=\"original-3\"><a href=\"#original-3\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.into_raw_parts\" title=\"method alloc::vec::Vec::into_raw_parts\"><code>Vec::into_raw_parts</code></a></p>\n<h6 id=\"api-differences\"><a href=\"#api-differences\">API Differences</a></h6>\n<p>This method is still unstable as of 1.54. It is provided here as a\nconvenience, under the expectation that the standard-library method will\nstabilize as-is.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the allocation capacity, measured in bits.</p>\n<p>This counts how many total bits the bit-vector can store before it must\nperform a reällocation to acquire more memory.</p>\n<p>If the capacity is not a multiple of 8, you should call\n<a href=\"Self::force_align\"><code>.force_align()</code></a>.</p>\n<h6 id=\"original-4\"><a href=\"#original-4\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>Vec::capacity</code></a></p>\n<h6 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that the bit-vector has allocation capacity for <em>at least</em>\n<code>additional</code> more bits to be appended to it.</p>\n<p>For convenience, this method <em>guarantees</em> that the underlying memory for\n<code>self[.. self.len() + additional]</code> is initialized, and may be safely\naccessed directly without requiring use of <code>.push()</code> or <code>.extend()</code> to\ninitialize it.</p>\n<p>Newly-allocated memory is always initialized to zero. It is still <em>dead</em>\nuntil the bit-vector is grown (by <code>.push()</code>, <code>.extend()</code>, or\n<code>.set_len()</code>), but direct access will not trigger UB.</p>\n<h6 id=\"original-5\"><a href=\"#original-5\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>Vec::reserve</code></a></p>\n<h6 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h6>\n<p>This panics if the new capacity exceeds the bit-vector’s maximum.</p>\n<h6 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">80</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">80</span>);\nbv.reserve(<span class=\"number\">800</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">800</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Ensures that the bit-vector has allocation capacity for <em>at least</em>\n<code>additional</code> more bits to be appended to it.</p>\n<p>This differs from <a href=\"Self::reserve\"><code>.reserve()</code></a> by requesting that the allocator\nprovide the minimum capacity necessary, rather than a potentially larger\namount that the allocator may find more convenient.</p>\n<p>Remember that this is a <em>request</em>: the allocator provides what it\nprovides, and you cannot rely on the new capacity to be exactly minimal.\nYou should still prefer <code>.reserve()</code>, especially if you expect to append\nto the bit-vector in the future.</p>\n<h6 id=\"original-6\"><a href=\"#original-6\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.reserve_exact\" title=\"method alloc::vec::Vec::reserve_exact\"><code>Vec::reserve_exact</code></a></p>\n<h6 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h6>\n<p>This panics if the new capacity exceeds the bit-vector’s maximum.</p>\n<h6 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">80</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">80</span>);\nbv.reserve_exact(<span class=\"number\">800</span>);\n<span class=\"macro\">assert!</span>(bv.capacity() &gt;= <span class=\"number\">800</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Releases excess capacity back to the allocator.</p>\n<p>Like <a href=\"Self::reserve_exact\"><code>.reserve_exact()</code></a>, this is a <em>request</em> to the allocator, not a\ncommand. The allocator may reclaim excess memory or may not.</p>\n<h6 id=\"original-7\"><a href=\"#original-7\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit</code></a></p>\n<h6 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv: BitVec = BitVec::with_capacity(<span class=\"number\">1000</span>);\nbv.push(<span class=\"bool-val\">true</span>);\nbv.shrink_to_fit();</code></pre></div>\n</div></details><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(self) -&gt; BitBox&lt;T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: prefer `.into_boxed_bitslice() instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the bit-vector, keeping the first <code>new_len</code> bits and discarding\nthe rest.</p>\n<p>If <code>len</code> is greater than the bit-vector’s current length, this has no\neffect.</p>\n<p>The <a href=\"Self::drain\"><code>.drain()</code></a> method can emulate <code>.truncate()</code>, except that it yields\nthe excess bits rather than discarding them.</p>\n<p>Note that this has no effect on the allocated capacity of the\nbit-vector, <strong>nor does it erase truncated memory</strong>. Bits in the\nallocated memory that are outside of the <a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> view are\nalways considered to have <em>initialized</em>, but <strong>unspecified</strong>, values,\nand you cannot rely on them to be zero.</p>\n<h6 id=\"original-8\"><a href=\"#original-8\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a></p>\n<h6 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h6>\n<p>Truncating a five-bit vector to two bits:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>].count_ones() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the bit-vector’s current\nlength:</p>\n</div></details><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_bitslice()</code> instead</span></div></span><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_mut_bitslice()</code> instead</span></div></span><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; BitPtr&lt;Const, T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_bitptr()</code> instead</span></div></span><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; BitPtr&lt;Mut, T, O&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.as_mut_bitptr()</code> instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Resizes a bit-vector to a new length.</p>\n<h6 id=\"original-9\"><a href=\"#original-9\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>Vec::set_len</code></a></p>\n<h6 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h6>\n<p><strong>NOT ALL MEMORY IN THE ALLOCATION IS INITIALIZED!</strong></p>\n<p>Memory in a bit-vector’s allocation is only initialized when the\nbit-vector grows into it normally (through <a href=\"Self::push\"><code>.push()</code></a> or one of the\nvarious <code>.extend*()</code> methods). Setting the length to a value beyond what\nwas previously initialized, but still within the allocation, is\nundefined behavior.</p>\n<p>The caller is responsible for ensuring that all memory up to (but not\nincluding) the new length has already been initialized.</p>\n<h6 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h6>\n<p>This panics if <code>new_len</code> exceeds the capacity as reported by\n<a href=\"Self::capacity\"><code>.capacity()</code></a>.</p>\n<h6 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">unsafe </span>{\n  <span class=\"comment\">// The default storage type, `usize`, is at least 32 bits.\n  </span>bv.set_len(<span class=\"number\">32</span>);\n}\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[\n  <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,\n]);\n<span class=\"comment\">//  `BitVec` guarantees that newly-initialized memory is zeroed.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Takes a bit out of the bit-vector.</p>\n<p>The empty slot is filled with the last bit in the bit-vector, rather\nthan shunting <code>index + 1 .. self.len()</code> down by one.</p>\n<h6 id=\"original-10\"><a href=\"#original-10\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a></p>\n<h6 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (<code>self.len()</code> or greater).</p>\n<h6 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"macro\">assert!</span>(!bv.swap_remove(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a bit at a given position, shifting all bits after it one spot\nto the right.</p>\n<p><code>index</code> may be any value up to <em>and including</em> <code>self.len()</code>. If it is\n<code>self.len()</code>, it behaves equivalently to <code>.push()</code>.</p>\n<h6 id=\"original-11\"><a href=\"#original-11\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>Vec::insert</code></a></p>\n<h6 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (including <code>self.len()</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a bit at a given position, shifting all bits after it one spot\nto the left.</p>\n<p><code>index</code> may be any value up to, but <strong>not</strong> including, <code>self.len()</code>.</p>\n<h6 id=\"original-12\"><a href=\"#original-12\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a></p>\n<h6 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h6>\n<p>This panics if <code>index</code> is out of bounds (excluding <code>self.len()</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, func: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Retains only the bits that the predicate allows.</p>\n<p>Bits are deleted from the vector when the predicate function returns\nfalse. This function is linear in <code>self.len()</code>.</p>\n<h6 id=\"original-13\"><a href=\"#original-13\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.retain\" title=\"method alloc::vec::Vec::retain\"><code>Vec::retain</code></a></p>\n<h6 id=\"api-differences-1\"><a href=\"#api-differences-1\">API Differences</a></h6>\n<p>The predicate receives both the index of the bit as well as its value,\nin order to allow the predicate to have more than one bit of\nkeep/discard information.</p>\n<h6 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.retain(|idx, <span class=\"kw\">_</span>| idx % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>,    <span class=\"number\">0</span>,    <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">push</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a single bit to the vector.</p>\n<h6 id=\"original-14\"><a href=\"#original-14\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>Vec::push</code></a></p>\n<h6 id=\"panics-7\"><a href=\"#panics-7\">Panics</a></h6>\n<p>This panics if the push would cause the bit-vector to exceed its maximum\ncapacity.</p>\n<h6 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>];\nbv.push(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_bitslice(), <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to remove the trailing bit from the bit-vector.</p>\n<p>This returns <code>None</code> if the bit-vector is empty.</p>\n<h6 id=\"original-15\"><a href=\"#original-15\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.pop\" title=\"method alloc::vec::Vec::pop\"><code>Vec::pop</code></a></p>\n<h6 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"macro\">assert!</span>(bv.pop().unwrap());\n<span class=\"macro\">assert!</span>(!bv.pop().unwrap());\n<span class=\"macro\">assert!</span>(bv.pop().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;mut BitVec&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section></summary><div class=\"docblock\"><p>Moves all the bits out of <code>other</code> into the back of <code>self</code>.</p>\n<p>The <code>other</code> bit-vector is emptied after this occurs.</p>\n<h6 id=\"original-16\"><a href=\"#original-16\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>Vec::append</code></a></p>\n<h6 id=\"api-differences-2\"><a href=\"#api-differences-2\">API Differences</a></h6>\n<p>This permits <code>other</code> to have different type parameters than <code>self</code>, and\ndoes not require that it be literally <code>Self</code>.</p>\n<h6 id=\"panics-8\"><a href=\"#panics-8\">Panics</a></h6>\n<p>This panics if <code>self.len() + other.len()</code> exceeds the maximum capacity\nof a bit-vector.</p>\n<h6 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv1 = <span class=\"macro\">bitvec!</span>[u16, Msb0; <span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv2 = <span class=\"macro\">bitvec!</span>[u32, Lsb0; <span class=\"number\">1</span>; <span class=\"number\">10</span>];\n\nbv1.append(<span class=\"kw-2\">&amp;mut </span>bv2);\n\n<span class=\"macro\">assert_eq!</span>(bv1.count_ones(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(bv1.count_zeros(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bv2.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; Drain&lt;'_, T, O&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Iterates over a portion of the bit-vector, <em>removing</em> all yielded bits\nfrom it.</p>\n<p>When the iterator drops, <em>all</em> bits in its coverage are removed from\n<code>self</code>, even if the iterator did not yield them. If the iterator is\nleaked or otherwise forgotten, and its destructor never runs, then the\namount of un-yielded bits removed from the bit-vector is not specified.</p>\n<h6 id=\"original-17\"><a href=\"#original-17\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a></p>\n<h6 id=\"panics-9\"><a href=\"#panics-9\">Panics</a></h6>\n<p>This panics if <code>range</code> departs <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv2 = bv.drain(<span class=\"number\">1 </span>..= <span class=\"number\">3</span>).collect::&lt;BitVec&gt;();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>,          <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(bv2, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"comment\">// A full range clears the bit-vector.\n</span>bv.drain(..);\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Empties the bit-vector.</p>\n<p>This does not affect the allocated capacity.</p>\n<h6 id=\"original-18\"><a href=\"#original-18\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>Vec::clear</code></a></p>\n<h6 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.clear();\n<span class=\"macro\">assert!</span>(bv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the length of the bit-vector.</p>\n<p>This is equivalent to <code>BitSlice::len</code>; it is provided as an inherent\nmethod here rather than relying on <code>Deref</code> forwarding so that you can\nwrite <code>BitVec::len</code> as a named function item.</p>\n<h6 id=\"original-19\"><a href=\"#original-19\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests if the bit-vector is empty.</p>\n<p>This is equivalent to <code>BitSlice::is_empty</code>; it is provided as an\ninherent method here rather than relying on <code>Deref</code> forwarding so that\nyou can write <code>BitVec::is_empty</code> as a named function item.</p>\n<h6 id=\"original-20\"><a href=\"#original-20\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.is_empty\" title=\"method alloc::vec::Vec::is_empty\"><code>Vec::is_empty</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits the bit-vector in half at an index, moving <code>self[at ..]</code> out into\na new bit-vector.</p>\n<h6 id=\"original-21\"><a href=\"#original-21\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.split_off\" title=\"method alloc::vec::Vec::split_off\"><code>Vec::split_off</code></a></p>\n<h6 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv2 = bv.split_off(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"kw-2\">&amp;*</span>bv, <span class=\"kw-2\">&amp;*</span>bv2), (<span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, func: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Resizes the bit-vector to a new length, using a function to produce each\ninserted bit.</p>\n<p>If <code>new_len</code> is less than <code>self.len()</code>, this is a truncate operation; if\nit is greater, then <code>self</code> is extended by repeatedly pushing <code>func()</code>.</p>\n<h6 id=\"original-22\"><a href=\"#original-22\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a></p>\n<h6 id=\"api-differences-3\"><a href=\"#api-differences-3\">API Differences</a></h6>\n<p>The generator function receives the index into which its bit will be\nplaced.</p>\n<h6 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">1</span>; <span class=\"number\">2</span>];\nbv.resize_with(<span class=\"number\">5</span>, |idx| idx % <span class=\"number\">2 </span>== <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;a mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Destroys the <code>BitVec</code> handle without destroying the bit-vector\nallocation. The allocation is returned as an <code>&amp;mut BitSlice</code> that lasts\nfor the remaining program lifetime.</p>\n<p>You <em>may</em> call [<code>BitBox::from_raw</code>] on this slice handle exactly once in\norder to reap the allocation before program exit. That function takes a\nmutable pointer, not a mutable reference, so you must ensure that the\nreturned reference is never used again after restoring the allocation\nhandle.</p>\n<h6 id=\"original-23\"><a href=\"#original-23\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.leak\" title=\"method alloc::vec::Vec::leak\"><code>Vec::leak</code></a></p>\n<h6 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>static_bits: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">&#39;static </span><span class=\"kw-2\">mut </span>BitSlice = bv.leak();\nstatic_bits.set(<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(static_bits, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span>bb = <span class=\"kw\">unsafe </span>{ BitBox::from_raw(static_bits) };\n<span class=\"comment\">// static_bits may no longer be used.\n</span>drop(bb); <span class=\"comment\">// explicitly reap memory before program exit</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Resizes the bit-vector to a new length. New bits are initialized to\n<code>value</code>.</p>\n<h6 id=\"original-24\"><a href=\"#original-24\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a></p>\n<h6 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>; <span class=\"number\">2</span>];\nbv.resize(<span class=\"number\">5</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><section id=\"method.extend_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_slice</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;BitSlice&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.extend_from_bitslice()</code> or <code>.extend_from_raw_slice()</code> instead</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<span class=\"where fmt-newline\">where\n    R: RangeExt&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Extends <code>self</code> by copying an internal range of its bit-slice as the\nregion to append.</p>\n<h6 id=\"original-25\"><a href=\"#original-25\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>Vec::extend_from_within</code></a></p>\n<h6 id=\"panics-10\"><a href=\"#panics-10\">Panics</a></h6>\n<p>This panics if <code>src</code> is not within <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.extend_from_within(<span class=\"number\">1 </span>.. <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I\n) -&gt; Splice&lt;'_, T, O, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Modifies <a href=\"Self::drain\"><code>self.drain()</code></a> so that the removed bit-slice is instead\nreplaced with the contents of another bit-stream.</p>\n<p>As with <code>.drain()</code>, the specified range is always removed from the\nbit-vector even if the splicer is not fully consumed, and the splicer\ndoes not specify how many bits are removed if it leaks.</p>\n<p>The replacement source is only consumed when the splicer drops; however,\nit may be pulled before then. The replacement source cannot assume that\nthere will be a delay between creation of the splicer and when it must\nbegin producing bits.</p>\n<p>This copies the <code>Vec::splice</code> implementation; see its documentation for\nmore details about how the replacement should act.</p>\n<h6 id=\"original-26\"><a href=\"#original-26\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.splice\" title=\"method alloc::vec::Vec::splice\"><code>Vec::splice</code></a></p>\n<h6 id=\"panics-11\"><a href=\"#panics-11\">Panics</a></h6>\n<p>This panics if <code>range</code> departs <code>0 .. self.len()</code>.</p>\n<h6 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];\n<span class=\"comment\">//                   a  b  c\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>yank = bv.splice(\n  .. <span class=\"number\">2</span>,\n  <span class=\"macro\">bits!</span>[<span class=\"kw\">static </span><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>].iter().by_vals(),\n<span class=\"comment\">//             d  e  f\n</span>);\n\n<span class=\"macro\">assert!</span>(!yank.next().unwrap()); <span class=\"comment\">// a\n</span><span class=\"macro\">assert!</span>(yank.next().unwrap()); <span class=\"comment\">// b\n</span>drop(yank);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"comment\">//                   d  e  f  c</span></code></pre></div>\n</div></details></div></details>",0,"polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Constructors.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">EMPTY</a>: BitVec&lt;T, O&gt; = _</h4></section></summary><div class=\"docblock\"><p>An empty bit-vector with no backing allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.repeat\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">repeat</a>(bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new bit-vector by repeating a bit for the desired length.</p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>zeros = BitVec::&lt;u8, Msb0&gt;::repeat(<span class=\"bool-val\">false</span>, <span class=\"number\">50</span>);\n<span class=\"kw\">let </span>ones = BitVec::&lt;u16, Lsb0&gt;::repeat(<span class=\"bool-val\">true</span>, <span class=\"number\">50</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bitslice</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Copies the contents of a bit-slice into a new heap allocation.</p>\n<p>This copies the raw underlying elements into a new allocation, and sets\nthe produced bit-vector to use the same memory layout as the originating\nbit-slice. This means that it may begin at any bit in the first element,\nnot just the zeroth bit. If you require this property, call\n<a href=\"Self::force_align\"><code>.force_align()</code></a>.</p>\n<p>Dead bits in the copied memory elements are guaranteed to be zeroed.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bits = <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv = BitVec::from_bitslice(bits);\n<span class=\"macro\">assert_eq!</span>(bv, bits);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_element\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_element</a>(elem: T) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new bit-vector from a single element.</p>\n<p>This copies <code>elem</code> into a new heap allocation, and sets the bit-vector\nto cover it entirely.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::from_element(<span class=\"number\">1u8</span>);\n<span class=\"macro\">assert!</span>(bv[<span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new bit-vector from a slice of memory elements.</p>\n<p>This copies <code>slice</code> into a new heap allocation, and sets the bit-vector\nto cover it entirely.</p>\n<h6 id=\"panics\"><a href=\"#panics\">Panics</a></h6>\n<p>This panics if <code>slice</code> exceeds bit-vector capacity.</p>\n<h6 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Lsb0&gt;::from_slice(slice);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, BitSpanError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Fallibly constructs a new bit-vector from a slice of memory elements.</p>\n<p>This fails early if <code>slice</code> exceeds bit-vector capacity. If it is not,\nthen <code>slice</code> is copied into a new heap allocation and fully spanned by\nthe returned bit-vector.</p>\n<h6 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Lsb0&gt;::try_from_slice(slice).unwrap();\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a regular vector in-place into a bit-vector.</p>\n<p>The produced bit-vector spans every bit in the original vector. No\nreällocation occurs; this is purely a transform of the handle.</p>\n<h6 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h6>\n<p>This panics if the source vector is too long to view as a bit-slice.</p>\n<h6 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>bv = BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::from_vec(v);\n<span class=\"macro\">assert_eq!</span>(bv.len(), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a regular vector in-place into a bit-vector.</p>\n<p>This fails if the source vector is too long to view as a bit-slice. On\nsuccess, the produced bit-vector spans every bit in the original vector.\nNo reällocation occurs; this is purely a transform of the handle.</p>\n<h6 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>; <span class=\"number\">20</span>];\n<span class=\"macro\">assert_eq!</span>(BitVec::&lt;<span class=\"kw\">_</span>, Msb0&gt;::try_from_vec(v).unwrap().len(), <span class=\"number\">160</span>);</code></pre></div>\n<p>It is not practical to allocate a vector that will fail this conversion.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_bitslice</a>&lt;T2, O2&gt;(&amp;mut self, other: &amp;BitSlice&lt;T2, O2&gt;)<span class=\"where fmt-newline\">where\n    T2: BitStore,\n    O2: BitOrder,</span></h4></section></summary><div class=\"docblock\"><p>Appends the contents of a bit-slice to a bit-vector.</p>\n<p>This can extend from a bit-slice of any type parameters; it is not\nrestricted to using the same parameters as <code>self</code>. However, when the\ntype parameters <em>do</em> match, it is possible for this to use a batch-copy\noptimization to go faster than the individual-bit crawl that is\nnecessary when they differ.</p>\n<p>Until Rust provides extensive support for specialization in trait\nimplementations, you should use this method whenever you are extending\nfrom a <code>BitSlice</code> proper, and only use the general <a href=\"https://docs.rs/bitvec/latest/bitvec/vec/struct.Vec.html#impl-Extend\"><code>.extend()</code></a>\nimplementation if you are required to use a generic <code>bool</code> source.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>Vec::extend_from_slice</code></a></p>\n<h6 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\nbv.extend_from_bitslice(<span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_raw_slice</a>(&amp;mut self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a slice of <code>T</code> elements to a bit-vector.</p>\n<p>The slice is viewed as a <code>BitSlice&lt;T, O&gt;</code>, then appended directly to the\nbit-vector.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>Vec::extend_from_slice</code></a></p>\n</div></details></div></details>",0,"polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Converters.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitslice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-vector as a bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitslice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-vector as a mutable bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-vector as a slice of its underlying memory elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-vector as a mutable slice of its underlying memory\nelements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitptr</a>(&amp;self) -&gt; BitPtr&lt;Const, T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unsafe shared bit-pointer to the start of the buffer.</p>\n<h6 id=\"original\"><a href=\"#original\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>Vec::as_ptr</code></a></p>\n<h6 id=\"safety\"><a href=\"#safety\">Safety</a></h6>\n<p>You must initialize the contents of the underlying buffer before\naccessing memory through this pointer. See the <code>BitPtr</code> documentation\nfor more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitptr</a>(&amp;mut self) -&gt; BitPtr&lt;Mut, T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an unsafe writable bit-pointer to the start of the buffer.</p>\n<h6 id=\"original-1\"><a href=\"#original-1\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>Vec::as_mut_ptr</code></a></p>\n<h6 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h6>\n<p>You must initialize the contents of the underlying buffer before\naccessing memory through this pointer. See the <code>BitPtr</code> documentation\nfor more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_bitslice</a>(self) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a bit-vector into a boxed bit-slice.</p>\n<p>This may cause a reällocation to drop any excess capacity.</p>\n<h6 id=\"original-2\"><a href=\"#original-2\">Original</a></h6>\n<p><a href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html#method.into_boxed_slice\" title=\"method alloc::vec::Vec::into_boxed_slice\"><code>Vec::into_boxed_slice</code></a></p>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bb = bv.into_boxed_bitslice();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a bit-vector into a <code>Vec</code> of its underlying storage.</p>\n<p>The produced vector contains all elements that contained live bits. Dead\nbits have an unspecified value; you should call <a href=\"Self::set_uninitialized\"><code>.set_uninitialized()</code></a>\nbefore converting into a vector.</p>\n<p>This does not affect the allocated memory; it is purely a conversion of\nthe handle.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bv = <span class=\"macro\">bitvec!</span>[u8, Msb0; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>v = bv.into_vec();\n<span class=\"macro\">assert_eq!</span>(v[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xF8</span>, <span class=\"number\">0b01001_000</span>);</code></pre></div>\n</div></details></div></details>",0,"polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>Utilities.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_elements\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_elements</a>(&amp;mut self, element: &lt;T as BitStore&gt;::Mem)</h4></section></summary><div class=\"docblock\"><p>Overwrites each element (visible in <a href=\"Self::as_raw_mut_slice\"><code>.as_raw_mut_slice()</code></a>) with a new\nbit-pattern.</p>\n<p>This unconditionally writes <code>element</code> into each element in the backing\nslice, without altering the bit-vector’s length or capacity.</p>\n<p>This guarantees that dead bits visible in <a href=\"Self::as_raw_slice\"><code>.as_raw_slice()</code></a> but not\n<a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> are initialized according to the bit-pattern of\n<code>element.</code> The elements not visible in the raw slice, but present in the\nallocation, do <em>not</em> specify a value. You may not rely on them being\nzeroed <em>or</em> being set to the <code>element</code> bit-pattern.</p>\n<h6 id=\"parameters\"><a href=\"#parameters\">Parameters</a></h6>\n<ul>\n<li><code>&amp;mut self</code></li>\n<li><code>element</code>: The bit-pattern with which each live element in the backing\nstore is initialized.</li>\n</ul>\n<h6 id=\"examples\"><a href=\"#examples\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"macro\">bitvec!</span>[u8, Msb0; <span class=\"number\">0</span>; <span class=\"number\">20</span>];\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice(), [<span class=\"number\">0</span>; <span class=\"number\">3</span>]);\nbv.set_elements(<span class=\"number\">0xA5</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice(), [<span class=\"number\">0xA5</span>; <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_uninitialized\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_uninitialized</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the uninitialized bits of a bit-vector to a known value.</p>\n<p>This method modifies all bits that are observable in <a href=\"Self::as_raw_slice\"><code>.as_raw_slice()</code></a>\nbut <em>not</em> observable in <a href=\"Self::as_bitslice\"><code>.as_bitslice()</code></a> to a known value.\nMemory beyond the raw-slice view, but still within the allocation, is\nconsidered fully dead and will never be seen.</p>\n<p>This can be used to zero the unused memory so that when viewed as a raw\nslice, unused bits have a consistent and predictable value.</p>\n<h6 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = <span class=\"number\">0b1101_1100u8</span>.view_bits::&lt;Lsb0&gt;().to_bitvec();\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1101_1100u8</span>);\n\nbv.truncate(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(bv.count_ones(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1101_1100u8</span>);\n\nbv.set_uninitialized(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b0000_1100u8</span>);\n\nbv.set_uninitialized(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], <span class=\"number\">0b1111_1100u8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_align\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">force_align</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Ensures that the live region of the bit-vector’s contents begin at the\nfront edge of the buffer.</p>\n<p><code>BitVec</code> has performance optimizations where it moves its view of its\nbuffer contents in order to avoid needless moves of its data within the\nbuffer. This can lead to unexpected contents of the raw memory values,\nso this method ensures that the semantic contents of the bit-vector\nmatch its in-memory storage.</p>\n<h6 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>data = <span class=\"number\">0b00_1111_00u8</span>;\n<span class=\"kw\">let </span>bits = data.view_bits::&lt;Msb0&gt;();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bv = bits[<span class=\"number\">2 </span>.. <span class=\"number\">6</span>].to_bitvec();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>; <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>], data);\n\nbv.force_align();\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bits!</span>[<span class=\"number\">1</span>; <span class=\"number\">4</span>]);\n<span class=\"comment\">// BitVec does not specify the value of dead bits in its buffer.\n</span><span class=\"macro\">assert_eq!</span>(bv.as_raw_slice()[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xF0</span>, <span class=\"number\">0xF0</span>);</code></pre></div>\n</div></details></div></details>",0,"polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Pointer-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a bool>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a T>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-collection\"><a href=\"#bit-vector-collection\">Bit-Vector Collection</a></h4>\n<p>This collects a bit-vector from anything that produces individual bits.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-FromIterator%3CT%3E\"><code>impl&lt;T&gt; FromIterator&lt;T&gt; for Vec&lt;T&gt;</code></a></p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>This <code>.collect()</code> call is the second-slowest possible way to collect bits into a\nbit-vector, faster only than calling <code>iter.for_each(|bit| bv.push(bit))</code>.\n<strong>DO NOT</strong> use this if you have any other choice.</p>\n<p>If you are collecting a bit-vector from the contents of a bit-slice, then you\nshould use <a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>::from_bitslice()</code></a> instead. That method is specialized to\nperform upfront allocation and, where possible, use a batch copy rather than\ncopying each bit individually from the source into the bit-vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<bool>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M, T1, T2, O1, O2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;BitRef&lt;'a, M, T2, O2&gt;&gt; for BitVec&lt;T1, O1&gt;<span class=\"where fmt-newline\">where\n    M: Mutability,\n    T1: BitStore,\n    T2: BitStore,\n    O1: BitOrder,\n    O2: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-collection-from-proxy-references\"><a href=\"#bit-vector-collection-from-proxy-references\">Bit-Vector Collection from Proxy References</a></h4>\n<p><strong>DO NOT</strong> use this. You <em>clearly</em> have a bit-slice. Use\n<a href=\"crate::vec::BitVec::from_bitslice\"><code>::from_bitslice()</code></a> instead!</p>\n<p>Iterating over a bit-slice requires loading from memory and constructing a proxy\nreference for each bit. This is needlessly slow; the specialized method is able\nto avoid this per-bit cost and possibly even use batched operations.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; BitVec&lt;T1, O1&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T1, O1&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = BitRef&lt;'a, M, T2, O2&gt;&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<BitRef<'a, M, T2, O2>>","polkadot_primitives::vstaging::NodeFeatures"],["<section id=\"impl-Sync-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Sync","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Clone-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Default-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitSlice<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitVec&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitVec<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Hash-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: Idx) -&gt; &amp;mut &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;BitVec&lt;T, O&gt; as Index&lt;Idx&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<Idx>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Drop-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","polkadot_primitives::vstaging::NodeFeatures"],["<section id=\"impl-Unpin-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Unpin","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-iteration\"><a href=\"#bit-vector-iteration\">Bit-Vector Iteration</a></h4>\n<p>Bit-vectors have the advantage that iteration consumes the whole structure, so\nthey can simply freeze the allocation into a bit-box, then use its iteration and\ndestructor.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-IntoIterator\"><code>impl&lt;T&gt; IntoIterator for Vec&lt;T&gt;</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitSlice<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitVec&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitVec<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Write-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"writing-into-a-bit-vector\"><a href=\"#writing-into-a-bit-vector\">Writing Into a Bit-Vector</a></h4>\n<p>The implementation appends bytes to the referenced bit-vector until the source\nbuffer is exhausted.</p>\n<p>Note that the return value of <code>.write()</code> is always the number of <em>bytes</em> of\n<code>buf</code> consumed!</p>\n<p>The implementation uses <a href=\"crate::field::BitField::store_be\"><code>BitField::store_be</code></a> to fill bytes. Note that unlike\nthe standard library, it is implemented on bit-vectors of <em>any</em> underlying\nelement type. However, using a <code>BitVec&lt;_, u8&gt;</code> is still likely to be fastest.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-Write\"><code>impl Write for Vec&lt;u8&gt;</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1543\">source</a></span><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1558\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1620\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1685\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1741\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1797-1799\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Read-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"reading-from-a-bit-vector\"><a href=\"#reading-from-a-bit-vector\">Reading From a Bit-Vector</a></h4>\n<p>The implementation loads bytes out of the reference bit-vector until either the\ndestination buffer is filled or the source has no more bytes to provide. When\n<code>.read()</code> returns, the provided bit-vector will have its contents shifted down\nso that it begins at the first bit <em>after</em> the last byte copied out into <code>buf</code>.</p>\n<p>Note that the return value of <code>.read()</code> is always the number of <em>bytes</em> of <code>buf</code>\nfilled!</p>\n<h5 id=\"api-differences\"><a href=\"#api-differences\">API Differences</a></h5>\n<p>The standard library does not <code>impl Read for Vec&lt;u8&gt;</code>. It is provided here as a\ncourtesy.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#707\">source</a></span><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#720\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#771\">source</a></span><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#814\">source</a></span><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#869\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#880\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Pull some bytes from this source into the specified buffer. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#903\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#955-957\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#998-1000\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Transforms this <code>Read</code> instance to an <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1036-1038\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt;<span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an adapter which will chain this stream with another. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/io/mod.rs.html#1075-1077\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Read.html#method.take\">Read more</a></div></details></div></details>","Read","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<BitSlice<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;BitVec&lt;T, O&gt; as Deref&gt;::Target\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitOr&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, O&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.195/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</span></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.195/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"impl\"><a href=\"#impl-Extend%3CBitRef%3C'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M, T1, T2, O1, O2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;BitRef&lt;'a, M, T2, O2&gt;&gt; for BitVec&lt;T1, O1&gt;<span class=\"where fmt-newline\">where\n    M: Mutability,\n    T1: BitStore,\n    T2: BitStore,\n    O1: BitOrder,\n    O2: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-extension-by-proxy-references\"><a href=\"#bit-vector-extension-by-proxy-references\">Bit-Vector Extension by Proxy References</a></h4>\n<p><strong>DO NOT</strong> use this. You <em>clearly</em> have a bit-slice. Use\n<a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>.extend_from_bitslice()</code></a> instead!</p>\n<p>Iterating over a bit-slice requires loading from memory and constructing a proxy\nreference for each bit. This is needlessly slow; the specialized method is able\nto avoid this per-bit cost and possibly even use batched operations.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = BitRef&lt;'a, M, T2, O2&gt;&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<BitRef<'a, M, T2, O2>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><h4 id=\"bit-vector-extension\"><a href=\"#bit-vector-extension\">Bit-Vector Extension</a></h4>\n<p>This extends a bit-vector from anything that produces individual bits.</p>\n<h5 id=\"original\"><a href=\"#original\">Original</a></h5>\n<p><a href=\"https://doc.rust-lang.org/alloc/vec/struct.Vec.html#impl-Extend%3CT%3E\"><code>impl&lt;T&gt; Extend&lt;T&gt; for Vec&lt;T&gt;</code></a></p>\n<h5 id=\"notes\"><a href=\"#notes\">Notes</a></h5>\n<p>This <code>.extend()</code> call is the second-slowest possible way to append bits into a\nbit-vector, faster only than calling <code>iter.for_each(|bit| bv.push(bit))</code>.\n<strong>DO NOT</strong> use this if you have any other choice.</p>\n<p>If you are extending a bit-vector from the contents of a bit-slice, then you\nshould use <a href=\"crate::vec::BitVec::extend_from_bitslice\"><code>.extend_from_bitslice()</code></a> instead. That method is specialized to\nperform upfront allocation and, where possible, use a batch copy rather than\ncopying each bit individually from the source into the bit-vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<bool>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a bool>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deref-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = BitSlice&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;BitVec&lt;T, O&gt; as Deref&gt;::Target\">ⓘ</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-LowerHex-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Display-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Octal-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<T>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Debug-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","polkadot_primitives::vstaging::NodeFeatures"],["<section id=\"impl-Eq-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Eq-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Eq","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitField-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitField-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitField for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_le\" class=\"method trait-impl\"><a href=\"#method.load_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_le</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Little-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_be\" class=\"method trait-impl\"><a href=\"#method.load_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_be</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Big-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_le\" class=\"method trait-impl\"><a href=\"#method.store_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_le</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Little-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_be\" class=\"method trait-impl\"><a href=\"#method.store_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_be</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Big-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;I&gt;(&amp;self) -&gt; I<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a href=\"#method.store\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store</a>&lt;I&gt;(&amp;mut self, value: I)<span class=\"where fmt-newline\">where\n    I: Integral,</span></h4></section></summary><div class='docblock'>Integer Storing <a>Read more</a></div></details></div></details>","BitField","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Not-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"docblock\"><p>This implementation inverts all elements in the live buffer. You cannot rely\non the value of bits in the buffer that are outside the domain of\n[<code>BitVec::as_mut_bitslice</code>].</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#associatedtype.Output\" title=\"type core::ops::bit::Not::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as Not&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitXor&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Ord-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;BitVec&lt;T, O&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#826-828\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#846-848\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#871-874\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;mut BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut BitSlice<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: 'a + BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Cow<'a, BitSlice<T, O>>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitArray&lt;A, O&gt;&gt; for BitVec&lt;&lt;A as BitView&gt;::Store, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    A: BitViewSized,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: BitArray&lt;A, O&gt;) -&gt; BitVec&lt;&lt;A as BitView&gt;::Store, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;&lt;A as BitView&gt;::Store, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitArray<A, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&BitSlice<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitBox&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: BitBox&lt;T, O&gt;) -&gt; BitVec&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BitVec&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitBox<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Index%3CIdx%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;BitSlice&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Idx) -&gt; &amp;&lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;BitVec&lt;T, O&gt; as Index&lt;Idx&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Idx>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-UpperHex-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CRhs%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: Rhs) -&gt; &lt;BitVec&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;BitVec&lt;T, O&gt; as BitAnd&lt;Rhs&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<Rhs>","polkadot_primitives::vstaging::NodeFeatures"],["<section id=\"impl-Send-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Send-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section>","Send","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore,\n    O: BitOrder,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<BitSlice<T, O>>","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Binary-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Encode-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; Encode for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Encode,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to\" class=\"method trait-impl\"><a href=\"#method.encode_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_to</a>&lt;W&gt;(&amp;self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut W</a>)<span class=\"where fmt-newline\">where\n    W: Output + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Convert self to a slice and append it to the destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>If possible give a hint of expected size of the encoding. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convert self to an owned vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.using_encoded\" class=\"method trait-impl\"><a href=\"#method.using_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">using_encoded</a>&lt;R, F&gt;(&amp;self, f: F) -&gt; R<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; R,</span></h4></section></summary><div class='docblock'>Convert self to a slice and then invoke the given closure with it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_size\" class=\"method trait-impl\"><a href=\"#method.encoded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the encoded size. <a>Read more</a></div></details></div></details>","Encode","polkadot_primitives::vstaging::NodeFeatures"],["<section id=\"impl-EncodeLike-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-EncodeLike-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; EncodeLike for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Encode,</span></h3></section>","EncodeLike","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Decode-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; Decode for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    O: BitOrder,\n    T: BitStore + Decode,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitVec&lt;T, O&gt;, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a href=\"#method.decode_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"https://doc.rust-lang.org/1.75.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;DecodeFinished, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a href=\"#method.encoded_fixed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a>Read more</a></div></details></div></details>","Decode","polkadot_primitives::vstaging::NodeFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-BitVec%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TypeInfo-for-BitVec%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; TypeInfo for BitVec&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: BitStore + TypeInfo + 'static,\n    O: BitOrder + TypeInfo + 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Identity\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Identity</a> = BitVec&lt;T, O&gt;</h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; Type</h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","polkadot_primitives::vstaging::NodeFeatures"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()