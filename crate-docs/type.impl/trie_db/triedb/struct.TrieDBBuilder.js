(function() {var type_impls = {
"sp_trie":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrieDBBuilder%3C'db,+'cache,+L%3E\" class=\"impl\"><a href=\"#impl-TrieDBBuilder%3C'db,+'cache,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db, 'cache, L&gt; TrieDBBuilder&lt;'db, 'cache, L&gt;<span class=\"where fmt-newline\">where\n    L: <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    db: &amp;'db dyn HashDBRef&lt;&lt;L as <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.TrieLayout.html#associatedtype.Hash\" title=\"type sp_trie::TrieLayout::Hash\">Hash</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    root: &amp;'db &lt;&lt;L as <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.TrieLayout.html#associatedtype.Hash\" title=\"type sp_trie::TrieLayout::Hash\">Hash</a> as Hasher&gt;::Out\n) -&gt; TrieDBBuilder&lt;'db, 'cache, L&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new trie-db builder with the backing database <code>db</code> and <code>root</code>.</p>\n<p>This doesn’t check if <code>root</code> exists in the given <code>db</code>. If <code>root</code> doesn’t exist it will fail\nwhen trying to lookup any key.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_cache\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_cache</a>(\n    self,\n    cache: &amp;'cache mut dyn <a class=\"trait\" href=\"sp_trie/trait.TrieCache.html\" title=\"trait sp_trie::TrieCache\">TrieCache</a>&lt;&lt;L as <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.TrieLayout.html#associatedtype.Codec\" title=\"type sp_trie::TrieLayout::Codec\">Codec</a>&gt;\n) -&gt; TrieDBBuilder&lt;'db, 'cache, L&gt;</h4></section></summary><div class=\"docblock\"><p>Use the given <code>cache</code> for the db.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_optional_cache\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_optional_cache</a>&lt;'ocache&gt;(\n    self,\n    cache: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'ocache mut dyn <a class=\"trait\" href=\"sp_trie/trait.TrieCache.html\" title=\"trait sp_trie::TrieCache\">TrieCache</a>&lt;&lt;L as <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.TrieLayout.html#associatedtype.Codec\" title=\"type sp_trie::TrieLayout::Codec\">Codec</a>&gt;&gt;\n) -&gt; TrieDBBuilder&lt;'db, 'cache, L&gt;<span class=\"where fmt-newline\">where\n    'ocache: 'cache,</span></h4></section></summary><div class=\"docblock\"><p>Use the given optional <code>cache</code> for the db.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_recorder\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_recorder</a>(\n    self,\n    recorder: &amp;'cache mut dyn <a class=\"trait\" href=\"sp_trie/trait.TrieRecorder.html\" title=\"trait sp_trie::TrieRecorder\">TrieRecorder</a>&lt;&lt;&lt;L as <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.TrieLayout.html#associatedtype.Hash\" title=\"type sp_trie::TrieLayout::Hash\">Hash</a> as Hasher&gt;::Out&gt;\n) -&gt; TrieDBBuilder&lt;'db, 'cache, L&gt;</h4></section></summary><div class=\"docblock\"><p>Use the given <code>recorder</code> to record trie accesses.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_optional_recorder\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_optional_recorder</a>&lt;'recorder&gt;(\n    self,\n    recorder: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'recorder mut dyn <a class=\"trait\" href=\"sp_trie/trait.TrieRecorder.html\" title=\"trait sp_trie::TrieRecorder\">TrieRecorder</a>&lt;&lt;&lt;L as <a class=\"trait\" href=\"sp_trie/trait.TrieLayout.html\" title=\"trait sp_trie::TrieLayout\">TrieLayout</a>&gt;::<a class=\"associatedtype\" href=\"sp_trie/trait.TrieLayout.html#associatedtype.Hash\" title=\"type sp_trie::TrieLayout::Hash\">Hash</a> as Hasher&gt;::Out&gt;&gt;\n) -&gt; TrieDBBuilder&lt;'db, 'cache, L&gt;<span class=\"where fmt-newline\">where\n    'recorder: 'cache,</span></h4></section></summary><div class=\"docblock\"><p>Use the given optional <code>recorder</code> to record trie accesses.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">build</a>(self) -&gt; TrieDB&lt;'db, 'cache, L&gt;</h4></section></summary><div class=\"docblock\"><p>Build the [<code>TrieDB</code>].</p>\n</div></details></div></details>",0,"sp_trie::TrieDBBuilder"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()