(function() {var type_impls = {
"sp_crypto_ec_utils":[["<section id=\"impl-Copy-for-Config%3CH%3E\" class=\"impl\"><a href=\"#impl-Copy-for-Config%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for Config&lt;H&gt;<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + CurveHooks,</span></h3></section>","Copy","sp_crypto_ec_utils::bls12_377::Config"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bls12Config-for-Config%3CH%3E\" class=\"impl\"><a href=\"#impl-Bls12Config-for-Config%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; Bls12Config for Config&lt;H&gt;<span class=\"where fmt-newline\">where\n    H: CurveHooks,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.multi_miller_loop\" class=\"method trait-impl\"><a href=\"#method.multi_miller_loop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">multi_miller_loop</a>(\n    g1: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;G1Prepared&lt;Config&lt;H&gt;&gt;&gt;&gt;,\n    g2: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;G2Prepared&lt;Config&lt;H&gt;&gt;&gt;&gt;\n) -&gt; MillerLoopOutput&lt;Bls12&lt;Config&lt;H&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multi Miller loop jumping into the user-defined <code>multi_miller_loop</code> hook.</p>\n<p>For any external error returns <code>MillerLoopOutput(TargetField::zero())</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.final_exponentiation\" class=\"method trait-impl\"><a href=\"#method.final_exponentiation\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">final_exponentiation</a>(\n    target: MillerLoopOutput&lt;Bls12&lt;Config&lt;H&gt;&gt;&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;PairingOutput&lt;Bls12&lt;Config&lt;H&gt;&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Final exponentiation jumping into the user-defined <code>final_exponentiation</code> hook.</p>\n<p>For any external error returns <code>None</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.X\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.X\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">X</a>: &amp;'static [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>] = &lt;ArkConfig as ArkBls12Config&gt;::X</h4></section></summary><div class='docblock'>Parameterizes the BLS12 family.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.X_IS_NEGATIVE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.X_IS_NEGATIVE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">X_IS_NEGATIVE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Is <code>Self::X</code> negative?</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.TWIST_TYPE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TWIST_TYPE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TWIST_TYPE</a>: TwistType = &lt;ArkConfig as ArkBls12Config&gt;::TWIST_TYPE</h4></section></summary><div class='docblock'>What kind of twist is this?</div></details><section id=\"associatedtype.Fp\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Fp\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Fp</a> = &lt;Config as Bls12Config&gt;::Fp</h4></section><section id=\"associatedtype.Fp2Config\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Fp2Config\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Fp2Config</a> = &lt;Config as Bls12Config&gt;::Fp2Config</h4></section><section id=\"associatedtype.Fp6Config\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Fp6Config\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Fp6Config</a> = &lt;Config as Bls12Config&gt;::Fp6Config</h4></section><section id=\"associatedtype.Fp12Config\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Fp12Config\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Fp12Config</a> = &lt;Config as Bls12Config&gt;::Fp12Config</h4></section><section id=\"associatedtype.G1Config\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.G1Config\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">G1Config</a> = Config&lt;H&gt;</h4></section><section id=\"associatedtype.G2Config\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.G2Config\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">G2Config</a> = Config&lt;H&gt;</h4></section></div></details>","Bls12Config","sp_crypto_ec_utils::bls12_377::Config"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Config%3CH%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Config%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Config&lt;H&gt;<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + CurveHooks,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Config&lt;H&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sp_crypto_ec_utils::bls12_377::Config"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()