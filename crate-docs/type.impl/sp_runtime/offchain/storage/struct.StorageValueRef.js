(function() {var type_impls = {
"sp_runtime":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StorageValueRef%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#50-121\">source</a><a href=\"#impl-StorageValueRef%3C'a%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html\" title=\"struct sp_runtime::offchain::storage::StorageValueRef\">StorageValueRef</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.persistent\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#52-54\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html#tymethod.persistent\" class=\"fn\">persistent</a>(key: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new reference to a value in the persistent local storage.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.local\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#57-59\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html#tymethod.local\" class=\"fn\">local</a>(key: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new reference to a value in the fork-aware local storage.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#66-68\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html#tymethod.set\" class=\"fn\">set</a>(&amp;self, value: &amp;impl Encode)</h4></section></summary><div class=\"docblock\"><p>Set the value of the storage to encoding of given parameter.</p>\n<p>Note that the storage may be accessed by workers running concurrently,\nif you happen to write a <code>get-check-set</code> pattern you should most likely\nbe using <code>mutate</code> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#71-73\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove the associated value from the storage.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#82-86\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html#tymethod.get\" class=\"fn\">get</a>&lt;T: Decode&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"enum\" href=\"sp_runtime/offchain/storage/enum.StorageRetrievalError.html\" title=\"enum sp_runtime::offchain::storage::StorageRetrievalError\">StorageRetrievalError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Retrieve &amp; decode the value from storage.</p>\n<p>Note that if you want to do some checks based on the value\nand write changes after that, you should rather be using <code>mutate</code>.</p>\n<p>Returns the value if stored.\nReturns an error if the value could not be decoded.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mutate\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_runtime/offchain/storage.rs.html#98-120\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_runtime/offchain/storage/struct.StorageValueRef.html#tymethod.mutate\" class=\"fn\">mutate</a>&lt;T, E, F&gt;(\n    &amp;self,\n    mutate_val: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"sp_runtime/offchain/storage/enum.MutateStorageError.html\" title=\"enum sp_runtime::offchain::storage::MutateStorageError\">MutateStorageError</a>&lt;T, E&gt;&gt;<span class=\"where fmt-newline\">where\n    T: Codec,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"enum\" href=\"sp_runtime/offchain/storage/enum.StorageRetrievalError.html\" title=\"enum sp_runtime::offchain::storage::StorageRetrievalError\">StorageRetrievalError</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Retrieve &amp; decode the current value and set it to a new value atomically.</p>\n<p>Function <code>mutate_val</code> takes as input the current value and should\nreturn a new value that is attempted to be written to storage.</p>\n<p>This function returns:</p>\n<ol>\n<li><code>Ok(T)</code> in case the value has been successfully set.</li>\n<li><code>Err(MutateStorageError::ConcurrentModification(T))</code> in case the value was calculated\nby the passed closure <code>mutate_val</code>, but it could not be stored.</li>\n<li><code>Err(MutateStorageError::ValueFunctionFailed(_))</code> in case <code>mutate_val</code> returns an error.</li>\n</ol>\n</div></details></div></details>",0,"sp_runtime::offchain::storage::StorageValue"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()