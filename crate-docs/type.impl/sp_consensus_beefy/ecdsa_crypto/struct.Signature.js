(function() {var type_impls = {
"sp_consensus_beefy":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><h4 class=\"code-header\">pub fn <a href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; Signature</h4></section></summary><div class=\"docblock\"><p>Convert into wrapped generic signature type.</p>\n</div></details></div></details>",0,"sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CSignature%3E-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-AsMut%3CSignature%3E-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;Signature&gt; for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut Signature</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Signature>","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<section id=\"impl-EncodeLike-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-EncodeLike-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EncodeLike for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section>","EncodeLike","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Wraps-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Wraps-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Wraps for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Inner\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Inner\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Inner</a> = Signature</h4></section></summary><div class='docblock'>The inner type it is wrapping.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_inner_ref\" class=\"method trait-impl\"><a href=\"#method.as_inner_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_inner_ref</a>(&amp;self) -&gt; &amp;Self::Inner</h4></section></summary><div class='docblock'>Get a reference to the inner type that is wrapped.</div></details></div></details>","Wraps","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Hash-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Debug-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<section id=\"impl-StructuralEq-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-StructuralEq-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section>","StructuralEq","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignature%3E-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-From%3CSignature%3E-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Signature&gt; for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(inner: Signature) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Signature>","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-PartialEq-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CSignature%3E-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-AsRef%3CSignature%3E-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;Signature&gt; for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;Signature</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Signature>","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-TypeInfo-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TypeInfo for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Identity\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Identity</a> = <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; Type</h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Decode-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decode for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>&lt;__CodecInputEdqy: Input&gt;(\n    __codec_input_edqy: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut __CodecInputEdqy</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Error&gt;</h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a href=\"#method.decode_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"https://doc.rust-lang.org/1.75.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;DecodeFinished, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;<span class=\"where fmt-newline\">where\n    I: Input,</span></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a href=\"#method.encoded_fixed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a>Read more</a></div></details></div></details>","Decode","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppCrypto-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-AppCrypto-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sp_application_crypto/traits/trait.AppCrypto.html\" title=\"trait sp_application_crypto::traits::AppCrypto\">AppCrypto</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Public\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Public\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"sp_application_crypto/traits/trait.AppCrypto.html#associatedtype.Public\" class=\"associatedtype\">Public</a> = <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Public.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Public\">Public</a></h4></section></summary><div class='docblock'>The corresponding public key type in this application scheme.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Pair\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Pair\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"sp_application_crypto/traits/trait.AppCrypto.html#associatedtype.Pair\" class=\"associatedtype\">Pair</a> = <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Pair.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Pair\">Pair</a></h4></section></summary><div class='docblock'>The corresponding key pair type in this application scheme.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Signature\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Signature\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"sp_application_crypto/traits/trait.AppCrypto.html#associatedtype.Signature\" class=\"associatedtype\">Signature</a> = <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h4></section></summary><div class='docblock'>The corresponding signature type in this application scheme.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#associatedconstant.ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"sp_application_crypto/traits/trait.AppCrypto.html#associatedconstant.ID\" class=\"constant\">ID</a>: KeyTypeId = KEY_TYPE</h4></section></summary><div class='docblock'>Identifier for application-specific key type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.CRYPTO_ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#associatedconstant.CRYPTO_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"sp_application_crypto/traits/trait.AppCrypto.html#associatedconstant.CRYPTO_ID\" class=\"constant\">CRYPTO_ID</a>: CryptoTypeId = ecdsa::CRYPTO_ID</h4></section></summary><div class='docblock'>Identifier of the crypto type of this application-specific key type.</div></details></div></details>","AppCrypto","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Encode-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encode for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>If possible give a hint of expected size of the encoding. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.encode_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_to</a>&lt;__CodecOutputEdqy: Output + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(\n    &amp;self,\n    __codec_dest_edqy: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut __CodecOutputEdqy</a>\n)</h4></section></summary><div class='docblock'>Convert self to a slice and append it to the destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convert self to an owned vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.using_encoded\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.using_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">using_encoded</a>&lt;R, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; R&gt;(&amp;self, f: F) -&gt; R</h4></section></summary><div class='docblock'>Convert self to a slice and then invoke the given closure with it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_size\" class=\"method trait-impl\"><a href=\"#method.encoded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the encoded size. <a>Read more</a></div></details></div></details>","Encode","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<section id=\"impl-StructuralPartialEq-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-StructuralPartialEq-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section>","StructuralPartialEq","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CryptoType-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-CryptoType-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CryptoType for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Pair\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Pair\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Pair</a> = <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Pair.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Pair\">Pair</a></h4></section></summary><div class='docblock'>The pair key type of this crypto.</div></details></div></details>","CryptoType","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Clone-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3Cu8%3E%3E-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-TryFrom%3CVec%3Cu8%3E%3E-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(data: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<u8>>","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Deref-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppSignature-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-AppSignature-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sp_application_crypto/traits/trait.AppSignature.html\" title=\"trait sp_application_crypto::traits::AppSignature\">AppSignature</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Generic\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Generic\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"sp_application_crypto/traits/trait.AppSignature.html#associatedtype.Generic\" class=\"associatedtype\">Generic</a> = Signature</h4></section></summary><div class='docblock'>The wrapped type which is just a plain instance of <code>Signature</code>.</div></details></div></details>","AppSignature","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<section id=\"impl-Eq-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-Eq-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section>","Eq","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5Bu8%5D%3E-for-Signature\" class=\"impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#impl-TryFrom%3C%26%5Bu8%5D%3E-for-Signature\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"sp_consensus_beefy/ecdsa_crypto/struct.Signature.html\" title=\"struct sp_consensus_beefy::ecdsa_crypto::Signature\">Signature</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sp_consensus_beefy/lib.rs.html#81\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(data: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a [u8]>","sp_consensus_beefy::ecdsa_crypto::AuthoritySignature"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()