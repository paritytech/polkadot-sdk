---
# Note: This tests depends on the 3_hrmp-open-channels.yml for opening channels, otherwise teleports aren't going to
# work.
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 9900
    assets_parachain: &assets_parachain
      wsPort: 9910
      paraId: &ap_id 1000
    penpal_parachain: &penpal_parachain
      wsPort: 9920
      paraId: &pp_id 2000
  variables:
    common:
      mint_amount: &mint_amount 1000000000000
      amount: &amount 100000000000
      require_weight_at_most: &weight_at_most {refTime: 1200000000, proofSize: 20000}
      amount_to_send: &amount_to_send 500000000000
      weight_threshold:  &weight_threshold { refTime: [10, 10], proofSize: [10, 10] }
    chains:
      relay_chain:
        signer: &rc_signer //Alice
        assets_parachain_destination: &ap_dest { v3: { 0, interior: { x1: { parachain: *ap_id }}}}
        assets_parachain_dest_routed: &ap_dest_routed { v3: { parents: 1, interior: { x1: { parachain: *ap_id } }}}
      assets_parachain_account:
        signer: &ap_signer //Alice
        wallet: &ap_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F
        asset_id: &asset_id 2
        assets_pallet_id: &assets_pallet_id 50
        asset_min_balance: &asset_ed 1000
        penpal_parachain_destination: &pp_dest { v3: { parents: 1, interior: { x1: { parachain: *pp_id } }}}
        ksm: &ap_ksm { concrete: { parents: 1, interior: { here: true }}}
        ksm_fungible: &ap_ksm_fungible { id: *ap_ksm, fun: { fungible: *amount }}
        suff_asset: &suff_asset { concrete: { parents: 0, interior: { x2: [ { PalletInstance: *assets_pallet_id }, { GeneralIndex: *asset_id } ] }}}
        suff_asset_fail: &suff_asset_fail { concrete: { parents: 0, interior: { x2: [ { PalletInstance: *assets_pallet_id }, { GeneralIndex: 3 } ] }}}
        suff_asset_fungible_fail: &ap_suff_asset_fungible_fail { id: *suff_asset_fail, fun: { fungible: 200000000000 }}
      penpal_parachain:
        sovereign_account: &pp_sovereign_sibl FBeL7EAeUroLWXW1yfKboiqTqVfbRBcsUKd6QqVf4kGBySS
        signer: &pp_signer //Alice
        penpal_parachain_account: &pp_acc '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'
  decodedCalls:
    force_create_asset:
      chain: *assets_parachain
      pallet: assets
      call: forceCreate
      args: [
        *asset_id,
        { Id: *ap_wallet }, # owner
        true, # isSufficient
        *asset_ed # minBalance
      ]
    force_create_asset2:
      chain: *assets_parachain
      pallet: assets
      call: forceCreate
      args: [
        *asset_id,
        { Id: *ap_wallet }, # owner
        true, # isSufficient
        *asset_ed # minBalance
      ]

tests:
  - name: HRMP
    describes:
      - name: polkadotXcm.limitedReserveTransferAssets (Asset) | Assets Parachain -> Penpal Parachain
        before:
          - name: DEPENDENCY | A sufficient Asset should exist in the Assets Parachain
            actions:
              - extrinsics:
                  - chain: *relay_chain
                    signer: *rc_signer
                    sudo: true
                    pallet: xcmPallet
                    call: send
                    args: [
                      *ap_dest, # destination
                      {
                        v3: [ #message
                          {
                            UnpaidExecution: {
                              weightLimit: Unlimited
                            }
                          },
                          {
                            SetTopic: '0x0123456789012345678901234567891201234567890123456789012345678912'
                          },
                          {
                            Transact: {
                              originKind: Superuser,
                              requireWeightAtMost: *weight_at_most,
                              call: $force_create_asset
                            }
                          }
                        ]
                      }
                    ]
                    events:
                      - name: xcmPallet.Sent
                      - name: dmpQueue.ExecutedDownward
                        chain: *assets_parachain
                        threshold: *weight_threshold
                        result: { outcome: { Complete: { refTime: '1,216,703,000', proofSize: '20,000' }}}
              - queries:
                  forced_created_asset:
                    chain: *assets_parachain
                    pallet: assets
                    call: asset
                    args: [ *asset_id ]
              - asserts:
                  isSome:
                    args: [ $forced_created_asset ]

          - name: DEPENDENCY | Some Assets should be minted for the sender
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: assets
                    call: mint
                    args: [
                      *asset_id,
                      *ap_wallet,
                      *mint_amount
                    ]
                    events:
                      - name: assets.Issued
                        result: { assetId: *asset_id, owner: *ap_wallet, amount: *mint_amount }

        its:
          - name: Assets Parachain should be able to reserve transfer an Asset to Penpal Parachain
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: polkadotXcm
                    call: limitedReserveTransferAssets
                    args: [
                      *pp_dest, # destination
                      { # beneficiary
                        V3: {
                          parents: 0,
                          interior: {
                            X1: {
                              AccountId32: {
                                id: *pp_acc
                              }
                            }
                          }
                        }
                      },
                      { # assets
                        V3: [
                          {
                            id: {
                              Concrete: {
                                parents: 0,
                                interior: {
                                  X2: [
                                    {
                                      PalletInstance: *assets_pallet_id
                                    },
                                    {
                                      GeneralIndex: *asset_id
                                    }
                                  ]
                                }
                              }
                            },
                            fun: {
                              Fungible: *amount_to_send
                            }
                          }
                        ]
                      },
                      0, # feeAssetItem
                      Unlimited # weightLimit
                    ]
                    events:
                      - name: polkadotXcm.Attempted
                        threshold: *weight_threshold
                        result: { outcome: { Complete: { refTime: '679,150,000', proofSize: '6,196' }}}
                      - name: assets.Transferred
                        result: {
                          assetId: *asset_id,
                          from: *ap_wallet,
                          to: *pp_sovereign_sibl,
                          amount: *amount_to_send
                        }

      - name: polkadotXcm.limitedReserveTransferAssets (KSM) | Assets Parachain -> Penpal Parachain
        its:
          - name: Assets Parachain should be able to reserve transfer KSM to Penpal Parachain
            actions:
              - extrinsics:
                  - chain: *assets_parachain
                    signer: *ap_signer
                    pallet: polkadotXcm
                    call: limitedReserveTransferAssets
                    args: [
                      *pp_dest, # destination
                      { # beneficiary
                        V3: {
                          parents: 0,
                          interior: {
                            X1: {
                              AccountId32: {
                                id: *pp_acc
                              }
                            }
                          }
                        }
                      },
                      { # assets
                        V3: [
                          *ap_ksm_fungible
                        ]
                      },
                      0, # feeAssetItem
                      Unlimited # weightLimit
                    ]
                    events:
                      - name: polkadotXcm.Attempted
                        threshold: *weight_threshold
                        result: { outcome: { Complete: { refTime: '679,150,000', proofSize: '6,196' }}}
                      - name: balances.Endowed
                        result: {
                          account: *pp_sovereign_sibl,
                          freeBalance: *amount
                        }

      - name: polkadotXcm.send( assets.forceCreateAsset ) | Penpal Parachain -> Assets Parachain
        before:
          - name: Get the asset balance of the Penpal Parachain Sovereign account in Assets Parachain
            actions:
              - queries:
                  assets_balance_pp_sovereign_before:
                    chain: *assets_parachain
                    pallet: assets
                    call: account
                    args: [
                      *asset_id,
                      *pp_sovereign_sibl
                    ]
        its:
          - name: Penpal Parachain should be able to send XCM message paying its fee with sufficient asset in Assets Parachain
            actions:
              - extrinsics:
                  - chain: *penpal_parachain
                    signer: *pp_signer
                    sudo: true
                    pallet: polkadotXcm
                    call: send
                    args: [
                      *ap_dest_routed, # destination
                      {
                        v3: [ #message
                          {
                            WithdrawAsset: [
                              {
                                id: {
                                  concrete: {
                                    parents: 0,
                                    interior: {
                                      X2: [
                                        { PalletInstance: *assets_pallet_id },
                                        { GeneralIndex: *asset_id }
                                      ]
                                    }
                                  }
                                },
                                fun: { fungible: *amount }}
                            ]
                          },
                          {
                            BuyExecution: {
                              fees: { id: *suff_asset, fun: { fungible: *amount }},
                              weightLimit: Unlimited
                            }
                          },
                          {
                            Transact: {
                              originKind: SovereignAccount,
                              requireWeightAtMost: *weight_at_most,
                              call: $force_create_asset2
                            }
                          },
                          {
                            RefundSurplus
                          },
                          {
                            DepositAsset: {
                              assets: { Wild: All },
                              beneficiary: {
                                parents: 0,
                                interior: {
                                  X1: {
                                    AccountId32: {
                                        network: , # None
                                        id: *pp_acc
                                      }
                                  }
                                }}
                            }
                          }
                        ]
                      }
                    ]
                    events:
                      - name: sudo.Sudid
                        result: { sudoResult: Ok }
                      - name: polkadotXcm.Sent
                      - name: assets.Burned
                        chain: *assets_parachain
                        result: { assetId: *asset_id, owner: *pp_sovereign_sibl }
                      - name: assets.Issued
                        chain: *assets_parachain
                        result: { assetId: *asset_id }
              - queries:
                  assets_balance_pp_sovereign_after:
                    chain: *assets_parachain
                    pallet: assets
                    call: account
                    args: [
                      *asset_id,
                      *pp_sovereign_sibl
                    ]
                  forced_created_asset2:
                    chain: *assets_parachain
                    pallet: assets
                    call: asset
                    args: [ 3 ]
              - asserts:
                  isSome:
                    args: [ $forced_created_asset2 ]
          - name: Should reduce the assets balance of the Penpal Parachain's SovereignAccount in the Assets Parachain
            actions:
              - asserts:
                  assetsDecreased:
                    args: [
                      {
                        balances: {
                          before: $assets_balance_pp_sovereign_before,
                          after: $assets_balance_pp_sovereign_after,
                        },
                      }
                    ]

          - name: Penpal Parachain SHOULD NOT be able to send XCM message paying its fee with sufficient assets if not enough balance
            actions:
              - extrinsics:
                  - chain: *penpal_parachain
                    signer: *pp_signer
                    sudo: true
                    pallet: polkadotXcm
                    call: send
                    args: [
                      *ap_dest_routed, # destination
                      {
                        v3: [ #message
                          {
                            WithdrawAsset: [*ap_suff_asset_fungible_fail]
                          },
                          {
                            BuyExecution: {
                              fees: *ap_suff_asset_fungible_fail,
                              weightLimit: Unlimited
                            }
                          },
                          {
                            Transact: {
                              originKind: SovereignAccount,
                              requireWeightAtMost: *weight_at_most,
                              call: $force_create_asset2
                            }
                          }
                        ]
                      }
                    ]
                    events:
                      - name: xcmpQueue.Fail
                        chain: *assets_parachain
                        threshold: *weight_threshold
                        result: {
                          error: FailedToTransactAsset,
                          weight: { refTime: '152,426,000', proofSize: '3,593' }
                        }
