// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-10-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `c458e2e54901`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/asset-hub-westend-runtime/asset_hub_westend_runtime.wasm
// --pallet=pallet_revive
// --header=/__w/polkadot-sdk/polkadot-sdk/cumulus/file_header.txt
// --output=./cumulus/parachains/runtimes/assets/asset-hub-westend/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_revive`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_revive::WeightInfo for WeightInfo<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1660`
		// Minimum execution time: 2_765_000 picoseconds.
		Weight::from_parts(3_109_000, 0)
			.saturating_add(Weight::from_parts(0, 1660))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `496 + k * (69 ±0)`
		//  Estimated: `486 + k * (70 ±0)`
		// Minimum execution time: 17_310_000 picoseconds.
		Weight::from_parts(17_637_000, 0)
			.saturating_add(Weight::from_parts(0, 486))
			// Standard Error: 2_254
			.saturating_add(Weight::from_parts(1_406_795, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1922 + c * (1 ±0)`
		//  Estimated: `7871 + c * (1 ±0)`
		// Minimum execution time: 98_202_000 picoseconds.
		Weight::from_parts(133_830_180, 0)
			.saturating_add(Weight::from_parts(0, 7871))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_600, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5222`
		//  Estimated: `11162`
		// Minimum execution time: 134_824_000 picoseconds.
		Weight::from_parts(139_820_479, 0)
			.saturating_add(Weight::from_parts(0, 11162))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4472`
		//  Estimated: `10157`
		// Minimum execution time: 1_378_027_000 picoseconds.
		Weight::from_parts(264_857_848, 0)
			.saturating_add(Weight::from_parts(0, 10157))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(19_170, 0).saturating_mul(c.into()))
			// Standard Error: 14
			.saturating_add(Weight::from_parts(4_310, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4274`
		//  Estimated: `10214 + d * (2475 ±0)`
		// Minimum execution time: 347_736_000 picoseconds.
		Weight::from_parts(186_000_973, 0)
			.saturating_add(Weight::from_parts(0, 10214))
			// Standard Error: 40
			.saturating_add(Weight::from_parts(15_265, 0).saturating_mul(c.into()))
			// Standard Error: 16
			.saturating_add(Weight::from_parts(361, 0).saturating_mul(i.into()))
			// Standard Error: 2_734_035
			.saturating_add(Weight::from_parts(75_459_067, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3970`
		//  Estimated: `7418`
		// Minimum execution time: 195_932_000 picoseconds.
		Weight::from_parts(185_979_775, 0)
			.saturating_add(Weight::from_parts(0, 7418))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(4_552, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2622`
		//  Estimated: `8562`
		// Minimum execution time: 100_023_000 picoseconds.
		Weight::from_parts(102_582_000, 0)
			.saturating_add(Weight::from_parts(0, 8562))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2622`
		//  Estimated: `8562 + d * (2475 ±0)`
		// Minimum execution time: 97_579_000 picoseconds.
		Weight::from_parts(102_586_442, 0)
			.saturating_add(Weight::from_parts(0, 8562))
			// Standard Error: 539_164
			.saturating_add(Weight::from_parts(28_104_257, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1968`
		//  Estimated: `5433`
		// Minimum execution time: 65_129_000 picoseconds.
		Weight::from_parts(58_146_031, 0)
			.saturating_add(Weight::from_parts(0, 5433))
			// Standard Error: 19
			.saturating_add(Weight::from_parts(14_165, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2124`
		//  Estimated: `5589`
		// Minimum execution time: 54_547_000 picoseconds.
		Weight::from_parts(56_982_000, 0)
			.saturating_add(Weight::from_parts(0, 5589))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `6532`
		// Minimum execution time: 23_181_000 picoseconds.
		Weight::from_parts(24_513_000, 0)
			.saturating_add(Weight::from_parts(0, 6532))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1968`
		//  Estimated: `5433`
		// Minimum execution time: 62_064_000 picoseconds.
		Weight::from_parts(64_293_000, 0)
			.saturating_add(Weight::from_parts(0, 5433))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1831`
		//  Estimated: `5296`
		// Minimum execution time: 50_667_000 picoseconds.
		Weight::from_parts(51_880_000, 0)
			.saturating_add(Weight::from_parts(0, 5296))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_001_000 picoseconds.
		Weight::from_parts(6_369_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_830_000 picoseconds.
		Weight::from_parts(10_325_750, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 253
			.saturating_add(Weight::from_parts(180_928, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 374_000 picoseconds.
		Weight::from_parts(483_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 281_000 picoseconds.
		Weight::from_parts(408_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn seal_to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `332`
		//  Estimated: `3797`
		// Minimum execution time: 6_031_000 picoseconds.
		Weight::from_parts(6_451_000, 0)
			.saturating_add(Weight::from_parts(0, 3797))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `469`
		//  Estimated: `3934`
		// Minimum execution time: 8_694_000 picoseconds.
		Weight::from_parts(9_206_000, 0)
			.saturating_add(Weight::from_parts(0, 3934))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 338_000 picoseconds.
		Weight::from_parts(418_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `538`
		//  Estimated: `4003`
		// Minimum execution time: 14_632_000 picoseconds.
		Weight::from_parts(15_158_000, 0)
			.saturating_add(Weight::from_parts(0, 4003))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 395_000 picoseconds.
		Weight::from_parts(466_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 317_000 picoseconds.
		Weight::from_parts(372_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(429_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 745_000 picoseconds.
		Weight::from_parts(837_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 288_000 picoseconds.
		Weight::from_parts(366_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1673`
		//  Estimated: `0`
		// Minimum execution time: 16_888_000 picoseconds.
		Weight::from_parts(17_707_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1760`
		//  Estimated: `5225`
		// Minimum execution time: 23_028_000 picoseconds.
		Weight::from_parts(24_614_000, 0)
			.saturating_add(Weight::from_parts(0, 5225))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + n * (1 ±0)`
		//  Estimated: `3769 + n * (1 ±0)`
		// Minimum execution time: 6_327_000 picoseconds.
		Weight::from_parts(7_390_064, 0)
			.saturating_add(Weight::from_parts(0, 3769))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(563, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_314_000 picoseconds.
		Weight::from_parts(2_587_120, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(580, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 312_000 picoseconds.
		Weight::from_parts(357_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 299_000 picoseconds.
		Weight::from_parts(338_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 300_000 picoseconds.
		Weight::from_parts(348_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 285_000 picoseconds.
		Weight::from_parts(356_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 658_000 picoseconds.
		Weight::from_parts(736_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 288_000 picoseconds.
		Weight::from_parts(357_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 352_000 picoseconds.
		Weight::from_parts(393_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(361_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Aura::Authorities` (r:1 w:0)
	/// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442`
		//  Estimated: `1927`
		// Minimum execution time: 27_680_000 picoseconds.
		Weight::from_parts(28_513_000, 0)
			.saturating_add(Weight::from_parts(0, 1927))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 3_835_000 picoseconds.
		Weight::from_parts(4_076_000, 0)
			.saturating_add(Weight::from_parts(0, 3495))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 294_000 picoseconds.
		Weight::from_parts(341_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_315_000 picoseconds.
		Weight::from_parts(2_551_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 422_000 picoseconds.
		Weight::from_parts(816_752, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(237, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 354_000 picoseconds.
		Weight::from_parts(407_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 274_000 picoseconds.
		Weight::from_parts(355_580, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(150, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 326_000 picoseconds.
		Weight::from_parts(517_587, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(238, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `327`
		//  Estimated: `3792`
		// Minimum execution time: 14_668_000 picoseconds.
		Weight::from_parts(15_312_000, 0)
			.saturating_add(Weight::from_parts(0, 3792))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_469_000 picoseconds.
		Weight::from_parts(5_572_750, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 3_427
			.saturating_add(Weight::from_parts(222_429, 0).saturating_mul(t.into()))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(1_256, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `653`
		// Minimum execution time: 8_498_000 picoseconds.
		Weight::from_parts(9_097_000, 0)
			.saturating_add(Weight::from_parts(0, 653))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10663`
		//  Estimated: `10663`
		// Minimum execution time: 42_351_000 picoseconds.
		Weight::from_parts(43_958_000, 0)
			.saturating_add(Weight::from_parts(0, 10663))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `653`
		// Minimum execution time: 10_093_000 picoseconds.
		Weight::from_parts(10_825_000, 0)
			.saturating_add(Weight::from_parts(0, 653))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10663`
		//  Estimated: `10663`
		// Minimum execution time: 45_321_000 picoseconds.
		Weight::from_parts(46_115_000, 0)
			.saturating_add(Weight::from_parts(0, 10663))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + o * (1 ±0)`
		//  Estimated: `252 + o * (1 ±0)`
		// Minimum execution time: 10_789_000 picoseconds.
		Weight::from_parts(11_614_608, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 96
			.saturating_add(Weight::from_parts(868, 0).saturating_mul(n.into()))
			// Standard Error: 96
			.saturating_add(Weight::from_parts(1_055, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 10_155_000 picoseconds.
		Weight::from_parts(11_662_353, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 110
			.saturating_add(Weight::from_parts(1_164, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 9_624_000 picoseconds.
		Weight::from_parts(11_058_696, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 110
			.saturating_add(Weight::from_parts(1_194, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 9_071_000 picoseconds.
		Weight::from_parts(10_100_927, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 93
			.saturating_add(Weight::from_parts(1_442, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 10_711_000 picoseconds.
		Weight::from_parts(12_449_070, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 105
			.saturating_add(Weight::from_parts(1_635, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_754_000 picoseconds.
		Weight::from_parts(1_921_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_049_000 picoseconds.
		Weight::from_parts(2_177_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_676_000 picoseconds.
		Weight::from_parts(1_840_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_744_000 picoseconds.
		Weight::from_parts(1_968_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_454_000 picoseconds.
		Weight::from_parts(1_581_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_565_000 picoseconds.
		Weight::from_parts(2_813_257, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 22
			.saturating_add(Weight::from_parts(354, 0).saturating_mul(n.into()))
			// Standard Error: 22
			.saturating_add(Weight::from_parts(451, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_396_000 picoseconds.
		Weight::from_parts(2_916_520, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 25
			.saturating_add(Weight::from_parts(412, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_134_000 picoseconds.
		Weight::from_parts(2_472_797, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 27
			.saturating_add(Weight::from_parts(516, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_080_000 picoseconds.
		Weight::from_parts(2_377_929, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 21
			.saturating_add(Weight::from_parts(167, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_866_000 picoseconds.
		Weight::from_parts(3_233_186, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3547`
		//  Estimated: `7012`
		// Minimum execution time: 102_580_000 picoseconds.
		Weight::from_parts(84_999_322, 0)
			.saturating_add(Weight::from_parts(0, 7012))
			// Standard Error: 139_838
			.saturating_add(Weight::from_parts(19_245_806, 0).saturating_mul(t.into()))
			// Standard Error: 139_838
			.saturating_add(Weight::from_parts(26_885_222, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(10, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `399 + d * (1417 ±0)`
		//  Estimated: `2641 + d * (2640 ±0)`
		// Minimum execution time: 31_239_000 picoseconds.
		Weight::from_parts(12_485_006, 0)
			.saturating_add(Weight::from_parts(0, 2641))
			// Standard Error: 80_447
			.saturating_add(Weight::from_parts(20_660_127, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(405, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2640).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1426`
		//  Estimated: `4891`
		// Minimum execution time: 35_713_000 picoseconds.
		Weight::from_parts(38_308_000, 0)
			.saturating_add(Weight::from_parts(0, 4891))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3799`
		//  Estimated: `7364`
		// Minimum execution time: 171_593_000 picoseconds.
		Weight::from_parts(94_027_601, 0)
			.saturating_add(Weight::from_parts(0, 7364))
			// Standard Error: 1_234_992
			.saturating_add(Weight::from_parts(26_056_949, 0).saturating_mul(t.into()))
			// Standard Error: 1_234_992
			.saturating_add(Weight::from_parts(44_291_013, 0).saturating_mul(d.into()))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(4_255, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_483_000 picoseconds.
		Weight::from_parts(6_039_066, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(1_344, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 836_000 picoseconds.
		Weight::from_parts(1_111_450, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(148, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_434_000 picoseconds.
		Weight::from_parts(684_056, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(3_821, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_275_000 picoseconds.
		Weight::from_parts(7_358_006, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(3_651, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_724_000 picoseconds.
		Weight::from_parts(9_876_697, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(1_477, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 866_000 picoseconds.
		Weight::from_parts(7_107_509, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_568, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 43_440_000 picoseconds.
		Weight::from_parts(33_391_803, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 9
			.saturating_add(Weight::from_parts(5_311, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 47_644_000 picoseconds.
		Weight::from_parts(48_453_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 15_406_000 picoseconds.
		Weight::from_parts(16_532_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 986_492_000 picoseconds.
		Weight::from_parts(990_120_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 928_000 picoseconds.
		Weight::from_parts(4_822_362_526, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 10_899_727
			.saturating_add(Weight::from_parts(6_001_180_715, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_088_000 picoseconds.
		Weight::from_parts(1_370_969, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 10
			.saturating_add(Weight::from_parts(29_745, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_193_000 picoseconds.
		Weight::from_parts(13_402_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `360`
		//  Estimated: `3825`
		// Minimum execution time: 11_612_000 picoseconds.
		Weight::from_parts(12_378_000, 0)
			.saturating_add(Weight::from_parts(0, 3825))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_824_000 picoseconds.
		Weight::from_parts(51_765_929, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 503
			.saturating_add(Weight::from_parts(117_411, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_570_000 picoseconds.
		Weight::from_parts(3_761_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 257
			.saturating_add(Weight::from_parts(72_511, 0).saturating_mul(r.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6288`
		// Minimum execution time: 12_465_000 picoseconds.
		Weight::from_parts(13_401_000, 0)
			.saturating_add(Weight::from_parts(0, 6288))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
