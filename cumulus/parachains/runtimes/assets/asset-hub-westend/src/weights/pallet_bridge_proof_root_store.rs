// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_bridge_proof_root_store`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 49.0.0
//! DATE: 2025-08-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tpx1c6`, CPU: `Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime
// ./target/production/wbuild/asset-hub-westend-runtime/asset_hub_westend_runtime.wasm
// --pallet
// pallet_bridge_proof_root_store
// --template
// ./substrate/.maintain/frame-weight-template.hbs
// --output
// ./cumulus/parachains/runtimes/assets/asset-hub-westend/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_bridge_proof_root_store`.
pub trait WeightInfo {
	fn note_new_roots() -> Weight;
}

/// Weights for `pallet_bridge_proof_root_store` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `AssetHubRococoProofRootStore::RootKeysPointer` (r:1 w:1)
	/// Proof: `AssetHubRococoProofRootStore::RootKeysPointer` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `AssetHubRococoProofRootStore::RootKeys` (r:1 w:1)
	/// Proof: `AssetHubRococoProofRootStore::RootKeys` (`max_values`: Some(64), `max_size`: Some(36), added: 1026, mode: `MaxEncodedLen`)
	/// Storage: `AssetHubRococoProofRootStore::Roots` (r:0 w:1)
	/// Proof: `AssetHubRococoProofRootStore::Roots` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn note_new_roots() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2016`
		// Minimum execution time: 18_329_000 picoseconds.
		Weight::from_parts(18_914_000, 2016)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `AssetHubRococoProofRootStore::RootKeysPointer` (r:1 w:1)
	/// Proof: `AssetHubRococoProofRootStore::RootKeysPointer` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `AssetHubRococoProofRootStore::RootKeys` (r:1 w:1)
	/// Proof: `AssetHubRococoProofRootStore::RootKeys` (`max_values`: Some(64), `max_size`: Some(36), added: 1026, mode: `MaxEncodedLen`)
	/// Storage: `AssetHubRococoProofRootStore::Roots` (r:0 w:1)
	/// Proof: `AssetHubRococoProofRootStore::Roots` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn note_new_roots() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2016`
		// Minimum execution time: 18_329_000 picoseconds.
		Weight::from_parts(18_914_000, 2016)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
