// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_dummy_dim`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-06-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `5e10e05adc9a`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/people-westend-runtime/people_westend_runtime.wasm
// --pallet=pallet_dummy_dim
// --header=/__w/polkadot-sdk/polkadot-sdk/cumulus/file_header.txt
// --output=./cumulus/parachains/runtimes/people/people-westend/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_dummy_dim`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_dummy_dim::WeightInfo for WeightInfo<T> {
	/// Storage: `People::NextPersonalId` (r:1 w:1)
	/// Proof: `People::NextPersonalId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::ReservedPersonalId` (r:0 w:999)
	/// Proof: `People::ReservedPersonalId` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `DummyDim::ReservedIds` (r:0 w:999)
	/// Proof: `DummyDim::ReservedIds` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 1000]`.
	fn reserve_ids(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `1493`
		// Minimum execution time: 11_798_000 picoseconds.
		Weight::from_parts(11_933_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			// Standard Error: 2_266
			.saturating_add(Weight::from_parts(2_982_888, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
	}
	/// Storage: `People::NextPersonalId` (r:1 w:0)
	/// Proof: `People::NextPersonalId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:1 w:0)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::ReservedPersonalId` (r:1 w:1)
	/// Proof: `People::ReservedPersonalId` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `DummyDim::ReservedIds` (r:0 w:1)
	/// Proof: `DummyDim::ReservedIds` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn renew_id_reservation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `130`
		//  Estimated: `3564`
		// Minimum execution time: 15_390_000 picoseconds.
		Weight::from_parts(15_823_000, 0)
			.saturating_add(Weight::from_parts(0, 3564))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `People::ReservedPersonalId` (r:1 w:1)
	/// Proof: `People::ReservedPersonalId` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `DummyDim::ReservedIds` (r:0 w:1)
	/// Proof: `DummyDim::ReservedIds` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn cancel_id_reservation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `3481`
		// Minimum execution time: 13_150_000 picoseconds.
		Weight::from_parts(13_641_000, 0)
			.saturating_add(Weight::from_parts(0, 3481))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `DummyDim::ReservedIds` (r:999 w:999)
	/// Proof: `DummyDim::ReservedIds` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:999 w:999)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::ReservedPersonalId` (r:999 w:999)
	/// Proof: `People::ReservedPersonalId` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:1 w:2)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	/// Storage: `People::CounterForKeys` (r:1 w:1)
	/// Proof: `People::CounterForKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:0 w:999)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `DummyDim::People` (r:0 w:999)
	/// Proof: `DummyDim::People` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 1000]`.
	fn recognize_personhood(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `329 + c * (47 ±0)`
		//  Estimated: `19863 + c * (2531 ±0)`
		// Minimum execution time: 36_078_000 picoseconds.
		Weight::from_parts(36_683_000, 0)
			.saturating_add(Weight::from_parts(0, 19863))
			// Standard Error: 38_803
			.saturating_add(Weight::from_parts(27_580_738, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(c.into()))
	}
	/// Storage: `People::RingsState` (r:1 w:0)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:999 w:999)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:2 w:2)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	/// Storage: `DummyDim::People` (r:999 w:999)
	/// Proof: `DummyDim::People` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 1000]`.
	fn suspend_personhood(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `374 + c * (156 ±0)`
		//  Estimated: `15050 + c * (2574 ±0)`
		// Minimum execution time: 30_954_000 picoseconds.
		Weight::from_parts(31_601_000, 0)
			.saturating_add(Weight::from_parts(0, 15050))
			// Standard Error: 38_301
			.saturating_add(Weight::from_parts(18_378_438, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2574).saturating_mul(c.into()))
	}
	/// Storage: `DummyDim::People` (r:1 w:1)
	/// Proof: `DummyDim::People` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:1 w:1)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:1 w:1)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:1 w:1)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	fn resume_personhood() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3723`
		//  Estimated: `19863`
		// Minimum execution time: 83_841_000 picoseconds.
		Weight::from_parts(88_702_000, 0)
			.saturating_add(Weight::from_parts(0, 19863))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `People::RingsState` (r:1 w:1)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	fn start_mutation_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `1487`
		// Minimum execution time: 9_082_000 picoseconds.
		Weight::from_parts(9_440_000, 0)
			.saturating_add(Weight::from_parts(0, 1487))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `People::RingsState` (r:1 w:1)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	fn end_mutation_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124`
		//  Estimated: `1487`
		// Minimum execution time: 9_681_000 picoseconds.
		Weight::from_parts(10_317_000, 0)
			.saturating_add(Weight::from_parts(0, 1487))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
