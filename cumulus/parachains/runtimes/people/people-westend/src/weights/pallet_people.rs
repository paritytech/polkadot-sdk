// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_people`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-06-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `baa511fa44f5`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/people-westend-runtime/people_westend_runtime.wasm
// --pallet=pallet_people
// --header=/__w/polkadot-sdk/polkadot-sdk/cumulus/file_header.txt
// --output=./cumulus/parachains/runtimes/people/people-westend/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_people`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_people::WeightInfo for WeightInfo<T> {
	/// Storage: `People::AccountToAlias` (r:1 w:0)
	/// Proof: `People::AccountToAlias` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `People::Root` (r:1 w:0)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	fn under_alias() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1244`
		//  Estimated: `4305`
		// Minimum execution time: 8_385_834_000 picoseconds.
		Weight::from_parts(8_420_865_000, 0)
			.saturating_add(Weight::from_parts(0, 4305))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `People::AccountToPersonalId` (r:1 w:0)
	/// Proof: `People::AccountToPersonalId` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::AliasToAccount` (r:1 w:1)
	/// Proof: `People::AliasToAccount` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `People::AccountToAlias` (r:2 w:2)
	/// Proof: `People::AccountToAlias` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn set_alias_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `745`
		//  Estimated: `6196`
		// Minimum execution time: 56_184_000 picoseconds.
		Weight::from_parts(60_583_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `People::AliasToAccount` (r:1 w:1)
	/// Proof: `People::AliasToAccount` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `People::AccountToAlias` (r:0 w:1)
	/// Proof: `People::AccountToAlias` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	fn unset_alias_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `576`
		//  Estimated: `3593`
		// Minimum execution time: 36_334_000 picoseconds.
		Weight::from_parts(39_570_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `People::NextPersonalId` (r:1 w:1)
	/// Proof: `People::NextPersonalId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:255 w:255)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:1 w:1)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	/// Storage: `People::CounterForKeys` (r:1 w:1)
	/// Proof: `People::CounterForKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:0 w:255)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::ReservedPersonalId` (r:0 w:255)
	/// Proof: `People::ReservedPersonalId` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn force_recognize_personhood(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `19863 + n * (2531 Â±0)`
		// Minimum execution time: 26_285_000 picoseconds.
		Weight::from_parts(26_859_000, 0)
			.saturating_add(Weight::from_parts(0, 19863))
			// Standard Error: 23_947
			.saturating_add(Weight::from_parts(17_258_396, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(n.into()))
	}
	/// Storage: `People::AccountToPersonalId` (r:1 w:2)
	/// Proof: `People::AccountToPersonalId` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::AccountToAlias` (r:1 w:0)
	/// Proof: `People::AccountToAlias` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:1 w:1)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn set_personal_id_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1537`
		//  Estimated: `6196`
		// Minimum execution time: 63_381_000 picoseconds.
		Weight::from_parts(67_880_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `People::People` (r:1 w:1)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::AccountToPersonalId` (r:1 w:1)
	/// Proof: `People::AccountToPersonalId` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unset_personal_id_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1537`
		//  Estimated: `3593`
		// Minimum execution time: 50_482_000 picoseconds.
		Weight::from_parts(55_600_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `People::OnboardingSize` (r:0 w:1)
	/// Proof: `People::OnboardingSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_onboarding_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_437_000 picoseconds.
		Weight::from_parts(2_592_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `People::RingsState` (r:1 w:0)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `People::CurrentRingIndex` (r:1 w:0)
	/// Proof: `People::CurrentRingIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeys` (r:2 w:2)
	/// Proof: `People::RingKeys` (`max_values`: None, `max_size`: Some(8182), added: 10657, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeysStatus` (r:1 w:2)
	/// Proof: `People::RingKeysStatus` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:2 w:0)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:126 w:0)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:126 w:126)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::Root` (r:0 w:1)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	fn merge_rings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `44773`
		//  Estimated: `325314`
		// Minimum execution time: 1_581_946_000 picoseconds.
		Weight::from_parts(1_608_676_000, 0)
			.saturating_add(Weight::from_parts(0, 325314))
			.saturating_add(T::DbWeight::get().reads(259))
			.saturating_add(T::DbWeight::get().writes(131))
	}
	/// Storage: `People::Keys` (r:2 w:2)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:1 w:1)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::KeyMigrationQueue` (r:1 w:1)
	/// Proof: `People::KeyMigrationQueue` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::CounterForKeys` (r:1 w:1)
	/// Proof: `People::CounterForKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn migrate_included_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2569`
		//  Estimated: `6052`
		// Minimum execution time: 69_016_000 picoseconds.
		Weight::from_parts(72_806_000, 0)
			.saturating_add(Weight::from_parts(0, 6052))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `People::Keys` (r:2 w:2)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:1 w:1)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:1 w:1)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	/// Storage: `People::CounterForKeys` (r:1 w:1)
	/// Proof: `People::CounterForKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn migrate_onboarding_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2421`
		//  Estimated: `19863`
		// Minimum execution time: 70_322_000 picoseconds.
		Weight::from_parts(74_854_000, 0)
			.saturating_add(Weight::from_parts(0, 19863))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `People::RingsState` (r:1 w:0)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:1 w:0)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeysStatus` (r:1 w:0)
	/// Proof: `People::RingKeysStatus` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn should_build_ring(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `277`
		//  Estimated: `4499`
		// Minimum execution time: 15_696_000 picoseconds.
		Weight::from_parts(17_796_423, 0)
			.saturating_add(Weight::from_parts(0, 4499))
			// Standard Error: 341
			.saturating_add(Weight::from_parts(522, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `People::RingKeys` (r:1 w:0)
	/// Proof: `People::RingKeys` (`max_values`: None, `max_size`: Some(8182), added: 10657, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeysStatus` (r:1 w:1)
	/// Proof: `People::RingKeysStatus` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `People::Root` (r:1 w:1)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	/// Storage: `People::Chunks` (r:2 w:0)
	/// Proof: `People::Chunks` (`max_values`: None, `max_size`: Some(6158), added: 8633, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn build_ring(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `14545 + n * (26 Â±0)`
		//  Estimated: `11647 + n * (50 Â±1)`
		// Minimum execution time: 67_766_204_000 picoseconds.
		Weight::from_parts(60_994_783_686, 0)
			.saturating_add(Weight::from_parts(0, 11647))
			// Standard Error: 10_313_289
			.saturating_add(Weight::from_parts(1_220_029_981, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 50).saturating_mul(n.into()))
	}
	/// Storage: `People::CurrentRingIndex` (r:1 w:1)
	/// Proof: `People::CurrentRingIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeys` (r:1 w:1)
	/// Proof: `People::RingKeys` (`max_values`: None, `max_size`: Some(8182), added: 10657, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeysStatus` (r:1 w:1)
	/// Proof: `People::RingKeysStatus` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:2 w:2)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingSize` (r:1 w:0)
	/// Proof: `People::OnboardingSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::RingsState` (r:1 w:0)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:1 w:0)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:255 w:0)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:255 w:255)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::ActiveMembers` (r:1 w:1)
	/// Proof: `People::ActiveMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn onboard_people() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86800`
		//  Estimated: `657360`
		// Minimum execution time: 3_096_087_000 picoseconds.
		Weight::from_parts(3_228_050_000, 0)
			.saturating_add(Weight::from_parts(0, 657360))
			.saturating_add(T::DbWeight::get().reads(520))
			.saturating_add(T::DbWeight::get().writes(262))
	}
	/// Storage: `People::PendingSuspensions` (r:1 w:0)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	fn pending_suspensions_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `378`
		//  Estimated: `4499`
		// Minimum execution time: 7_961_000 picoseconds.
		Weight::from_parts(8_865_000, 0)
			.saturating_add(Weight::from_parts(0, 4499))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `People::RingKeys` (r:1 w:1)
	/// Proof: `People::RingKeys` (`max_values`: None, `max_size`: Some(8182), added: 10657, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:1 w:1)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeysStatus` (r:1 w:1)
	/// Proof: `People::RingKeysStatus` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `People::ActiveMembers` (r:1 w:1)
	/// Proof: `People::ActiveMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::Root` (r:1 w:1)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn remove_suspended_people(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9481 + n * (4 Â±0)`
		//  Estimated: `11647`
		// Minimum execution time: 8_413_208_000 picoseconds.
		Weight::from_parts(8_463_385_968, 0)
			.saturating_add(Weight::from_parts(0, 11647))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `People::People` (r:1 w:1)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:1 w:1)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:2 w:2)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::CounterForKeys` (r:1 w:1)
	/// Proof: `People::CounterForKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:1 w:1)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	fn migrate_keys_single_included_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3039`
		//  Estimated: `19863`
		// Minimum execution time: 72_691_000 picoseconds.
		Weight::from_parts(76_812_000, 0)
			.saturating_add(Weight::from_parts(0, 19863))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `People::Keys` (r:511 w:0)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:511 w:511)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:0 w:2)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	fn merge_queue_pages() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67084`
		//  Estimated: `1316304`
		// Minimum execution time: 5_433_194_000 picoseconds.
		Weight::from_parts(5_539_720_000, 0)
			.saturating_add(Weight::from_parts(0, 1316304))
			.saturating_add(T::DbWeight::get().reads(1023))
			.saturating_add(T::DbWeight::get().writes(514))
	}
	/// Storage: `People::RingsState` (r:1 w:0)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:1 w:0)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:0)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:2 w:0)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	fn on_poll_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16705`
		//  Estimated: `38736`
		// Minimum execution time: 41_355_000 picoseconds.
		Weight::from_parts(44_393_000, 0)
			.saturating_add(Weight::from_parts(0, 38736))
			.saturating_add(T::DbWeight::get().reads(5))
	}
	/// Storage: `People::RingsState` (r:1 w:0)
	/// Proof: `People::RingsState` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `People::PendingSuspensions` (r:4 w:0)
	/// Proof: `People::PendingSuspensions` (`max_values`: None, `max_size`: Some(1034), added: 3509, mode: `MaxEncodedLen`)
	/// Storage: `People::CurrentRingIndex` (r:1 w:1)
	/// Proof: `People::CurrentRingIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeys` (r:1 w:1)
	/// Proof: `People::RingKeys` (`max_values`: None, `max_size`: Some(8182), added: 10657, mode: `MaxEncodedLen`)
	/// Storage: `People::RingKeysStatus` (r:3 w:1)
	/// Proof: `People::RingKeysStatus` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `People::QueuePageIndices` (r:1 w:1)
	/// Proof: `People::QueuePageIndices` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingQueue` (r:1 w:1)
	/// Proof: `People::OnboardingQueue` (`max_values`: None, `max_size`: Some(16398), added: 18873, mode: `MaxEncodedLen`)
	/// Storage: `People::OnboardingSize` (r:1 w:0)
	/// Proof: `People::OnboardingSize` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::Keys` (r:255 w:0)
	/// Proof: `People::Keys` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `People::People` (r:255 w:255)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	/// Storage: `People::ActiveMembers` (r:1 w:1)
	/// Proof: `People::ActiveMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `People::Root` (r:1 w:1)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	/// Storage: `People::Chunks` (r:2 w:0)
	/// Proof: `People::Chunks` (`max_values`: None, `max_size`: Some(6158), added: 8633, mode: `MaxEncodedLen`)
	fn on_idle_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69991`
		//  Estimated: `657360`
		// Minimum execution time: 353_715_085_000 picoseconds.
		Weight::from_parts(354_331_554_000, 0)
			.saturating_add(Weight::from_parts(0, 657360))
			.saturating_add(T::DbWeight::get().reads(527))
			.saturating_add(T::DbWeight::get().writes(262))
	}
	/// Storage: `People::AccountToAlias` (r:1 w:0)
	/// Proof: `People::AccountToAlias` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `People::Root` (r:1 w:0)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn as_person_alias_with_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1345`
		//  Estimated: `4305`
		// Minimum execution time: 8_398_767_000 picoseconds.
		Weight::from_parts(8_423_372_000, 0)
			.saturating_add(Weight::from_parts(0, 4305))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `People::AccountToPersonalId` (r:1 w:0)
	/// Proof: `People::AccountToPersonalId` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn as_person_identity_with_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3593`
		// Minimum execution time: 25_669_000 picoseconds.
		Weight::from_parts(27_617_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `People::Root` (r:1 w:0)
	/// Proof: `People::Root` (`max_values`: None, `max_size`: Some(840), added: 3315, mode: `MaxEncodedLen`)
	/// Storage: `People::AccountToAlias` (r:1 w:0)
	/// Proof: `People::AccountToAlias` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	fn as_person_alias_with_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1099`
		//  Estimated: `4305`
		// Minimum execution time: 40_675_247_000 picoseconds.
		Weight::from_parts(40_802_277_000, 0)
			.saturating_add(Weight::from_parts(0, 4305))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `People::People` (r:1 w:0)
	/// Proof: `People::People` (`max_values`: None, `max_size`: Some(99), added: 2574, mode: `MaxEncodedLen`)
	fn as_person_identity_with_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1326`
		//  Estimated: `3564`
		// Minimum execution time: 3_091_215_000 picoseconds.
		Weight::from_parts(3_099_194_000, 0)
			.saturating_add(Weight::from_parts(0, 3564))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
