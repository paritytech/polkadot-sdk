// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for the ambassador registration pallet.
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-04-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-machine`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_ambassador_registration
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./HEADER-APACHE2
// --output=./cumulus/pallets/ambassador-registration/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ambassador_registration.
pub trait WeightInfo {
    fn lock_dot() -> Weight;
    fn verify_introduction() -> Weight;
    fn remove_registration() -> Weight;
}

/// Weights for pallet_ambassador_registration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: AmbassadorRegistration RegistrationStatus (r:1 w:1)
    /// Proof: AmbassadorRegistration RegistrationStatus (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn lock_dot() -> Weight {
        // Minimum execution time: 31_000 nanoseconds.
        Weight::from_parts(32_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: AmbassadorRegistration RegistrationStatus (r:1 w:1)
    /// Proof: AmbassadorRegistration RegistrationStatus (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
    fn verify_introduction() -> Weight {
        // Minimum execution time: 18_000 nanoseconds.
        Weight::from_parts(19_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: AmbassadorRegistration RegistrationStatus (r:1 w:1)
    /// Proof: AmbassadorRegistration RegistrationStatus (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn remove_registration() -> Weight {
        // Minimum execution time: 35_000 nanoseconds.
        Weight::from_parts(36_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn lock_dot() -> Weight {
        // Minimum execution time: 31_000 nanoseconds.
        Weight::from_parts(32_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn verify_introduction() -> Weight {
        // Minimum execution time: 18_000 nanoseconds.
        Weight::from_parts(19_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn remove_registration() -> Weight {
        // Minimum execution time: 35_000 nanoseconds.
        Weight::from_parts(36_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}
