(function() {
    var type_impls = Object.fromEntries([["sp_application_crypto",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Pair%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Pair%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;<div class=\"where\">where\n    T: EngineBLS,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sp_application_crypto::bls381::Pair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CryptoType-for-Pair%3CT%3E\" class=\"impl\"><a href=\"#impl-CryptoType-for-Pair%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; CryptoType for <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;<div class=\"where\">where\n    T: BlsBound,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Pair\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Pair\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Pair</a> = <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The pair key type of this crypto.</div></details></div></details>","CryptoType","sp_application_crypto::bls381::Pair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pair-for-Pair%3CT%3E\" class=\"impl\"><a href=\"#impl-Pair-for-Pair%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Pair for <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;<div class=\"where\">where\n    T: BlsBound,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_vec\" class=\"method trait-impl\"><a href=\"#method.to_raw_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_raw_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get the seed for this key.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Seed\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Seed\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Seed</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">32</a>]</h4></section></summary><div class='docblock'>The type used to (minimally) encode the data required to securely create\na new key pair.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Public\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Public\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Public</a> = <a class=\"struct\" href=\"sp_application_crypto/ed25519/struct.CryptoBytes.html\" title=\"struct sp_application_crypto::ed25519::CryptoBytes\">CryptoBytes</a>&lt;sp_core::::bls::Public::{constant#0}, (PublicTag, (BlsTag, T))&gt;</h4></section></summary><div class='docblock'>The type which is used to encode a public key.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Signature\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Signature\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Signature</a> = <a class=\"struct\" href=\"sp_application_crypto/ed25519/struct.CryptoBytes.html\" title=\"struct sp_application_crypto::ed25519::CryptoBytes\">CryptoBytes</a>&lt;sp_core::::bls::Signature::{constant#0}, (SignatureTag, (BlsTag, T))&gt;</h4></section></summary><div class='docblock'>The type used to represent a signature. Can be created from a key pair and a message\nand verified with the message and a public key.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.ProofOfPossession\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ProofOfPossession\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ProofOfPossession</a> = <a class=\"struct\" href=\"sp_application_crypto/ed25519/struct.CryptoBytes.html\" title=\"struct sp_application_crypto::ed25519::CryptoBytes\">CryptoBytes</a>&lt;sp_core::::bls::ProofOfPossession::{constant#0}, (SignatureTag, (BlsTag, T))&gt;</h4></section></summary><div class='docblock'>The type used to represent proof of possession and ownership of private key is usually\none or a set of signatures. Can be created from a key pair and message (owner id) and\nand verified with the owner id and public key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_seed_slice\" class=\"method trait-impl\"><a href=\"#method.from_seed_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_seed_slice</a>(seed_slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;, SecretStringError&gt;</h4></section></summary><div class='docblock'>Make a new key pair from secret seed material. The slice must be the correct size or\nan error will be returned. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.derive\" class=\"method trait-impl\"><a href=\"#method.derive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">derive</a>&lt;Iter&gt;(\n    &amp;self,\n    path: Iter,\n    seed: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">32</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">32</a>]&gt;), DeriveError&gt;<div class=\"where\">where\n    Iter: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"sp_application_crypto/enum.DeriveJunction.html\" title=\"enum sp_application_crypto::DeriveJunction\">DeriveJunction</a>&gt;,</div></h4></section></summary><div class='docblock'>Derive a child key from a series of given junctions.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public\" class=\"method trait-impl\"><a href=\"#method.public\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">public</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::Public</h4></section></summary><div class='docblock'>Get the public key.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sign\" class=\"method trait-impl\"><a href=\"#method.sign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sign</a>(&amp;self, message: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]) -&gt; &lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::Signature</h4></section></summary><div class='docblock'>Sign a message.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method trait-impl\"><a href=\"#method.verify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">verify</a>&lt;M&gt;(\n    sig: &amp;&lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::Signature,\n    message: M,\n    pubkey: &amp;&lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::Public,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Verify a signature on a message. Returns true if the signature is good.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate\" class=\"method trait-impl\"><a href=\"#method.generate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">generate</a>() -&gt; (Self, Self::Seed)</h4></section></summary><div class='docblock'>Generate new secure (random) key pair. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_with_phrase\" class=\"method trait-impl\"><a href=\"#method.generate_with_phrase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">generate_with_phrase</a>(password: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;) -&gt; (Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, Self::Seed)</h4></section></summary><div class='docblock'>Generate new secure (random) key pair and provide the recovery phrase. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_phrase\" class=\"method trait-impl\"><a href=\"#method.from_phrase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_phrase</a>(\n    phrase: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>,\n    password: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self, Self::Seed), SecretStringError&gt;</h4></section></summary><div class='docblock'>Returns the KeyPair from the English BIP39 seed <code>phrase</code>, or an error if it’s invalid.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_seed\" class=\"method trait-impl\"><a href=\"#method.from_seed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_seed</a>(seed: &amp;Self::Seed) -&gt; Self</h4></section></summary><div class='docblock'>Generate new key pair from the provided <code>seed</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_string_with_seed\" class=\"method trait-impl\"><a href=\"#method.from_string_with_seed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_string_with_seed</a>(\n    s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>,\n    password_override: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::Seed&gt;), SecretStringError&gt;</h4></section></summary><div class='docblock'>Interprets the string <code>s</code> in order to generate a key Pair. Returns both the pair and an\noptional seed, in the case that the pair can be expressed as a direct derivation from a seed\n(some cases, such as Sr25519 derivations with path components, cannot). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_string\" class=\"method trait-impl\"><a href=\"#method.from_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_string</a>(\n    s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>,\n    password_override: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, SecretStringError&gt;</h4></section></summary><div class='docblock'>Interprets the string <code>s</code> in order to generate a key pair. <a>Read more</a></div></details></div></details>","Pair","sp_application_crypto::bls381::Pair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ProofOfPossessionGenerator-for-Pair%3CT%3E\" class=\"impl\"><a href=\"#impl-ProofOfPossessionGenerator-for-Pair%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ProofOfPossessionGenerator for <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;<div class=\"where\">where\n    T: BlsBound,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_proof_of_possession\" class=\"method trait-impl\"><a href=\"#method.generate_proof_of_possession\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">generate_proof_of_possession</a>(\n    &amp;mut self,\n    owner: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>],\n) -&gt; &lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::ProofOfPossession</h4></section></summary><div class=\"docblock\"><p>Generate proof of possession for BLS12 curves.</p>\n<p>Signs on:</p>\n<ul>\n<li>owner as sort of back cert and proof of ownership to prevent front runner attack</li>\n<li>on its own public key with unique context to prevent rougue key attack on aggregation</li>\n</ul>\n</div></details></div></details>","ProofOfPossessionGenerator","sp_application_crypto::bls381::Pair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ProofOfPossessionVerifier-for-Pair%3CT%3E\" class=\"impl\"><a href=\"#impl-ProofOfPossessionVerifier-for-Pair%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ProofOfPossessionVerifier for <a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt;<div class=\"where\">where\n    T: BlsBound,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify_proof_of_possession\" class=\"method trait-impl\"><a href=\"#method.verify_proof_of_possession\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">verify_proof_of_possession</a>(\n    owner: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>],\n    proof_of_possession: &amp;&lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::ProofOfPossession,\n    allegedly_possessed_pubkey: &amp;&lt;<a class=\"struct\" href=\"sp_application_crypto/bls381/struct.BLS_Pair.html\" title=\"struct sp_application_crypto::bls381::BLS_Pair\">Pair</a>&lt;T&gt; as Pair&gt;::Public,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Verify both proof of ownership (back cert) and proof of possession of the private key</p>\n</div></details></div></details>","ProofOfPossessionVerifier","sp_application_crypto::bls381::Pair"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[20084]}