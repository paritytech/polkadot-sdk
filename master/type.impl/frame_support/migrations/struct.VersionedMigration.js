(function() {var type_impls = {
"cumulus_pallet_xcmp_queue":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","cumulus_pallet_xcmp_queue::migration::v5::MigrateV4ToV5","cumulus_pallet_xcmp_queue::migration::v2::MigrationToV2","cumulus_pallet_xcmp_queue::migration::v3::MigrationToV3","cumulus_pallet_xcmp_queue::migration::v4::MigrationToV4"]],
"pallet_bridge_messages":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_bridge_messages::migration::v1::MigrationToV1"]],
"pallet_bridge_relayers":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_bridge_relayers::migration::v1::MigrationToV1"]],
"pallet_broker":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_broker::migration::MigrateV0ToV1","pallet_broker::migration::MigrateV1ToV2","pallet_broker::migration::MigrateV2ToV3","pallet_broker::migration::MigrateV3ToV4"]],
"pallet_child_bounties":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_child_bounties::migration::MigrateV0ToV1"]],
"pallet_collator_selection":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_collator_selection::migration::v2::MigrationToV2"]],
"pallet_core_fellowship":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_core_fellowship::migration::MigrateV0ToV1"]],
"pallet_example_single_block_migrations":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_example_single_block_migrations::migrations::v1::MigrateV0ToV1"]],
"pallet_grandpa":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_grandpa::migrations::v5::MigrateV4ToV5"]],
"pallet_identity":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_identity::migration::versioned::V0ToV1"]],
"pallet_nomination_pools":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_nomination_pools::migration::versioned::V7ToV8","pallet_nomination_pools::migration::versioned::V6ToV7","pallet_nomination_pools::migration::versioned::V5toV6"]],
"pallet_society":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_society::migrations::MigrateToV2"]],
"pallet_staking":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_staking::migrations::v16::MigrateV15ToV16","pallet_staking::migrations::v15::MigrateV14ToV15"]],
"pallet_uniques":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_uniques::migration::MigrateV0ToV1"]],
"pallet_xcm":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","pallet_xcm::migration::v1::MigrateToV1"]],
"polkadot_runtime_common":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","polkadot_runtime_common::assigned_slots::migration::v1::MigrateToV1","polkadot_runtime_common::paras_registrar::migration::MigrateToV1"]],
"polkadot_runtime_parachains":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-VersionedMigration%3CFROM,+TO,+Inner,+Pallet,+DbWeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const FROM: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, const TO: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>, Inner, Pallet, DbWeight&gt; OnRuntimeUpgrade for VersionedMigration&lt;FROM, TO, Inner, Pallet, DbWeight&gt;<div class=\"where\">where\n    Inner: UncheckedOnRuntimeUpgrade,\n    Pallet: GetStorageVersion&lt;InCodeStorageVersion = StorageVersion&gt; + PalletInfoAccess,\n    DbWeight: Get&lt;RuntimeDbWeight&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of the <code>OnRuntimeUpgrade</code> trait for <code>VersionedMigration</code>.</p>\n<p>Its main function is to perform the runtime upgrade in <code>on_runtime_upgrade</code> only if the on-chain\nversion of the pallets storage matches <code>From</code>, and after the upgrade set the on-chain storage to\n<code>To</code>. If the versions do not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_upgrade\" class=\"method trait-impl\"><a href=\"#method.pre_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pre_upgrade</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes pre_upgrade if the migration will run, and wraps the pre_upgrade bytes in\n[<code>VersionedPostUpgradeData</code>] before passing them to post_upgrade, so it knows whether the\nmigration ran or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Executes the versioned runtime upgrade.</p>\n<p>First checks if the pallets on-chain storage version matches the version of this upgrade. If\nit matches, it calls <code>Inner::on_runtime_upgrade</code>, updates the on-chain version, and returns\nthe weight. If it does not match, it writes a log notifying the developer that the migration\nis a noop.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_upgrade\" class=\"method trait-impl\"><a href=\"#method.post_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">post_upgrade</a>(\n    versioned_post_upgrade_data_bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Executes <code>Inner::post_upgrade</code> if the migration just ran.</p>\n<p>pre_upgrade passes [<code>VersionedPostUpgradeData::MigrationExecuted</code>] to post_upgrade if\nthe migration ran, and [<code>VersionedPostUpgradeData::Noop</code>] otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.try_on_runtime_upgrade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_on_runtime_upgrade</a>(checks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Weight, DispatchError&gt;</h4></section></summary><div class='docblock'>The expected and default behavior of this method is to handle executing <code>pre_upgrade</code> -&gt;\n<code>on_runtime_upgrade</code> -&gt; <code>post_upgrade</code> hooks for a migration. <a>Read more</a></div></details></div></details>","OnRuntimeUpgrade","polkadot_runtime_parachains::configuration::migration::v10::MigrateToV10","polkadot_runtime_parachains::configuration::migration::v11::MigrateToV11","polkadot_runtime_parachains::configuration::migration::v12::MigrateToV12","polkadot_runtime_parachains::inclusion::migration::v1::MigrateToV1","polkadot_runtime_parachains::on_demand::migration::MigrateV0ToV1","polkadot_runtime_parachains::scheduler::migration::MigrateV0ToV1","polkadot_runtime_parachains::scheduler::migration::MigrateV1ToV2","polkadot_runtime_parachains::scheduler::migration::MigrateV2ToV3","polkadot_runtime_parachains::shared::migration::MigrateToV1"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()