(function() {
    var type_impls = Object.fromEntries([["yet_another_parachain_runtime",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SharedData%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sc_consensus/shared_data.rs.html#182\">Source</a><a href=\"#impl-Clone-for-SharedData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedData\">SharedData</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sc_consensus/shared_data.rs.html#183\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedData\">SharedData</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","yet_another_parachain_runtime::sc_consensus_epochs::SharedEpochChanges"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SharedData%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sc_consensus/shared_data.rs.html#188\">Source</a><a href=\"#impl-SharedData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedData\">SharedData</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/sc_consensus/shared_data.rs.html#190\">Source</a><h4 class=\"code-header\">pub fn <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html#tymethod.new\" class=\"fn\">new</a>(shared_data: T) -&gt; <a class=\"struct\" href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedData\">SharedData</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new instance of <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedData\"><code>SharedData</code></a> to share the given <code>shared_data</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shared_data\" class=\"method\"><a class=\"src rightside\" href=\"src/sc_consensus/shared_data.rs.html#205\">Source</a><h4 class=\"code-header\">pub fn <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html#tymethod.shared_data\" class=\"fn\">shared_data</a>(&amp;self) -&gt; MappedMutexGuard&lt;'_, RawMutex, T&gt;</h4></section></summary><div class=\"docblock\"><p>Acquire access to the shared data.</p>\n<p>This will give mutable access to the shared data. After the returned mutex guard is dropped,\nthe shared data is accessible by other threads. So, this function should be used when\nreading/writing of the shared data in a local context is required.</p>\n<p>When requiring to lock shared data for some longer time, even with temporarily releasing the\nlock, <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html#method.shared_data_locked\" title=\"method yet_another_parachain_runtime::sc_consensus::shared_data::SharedData::shared_data_locked\"><code>Self::shared_data_locked</code></a> should be used.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shared_data_locked\" class=\"method\"><a class=\"src rightside\" href=\"src/sc_consensus/shared_data.rs.html#225\">Source</a><h4 class=\"code-header\">pub fn <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html#tymethod.shared_data_locked\" class=\"fn\">shared_data_locked</a>(&amp;self) -&gt; <a class=\"struct\" href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedDataLocked.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedDataLocked\">SharedDataLocked</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Acquire access to the shared data and lock it.</p>\n<p>This will give mutable access to the shared data. The returned <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedDataLocked.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedDataLocked\"><code>SharedDataLocked</code></a>\nprovides the function <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedDataLocked.html#method.release_mutex\" title=\"method yet_another_parachain_runtime::sc_consensus::shared_data::SharedDataLocked::release_mutex\"><code>SharedDataLocked::release_mutex</code></a> to release the mutex, but\nkeeping the data locked. This is useful in async contexts for example where the data needs\nto be locked, but a mutex guard can not be held.</p>\n<p>For an example see <a href=\"yet_another_parachain_runtime/sc_consensus/shared_data/struct.SharedData.html\" title=\"struct yet_another_parachain_runtime::sc_consensus::shared_data::SharedData\"><code>SharedData</code></a>.</p>\n</div></details></div></details>",0,"yet_another_parachain_runtime::sc_consensus_epochs::SharedEpochChanges"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[6968]}