searchState.loadedDescShard("pallet_nft_fractionalization", 0, "NFT Fractionalization Pallet\nBenchmark Helper\nStores the details of a fractionalized item.\nA <code>Type</code> definition with optional metadata.\nReturns an asset id from a given integer.\nMinted asset.\nAccount that fractionalized an item.\nCreate a <code>TypeBuilder</code> the public API for constructing a <code>Type</code>…\nCreate a <code>TypeBuilder</code> the public API for constructing a <code>Type</code>…\nReturns a collection id from a given integer.\nReserved deposit for creating a new asset.\nReturns the documentation of the type\nDocumentation\nNumber of fractions minted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Type</code>.\nReturns an nft id from a given integer.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturns the path of the type\nThe unique path to the type. Can be empty for built-in …\nReturns the definition of the type\nThe actual type definition\nReturns the generic type parameters of the type\nThe generic type parameters of the type in use. Empty for …\nAutogenerated weights for <code>pallet_nft_fractionalization</code>\nThe type used to describe the amount of fractions …\nThe type used to identify the assets created during …\nRegistry for the minted assets.\nA set of helper functions for benchmarking.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency mechanism, used for paying for deposits.\nThe deposit paid by the user locking an NFT. The deposit …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nReserved for a fractionalized NFT.\nA reason for the pallet placing a hold on funds.\nAsset ID does not correspond to locked NFT.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe newly created asset’s name.\nThe newly created asset’s symbol.\nIdentifier for the collection of NFT.\nAn NFT was successfully fractionalized.\nThe type used to identify an NFT within a collection.\nNFT doesn’t exist.\nNFT has not yet been fractionalised.\nKeeps track of the corresponding NFT ID, asset ID and …\nAn NFT was successfully returned back.\nRegistry for minted NFTs.\nThe signing account has no permission to do the operation.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s id, used for deriving its sovereign account …\nThe overarching event type.\nOverarching hold reason.\nThe maximum length of a name or symbol stored on-chain.\nWeight information for extrinsics in this pallet.\nAuto-generated docs-only module listing all defined …\nLock the NFT and mint a new fungible asset.\nLock the NFT and mint a new fungible asset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>fractionalize</code>.\nCreate a call with the variant <code>unify</code>.\nAn auto-generated getter for <code>NftToAsset</code>.\nAuto-generated docs-only module listing all (public and …\nBurn the total issuance of the fungible asset and return …\nBurn the total issuance of the fungible asset and return …\nLock the NFT and mint a new fungible asset.\nBurn the total issuance of the fungible asset and return …\nKeeps track of the corresponding NFT ID, asset ID and …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_nft_fractionalization</code> using the …\nWeight functions needed for <code>pallet_nft_fractionalization</code>.\nStorage: <code>Nfts::Item</code> (r:1 w:0) Proof: <code>Nfts::Item</code> (<code>max_values</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>NftFractionalization::NftToAsset</code> (r:1 w:1) Proof: …")