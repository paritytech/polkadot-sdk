searchState.loadedDescShard("pallet_society", 0, "Society Pallet\nThe suspension judgement origin approves of the candidate…\nMember is banned from vouching for other members.\nA bid for entry into society.\nA vote by a member on a candidate application.\nA bid for entry into society.\nThe given deposit was paid for this bid.\nSimple ensure origin struct to filter for the founder …\nRecord for an individual new member who was elevated from …\nA judgement by the suspension judgement origin on a …\nInformation concerning a member.\nDetails of a payout given as a per-block linear “trickle…\nInformation concerning a member.\nThe rank of a member.\nThe suspension judgement origin takes no direct judgment …\nThe suspension judgement origin has rejected the candidate…\nThe index of a round of candidates.\nNumber of strikes that a member has against them.\nTally of votes.\nThe number of votes.\nA member vouched for this bid. The account should be …\nMember is currently vouching for a user.\nStatus of a vouching member.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigrations for Society Pallet\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_society</code>\n<code>VersionUncheckedMigrateToV2</code> wrapped in a …\nThis migration moves all the state to v2 of Society.\nWill panic if there are any inconsistencies in the pallet…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nUser has already made a bid.\nUser is already a candidate.\nThe member is already elevated to this rank.\nSociety already founded.\nUser is already a member.\nThe skeptic has already been punished for this offence.\nMember is already vouching or banned from vouching again.\nThe candidacy cannot be dropped as the candidate was …\nA candidate was dropped (due to an excess of bids in the …\nA candidate was dropped (due to an excess of bids in the …\nA membership bid just happened. The given account is the …\nA membership bid just happened. The given account is the …\nContains a variant per dispatchable extrinsic that this …\nA candidate has been suspended\nA candidate has been suspended\nStorage type is <code>StorageMap</code> with key type <code>T :: AccountId</code> …\nThe number of blocks between membership challenges.\nA member has been challenged\nA member has been challenged\nThe number of blocks on which new candidates can claim …\nConfiguration trait of this pallet.\nThe currency type used for bidding.\nA vote has been placed for a defending member\nA vote has been placed for a defending member\nSome funds were deposited into the society account.\nSome funds were deposited into the society account.\nA [member] got elevated to [rank].\nA [member] got elevated to [rank].\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe skeptic need not vote on candidates from expired …\nThe society is founded by the given identity.\nThe society is founded by the given identity.\nThe first member.\nCannot remove the founder.\nThe origin that is allowed to call <code>found</code>.\nCan be used to configure the genesis state of this pallet.\nThe maximum number of strikes before a member gets funds …\nThe most primary from the most recently approved rank 0 …\nCannot remove the head of the chain.\nThe candidacy cannot be concluded as the voting is still …\nA group of candidates have been inducted. The batch’s …\nA group of candidates have been inducted. The batch’s …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nFunds are insufficient to pay off society debts.\nNot enough in pot to accept candidate.\nThe maximum number of bids at once.\nThe maximum duration of the payout lock.\nToo many members in the society.\nThe maximum number of payouts a member may have waiting …\nThe current items in <code>Members</code> keyed by their unique index. …\nThe number of items in <code>Members</code> currently. (Doesn’t …\nA member has been suspended\nA member has been suspended\nThe current members and their rank. Doesn’t include …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new set of [params] has been set for the group.\nA new set of [params] has been set for the group.\nAt the end of the claim period, this contains the most …\nThere is no defender currently.\nNothing to payout.\nThe candidate/defender has no stale votes to remove.\nThe membership cannot be claimed as the candidate was not …\nUser is not a bidder.\nUser is not a candidate.\nThe caller is not the founder.\nGroup doesn’t exist.\nThe caller is not the head.\nUser is not a member.\nThe candidate cannot be kicked as the candidate was not …\nUser is not suspended.\nMember is not vouching.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe societies’s pallet id\nInformation regarding rank-0 payouts, past and future.\nThe amount of incentive paid within each period. Doesn’t …\nAmount of our account balance that is specifically for the …\nSomething that provides randomness in the runtime.\nOld name generated by <code>decl_event</code>.\nThe candidacy cannot be bestowed as the candidate was …\nThe number of rounds which have passed.\nA hash of the rules of this society concerning membership. …\nThe overarching event type.\nThe current skeptic.\nUser is suspended.\nA suspended member has been judged.\nA suspended member has been judged.\nThe set of suspended members, with their old membership …\nThe candidacy cannot be pruned until a full additional …\nA candidate was dropped (by their request).\nA candidate was dropped (by their request).\nSociety is unfounded.\nSociety is unfounded.\nA candidate was dropped (by request of who vouched for …\nA candidate was dropped (by request of who vouched for …\nA vote has been placed\nA vote has been placed\nThe skeptic already voted.\nThe number of blocks on which new candidates should be …\nA membership bid just happened by vouching. The given …\nA membership bid just happened by vouching. The given …\nWeight information for extrinsics in this pallet.\nThe account ID of the treasury pot.\nTransform an approved candidate into a member. Callable …\nTransform an approved candidate into a member. Callable …\nA user outside of the society can make a bid for entry.\nA user outside of the society can make a bid for entry.\nTransform an approved candidate into a member. Callable …\nTransform an approved candidate into a member. Callable …\nRemove up to <code>max</code> stale votes for the given <code>candidate</code>.\nRemove up to <code>max</code> stale votes for the given <code>candidate</code>.\nRemove up to <code>max</code> stale votes for the defender in the given …\nRemove up to <code>max</code> stale votes for the defender in the given …\nAs a member, vote on the defender.\nAs a member, vote on the defender.\nAuto-generated docs-only module listing all defined …\nDissolve the society and remove all members.\nDissolve the society and remove all members.\nRemove a <code>candidate</code>’s failed application from the …\nRemove a <code>candidate</code>’s failed application from the …\nFound the society.\nFound the society.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow suspension judgement origin to make judgement on a …\nAllow suspension judgement origin to make judgement on a …\nRemove the candidate’s application from the society. …\nRemove the candidate’s application from the society. …\nCreate a call with the variant <code>bestow_membership</code>.\nCreate a call with the variant <code>bid</code>.\nCreate a call with the variant <code>claim_membership</code>.\nCreate a call with the variant <code>cleanup_candidacy</code>.\nCreate a call with the variant <code>cleanup_challenge</code>.\nCreate a call with the variant <code>defender_vote</code>.\nCreate a call with the variant <code>dissolve</code>.\nCreate a call with the variant <code>drop_candidate</code>.\nCreate a call with the variant <code>found_society</code>.\nCreate a call with the variant <code>judge_suspended_member</code>.\nCreate a call with the variant <code>kick_candidate</code>.\nCreate a call with the variant <code>payout</code>.\nCreate a call with the variant <code>punish_skeptic</code>.\nCreate a call with the variant <code>resign_candidacy</code>.\nCreate a call with the variant <code>set_parameters</code>.\nCreate a call with the variant <code>unbid</code>.\nCreate a call with the variant <code>unvouch</code>.\nCreate a call with the variant <code>vote</code>.\nCreate a call with the variant <code>vouch</code>.\nCreate a call with the variant <code>waive_repay</code>.\nTransfer the first matured payout for the sender and …\nTransfer the first matured payout for the sender and …\nThe account ID of the payouts pot. This is where payouts …\nPunish the skeptic with a strike if they did not vote on a …\nPunish the skeptic with a strike if they did not vote on a …\nRemove a member from the members list and return the …\nRemove the candidate’s application from the society. …\nRemove the candidate’s application from the society. …\nRemove a selection of bidding accounts such that the total …\nChange the maximum number of members in society and the …\nChange the maximum number of members in society and the …\nAuto-generated docs-only module listing all (public and …\nA bidder can remove their bid for entry into society. By …\nA bidder can remove their bid for entry into society. By …\nAs a vouching member, unvouch a bid. This only works while …\nAs a vouching member, unvouch a bid. This only works while …\nAs a member, vote on a candidate.\nAs a member, vote on a candidate.\nAs a member, vouch for someone to join society by placing …\nAs a member, vouch for someone to join society by placing …\nRepay the payment previously given to the member with the …\nRepay the payment previously given to the member with the …\nTransform an approved candidate into a member. Callable …\nA user outside of the society can make a bid for entry.\nTransform an approved candidate into a member. Callable …\nRemove up to <code>max</code> stale votes for the given <code>candidate</code>.\nRemove up to <code>max</code> stale votes for the defender in the given …\nAs a member, vote on the defender.\nDissolve the society and remove all members.\nRemove a <code>candidate</code>’s failed application from the …\nFound the society.\nAllow suspension judgement origin to make judgement on a …\nRemove the candidate’s application from the society. …\nTransfer the first matured payout for the sender and …\nPunish the skeptic with a strike if they did not vote on a …\nRemove the candidate’s application from the society. …\nChange the maximum number of members in society and the …\nA bidder can remove their bid for entry into society. By …\nAs a vouching member, unvouch a bid. This only works while …\nAs a member, vote on a candidate.\nAs a member, vouch for someone to join society by placing …\nRepay the payment previously given to the member with the …\nThe current bids, stored ordered by the value of the bid.\nWarning: Doc-Only\nThe number of challenge rounds there have been. Used to …\nVotes for the defender, keyed by challenge round.\nThe defending member currently being challenged, along …\nThe first member.\nThe most primary from the most recently approved rank 0 …\nThe current items in <code>Members</code> keyed by their unique index. …\nThe number of items in <code>Members</code> currently. (Doesn’t …\nThe current members and their rank. Doesn’t include …\nAt the end of the claim period, this contains the most …\nThe max number of members for the society at one time.\nInformation regarding rank-0 payouts, past and future.\nAmount of our account balance that is specifically for the …\nThe number of rounds which have passed.\nA hash of the rules of this society concerning membership. …\nThe current skeptic.\nThe set of suspended members, with their old membership …\nClear-cursor for Vote, map from Candidate -&gt; (Maybe) …\nDouble map from Candidate -&gt; Voter -&gt; (Maybe) Vote.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_society</code> using the Substrate node and …\nWeight functions needed for <code>pallet_society</code>.\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Candidates</code> (r:1 w:0) Proof: …\nStorage: <code>Society::ChallengeRoundCount</code> (r:1 w:0) Proof: …\nStorage: <code>Society::Defending</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Founder</code> (r:1 w:1) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Head</code> (r:1 w:1) Proof: <code>Society::Head</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Members</code> (r:1 w:0) Proof: <code>Society::Members</code>…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Members</code> (r:1 w:1) Proof: <code>Society::Members</code>…")