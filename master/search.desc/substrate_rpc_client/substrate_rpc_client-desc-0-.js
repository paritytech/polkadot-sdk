searchState.loadedDescShard("substrate_rpc_client", 0, "Shared JSON-RPC client related code and abstractions.\nClient implementation for the <code>AuthorApi</code> RPC API.\nRequest builder that serializes RPC parameters to …\nJSON-RPC error which can occur when a JSON-RPC call fails.\nClient implementation for the <code>ChainApi</code> RPC API.\nClient implementation for the <code>ChildStateApi</code> RPC API.\nJSON-RPC client interface that can make requests and …\nCustom error.\nClient implementation for the <code>DevApi</code> RPC API.\nEmpty batch request.\nContains the error value\nError type.\nStream of all finalized headers.\nAbstraction over RPC calling for headers.\nAbstraction over RPC subscription for finalized headers.\nNot implemented for HTTP clients.\nInvalid request ID.\nInvalid subscription ID.\nClient implementation for the <code>OffchainApi</code> RPC API.\nContains the success value\nFailed to parse the data.\nThe error returned when registering a method or …\nRequest timeout\nThe background task has been terminated.\nJSON-RPC result.\nClient implementation for the <code>StateApi</code> RPC API.\nRepresent a client-side subscription which is implemented …\nJSON-RPC client interface that can make requests, …\nClient implementation for the <code>SystemApi</code> RPC API.\nNetworking error or error on the low-level protocol layer.\nGeneric asynchronous client.\nBuilder for <code>WsClient</code>.\nSend a batch request.\nGet header and body of a block.\nGet hash of the n-th block in the canon chain.\nReexecute the specified <code>block_hash</code> and gather statistics …\nBuild the <code>WsClient</code> with specified URL to connect to, using …\nFinish the building process and return a valid batch …\nBuild the <code>WsClient</code> with specified data stream, using …\nBuild the <code>WsClient</code> with specified <code>TransportSenderT</code> …\nCreate a builder for the server.\nCall a method from the runtime API at a block’s state.\nThe reason why the subscription was closed.\nSee documentation …\nSee documentation <code>ClientBuilder::disable_ws_ping</code>\nThis is similar to <code>Client::on_disconnect</code> but it can be …\nSee documentation <code>ClientBuilder::enable_ws_ping</code> (disabled …\nGet hash of the last finalized block in the canon chain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAwaits for the header of the block with hash <code>hash</code>.\nGet offchain local storage under given key and prefix.\nChecks if the keystore has private keys for the given …\nChecks if the keystore has private keys for the given …\nGet header.\nSee documentation for <code>ClientBuilder::id_format</code> (default is …\nInserts the RPC method with provided parameters into the …\nInsert a key into the keystore.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the client is connected to the target.\nGet an iterator over the batch request.\nReturn the subscription type and, if applicable, ID.\nSee documentation …\nSee documentation <code>ClientBuilder::max_concurrent_requests</code> …\nSee documentation …\nSee documentation …\nSee documentation …\nReturns the runtime metadata as an opaque blob.\nCreate a new WebSocket client builder.\nConstruct a new <code>BatchRequestBuilder</code>.\nGet the next finalized header.\nReturns the next notification from the stream. This may …\nAwait for the next finalized header from the subscription.\nSend a notification request\nCompletes when the client is disconnected or the client’…\nReturns all pending extrinsics, potentially grouped by …\nQuery historical storage entries (by key) starting from a …\nQuery storage entries (by key) at a block hash given as …\nReturns proof of storage for child key entries at a …\nReturns proof of storage entries at a specific block’s …\nRemove given extrinsic from the pool and temporarily ban …\nSend a method call request.\nSee documentation <code>ClientBuilder::request_timeout</code> (default …\nGenerate new session keys and returns the corresponding …\nConvert the given values to a <code>crate::params::ArrayParams</code> …\nGet the runtime version.\nSee documentation <code>WsTransportClientBuilder::set_headers</code> …\nSet offchain local storage under given key and prefix.\nSet maximum length for logging calls and responses.\nSee documentation <code>ClientBuilder::set_tcp_no_delay</code> (default …\nReturns a child storage entry at a specific block’s …\nReturns a storage entry at a specific block’s state.\nReturns child storage entries for multiple keys at a …\nReturns the hash of a child storage entry at a block’s …\nReturns the hash of a storage entry at a block’s state.\nReturns the keys with prefix from a child storage, leave …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix from a child storage with …\nReturns the keys with prefix with pagination support. Up …\nReturns the keys with prefix, leave empty to get all the …\nReturns the size of a child storage entry at a block’s …\nReturns the size of a storage entry at a block’s state.\nSubmit hex-encoded extrinsic for inclusion in block.\nInitiate a subscription by performing a JSON-RPC method …\nSend a subscription request to the server.\nAll head subscription.\nFinalized head subscription.\nNew head subscription.\nNew runtime version subscription\nNew storage subscription\nRegister a method subscription, this is used to filter …\nSubscribe to a specific method.\nAdds the supplied directives to the current log filter\nAdds a reserved peer. Returns the empty string or an …\nGet the chain’s name. Given as a string identifier.\nReturn health status of the node.\nReturns the multi-addresses that the local node is …\nReturns the base58-encoded PeerId of the node.\nGet the node’s implementation name. Plain old string.\nReturns current state of the network.\nReturns the roles the node is running as.\nReturns currently connected peers\nGet a custom set of properties as a JSON object, defined …\nRemove a reserved peer. Returns the empty string or an …\nReturns the list of reserved peers\nResets the log filter to Substrate defaults\nReturns the state of the syncing of the node: starting …\nGet the chain’s type.\nGet the node implementation’s version. Should be a …\nThe <code>traceBlock</code> RPC provides a way to trace the …\nUnsubscribe and consume the subscription.\nSubmit an extrinsic to watch.\nForce to use a custom certificate store.\nCreate a new <code>WebSocket</code> connection with shared settings.")