searchState.loadedDescShard("pallet_beefy", 0, "BEEFY equivocation offence report.\nBEEFY equivocation offence report system.\nA round number and set id which point on the time of an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe authority which produced this equivocation.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRound number.\nThe session index in which the incident happened.\nBEEFY Set ID.\nTime slot at which this incident happened.\nThe size of the validator set at the time of the offence.\nHook for checking commitment canonicity.\nThe current authorities set\nAuthority identifier type\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA given equivocation report is valid but already …\nThe equivocation handling subsystem.\nThe <code>Error</code> enum of this pallet.\nBlock number where BEEFY consensus is enabled/started. By …\nCan be used to configure the genesis state of this pallet.\nSubmitted configuration is invalid.\nA double voting proof provided as part of an equivocation …\nThe session of the equivocation proof is invalid\nA fork voting proof provided as part of an equivocation …\nA future block voting proof provided as part of an …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nThe maximum number of authorities that can be added.\nThe maximum number of nominators for each validator.\nThe maximum number of entries to keep in the set id to …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAuthorities set scheduled to be used with the next session\nA hook to act on the new BEEFY validator set.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA mapping from BEEFY set ID to the index of the <em>most recent</em>…\nThe current validator set id\nWeights for this pallet.\nInitial set of BEEFY authorities.\nAuto-generated docs-only module listing all defined …\nEnsure the correctness of the state of this pallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBlock number where BEEFY consensus should start. Should …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>report_double_voting</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>report_fork_voting</code>.\nCreate a call with the variant <code>report_fork_voting_unsigned</code>.\nCreate a call with the variant <code>report_future_block_voting</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_new_genesis</code>.\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReset BEEFY consensus by setting a new BEEFY genesis at …\nReset BEEFY consensus by setting a new BEEFY genesis at …\nAuto-generated docs-only module listing all (public and …\nSubmits an extrinsic to report a double voting …\nSubmits an extrinsic to report a fork voting equivocation. …\nSubmits an extrinsic to report a future block voting …\nReturn the current active BEEFY validator set.\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReset BEEFY consensus by setting a new BEEFY genesis at …\nThe current authorities set\nBlock number where BEEFY consensus is enabled/started. By …\nAuthorities set scheduled to be used with the next session\nA mapping from BEEFY set ID to the index of the <em>most recent</em>…\nThe current validator set id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")