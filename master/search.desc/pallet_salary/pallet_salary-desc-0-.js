searchState.loadedDescShard("pallet_salary", 0, "Make periodic payment to members of a ranked collective …\nAmount attempted to be paid when last active as well as …\nThe state of a specific payment claim.\nThe status of a single payee/claimant.\nPayroll cycle.\nNo claim recorded.\nAmount reserved when last active.\nThe status of the pallet instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_salary</code>\nThe account is already inducted.\nThe salary system has already been started.\nThere is no budget left for the payout.\nThe total budget per cycle.\nContains a variant per dispatchable extrinsic that this …\nThe member’s claim is zero.\nConfiguration trait of this pallet.\nThe next cycle begins.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe payment has neither failed nor succeeded yet.\nA member is inducted into the payroll.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe current membership of payees.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe member does not have a current valid claim.\nThe cycle is after that in which the payment was made.\nThe account is not a ranked member.\nThe payout cycles have not yet started.\nCycle is not yet over.\nA payment happened.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere was some issue with the mechanism of payment.\nMeans by which we can make payments to accounts. This also …\nThe number of blocks within a cycle which accounts have to …\nA member registered for a payout.\nThe number of blocks within a cycle which accounts have to …\nThe runtime event type.\nThe maximum payout to be made for a single period to an …\nA member swapped their account.\nCurrent cycle’s payment period is not yet begun.\nCurrent cycle’s registration period is over.\nWeight information for extrinsics in this pallet.\nMove to next payout cycle, assuming that the present block …\nMove to next payout cycle, assuming that the present block …\nUpdate a payment’s status; if it failed, alter the state …\nUpdate a payment’s status; if it failed, alter the state …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInduct oneself into the payout system.\nInduct oneself into the payout system.\nStart the first payout cycle.\nStart the first payout cycle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>bump</code>.\nCreate a call with the variant <code>check_payment</code>.\nCreate a call with the variant <code>induct</code>.\nCreate a call with the variant <code>init</code>.\nCreate a call with the variant <code>payout</code>.\nCreate a call with the variant <code>payout_other</code>.\nCreate a call with the variant <code>register</code>.\nRequest a payout.\nRequest a payout.\nRequest a payout to a secondary account.\nRequest a payout to a secondary account.\nRegister for a payout.\nRegister for a payout.\nAuto-generated docs-only module listing all (public and …\nMove to next payout cycle, assuming that the present block …\nUpdate a payment’s status; if it failed, alter the state …\nInduct oneself into the payout system.\nStart the first payout cycle.\nRequest a payout.\nRequest a payout to a secondary account.\nRegister for a payout.\nThe status of a claimant.\nThe overall status of the system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_salary</code> using the Substrate node and …\nWeight functions needed for <code>pallet_salary</code>.\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>Salary::Status</code> (r:1 w:0) Proof: <code>Salary::Status</code> (…\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nCalls <code>U::from(self)</code>.\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …")