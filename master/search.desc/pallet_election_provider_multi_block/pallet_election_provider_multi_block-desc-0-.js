searchState.loadedDescShard("pallet_election_provider_multi_block", 0, "Multi-phase, multi-block, election provider pallet.\nDifferent operations that the <code>Config::AdminOrigin</code> can …\nAn implementation of <code>OnRoundRotation</code> that immediately …\nA fallback implementation that silently continues into the …\nAn error happened in the data provider.\nInternal errors of the pallet. This is used in the …\nTrigger the (single page) fallback in <code>instant</code> mode, with …\nSet the given (single page) emergency solution.\nAn error in the fallback.\nAn error happened in the feasibility check sub-system.\nForcefully go to the next round, starting from the Off …\nForce-set the phase to the given phase.\nA <code>Get</code> impl for <code>Phase::Done</code>\nA <code>Get</code> impl for <code>Phase::Signed(T::SignedPhase::get())</code>\nA easy means to configure <code>Config::AreWeDone</code>.\nA fallback implementation that transitions the pallet to …\nThe common logging prefix of all pallets in this crate.\nThe election is not ongoing and therefore no results may …\nAn error in the onchain seq-phragmen implementation\nTrait to notify other sub-systems that a round has ended.\nThe election is currently ongoing, and therefore we cannot …\nOther misc error\nCalled elect() with wrong page order or in wrong phase.\nA shorthand for <code>IfSolutionQueuedElse</code> that proceeds …\nA shorthand for <code>IfSolutionQueuedElse</code> that proceeds to …\nSet the minimum untrusted score. This is directly …\nthe corresponding page in the queued supports is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome helper functions/macros for this crate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmit a log specific to this pallet, setting the target to …\nEmit a log from within the offchain miner.\n<code>ending</code> round has ended. Implies we are now at round …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe signed pallet The signed phase of the multi-block …\nEmit a log within a submodule of the pallet\nCommon types of the pallet Common types and traits of the …\nThe unsigned pallet\nThe verifier pallet\nThe weight module WeightInfo for the election provider …\nThe origin that can perform administration operations on …\nAn indicator of whether we should move to do the …\nContains a variant per dispatchable extrinsic that this …\nCommon errors in all sub-pallets and miner.\nConfiguration trait of this pallet.\nCurrent phase.\nSomething that will provide the election data.\nDesired number of targets to elect for this round.\nSubmission is too early (or too late, depending on your …\nError of the pallet that can be returned in response to …\nThe <code>Event</code> enum of this pallet\nTriggering the <code>Fallback</code> failed.\nThe fallback type used for the election.\nThe miner configuration.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSingle type that implement <code>super::OnRoundRotation</code> to do …\nPaginated target snapshot.\nSame as <code>PagedTargetSnapshot</code>, but it will store the hash of …\nPaginated voter snapshot. At most [<code>T::Pages</code>] keys will …\nSame as <code>PagedVoterSnapshot</code>, but it will store the hash of …\nThe number of pages.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA phase transition happened. Only checks major changes in …\nInternal counter for the number of rounds.\nDuration of the signed phase.\nDuration of the singed validation phase.\nSnapshot was unavailable.\nSnapshot was not available.\nThe number of snapshot targets to fetch per block.\nUnexpected phase\nTarget snapshot creation failed\nVoter snapshot creation failed\nDuration of the unsigned phase.\nThe verifier pallet’s interface.\nThe number of snapshot voters to fetch per block.\nSubmission is too weak to be considered an improvement.\nThe weight of the pallet.\nThe snapshot fingerprint is not a match. The solution is …\nWrong number of pages in the solution.\nThe round counter is wrong.\nWrong number of winners presented.\nA reasonable next election block number.\nAn auto-generated getter for <code>CurrentPhase</code>.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManage this pallet.\nManage this pallet.\nReturn the <code>length</code> most significant pages.\nCreate a call with the variant <code>manage</code>.\nAn auto-generated getter for <code>Round</code>.\nAuto-generated docs-only module listing all (public and …\nthe source phase\nThe target phase\nManage this pallet.\nCurrent phase.\nDesired number of targets to elect for this round.\nPaginated target snapshot.\nSame as <code>PagedTargetSnapshot</code>, but it will store the hash of …\nPaginated voter snapshot. At most [<code>T::Pages</code>] keys will …\nSame as <code>PagedVoterSnapshot</code>, but it will store the hash of …\nInternal counter for the number of rounds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSomething that can compute the base deposit that is …\nSomething that can calculate the deposit per-page upon …\nAll of the (meta) data around a signed submission\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe page index is out of bounds.\nBad witness data provided.\nThe given account has bailed.\nThe ratio of the deposit to return in case a signed …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nHandler to the currency.\nBase deposit amount for a submission.\nGet the deposit amount that will be held for a solution of …\nExtra deposit per-page.\nThe given account has been discarded.\nThe submission is a duplicate.\nThe ratio of the deposit to return in case a signed …\nThe given solution, for the given round, was ejected.\nThe <code>Error</code> enum of this pallet.\nHandler to estimate the fee of a call. Useful to refund …\nThe <code>Event</code> enum of this pallet\nThe hold reason of this palelt.\nThe fixed deposit charged upon <code>Pallet::register</code> from …\nAccounts whitelisted by governance to always submit their …\nMaximum number of submissions. This, combined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNo submission found.\nThe account is not registered.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe phase is not signed.\nThe queue is full.\nUpcoming submission has been registered for the given …\nBase reward that is given to the winner.\nThe given account has been rewarded with the given amount.\nRound is not yet over.\nBecause of submitting a signed solution.\nThe given account has been slashed with the given amount.\nStorage type is <code>StorageMap</code> with key type <code>u32</code> and value …\nA page of solution solution with the given index has been …\nToo many invulnerable accounts are provided,\nProvided weights of this pallet.\nRetract a submission.\nRetract a submission.\nClear the data of a submitter form an old round.\nClear the data of a submitter form an old round.\nGet the deposit amount that will be held for a solution of …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new [<code>#view_function_struct_ident</code>] instance.\nCreate a call with the variant <code>bail</code>.\nCreate a call with the variant <code>clear_old_round_data</code>.\nCreate a call with the variant <code>register</code>.\nCreate a call with the variant <code>set_invulnerables</code>.\nCreate a call with the variant <code>submit_page</code>.\nRegister oneself for an upcoming signed election.\nRegister oneself for an upcoming signed election.\nSet the invulnerable list.\nSet the invulnerable list.\nAuto-generated docs-only module listing all (public and …\nSubmit a single page of a solution.\nSubmit a single page of a solution.\nRetract a submission.\nClear the data of a submitter form an old round.\nRegister oneself for an upcoming signed election.\nSet the invulnerable list.\nSubmit a single page of a solution.\nAccounts whitelisted by governance to always submit their …\nWarning: Doc-Only\nMap from account to the metadata of their submission.\nTriple map from (round, account, page) to a solution page.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe weight/accuracy type of each vote.\nSame as <code>AllVoterPagesOf</code>, but instead of being a nested …\nAlias for all pages of voters, parameterized by this crate…\nThe relative distribution of a voter’s stake among the …\nSnapshot is done, and we are waiting for <code>Export</code> to kick in.\nFinal result of the election.\nThe score of an election. This is the main measure of an …\nThe emergency phase. This is could be enabled by one of …\nExporting has begun, and the given page was the last one …\nThe fallback election type.\nThe maximum number of votes that are allowed.\nMaximum number of items that <code>AllVoterPagesOf</code> can contain, …\nAn opaque index-based, NPoS solution type.\nNothing is happening, but it might.\nHelper trait to pad a partial solution such that the …\nA page index for the multi-block elections pagination.\nA paginated raw solution type.\nA helper trait to deal with the page index of partial …\nCurrent phase of the pallet.\nSigned phase is open.\nWe are validating results.\nSnapshot is being created. No other operation is allowed. …\nThe accuracy of the election, when submitted from …\nThe solution type used by this crate.\nThe target index. Derived from <code>SolutionOf</code>.\nThe voter index. Derived from <code>SolutionOf</code>.\nThe target type. Needs to be an index (convert to usize).\nUnsigned phase.\nThe voter type. Needs to be an index (convert to usize).\nAlias for a voter, parameterized by the miner config.\nAlias for a page of voters, parameterized by this crate’…\nIndividual assignments. for each tuple, the first elements …\nGet the average edge count.\nMake this solution corrupt. This should set the index of a …\nThe distribution of the voter’s stake.\nGet the total count of edges.\nGet the total number of edges.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild self from a list of assignments.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert self into a <code>Vec&lt;Assignment&lt;A, Self::Accuracy&gt;&gt;</code>\nWhether the phase is done or not.\nWhether the phase is emergency or not.\nWhether the phase is export or not.\nWhether the phase is off or not.\nWhether the phase is signed or not.\nWhether the phase is signed validation or not.\nWhether the signed phase is opened now.\nWhether the phase is snapshot or not.\nWhether the phase is unsigned or not.\nWhether the unsigned phase is opened now.\nThe minimal winner, in terms of total backing stake.\nConsume self and return the next variant, as per what the …\nPad the solution to the given number of pages.\nPagify a reference.\nformat the election score in a pretty way with the given …\nRemove a certain voter.\nRemove the least staked voter.\nThe designated round.\nCompute the score of this solution type.\nThe final claimed score post feasibility and concatenation …\nThe individual pages.\nSort self by the means of the given function.\nCompares two sets of election scores based on …\nThe sum of the total backing of all winners.\nThe sum squared of the total backing of all winners, aka. …\nGet the number of unique targets in the whole struct.\nGet the length of all the voters that this type is …\nGet the total number of voters, assuming that voters in …\nVoter’s identifier.\nGet the total number of winners, assuming that there’s …\nJust winners zipped with their approval stake. Note that …\nExports of this pallet Contains a variant per dispatchable …\nExports of this pallet Configuration trait of this pallet.\nThe number of pages that the offchain miner will try and …\nThe priority of the unsigned transaction submitted in the …\nExports of this pallet Type alias to <code>Pallet</code>, to be used by …\nThe repeat threshold of the offchain worker.\nThe solver used in hte offchain worker miner\nWhether the offchain worker miner would attempt to store …\nExports of this pallet The <code>Pallet</code> struct, the main type …\nRuntime weight information of this pallet.\nExports of this pallet Auto-generated docs-only module …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe miner. The miner code for the EPMB pallet.\nCreate a call with the variant <code>submit_unsigned</code>.\nExports of this pallet Auto-generated docs-only module …\nSubmit an unsigned solution.\nSubmit an unsigned solution.\nThe checks that are specific to the (this) unsigned pallet.\nSubmit an unsigned solution.\nThe account id type.\nA base miner that is only capable of mining a new solution …\nAn error in the base miner.\nThe base, common errors from the pallet.\nThe base, common errors from the pallet.\nA defensive error has occurred.\nDesired targets missing.\nFailed to store a solution.\nThe solution generated from the miner is not feasible.\nThe full version of <code>PageSupportsOfMiner</code>.\nThe hash type of the runtime.\nSome page index has been invalid.\nSomething went wrong fetching the lock.\nMaximum number of backers per winner, per page.\nMaximum number of backers, per winner, across all pages.\nThe maximum length that the miner should use for a …\nMaximum number of votes per voter.\nHelper type that computes the maximum total winners across …\nMaximum number of winners to select per page.\nMetadata missing.\nAggregator for inputs to <code>BaseMiner</code>.\nConfigurations for the miner.\nThe errors related to the <code>BaseMiner</code>.\nCannot restore a solution that was not stored.\nAn internal error in the NPoS elections crate.\nThe errors related to the <code>OffchainWorkerMiner</code>.\nA miner that is suited to work inside offchain worker …\nParameterized <code>BoundedSupports</code> for the miner.\n<strong>Maximum</strong> number of pages that we may compute.\nSubmitting a transaction to the pool failed.\nThe type of the snapshot.\nSnapshot data was unavailable unexpectedly.\nThe solution that the miner is mining. The solution type.\nCached solution is not a <code>submit_unsigned</code> call.\nAn internal error in the generic solver.\nThe solver type.\nMaximum number of targets per snapshot page.\nTargets missing.\nToo many winners were removed during trimming.\nMaximum number of voters per snapshot page.\nVoters at the given page missing.\nCannot mine a solution with zero pages.\nAll of the targets.\nperform the feasibility check on all pages of a solution, …\nNumber of winners to pick.\nWhether to reduce the solution. Almost always``\nChecks if an execution of the offchain worker is permitted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaybe tim the weight and length of the given multi-page …\nMine a new npos solution, with the given number of pages.\nNumber of pages to mind.\nThe current round for which the solution is being …\nPaginated list of voters.\nThe account if type.\nSomething that can do the verification asynchronously.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nThe support type failed to be bounded.\nErrors that can happen in the feasibility check.\nCan be used to configure the genesis state of this pallet.\nThe solution is incomplete, it has too few pages.\nThe provided round is incorrect.\nThe given score was invalid.\nA vote is invalid.\nA voter is invalid.\nA winner is invalid.\nMaximum number of backers that each winner could have, per …\nMaximum number of backers, per winner, per page.\nMaximum number of backers, per winner, among all pages of …\nMaximum number of backers, per winner, among all pages of …\nMaximum number of winners that can be represented in each …\nMaximum number of supports (aka. …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNothing is happening.\nInternal error from the election crate.\nA verification is ongoing, and the next page that will be …\nThe <code>Pallet</code> struct, the main type that implements traits …\nA solution with the given score has replaced our current …\nSolution is valid and is queued.\nA wrapper interface for the storage items related to the …\nSolution is rejected, for whichever of the multiple …\nSolution does not have a good enough score.\nThe snapshot is not available.\nThe solution type.\nThe opaque solution type.\nSomething that can provide candidate solutions to the …\nThe data provider that can provide the candidate solution, …\nSomething that can provide the solution data to the …\nThe minimum amount of improvement to the solution score …\nThe status of this pallet.\nA verification failed at the given page.\nSimple enum to encapsulate the result of the verification …\nThe given page of a solution has been verified, with the …\nThe interface of something that can verify solutions for …\nThe weight information of this pallet.\nWrong number of winners presented.\nAuto-generated docs-only module listing all defined …\nCheck if the claimed score is sufficient to challenge the …\nSame as <code>feasibility_check_page_inner</code>, but with a snapshot.\nForce set a single page solution as the valid one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the <code>page</code>th page of the current best solution that …\nGet a single page of the best verified solution, if any.\nGet the claimed score of the current best solution.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClear all storage items, there’s nothing else to do …\nAn auto-generated getter for <code>MinimumScore</code>.\nThe score of the current best solution. <code>None</code> if there is …\nHook to report back the results of the verification of the …\nSet the minimum score that is acceptable for any solution.\nStart a verification process.\nGet the current stage of the verification process.\nAn auto-generated getter for <code>StatusStorage</code>.\nAuto-generated docs-only module listing all (public and …\nPerform the feasibility check on the given single-page …\nPerform synchronous feasibility check on the given …\nThe minimum score that each solution must attain in order …\nThe <code>(amount, count)</code> of backings, divided per page.\nThe score of the valid variant of <code>QueuedSolution</code>.\nThe <code>X</code> variant of the current queued solution. Might be the …\nThe <code>Y</code> variant of the current queued solution. Might be the …\nPointer to the variant of <code>QueuedSolutionX</code> or …\nStorage item for <code>Status</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_election_provider_multi_block_signed</code>.\nWeights for <code>pallet_election_provider_multi_block_unsigned</code>.\nWeights for <code>pallet_election_provider_multi_block_verifier</code>.\nWeights for <code>pallet_election_provider_multi_block</code>.\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0xa143099d7a337c5fd879b91b2b157c2d</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0x33ed3d010c1fea25c2adbfba9297161f</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nWeights for <code>pallet_election_provider_multi_block_signed</code>.\nWeights for <code>pallet_election_provider_multi_block_unsigned</code>.\nWeights for <code>pallet_election_provider_multi_block_verifier</code>.\nWeights for <code>pallet_election_provider_multi_block</code>.\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0xa143099d7a337c5fd879b91b2b157c2d</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0x33ed3d010c1fea25c2adbfba9297161f</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nWeight functions needed for …\nWeight functions needed for …\nWeight functions needed for …\nWeight functions needed for …")