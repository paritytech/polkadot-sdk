searchState.loadedDescShard("sp_transaction_storage_proof", 0, "Storage proof primitives. Contains types and basic code to …\nProof trie value size.\nStorage period for data.\nErrors that occur in context of inherents.\nThe identifier for the proof inherent.\nAn interface to request indexed data from the client.\nProvider for inherent data.\nErrors that can occur while checking the storage proof.\nHolds a chunk of data retrieved from storage along with a …\nAuxiliary trait to extract storage proof.\nGet all indexed transactions for a block, including …\nData chunk that is proved to exist.\nA utility function to encode transaction index as trie key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet block number for a block hash.\nTrie nodes that compose the proof.\nA utility function to extract a chunk index from the …\nGet the proof.\nBuild a proof for a given source of randomness and indexed …\nCreate a new inherent data provider instance for a given …")