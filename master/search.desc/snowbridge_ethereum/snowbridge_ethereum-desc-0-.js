searchState.loadedDescShard("snowbridge_ethereum", 0, "A type that can be decoded from an RLP blob.\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 3, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nA type that can be encoded via RLP.\nReceipt envelope with no type flag.\nA log consists of an address, and some log data.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nReceipt type that knows how to decode itself with a <code>Bloom</code> …\nThe address which emitted this log.\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nReturn the mutable inner receipt with bloom. Currently …\nReturn the receipt’s bloom.\nReturns a reference to the bloom.\nCalculates <code>Log</code>’s bloom filter. This is slow operation and\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nThe log data.\nDecodes the blob into the appropriate type. <code>buf</code> must be …\nCreates a new empty log.\nEncodes the type into the <code>out</code> buffer.\nReturns the argument unchanged.\nConsume the structure, returning only the receipt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates the envelope for a given type and receipt.\nGet the length of the inner receipt in the 2718 encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the structure, returning the receipt and the bloom …\nConsumes the type and returns the logs.\nConverts a <code>ReceiptEnvelope</code> with a custom log type into a …\nConverts a <code>Receipt</code> with a custom log type into a <code>Receipt</code> …\nConverts a <code>ReceiptWithBloom</code> with a custom log type into a …\nConsumes the type and returns the underlying <code>Receipt</code>.\nReturn true if the transaction was successful.\nReturns the length of the encoding of this type in bytes.\nReturn the receipt logs.\nReturn the receipt logs.\nLog send from contracts.\nReturn the receipt’s bloom.\nThe bloom filter.\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt’s log type by applying a function …\nConverts the receipt type by applying the given closure to …\nHelper types to work with Ethereum’s Merkle Patricia …\nCreate new ReceiptWithBloom\nCreates a new log.\nCreates a new log from an deserialized event.\nCreates a new log.\nCreates a new log.\nThe receipt.\nReserialize the data.\nRLP-decodes receipt’s field with a <code>Bloom</code>.\nRLP decodes receipt and <code>Bloom</code> into <code>ReceiptWithBloom</code> …\nRLP-encodes receipt fields with the given <code>Bloom</code> without an …\nReturns length of RLP-encoded receipt fields with the …\nReturns RLP header for this receipt encoding with the …\nCalculate the length of the rlp payload of the network …\nReturns the success status of the receipt’s transaction.\nIf transaction is executed successfully.\nReturn the <code>TxType</code> of the inner receipt.\nCalculates the bloom filter for the receipt and returns the\nIntermediate trie node with children (refers to node with …\nTrie node where <code>value</code> is either the RLP-encoded item we’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")