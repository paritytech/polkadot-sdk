searchState.loadedDescShard("polkadot_sdk_frame", 1, "Create a crypto <code>Pair</code> from a numeric value.\nGet account id of a <code>numeric</code> account.\nStart an offchain worker and generate extrinsics.\nIs this result ok?\nMacros to easily impl traits such as <code>Get</code> for types. Macro …\nMacros to easily impl traits such as <code>Get</code> for types. Create …\nPut data for an inherent into the internal storage.\nPut an error into the result.\nReplace the data for an inherent.\nBasic runtime version info.\nIdentifies the different Substrate runtimes. There’ll be …\nVersion of the runtime specification.\nReturns state version to use for update.\nVersion of the system implementation used by this runtime. …\nAll existing calls (dispatchables) are fully compatible …\nExecute given block, but don’t as strict is the normal …\nExecute all Migrations of this runtime.\nCheck a given signed transaction for validity. This doesn…\nUsed for simple fee calculation. Re-exports <code>sp-weights</code> …\nThe type that is returned as result from calculation.\nThe type that is returned as result from polynomial …\nImplementor of <code>WeightToFee</code> that uses a constant multiplier.\nA list of coefficients that represent a polynomial.\nImplementor of <code>WeightToFee</code> such that it maps any unit of …\nImplementor of <code>WeightToFee</code> that maps one unit of weight to …\nThe maximal weight in all dimensions.\nAn implementation of <code>WeightToFee</code> that collects no fee.\nThe weight of database operations that the runtime can …\nMeters consumed weight and a hard limit for the maximal …\nA trait that describes the weight to fee calculation.\nOne coefficient and its position in the <code>WeightToFee</code>.\nA list of coefficients that represent a polynomial.\nA trait that describes the weight to fee calculation as …\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nCheck if the given weight can be consumed.\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nChecked <code>Weight</code> scalar division. Computes …\nCalculates how many <code>other</code> fit into <code>self</code>.\nChecked <code>Weight</code> scalar multiplication. Computes …\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nThe fractional part of the coefficient.\nThe integral part of the coefficient.\nThese constants are specific to FRAME, and the current …\nConsume some weight and defensively fail if it is over the …\nThe already consumed weight.\nThe ratio of consumed weight to the limit.\nConsume some weight and defensively fail if it is over the …\nDegree/exponent of the term.\nConstant version of Div with u64.\nEvaluate the polynomial at a specific <code>x</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe limit can ever be accrued.\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nConstant version of Mul with u64.\nTrue iff the coefficient should be interpreted as negative.\nCreates <code>Self</code> with the maximal possible limit for the …\nReturns a polynomial that describes the weight to fee …\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nReclaim the given weight.\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\nThe remaining weight that can still be consumed.\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nSaturating <code>Weight</code> scalar division. Computes …\nEvaluate the term at <code>x</code> and saturatingly amalgamate into …\nSaturating <code>Weight</code> scalar multiplication. Computes …\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nConsume the given weight after checking that it can be …\nCalculates the fee from the passed <code>weight</code>.\nCreates <code>Self</code> from a limit for the maximal consumable …\nReturn a <code>Weight</code> where all fields are zero.\nWeight of executing an empty block. Calculated by …\nWeight of executing a NO-OP extrinsic, for example …\nParityDB can be enabled with a feature flag, but is still …\nBy default, Substrate uses RocksDB, so this will be the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn arithmetic error.\nA bad origin.\nComplex storage builder stuff.\nFailed to lookup some data.\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nReason why a dispatch call failed.\nResources exhausted, e.g. attempt to read/write data which …\nA custom error in a module.\nThere are no providers so the account cannot be created.\nSome error occurred.\nRoot origin is not allowed.\nStruct containing data needed for a storage.\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nSome resource (e.g. a preimage) is unavailable right now. …\nAssimilate the storage for this module into pre-existing …\nBuild the storage out of this builder.\nChildren trie storage data. Key does not include prefix, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the same error but without the attached message.\nTop trie storage data.\nThe corresponding account-id type of <code>Signature</code>.\nThe block-number type, which should be fed into …\nThe block type, which should be fed into …\nAn ECDSA/SECP256k1 signature.\nAn Ed25519 signature.\nThe opaque block type. This is the same <code>BlockOf</code>, but it has\nA signature type compatible capably of handling multiple …\nAn Sr25519 signature.\nDefault set of signed extensions exposed from the …\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe block header.\nThe block header.\nCommonly used runtime traits for testing. An error type …\nA <code>Contains</code> implementation that contains every value.\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn unchecked extrinsic type to be used in tests.\nHooks for the <code>Pallet::run_to_block_with</code> function.\nCommonly used runtime traits for testing. Different …\nOther helper macros from <code>frame_support</code> that help with …\nType alias for Externalities implementation used in tests.\nType alias for Externalities implementation used in tests.\nOld state version, no value nodes.\nNew state version can use value nodes.\nSet the hook function logic after the finalization of the …\nSet the hook function logic after the initialization of …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nStorage backend.\nStorage backend.\nSet the hook function logic before the finalization of the …\nSet the hook function logic before the initialization of …\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nExtensions.\nExtensions.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>StorageNoopGuard</code> with a custom error message.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe function that should be called.\nThe block header.\nThe block header.\nThe block header.\nOther helper macros from <code>frame_support</code> that help with …\nOther helper macros from <code>frame_support</code> that help with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlias to <code>default()</code>.\nInformation regarding the type of extrinsic this is …\nSets a custom error message for a <code>StorageNoopGuard</code>.\nIf defined, values in state of size bigger or equal to …\nState version to use during tests.\nState version to use during tests.\nOther helper macros from <code>frame_support</code> that help with …\nOperation may result in account going out of existence.\nSimple amalgamation trait to collect together properties …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nDeposit couldn’t happen due to the amount being too low. …\nThe type by which we identify the beneficiaries to whom a …\nThe operation may be considered successful even if less …\nAccount cannot receive the assets.\nDeposit cannot happen since the account cannot be created …\nOne of a number of consequences of withdrawing a fungible …\nAn error which could be returned by the Pay type\nThe operation should must either proceed either exactly …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nIn order to pay some other (higher-level) fees.\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nNot enough of the funds in the account are available for …\nAn identifier given to an individual payment.\nOperation must not result in the account going out of …\nThe funds will be minted into the system, increasing total …\nHandler for when some currency “account” decreased in …\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nThe operation should execute with regular privilege.\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nIn order to reserve some funds for a later return or …\nAccount balance would reduce to zero, potentially …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nAccount continued in existence.\nAccount continued in existence.\nIn order to tip a validator for transaction inclusion.\nIn order to pay for (system) transaction costs.\nIn order to transfer ownership.\nThere has been an underflow in the system. This is …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nCheck how a payment has proceeded. <code>id</code> must have been …\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nThe Currency trait and associated types.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nChoose all variants except for <code>one</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe traits for dealing with a single fungible token class …\nThe traits for <em>sets</em> of <code>fungible</code> tokens and any associated …\nThe imbalance trait type and its associates, which handles …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the type into a <code>Result</code> with <code>DispatchError</code> as the …\nConvert the type into a <code>Result</code> with <code>TokenError</code> as the …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nTraits for dealing with a single non-fungible collection …\nTraits for dealing with a single non-fungible item.\nTraits for dealing with multiple collections of …\nTraits for dealing with multiple collections of …\nReturns the complement of this set of flags.\nActually handle a non-zero imbalance. You probably want to …\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nThe Pay trait and associated types.\nMake a payment and return an identifier for later …\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nTraits for working with tokens and their associated …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nThe balance of an account.\nAbstraction over a fungible assets system.\nThe currency that this schedule applies to.\nThe currency that this schedule applies to.\nA inspect interface for a currency whose accounts can have …\nAn identifier for a lock. Used for disambiguating …\nA currency whose accounts can have liquidity restrictions.\nThe maximum number of locks a user should have on their …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe opaque token type for an imbalance. This is returned …\nThe opaque token type for an imbalance. This is returned …\nA currency where funds can be reserved from the user.\nAn identifier for a reserve. Used for disambiguating …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nA vested transfer over a currency. This allows a …\nA vesting schedule over a currency. This allows a …\nThe total amount of issuance in the system excluding those …\nAdds a vesting schedule to a given account.\nAmount of funds locked for <code>who</code> associated with <code>id</code>.\nReduce the total issuance by <code>amount</code> and return the …\nChecks if <code>add_vesting_schedule</code> would work against <code>who</code>.\nSame result as <code>reserve(who, value)</code> (but without the …\nSame result as <code>slash(who, value)</code> (but without the …\nReduce the active issuance by some amount.\nAdds up to <code>value</code> to the free balance of <code>who</code>. If <code>who</code> doesn…\nMints <code>value</code> to the free balance of <code>who</code>.\nReturns <code>Ok</code> iff the account is able to make a withdrawal of …\nEnsure the reserved balance is equal to <code>value</code>.\nChanges a balance lock (selected by <code>id</code>) so that it becomes …\nThe ‘free’ balance of a given account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nEnsure an account’s free balance equals some value; this …\nThe minimum balance any single account may have. This is …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nRemove an existing lock.\nRemove a vesting schedule for a given account.\nMove all the named reserved balance of one account into …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves <code>value</code> from balance to reserved balance.\nMoves <code>value</code> from balance to reserved balance.\nThe amount of the balance of a given account that is …\nThe amount of the balance of a given account that is …\nSimilar to deposit_creating, only accepts a …\nSimilar to deposit_creating, only accepts a …\nCreate a new balance lock on account <code>who</code>.\nSimilar to withdraw, only accepts a <code>PositiveImbalance</code> and …\nDeducts up to <code>value</code> from the combined balance of <code>who</code>, …\nSlash all the reserved balance, returning the negative …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nThe combined balance of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer some liquid free balance to another staker.\nMoves up to <code>value</code> from reserved balance to free balance. …\nUnreserve all the named reserved balances, returning …\nMoves up to <code>value</code> from reserved balance to free balance. …\nExecute a vested transfer from <code>source</code> to <code>target</code> with the …\nGet the amount that is currently being vested and cannot …\nRemoves some free balance from <code>who</code> account for <code>reason</code> if …\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nSpecial dust type which can be type-safely converted into …\nConsideration method using a <code>fungible</code> balance frozen as …\nHandler for when an imbalance gets dropped. This could …\nConsideration method using a <code>fungible</code> balance frozen as …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nBasic consideration method using a <code>fungible</code> balance frozen …\nBasic consideration method using a <code>fungible</code> balance placed …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing freezes for …\nTrait for mutating a fungible asset which can be placed on …\nRepresents the native asset of the current chain.\nCriterion for <code>UnionOf</code> where a set for …\nThe <code>NativeOrWithId</code> enum classifies an asset as either …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nType to combine some <code>fungible::*</code> and <code>fungibles::*</code> …\nRepresents an asset identified by its underlying <code>AssetId</code>.\nThe total amount of issuance in the system excluding those …\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code>, burning the tokens.\nAttempt to decrease the balance of <code>who</code> which is held for …\nReturns <code>true</code> if the balance of <code>who</code> may be increased by …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Success</code> if the balance of <code>who</code> may be decreased by …\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nDecrease the amount which is being frozen for a particular …\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome something with the imbalance’s value which is being …\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Unbalanced::handle_dust</code>…\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nIncrease the amount which is being frozen for a particular …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nHold or release funds in the account of <code>who</code> to bring the …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nRemove an existing freeze.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nTest the <code>burn_from</code> function for successfully burning …\nTest the <code>burn_from</code> function for handling insufficient …\nTest the <code>burn_from</code> function for successfully burning an …\nTest the can_deposit function for returning a minimum …\nTest the can_deposit function for returning an overflow …\nTest the can_deposit function for returning a success …\nTest the can_withdraw function for returning a low balance …\nTest the can_withdraw function for withdrawal resulting in …\nTest the can_withdraw function for returning a success …\nTest the <code>mint_into</code> function for handling balances below …\nTest the <code>mint_into</code> function for overflow prevention.\nTest the <code>mint_into</code> function for successful token minting.\nTest the reducible_balance function with …\nTest the reducible_balance function with …\nTest the <code>restore</code> function for handling restoration below …\nTest the <code>restore</code> function for handling balance overflow.\nTest the <code>restore</code> function for successful restoration.\nTest the set_balance function for successful burning.\nTest the set_balance function for successful minting.\nTest the <code>shelve</code> function for handling insufficient funds.\nTest the <code>shelve</code> function for successful shelving.\nTest the <code>transfer</code> function with <code>Preservation::Expendable</code> …\nTest the transfer function with Preservation::Expendable …\nTest the <code>transfer</code> function with <code>Preservation::Protect</code> and …\nTest the <code>transfer</code> function for a successful transfer.\nTests <code>Balanced::deposit</code>.\nTests issuing and resolving <code>Credit</code> imbalances with …\nTests <code>Balanced::pair</code>.\nTests issuing and resolving <code>Debt</code> imbalances with …\nTests <code>Balanced::withdraw</code>.\nTest <code>Mutate::burn_from</code> for successfully burning tokens …\nTest <code>Mutate::burn_from</code> handling of insufficient funds when …\nTest <code>Mutate::burn_from</code> for successfully burning an exact …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> works correctly returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Mutate::mint_into</code> for handling balances below the …\nTest <code>Mutate::mint_into</code> for overflow prevention.\nTest <code>Mutate::mint_into</code> for successful token minting.\nTest <code>Inspect::reducible_balance</code> returns the full account …\nTests <code>Inspect::reducible_balance</code> returns <code>Inspect::balance</code> -\nTest <code>Mutate::restore</code> handles restoration below the minimum …\nTest <code>Mutate::restore</code> handles balance overflow.\nTest <code>Mutate::restore</code> for successful restoration.\nTest <code>Mutate::set_balance</code> burns balances correctly.\nTest <code>Mutate::set_balance</code> mints balances correctly.\nTest <code>Mutate::shelve</code> handles insufficient funds correctly.\nTest <code>Mutate::shelve</code> for successful shelving.\nTest calling <code>Mutate::transfer</code> with <code>Preservation::Expendable</code>…\nTest calling <code>Mutate::transfer</code> function with …\nTest <code>Mutate::transfer</code> with <code>Preservation::Protect</code> and …\nTest <code>Mutate::transfer</code> for a successful transfer.\nTests <code>Unbalanced::deactivate</code> and <code>Unbalanced::reactivate</code>.\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::increase_balance</code>.\nTests <code>Unbalanced::set_total_issuance</code>.\nTests <code>Unbalanced::write_balance</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing freezes for …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing freeze.\nTrait for slashing a fungible asset which can be place on …\nTrait for optional bookkeeping callbacks after a slash.\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code> which is held for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nHold or release funds in the account of <code>who</code> to bring the …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nMeans of identifying one asset class from another.\nMeans of identifying one asset class from another.\nScalar type for representing deposit balance of an account.\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nTrait for providing the ability to create new fungible …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nTrait for providing the ability to destroy existing …\nSpecial dust type which can be type-safely converted into …\nHandler for when an imbalance gets dropped. This could …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a set of …\nInterface for enumerating assets in existence or owned by …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing locks to …\nTrait for mutating a fungible asset which can be placed on …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nTrait for refunding the existence deposit of a target …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nType to combine two <code>fungibles::*</code> implementations into one …\nThe total amount of issuance in the system excluding those …\nInspect and Mutate traits for Asset approvals\nReturns <code>true</code> if an <code>asset</code> exists.\nReturns an iterator of the collections in existence.\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nReturns <code>true</code> if the <code>asset</code> balance of <code>who</code> may be increased …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Failed</code> if the <code>asset</code> balance of <code>who</code> may not be …\nCreate a new fungible asset.\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nDecrease the amount which is being frozen for a particular …\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nReturns the amount of account deposit and depositor …\nDestroy all accounts associated with a given asset. …\nDestroy all approvals associated with a given asset up to …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nMutate <code>self</code> by extracting a new instance with at most …\nComplete destroying asset and unreserve currency. …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nIncrease the amount which is being frozen for a particular …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nInspect and Mutate traits for Asset metadata\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nReturn the deposit (if any) of a target asset account.\nRelease up to <code>amount</code> held funds in an account.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nInspect traits for Asset roles\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nStart the destruction an existing fungible asset.\nRemove an existing lock.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing locks to …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing lock.\nTrait for slashing a fungible asset which can be place on …\nTrait for optional bookkeeping callbacks after a slash\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nTrait for resetting the team configuration of an existing …\nReset the team for the asset with the given <code>id</code>.\nA trait for a not-quite Linear Type that tracks an …\nA negative imbalance (funds have been destroyed but none …\nHandler for when some currency “account” decreased in …\nThe oppositely imbalanced type. They come in pairs.\nA positive imbalance (funds have been created but none …\nResolves received asset credit to account <code>A</code>, implementing …\nResolves received asset credit to account <code>A</code>, implementing …\nEither a positive or a negative imbalance.\nSplit an unbalanced amount two ways between a common …\nTry to merge two imbalances.\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nDrop <code>Self</code> if and only if it is equal to zero. Return <code>Err</code> …\nMutate <code>self</code> by extracting a new instance with at most …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nConsume self and along with an opposite counterpart to …\nActually handle a non-zero imbalance. You probably want to …\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nThe raw value of self.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nCreate a <code>Positive</code> instance of <code>Self</code> whose value is zero.\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible set of items which can …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>nonfungibles</code> trait implementation into a …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for transferring and controlling the transfer of …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nClear attribute of <code>item</code>’s <code>key</code>.\nClear the metadata of an <code>item</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code>’s …\nReturns the custom attribute value of <code>item</code> corresponding …\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nSet the metadata <code>data</code> of an <code>item</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nReturns the system attribute value of <code>item</code> corresponding …\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible sets of items which can …\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nDestroy an existing fungible item.\nProvide the appropriate witness data needed to destroy an …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nTrait for providing an interface to check the account’s …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for trading non-fungible items.\nTrait for transferring non-fungible sets of items.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nAllows <code>buyer</code> to buy an <code>item</code> of <code>collection</code> if it’s up for …\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nClear attribute of <code>item</code> of <code>collection</code>’s <code>key</code>.\nClear attribute of <code>collection</code>’s <code>key</code>.\nClear the metadata of a <code>collection</code>.\nClear the metadata of an <code>item</code> of <code>collection</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code> of …\nAttempt to clear the strongly-typed attribute of <code>collection</code>…\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nReturns the custom attribute value of <code>item</code> of <code>collection</code> …\nDestroy an existing fungible item.\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nProvide the appropriate witness data needed to destroy an …\nReturns <code>true</code> if <code>who</code> is the admin of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the freezer of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the issuer of the <code>collection</code>.\nReturns the item price of <code>item</code> or <code>None</code> if the item is not …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nSet the metadata <code>data</code> of a <code>collection</code>.\nSet the metadata <code>data</code> of an <code>item</code> of <code>collection</code>.\nSets the item price for <code>item</code> to make it available for sale.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nReturns the system attribute value of <code>item</code> of <code>collection</code> …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nThe type by which we identify the beneficiaries to whom a …\nAn error which could be returned by the Pay type\nPayment failed. It may safely be retried.\nAn identifier given to an individual payment.\nPayment is in progress. Nothing to report yet.\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> for assets which makes a …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nPayment happened successfully.\nPayment status is unknowable. It may already have reported …\nCheck how a payment has proceeded. <code>id</code> must have been …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a payment and return an identifier for later …\nOperation may result in account going out of existence.\nSimple amalgamation trait to collect together properties …\nThe type for the kinds of asset that are going to be paid.\nSimple amalgamation trait to collect together properties …\nThe type by which we measure units of the currency in …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nDeposit couldn’t happen due to the amount being too low. …\nThe type by which we identify the beneficiaries to whom a …\nThe operation may be considered successful even if less …\nAccount cannot receive the assets.\nDeposit cannot happen since the account cannot be created …\nConverts an asset balance value into balance.\nConverts a balance value into an asset balance.\nAdapter for a rank-to-salary <code>Convert</code> implementation into a …\nOne of a number of consequences of withdrawing a fungible …\nAn error which could be returned by the Pay type\nThe operation should must either proceed either exactly …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nPayment failed. It may safely be retried.\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are under the normal conditions.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nNot enough of the funds in the account are available for …\nRetrieve the salary for a member of a particular rank.\nAn identifier given to an individual payment.\nAn identifier and balance.\nA trait for a not-quite Linear Type that tracks an …\nPayment is in progress. Nothing to report yet.\nOperation must not result in the account going out of …\nTrait to handle NFT locking mechanism to ensure …\nThe funds will be minted into the system, increasing total …\nFunds are on hold.\nThe oppositely imbalanced type. They come in pairs.\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nThe operation should execute with regular privilege.\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nAccount balance would reduce to zero, potentially …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nThe mode under which usage of funds may be restricted.\nAccount continued in existence.\nAccount continued in existence.\nPayment happened successfully.\nThere has been an underflow in the system. This is …\nImplements <code>ConversionFromAssetBalance</code>, enabling a 1:1 …\nImplements <code>ConversionFromAssetBalance</code>, allowing for a 1:1 …\nPayment status is unknowable. It may already have reported …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nSome amount for this item.\nAbstract asset operations traits.\nCheck how a payment has proceeded. <code>id</code> must have been …\nThe Currency trait and associated types.\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsures that a conversion for the <code>asset_id</code> will be …\nEnsure that a call to pay with the given parameters will …\nMutate <code>self</code> by extracting a new instance with at most …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe traits for dealing with a single fungible token class …\nThe traits for <em>sets</em> of <code>fungible</code> tokens and any associated …\nRetrieve the salary for a given rank. The account ID is …\nAn identifier for this item.\nThe imbalance trait type and its associates, which handles …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the asset should be locked and prevent …\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nTraits for dealing with a single non-fungible collection …\nTraits for dealing with a single non-fungible item.\nTraits for dealing with multiple collections of …\nTraits for dealing with multiple collections of …\nConsume self and along with an opposite counterpart to …\nThe Pay trait and associated types.\nMake a payment and return an identifier for later …\nThe raw value of self.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nTrait for defining an asset. The definition must provide …\nGet the <code>Id</code> type of the asset definition.\nA trait representing the ability of a certain asset to be …\nA strategy for use in the <code>Create</code> implementations.\nA trait representing the ability of a certain asset to be …\nA strategy for use in the <code>Destroy</code> implementations.\nType for identifying the asset.\nAn ID assignment approach to use in the “create” …\nA trait representing the ability of a certain asset to …\nA strategy for use in the <code>Inspect</code> implementations.\nThe reported ID type.\nA trait representing the ability of a certain asset to be …\nA strategy for use in the <code>Restore</code> implementations. The …\nA trait representing the ability of a certain asset to be …\nA strategy for use in the <code>Stash</code> implementations.\nThis type represents a successful asset state update. It …\nThis type represents a successful asset creation. It will …\nThis type represents a successful asset destruction. It …\nThis type represents a successful asset stashing. It will …\nThis type represents a successful asset restoration. It …\nA trait representing the ability of a certain asset to …\nA strategy for use in the <code>Update</code> implementations.\nThe value to update the asset’s state. Usually, it …\nThe value representing the asset’s state related to this …\nThis modules contains the common asset ops strategies.\nCreate a new asset using the provided <code>strategy</code>.\nDestroy the asset identified by the given <code>id</code> using the …\nInspect state information of the asset using the given <code>id</code> …\nRestore the asset identified by the given <code>id</code> using the …\nStash the asset identified by the given <code>id</code> using the …\nUpdate the state information of the asset using the given …\nThe <code>Admin</code> strategy is both inspect and update strategy …\nThis trait converts the given UpdateStrategy into the …\nThe <code>AutoId</code> is an ID assignment approach intended to be …\nThe <code>Bytes</code> strategy represents raw state bytes. It is both …\nThe <code>CanCreate</code> strategy represents the ability to create an …\nThe <code>CanDestroy</code> strategy represents the ability to destroy …\nThe <code>CanUpdate</code> strategy represents the ability to update …\nThe operation implementation must check if the given …\nThe <code>CheckOrigin</code> is a strategy that accepts a runtime …\nThe <code>CheckState</code> is a strategy that accepts an <code>Inspect</code> value …\nRepresents the value of an InspectStrategy to be used as a …\nThis trait marks a config value to be used in the …\nThe <code>DeriveAndReportId</code> is an ID assignment approach …\nThe operation implementation must check if the given …\nThe NoParams represents the simplest state-mutating …\nThe <code>Owner</code> strategy is both inspect and update strategy …\nThe <code>PredefinedId</code> is an ID assignment approach intended to …\nThe <code>WithConfig</code> is a create and restore strategy. It …\nThis trait converts the given InspectStrategy into the …\nThe operation implementation must check if the given …\nThe <code>Witness</code> strategy is an inspect strategy, which gets …\nThis function creates a <code>CheckState</code> strategy. The operation …\nThis function creates a <code>CheckOrigin</code> strategy. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function creates a <code>CheckState</code> strategy. The operation …\nThis function creates a <code>CheckOrigin</code> strategy. The …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nThe balance of an account.\nAbstraction over a fungible assets system.\nThe currency that this schedule applies to.\nThe currency that this schedule applies to.\nA inspect interface for a currency whose accounts can have …\nAn identifier for a lock. Used for disambiguating …\nA currency whose accounts can have liquidity restrictions.\nThe maximum number of locks a user should have on their …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe opaque token type for an imbalance. This is returned …\nThe opaque token type for an imbalance. This is returned …\nA currency where funds can be reserved from the user.\nAn identifier for a reserve. Used for disambiguating …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nA vested transfer over a currency. This allows a …\nA vesting schedule over a currency. This allows a …\nThe total amount of issuance in the system excluding those …\nAdds a vesting schedule to a given account.\nAmount of funds locked for <code>who</code> associated with <code>id</code>.\nReduce the total issuance by <code>amount</code> and return the …\nChecks if <code>add_vesting_schedule</code> would work against <code>who</code>.\nSame result as <code>reserve(who, value)</code> (but without the …\nSame result as <code>slash(who, value)</code> (but without the …\nReduce the active issuance by some amount.\nAdds up to <code>value</code> to the free balance of <code>who</code>. If <code>who</code> doesn…\nMints <code>value</code> to the free balance of <code>who</code>.\nReturns <code>Ok</code> iff the account is able to make a withdrawal of …\nEnsure the reserved balance is equal to <code>value</code>.\nChanges a balance lock (selected by <code>id</code>) so that it becomes …\nThe ‘free’ balance of a given account.\nIncrease the total issuance by <code>amount</code> and return the …\nEnsure an account’s free balance equals some value; this …\nThe minimum balance any single account may have. This is …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nRemove an existing lock.\nRemove a vesting schedule for a given account.\nMove all the named reserved balance of one account into …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves up to <code>value</code> from reserved balance of account <code>slashed</code> …\nMoves <code>value</code> from balance to reserved balance.\nMoves <code>value</code> from balance to reserved balance.\nThe amount of the balance of a given account that is …\nThe amount of the balance of a given account that is …\nSimilar to deposit_creating, only accepts a …\nSimilar to deposit_creating, only accepts a …\nCreate a new balance lock on account <code>who</code>.\nSimilar to withdraw, only accepts a <code>PositiveImbalance</code> and …\nDeducts up to <code>value</code> from the combined balance of <code>who</code>, …\nSlash all the reserved balance, returning the negative …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nDeducts up to <code>value</code> from reserved balance of <code>who</code>. This …\nThe combined balance of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer some liquid free balance to another staker.\nMoves up to <code>value</code> from reserved balance to free balance. …\nUnreserve all the named reserved balances, returning …\nMoves up to <code>value</code> from reserved balance to free balance. …\nExecute a vested transfer from <code>source</code> to <code>target</code> with the …\nGet the amount that is currently being vested and cannot …\nRemoves some free balance from <code>who</code> account for <code>reason</code> if …\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nSpecial dust type which can be type-safely converted into …\nConsideration method using a <code>fungible</code> balance frozen as …\nHandler for when an imbalance gets dropped. This could …\nConsideration method using a <code>fungible</code> balance frozen as …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nBasic consideration method using a <code>fungible</code> balance frozen …\nBasic consideration method using a <code>fungible</code> balance placed …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing freezes for …\nTrait for mutating a fungible asset which can be placed on …\nRepresents the native asset of the current chain.\nCriterion for <code>UnionOf</code> where a set for …\nThe <code>NativeOrWithId</code> enum classifies an asset as either …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nType to combine some <code>fungible::*</code> and <code>fungibles::*</code> …\nRepresents an asset identified by its underlying <code>AssetId</code>.\nThe total amount of issuance in the system excluding those …\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code>, burning the tokens.\nAttempt to decrease the balance of <code>who</code> which is held for …\nReturns <code>true</code> if the balance of <code>who</code> may be increased by …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Success</code> if the balance of <code>who</code> may be decreased by …\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nDecrease the amount which is being frozen for a particular …\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nThe traits for putting freezes within a single fungible …\nSome something with the imbalance’s value which is being …\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Unbalanced::handle_dust</code>…\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nIncrease the amount which is being frozen for a particular …\nIncrease the total issuance by <code>amount</code> and return the …\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nHold or release funds in the account of <code>who</code> to bring the …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nRemove an existing freeze.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nTest the <code>burn_from</code> function for successfully burning …\nTest the <code>burn_from</code> function for handling insufficient …\nTest the <code>burn_from</code> function for successfully burning an …\nTest the can_deposit function for returning a minimum …\nTest the can_deposit function for returning an overflow …\nTest the can_deposit function for returning a success …\nTest the can_withdraw function for returning a low balance …\nTest the can_withdraw function for withdrawal resulting in …\nTest the can_withdraw function for returning a success …\nTest the <code>mint_into</code> function for handling balances below …\nTest the <code>mint_into</code> function for overflow prevention.\nTest the <code>mint_into</code> function for successful token minting.\nTest the reducible_balance function with …\nTest the reducible_balance function with …\nTest the <code>restore</code> function for handling restoration below …\nTest the <code>restore</code> function for handling balance overflow.\nTest the <code>restore</code> function for successful restoration.\nTest the set_balance function for successful burning.\nTest the set_balance function for successful minting.\nTest the <code>shelve</code> function for handling insufficient funds.\nTest the <code>shelve</code> function for successful shelving.\nTest the <code>transfer</code> function with <code>Preservation::Expendable</code> …\nTest the transfer function with Preservation::Expendable …\nTest the <code>transfer</code> function with <code>Preservation::Protect</code> and …\nTest the <code>transfer</code> function for a successful transfer.\nTests <code>Balanced::deposit</code>.\nTests issuing and resolving <code>Credit</code> imbalances with …\nTests <code>Balanced::pair</code>.\nTests issuing and resolving <code>Debt</code> imbalances with …\nTests <code>Balanced::withdraw</code>.\nTest <code>Mutate::burn_from</code> for successfully burning tokens …\nTest <code>Mutate::burn_from</code> handling of insufficient funds when …\nTest <code>Mutate::burn_from</code> for successfully burning an exact …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> returns …\nTest <code>Inspect::can_deposit</code> works correctly returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Inspect::can_withdraw</code> returns …\nTest <code>Mutate::mint_into</code> for handling balances below the …\nTest <code>Mutate::mint_into</code> for overflow prevention.\nTest <code>Mutate::mint_into</code> for successful token minting.\nTest <code>Inspect::reducible_balance</code> returns the full account …\nTests <code>Inspect::reducible_balance</code> returns <code>Inspect::balance</code> -\nTest <code>Mutate::restore</code> handles restoration below the minimum …\nTest <code>Mutate::restore</code> handles balance overflow.\nTest <code>Mutate::restore</code> for successful restoration.\nTest <code>Mutate::set_balance</code> burns balances correctly.\nTest <code>Mutate::set_balance</code> mints balances correctly.\nTest <code>Mutate::shelve</code> handles insufficient funds correctly.\nTest <code>Mutate::shelve</code> for successful shelving.\nTest calling <code>Mutate::transfer</code> with <code>Preservation::Expendable</code>…\nTest calling <code>Mutate::transfer</code> function with …\nTest <code>Mutate::transfer</code> with <code>Preservation::Protect</code> and …\nTest <code>Mutate::transfer</code> for a successful transfer.\nTests <code>Unbalanced::deactivate</code> and <code>Unbalanced::reactivate</code>.\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::decrease_balance</code> called with …\nTests <code>Unbalanced::increase_balance</code>.\nTests <code>Unbalanced::set_total_issuance</code>.\nTests <code>Unbalanced::write_balance</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing freezes for …\nThe amount of the balance which can become frozen. …\nAmount of funds frozen in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing freeze.\nTrait for slashing a fungible asset which can be place on …\nTrait for optional bookkeeping callbacks after a slash.\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nAttempt to decrease the balance of <code>who</code> which is held for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nRelease all funds in the account of <code>who</code> on hold for <code>reason</code>.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nHold or release funds in the account of <code>who</code> to bring the …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nMeans of identifying one asset class from another.\nMeans of identifying one asset class from another.\nScalar type for representing deposit balance of an account.\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nTrait for providing the ability to create new fungible …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nTrait for providing the ability to destroy existing …\nSpecial dust type which can be type-safely converted into …\nHandler for when an imbalance gets dropped. This could …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a set of …\nInterface for enumerating assets in existence or owned by …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing locks to …\nTrait for mutating a fungible asset which can be placed on …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nTrait for refunding the existence deposit of a target …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nType to combine two <code>fungibles::*</code> implementations into one …\nThe total amount of issuance in the system excluding those …\nInspect and Mutate traits for Asset approvals\nReturns <code>true</code> if an <code>asset</code> exists.\nReturns an iterator of the collections in existence.\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nReturns <code>true</code> if the <code>asset</code> balance of <code>who</code> may be increased …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Failed</code> if the <code>asset</code> balance of <code>who</code> may not be …\nCreate a new fungible asset.\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nDecrease the amount which is being frozen for a particular …\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nReturns the amount of account deposit and depositor …\nDestroy all accounts associated with a given asset. …\nDestroy all approvals associated with a given asset up to …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nComplete destroying asset and unreserve currency. …\nThe traits for putting freezes within a single fungible …\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nIncrease the amount which is being frozen for a particular …\nIncrease the total issuance by <code>amount</code> and return the …\nInspect and Mutate traits for Asset metadata\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nReturn the deposit (if any) of a target asset account.\nRelease up to <code>amount</code> held funds in an account.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nInspect traits for Asset roles\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nStart the destruction an existing fungible asset.\nRemove an existing lock.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing locks to …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nDecrease the amount which is being frozen for a particular …\nAttempt to set the amount frozen under the given <code>id</code> to …\nPrevent the balance of the account of <code>who</code> from being …\nIncrease the amount which is being frozen for a particular …\nPrevent actions which would reduce the balance of the …\nAttempt to alter the amount frozen under the given <code>id</code> to …\nRemove an existing lock.\nTrait for slashing a fungible asset which can be place on …\nTrait for optional bookkeeping callbacks after a slash\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> which is held …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nTrait for resetting the team configuration of an existing …\nReset the team for the asset with the given <code>id</code>.\nA trait for a not-quite Linear Type that tracks an …\nA negative imbalance (funds have been destroyed but none …\nHandler for when some currency “account” decreased in …\nThe oppositely imbalanced type. They come in pairs.\nA positive imbalance (funds have been created but none …\nResolves received asset credit to account <code>A</code>, implementing …\nResolves received asset credit to account <code>A</code>, implementing …\nEither a positive or a negative imbalance.\nSplit an unbalanced amount two ways between a common …\nTry to merge two imbalances.\nDrop an instance cleanly. Only works if its <code>self.value()</code> …\nMutate <code>self</code> by extracting a new instance with at most …\nConsume <code>self</code> and maybe an <code>other</code> to return a new instance …\nMaybe consume an <code>other</code> to mutate <code>self</code> into a new instance …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nConsume self to mutate <code>other</code> so that it combines both. …\nConsume self and along with an opposite counterpart to …\nActually handle a non-zero imbalance. You probably want to …\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nThe raw value of self.\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume <code>self</code> and return two independent instances; the …\nConsume self and add its two components, defined by the …\nConsume self and add its two components, defined by the …\nConsume an <code>other</code> to mutate <code>self</code> into a new instance that …\nConsume <code>self</code> and an <code>other</code> to return a new instance that …\nThe zero imbalance. Can be destroyed with <code>drop_zero</code>.\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible set of items which can …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nTrait for providing an interface to a read-only NFT-like …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nConvert a <code>nonfungibles</code> trait implementation into a …\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for NFT-like items which …\nThe iterator type for <code>Self::owned</code>.\nTrait for transferring and controlling the transfer of …\nReturns the attribute value of <code>item</code> corresponding to <code>key</code>.\nBurn some <code>item</code>.\nReturns <code>true</code> if the <code>item</code> may be transferred.\nClear attribute of <code>item</code>’s <code>key</code>.\nClear the metadata of an <code>item</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code>’s …\nReturns the custom attribute value of <code>item</code> corresponding …\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nReturns an iterator of the items within a <code>collection</code> in …\nMint some <code>item</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns the owner of <code>item</code>, or <code>None</code> if the item doesn’t …\nSet attribute <code>value</code> of <code>item</code>’s <code>key</code>.\nSet the metadata <code>data</code> of an <code>item</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code>…\nReturns the system attribute value of <code>item</code> corresponding …\nTransfer <code>item</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for providing a non-fungible sets of items which can …\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nDestroy an existing fungible item.\nProvide the appropriate witness data needed to destroy an …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nType for identifying a collection (an identifier for an …\nThe iterator type for <code>Self::collections</code>.\nTrait for providing the ability to create collections of …\nTrait for providing the ability to destroy collections of …\nThe witness data needed to destroy an item.\nTrait for providing an interface to many read-only …\nInterface for enumerating items in existence or owned by a …\nTrait for providing an interface to check the account’s …\nType for identifying an item.\nThe iterator type for <code>Self::items</code>.\nTrait for providing an interface for multiple collections …\nThe iterator type for <code>Self::owned_in_collection</code>.\nThe iterator type for <code>Self::owned</code>.\nTrait for trading non-fungible items.\nTrait for transferring non-fungible sets of items.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nBurn some <code>item</code> of <code>collection</code>.\nAllows <code>buyer</code> to buy an <code>item</code> of <code>collection</code> if it’s up for …\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nClear attribute of <code>item</code> of <code>collection</code>’s <code>key</code>.\nClear attribute of <code>collection</code>’s <code>key</code>.\nClear the metadata of a <code>collection</code>.\nClear the metadata of an <code>item</code> of <code>collection</code>.\nAttempt to clear the strongly-typed attribute of <code>item</code> of …\nAttempt to clear the strongly-typed attribute of <code>collection</code>…\nReturns the attribute value of <code>collection</code> corresponding to …\nReturns the owner of the <code>collection</code>, if there is one. For …\nReturns an iterator of the collections in existence.\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nReturns the custom attribute value of <code>item</code> of <code>collection</code> …\nDestroy an existing fungible item.\nDisable the <code>item</code> of <code>collection</code> transfer.\nRe-enable the <code>item</code> of <code>collection</code> transfer.\nProvide the appropriate witness data needed to destroy an …\nReturns <code>true</code> if <code>who</code> is the admin of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the freezer of the <code>collection</code>.\nReturns <code>true</code> if <code>who</code> is the issuer of the <code>collection</code>.\nReturns the item price of <code>item</code> or <code>None</code> if the item is not …\nReturns an iterator of the items of a <code>collection</code> in …\nMint some <code>item</code> of <code>collection</code> to be owned by <code>who</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nReturns the owner of <code>item</code> of <code>collection</code>, or <code>None</code> if the …\nSet attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nSet the metadata <code>data</code> of a <code>collection</code>.\nSet the metadata <code>data</code> of an <code>item</code> of <code>collection</code>.\nSets the item price for <code>item</code> to make it available for sale.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nReturns the system attribute value of <code>item</code> of <code>collection</code> …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nThe type by which we identify the beneficiaries to whom a …\nAn error which could be returned by the Pay type\nPayment failed. It may safely be retried.\nAn identifier given to an individual payment.\nPayment is in progress. Nothing to report yet.\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> for assets which makes a …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nPayment happened successfully.\nPayment status is unknowable. It may already have reported …\nCheck how a payment has proceeded. <code>id</code> must have been …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nMake a payment and return an identifier for later …\nThe account ID that this can be transformed into.\nType of the signer.\nThe type which encodes the sender identity.\nThe AccountId used across the system.\nThis type can be converted into and possibly from an …\nA lookup implementation returning the <code>AccountId</code> from a …\nTrait for touching/creating an asset account with a …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nAny additional data that will go into the signed payload. …\nAll of them.\nRun the <code>try_state</code>, <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nOperation may result in account going out of existence.\nSafe mode is already entered.\nSafe mode is already exited.\nCall is already paused.\nThe message was already processed.\nCall is already unpaused.\nMeans of signature verification of an application key.\nInput that adds infinite number of zero after wrapped …\nAn “executable” piece of information, used by the …\nAdapter struct for turning an <code>OrderedMembership</code> impl into …\nRuntime Origin which includes a System Origin variant …\nInterface to differentiate between Runtime Origins …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA trait to allow calls to authorize themselves from the …\nSome amount of backing from a group. The precise …\nThe message data format is unknown (e.g. unrecognised …\nAn error type that indicates that the origin is invalid.\nThe balance of an account.\nThe type for currency units of the deposit.\nStatus of funds.\nThe resource footprint of a batch of messages.\nThe resource footprints of continuous subsets of messages.\nImplemented by pallets, allows defining logic to run prior …\nImplements <code>VerifyExistenceProof</code> using a binary merkle tree.\nBlake2-256 Hash implementation.\nA “checkable” piece of information, used by the …\nSomething which fulfills the abstract idea of a Substrate …\nSomething that can convert a <code>BlockId</code> to a number or a hash.\nSuper trait with all the attributes for a block number.\nType of <code>BlockNumber</code> to provide.\nBlock number type.\nGet current block number\nA trait to define the build function of a genesis config …\nThe function call.\nThe type of the call.\nThe type which encodes the call to be dispatched.\nType by which we can dispatch. Restricts the …\nThe call to validate\nRuntime call type, as in <code>frame_system::Config::Call</code>\nHow to unambiguously identify a call.\nThe function and pallet name of the Call.\nThe trait implemented by the overarching enumeration of …\nTrait for type that can handle incremental changes to a …\nSomething that can be checked for equality and printed out …\nExtract the digest type for a block. A “checkable” …\nReturned if <code>check</code> succeeds.\nReturned if <code>check</code> succeeds.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nA <code>TryMorph</code> implementation to reduce a scalar by a …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nTrait for things that can be clear (have no bits set). For …\nGuard type for clearing all pushed constraints from a …\n…\nSome sort of cost taken from account temporarily in order …\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for signed integers.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for unsigned integers.\nConstant <code>Price</code> regardless of the given <code>Footprint</code>.\nA trait for querying whether a type can be said to “…\nA trait for querying bound for the length of an …\nA trait for querying whether a type can be said to “…\nInfallible conversion trait. Generic over both source and …\nReversing infallible conversion trait. Generic over both …\nA structure that performs standard conversion using the …\nAdapter which turns a Get implementation into a Convert …\nThe message data is bad (e.g. decoding returns an error).\nThe version of a crate.\nAbstraction over a fungible assets system.\nThe currency that this schedule applies to.\nThe currency that this schedule applies to.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nOne of the proof nodes could not be decoded.\nCorrupt Trie item.\nA trait to handle errors and options when you are really …\nDefensively calculates the maximum of two values.\nDefensively calculates the minimum of two values.\nSubset of methods similar to <code>Defensive</code> that can only work …\nSubset of methods similar to <code>Defensive</code> that can only work …\nA variant of <code>Defensive</code> with the same rationale, for the …\nConstruct an object by defensively truncating an input if …\nDefensively truncate a value and convert it into its …\nPlaceholder marking functionality disabled. Useful for …\nTrait used to check whether a given validator is currently …\nShortcut to reference the <code>Info</code> type of a <code>Dispatchable</code>.\nShortcut to reference the <code>RuntimeOrigin</code> type of a …\nSingle-function utility trait with a blanket impl over …\nA lazy call (module function and argument values) that can …\nThe statement being verified contains multiple key-value …\n“OR gate” implementation of <code>EnsureOrigin</code>, <code>Success</code> type …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nCan enqueue messages for multiple origins.\nAdapter type to transform an <code>EnqueueMessage</code> with an origin …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nSome sort of check on the origin is performed by this …\n<code>EnsureOrigin</code> implementation that checks that an origin has …\nSome sort of check on the origin is performed by this …\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nAn <code>Iterator</code> over tasks of this type used as the return …\nImplementation of <code>PrivilegeCmp</code> that only checks for equal …\nAn implementation of <code>Contains</code> which contains only equal …\nContains the error value\nContains the error value\nThe error type that gets returned when a collection can’…\nThe error type that will be returned by the functions.\nSomething that can estimate the fee of a (frame-based) …\nSomething that can estimate at which block scheduling of …\nSomething that can estimate at which block the next …\nA <code>Contains</code> implementation that contains every value.\nA <code>Contains</code> implementation that contains everything except …\nSomething that can execute a given block.\nErrors that can happen when attempting to execute an …\nSimple boolean for whether an account needs to be kept in …\nA type that can handle weight refunds and incorporate …\nThe proof contains at least one extraneous hash reference …\nThe proof contains at least one extraneous node.\nThe proof contains at least one extraneous value which …\nSomething that acts like an <code>Extrinsic</code>.\nType for extrinsics.\nAn extrinsic on which we can get access to call.\nSomething that acts like an <code>Extrinsic</code>.\nImplementor is an <code>Extrinsic</code> and provides metadata about …\nDispatchable impl containing an arbitrary value which …\nTrait to add a constraint onto the filter.\nGuard type for pushing a constraint to a <code>FilterStack</code> and …\nA trait for finding the author of a block header based on …\nThe resource footprint of a bunch of blobs. We assume only …\nFunds are free, as corresponding to <code>free</code> item in Balances.\nA <code>ContainsPair</code> implementation that has a <code>Contains</code> …\nConverter <code>struct</code> to use a <code>ContainsPair</code> implementation for …\nA trait to define the build function of a genesis config, …\nA trait for querying a single value from a type.\nRetrieve the backing from an object’s ref.\nGets the function index of the Call.\nGets the metadata for the Call - function name and pallet …\nGets the function name of the Call.\nImplement Get by returning Default for any type that …\nA marker trait for something that knows the type of the …\nA marker trait for something that knows the type of the …\nProvides information about a pallet’s storage versions.\nThe hasher used in the runtime.\nA simple, generic one-parameter event notifier/handler.\nHandles incoming messages for a single origin.\nAbstraction around hashing\nHeader hash type\nBlock hash type.\nThe hash type.\nSuper trait with all the attributes for a hashing output.\nHashing algorithm\nExtract the hashing type for a block.\nSomething which fulfills the abstract idea of a Substrate …\nHeader type.\nThe pallet hooks trait. This is merely an umbrella trait …\nUnique identifier of this signed extension.\nUnique identifier of this signed extension.\nUnique numerical identifier for an instance.\nFull identification of <code>ValidatorId</code>.\nA type for converting <code>ValidatorId</code> to <code>Identification</code>.\nThe full identification of a key owner and the stash …\nSome type that is able to be collapsed into an account ID. …\nA structure that performs identity conversion.\nA lookup implementation returning the input value.\nA trait for a not-quite Linear Type that tracks an …\nInterface of implications in the transaction extension …\nThe implication in a transaction.\nAny additional data which was known at the time of …\nThis type is generated by the <code>pallet</code> macro.\nTrie item not found in the database,\nThe proof is missing trie nodes required to verify.\nA trait representing an incrementable type.\nThe info type.\nAn opaque set of information attached to the transaction. …\nInterface for types capable of constructing an inherent …\nTrait for type that can handle the initialization of …\nA <code>Contains</code> implementation which contains all members of …\nA inspect interface for a currency whose accounts can have …\nAn instance of a pallet in the storage.\nSimple trait for providing a filter over a reference to …\nThe available weight was insufficient to execute the …\nA trait implementing integer square root.\nSee <code>Hooks::integrity_test</code>.\nThe proof contains an invalid child reference that exceeds …\nHash is not value.\nAttempted to create a trie with a state root not in the DB.\nTrivial utility for implementing <code>Contains</code>/<code>OrderedMembership</code>…\nA trait to check if an extrinsic is an inherent.\nDetermine if a <code>MemberId</code> is a valid member.\nSomething that can be checked to be a of sub type <code>T</code>.\nTrait to be used when types are exactly same.\nKeccak-256 Hash implementation.\nOperation must not result in the account going out of …\nThe key type expected.\nSomething which can compute and check proofs of a …\nTypes bound to this opaque keys that provide the key type …\nTrait to be used by block producing consensus engine …\nA lazy value.\nAnything that can have a <code>::len()</code> method.\nA storage price that increases linearly with the number of …\nAn identifier for a lock. Used for disambiguating …\nA currency whose accounts can have liquidity restrictions.\nTrait to handle NFT locking mechanism to ensure …\nMeans of changing one type into another in a manner …\nAn error that indicates that a lookup failed.\nThe maximum encoded size for the implementing type.\nThe maximum length of preimage we can store.\nA derivative <code>EnsureOrigin</code> implementation. It mutates the …\nThe maximum number of locks a user should have on their …\nThe maximal length any enqueued message may have.\nThe maximal length any enqueued message may have.\nThe maximal length any enqueued message may have.\nMaximum size of a preimage.\nAn extension of the <code>Consideration</code> trait that allows for …\nFallible conversion trait returning an Option. Generic …\nReversing fallible conversion trait returning an Option. …\nA type that implements Display when in std environment.\nDefinition for a bi-directional, fallible conversion …\nA type that implements FromStr when in std environment.\nA type that implements Hash when in std environment.\nA type that implements Serialize when in std environment …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nThe quantity used to denote time; usually just a …\nExtensible conversion trait. Generic over only source …\nImplementation of <code>Morph</code> which converts between types using …\nA <code>TryMorph</code> implementation to enforce an upper limit for a …\nA negative imbalance (funds have been destroyed but none …\nThe opaque token type for an imbalance. This is returned …\n<code>EnsureOrigin</code> implementation that always fails.\nNoOp polling is required if pallet-referenda functionality …\nSpecial marker struct used when <code>storage_version</code> is not …\nThe <code>NodeBlock</code> type.\nNo item.\nNone of them.\nRun no checks.\nServices queues by doing nothing.\nThe call could not be found in the runtime.\nThe referenced message was not found.\nA <code>Contains</code> implementation that contains no value.\nHeader number.\nExtract the number type for a block.\nOff-chain computation trait.\nContains the success value\nContains the success value\nSee <code>Hooks::on_finalize</code>.\nA trait that will be called at genesis.\nSee <code>Hooks::on_idle</code>.\nSee <code>Hooks::on_initialize</code>.\nThe account with the given id was reaped.\nHandler for when a new account has been created.\nPeriodically executes logic. Is not guaranteed to run …\nSee <code>Hooks::on_runtime_upgrade</code>.\nA trait which is called when the timestamp is set in the …\nHandler for when some currency “account” decreased in …\nDefines a multiplicative identity element for <code>Self</code>.\nA session handler for specific key type.\nRun only pallets who’s name matches the given list.\nOpaque data type that may be destructured into a series of …\nThe oppositely imbalanced type. They come in pairs.\nThe origin type of the transaction.\nThe transport from where a message originates.\nMethods available on <code>frame_system::Config::RuntimeOrigin</code>.\nAn item of the opposite type to the <code>Self</code> on which the …\nAn unspecified error.\nThe type into which <code>A</code> is mutated.\nThe type into which <code>A</code> is mutated.\nThe output type of the product of <code>self</code> and <code>Other</code>.\nThe hash type produced.\nMessage processing was not attempted because it was not …\nAddresses a specific overweight message.\nUnique module prefix. E.g. “InstanceNMyModule” or “…\nTrait indicating that the implementing type is going to be …\nProvides information about the pallet itself and its setup …\nProvides information about the pallet itself and its setup …\nInformation regarding an instance of a pallet.\nProvide information about a bunch of pallets.\nThe caller origin, overarching type of all pallets origins.\nSimilar to <code>StorageInfoTrait</code>, a trait to give partial …\nZero-sized type used to mark things that “act like” …\nA positive imbalance (funds have been created but none …\nThe opaque token type for an imbalance. This is returned …\nShortcut to reference the <code>PostInfo</code> type of a <code>Dispatchable</code>.\nAdditional information that is returned by <code>dispatch</code>. Can …\nProvides a callback to execute logic after the all …\nProvides a callback to execute logic before the all …\nThe <code>Pre</code> of the extension.\nThe type that encodes information that can be passed from …\nThe type that encodes information that can be passed from …\nRun the <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nProvides a callback to execute logic before the all …\nA interface for looking up preimages from their hash on …\nA interface for managing preimages to hashes on chain.\nTrait for things which can be printed from the runtime.\nSomething that can compare privileges of two origins.\nCan process messages from a specific origin.\nErrors that can happen when attempting to process a …\nThe Proof type we will use to determine the number of …\nThe proof of membership itself.\nThe proof type.\nThis trait is one strategy that can be used to benchmark a …\nAn interface for creating, interacting with, and creating …\nA interface for looking up preimages from their hash on …\nThe resource footprint of a queue.\nProvides information on queue footprint.\nThe queue is paused and no message can be executed from it.\nProvides information on paused queues.\nA trait that is able to provide randomness.\nRanked membership data structure.\nHandler that can deal with the swap of two members.\nAnother call is currently ongoing and prevents this call …\nMutator which reduces a scalar by a particular amount.\nA type that can handle weight refunds.\nMorpher to disregard the source value and replace with …\nMorpher to disregard the source value and replace with the …\nA currency where funds can be reserved from the user.\nAn identifier for a reserve. Used for disambiguating …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nThe resultant type.\nTrait for reporting additional validator reward points\nThe root hash computed from the proof is incorrect.\nRun a fixed number of them in a round robin manner.\nThe <code>RuntimeBlock</code> type.\nEvery function call from your runtime has an origin, which …")