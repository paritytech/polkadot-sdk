searchState.loadedDescShard("polkadot_sdk_frame", 2, "Set attribute <code>value</code> of <code>item</code> of <code>collection</code>’s <code>key</code>.\nSet attribute <code>value</code> of <code>collection</code>’s <code>key</code>.\nSet the metadata <code>data</code> of a <code>collection</code>.\nSet the metadata <code>data</code> of an <code>item</code> of <code>collection</code>.\nSets the item price for <code>item</code> to make it available for sale.\nAttempt to set the strongly-typed attribute <code>value</code> of <code>item</code> …\nAttempt to set the strongly-typed attribute <code>value</code> of …\nReturns the system attribute value of <code>item</code> of <code>collection</code> …\nTransfer <code>item</code> of <code>collection</code> into <code>destination</code> account.\nReturns the strongly-typed attribute value of <code>item</code> of …\nReturns the strongly-typed attribute value of <code>collection</code> …\nReturns the strongly-typed custom attribute value of <code>item</code> …\nReturns the strongly-typed system attribute value of <code>item</code> …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nThe type by which we identify the beneficiaries to whom a …\nAn error which could be returned by the Pay type\nPayment failed. It may safely be retried.\nAn identifier given to an individual payment.\nPayment is in progress. Nothing to report yet.\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nSimple implementation of <code>Pay</code> for assets which makes a …\nSimple implementation of <code>Pay</code> which makes a payment from a …\nStatus for making a payment via the <code>Pay::pay</code> trait …\nPayment happened successfully.\nPayment status is unknowable. It may already have reported …\nCheck how a payment has proceeded. <code>id</code> must have been …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMake a payment and return an identifier for later …\nAdapter to use a <code>SignedExtension</code> in the place of a …\nSingle-function utility trait with a blanket impl over …\nContains the error value\nUnique identifier of this signed extension.\nInterface of implications in the transaction extension …\nThe implication in a transaction.\nAny additional data which was known at the time of …\nThe info type.\nContains the success value\nThe origin type of the transaction.\nZero-sized type used to mark things that “act like” …\nThe <code>Pre</code> of the extension.\nThe type that encodes information that can be passed from …\nThe resultant type.\nMeans by which a transaction may be extended. This type …\nInformation about a <code>TransactionExtension</code> for the runtime …\nThe base implication in a transaction.\nThe <code>Val</code> of the extension.\nThe type that encodes information that can be passed from …\nShortcut for the result value of the <code>validate</code> function.\nPost dispatch logic run after dispatching bare extrinsics.\nValidation logic for bare extrinsics.\nAll pre-flight logic run before dispatching bare …\nThe base implication, that is implication not part of any …\nDispatch a transaction with the given base origin and call.\nThe explicit implication in transaction extensions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe unique identifier of the <code>TransactionExtension</code>.\nDetermine any additional data which was known at the time …\nThe type of the <code>TransactionExtension</code> additional signed …\nThe implicit implication in transaction extensions.\nCalls <code>U::from(self)</code>.\nReturns the metadata for this extension.\nDestructure the implication into its parts.\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nDo any post-flight stuff for an extrinsic.\nDo any pre-flight stuff for a transaction after validation.\nDo everything which would be done in a dispatch_transaction…\nThe type of the <code>TransactionExtension</code>.\nValidate a transaction for the transaction queue.\nValidate and prepare a transaction, ready for dispatch.\nJust validate a transaction.\nThe weight consumed by executing this extension instance …\nAn arithmetic error.\nA bad origin.\nFailed to lookup some data.\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nResources exhausted, e.g. attempt to read/write data which …\nA custom error in a module.\nThere are no providers so the account cannot be created.\nSome error occurred.\nRoot origin is not allowed.\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nThe error type used as return type in try runtime hooks.\nSome resource (e.g. a preimage) is unavailable right now. …\nA trait for querying a single value from a type.\nParityDB can be enabled with a feature flag, but is still …\nZero-sized type used to mark things that “act like” …\nBy default, Substrate uses RocksDB, so this will be the …\nReturn the current value.")