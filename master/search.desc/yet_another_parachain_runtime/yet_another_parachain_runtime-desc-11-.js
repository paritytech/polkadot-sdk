searchState.loadedDescShard("yet_another_parachain_runtime", 11, "Get a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll pallets included in the runtime as a nested tuple of …\nAll pallets included in the runtime as a nested tuple of …\nMeans for transacting assets on this chain\nProvides an implementation of <code>PalletInfo</code> to provide …\nThe aggregated runtime call type.\nA reason for placing a freeze on funds.\nA reason for placing a hold on funds.\nAn identifier for each lock placed on funds.\nThe runtime origin type representing the origin of a call.\nA reason for slashing funds.\nAn aggregation of all <code>Task</code> enums across all pallets …\nRuntime query type.\nGenesis accounts: id, account_id, balance\nGenesis assets: id, owner, is_sufficient, min_balance\nDerived development accounts(Optional):\nConvenience function for view functions dispatching and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert to runtime origin with caller being system signed …\nConvert to runtime origin using […\nConvert to runtime origin, using as filter: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptionally convert the <code>DispatchError</code> into the <code>RuntimeError</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenesis metadata: id, name, symbol, decimals\nGenesis <code>NextAssetId</code>.\nCreate with system none origin and …\nCreate with system root origin and …\nThe default version to encode outgoing XCM messages with.\nCreate with system signed origin and …\nThe default versioned locations to support at genesis.\nAll pallets included in the runtime as a nested tuple of …\nAll pallets included in the runtime as a nested tuple of …\nProvides an implementation of <code>PalletInfo</code> to provide …\nThe aggregated runtime call type.\nA reason for placing a freeze on funds.\nA reason for placing a hold on funds.\nAn identifier for each lock placed on funds.\nThe runtime origin type representing the origin of a call.\nA reason for slashing funds.\nAn aggregation of all <code>Task</code> enums across all pallets …\nRuntime query type.\nDerived development accounts(Optional):\nConvenience function for view functions dispatching and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert to runtime origin using […\nReturns the argument unchanged.\nConvert to runtime origin using […\nConvert to runtime origin, using as filter: …\nConvert to runtime origin with caller being system signed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptionally convert the <code>DispatchError</code> into the <code>RuntimeError</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate with system none origin and …\nCreate with system root origin and …\nThe default version to encode outgoing XCM messages with.\nCreate with system signed origin and …\nThe default versioned locations to support at genesis.\nThis derives <code>Debug</code> for a struct where each field must be …\nDefines a host functions set that can be imported by …\nAllow the callee to reenter into the current contract.\nIdentical to <code>Self::FORWARD_INPUT</code> but without consuming the …\nFlags used to change the behaviour of <code>seal_call</code> and …\nThe call dispatched by <code>call_runtime</code> was executed but …\nThe called function ran to completion but decided to …\nThe called function trapped and has its state changes …\nNo code could be found at the supplied code hash.\nECDSA public key recovery failed. Most probably wrong …\nForward the input of current function to the callee.\nThe passed key does not exist in storage.\nThe call to <code>debug_message</code> had no effect because debug …\nThe account that was called is no contract.\nIndicates that the callee is restricted from modifying the …\nIf this bit is set all changes made by the contract …\nThe raw return code returned by the host side.\nEvery error that can be returned to a contract when it …\nFlags used by a contract to customize exit behaviour.\nsr25519 signature verification failed.\nAPI call successful.\nDo not return from the call but rather return the result …\nTransfer failed for other not further specified reason. …\nReturns if an unknown error was received from the host …\nThe <code>xcm_execute</code> call failed.\nThe <code>xcm_send</code> call failed.\nDeprecated and no longer returned: There is only the …\nDeprecated and no longer returned: Endowment is no longer …\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying <code>u32</code> converted into <code>bool</code>.\nReturns the raw underlying <code>u32</code> representation.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nA vote for a referendum of a particular account.\nThe account is already delegating.\nThe account currently has votes attached to it and the …\nPermitted to do everything.\nThe class ID supplied is invalid.\nProvider for the block number. Normally this is the …\nContains a variant per dispatchable extrinsic that this …\nInformation concerning the direct vote-casting of some …\nThe account is voting directly.\nThe account is voting directly.\nThe voting classes which have a non-zero lock requirement …\nThe class must be supplied since it is not easily …\nThe referendum is finished.\nConfiguration trait of this pallet.\nA value denoting the strength of conviction of a vote.\nCurrency type with which voting happens.\nAn account has delegated their vote to another account. …\nInformation concerning the delegation of some voting power.\nThe account is delegating <code>balance</code> of its balance to a …\nThe account is delegating <code>balance</code> of its balance to a …\nAmount of votes and capital placed in delegation for an …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nToo high a balance was provided that the account cannot …\n1x votes, locked for an enactment period following a …\n2x votes, locked for 2x enactment periods following a …\n3x votes, locked for 4x…\n4x votes, locked for 8x…\n5x votes, locked for 16x…\n6x votes, locked for 32x…\nThe maximum amount of tokens which may be used for voting. …\nThe maximum number of concurrent votes an account may have.\nMaximum number of votes reached.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe actor has no permission to conduct the action.\nThe actor has no permission to conduct the action right …\n0.1x votes, unlocked.\nThe referendum is not started.\nDelegation to oneself makes no sense.\nThe account is not currently delegating.\nPoll is not ongoing.\nThe given account did not vote on the poll.\nThe referendum is ongoing.\nPermitted to do only the changes that do not need the owner…\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe implementation of the logic which conducts polls.\nA split vote with balances given for both ways, and with …\nA split vote with balances given for both ways as well as …\nA standard vote, one-way (approve or reject) with a given …\nRepresents the differents states of a referendum.\nInfo regarding an ongoing referendum.\nAn [account] has cancelled a previous delegation operation.\nWhether an <code>unvote</code> operation is able to make actions that …\nA number of lock periods, plus a vote, one way or the …\nThe minimum period of vote locking.\nA vote has been removed\nThe lockup period of a conviction vote expired, and the …\nAn account has voted\nAn indicator for what an account is doing; it can either …\nAll voting for a particular voter in a particular voting …\nTrait for voting hooks that are called during various …\nHooks are called when a new vote is registered or an …\nWeight functions needed for <code>pallet_conviction_voting</code>.\nWeight information for extrinsics in this pallet.\nAdd an account’s vote into the tally.\nReturns <code>Some</code> with whether the vote is an aye vote if it is …\nThe number of aye votes, expressed in terms of …\nThe number of aye votes, expressed in terms of …\nThe total balance involved in this vote.\nThe amount of balance delegated.\nConvictionVoting pallet benchmarking.\nThe amount of raw capital, used for the support.\nThe conviction with which the voting power is delegated. …\nDelegate the voting power (with some given conviction) of …\nDelegate the voting power (with some given conviction) of …\nThe total amount of delegations that this account has …\nThe total amount of delegations that this account has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new tally.\nIncrement some amount of votes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of time (in number of periods) that our …\nThe amount of this account’s balance that must currently …\nReturns <code>Some</code> of the lock periods that the account is …\nThe number of nay votes, expressed in terms of …\nThe number of nay votes, expressed in terms of …\nCreate a call with the variant <code>delegate</code>.\nCreate a call with the variant <code>remove_other_vote</code>.\nCreate a call with the variant <code>remove_vote</code>.\nCreate a call with the variant <code>undelegate</code>.\nCreate a call with the variant <code>unlock</code>.\nCreate a call with the variant <code>vote</code>.\nWill be called by benchmarking before calling …\nWill be called by benchmarking before calling <code>on_vote</code> in a …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAny pre-existing locks from past voting/delegating …\nAny pre-existing locks from past voting/delegating …\nDecrement some amount of votes.\nRemove an account’s vote from the tally.\nRemove a vote for a poll.\nRemove a vote for a poll.\nRemove a vote for a poll.\nRemove a vote for a poll.\nThe basic number of aye votes, expressed pre-conviction.\nThe basic number of aye votes, expressed pre-conviction.\nThe account to which the voting power is delegated.\nUndelegate the voting power of the sending account for a …\nUndelegate the voting power of the sending account for a …\nRemove the lock caused by prior voting/delegating which …\nRemove the lock caused by prior voting/delegating which …\nVote in a poll. If <code>vote.is_aye()</code>, the vote is to enact the …\nVote in a poll. If <code>vote.is_aye()</code>, the vote is to enact the …\nThe votes of a voter of the given <code>balance</code> with our …\nThe number of votes (this is post-conviction).\nThe current votes of the account.\nAutogenerated weights for <code>pallet_conviction_voting</code>\nThe account is already delegating.\nThe account currently has votes attached to it and the …\nThe class ID supplied is invalid.\nProvider for the block number. Normally this is the …\nContains a variant per dispatchable extrinsic that this …\nThe voting classes which have a non-zero lock requirement …\nThe class must be supplied since it is not easily …\nConfiguration trait of this pallet.\nCurrency type with which voting happens.\nAn account has delegated their vote to another account. …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nToo high a balance was provided that the account cannot …\nThe maximum amount of tokens which may be used for voting. …\nThe maximum number of concurrent votes an account may have.\nMaximum number of votes reached.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe actor has no permission to conduct the action.\nThe actor has no permission to conduct the action right …\nDelegation to oneself makes no sense.\nThe account is not currently delegating.\nPoll is not ongoing.\nThe given account did not vote on the poll.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe implementation of the logic which conducts polls.\nAn [account] has cancelled a previous delegation operation.\nThe minimum period of vote locking.\nA vote has been removed\nThe lockup period of a conviction vote expired, and the …\nAn account has voted\nAll voting for a particular voter in a particular voting …\nHooks are called when a new vote is registered or an …\nWeight information for extrinsics in this pallet.\nDelegate the voting power (with some given conviction) of …\nRemove a vote for a poll.\nRemove a vote for a poll.\nUndelegate the voting power of the sending account for a …\nRemove the lock caused by prior voting/delegating which …\nVote in a poll. If <code>vote.is_aye()</code>, the vote is to enact the …\nWeights for <code>pallet_conviction_voting</code> using the Substrate …\nWeight functions needed for <code>pallet_conviction_voting</code>.\nStorage: <code>Parameters::Parameters</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>ConvictionVoting::VotingFor</code> (r:1 w:1) Proof: …\nStorage: <code>ConvictionVoting::VotingFor</code> (r:1 w:1) Proof: …\nStorage: <code>ConvictionVoting::VotingFor</code> (r:2 w:2) Proof: …\nStorage: <code>ConvictionVoting::VotingFor</code> (r:1 w:1) Proof: …\nStorage: <code>Referenda::ReferendumInfoFor</code> (r:1 w:1) Proof: …\nStorage: <code>Referenda::ReferendumInfoFor</code> (r:1 w:1) Proof: …\nMember activity flag has been set.\nThe candidate has already been inducted. This should never …\nThe origin which has permission to issue a proof that a …\nThe type in which salaries/budgets are measured.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nMember has been demoted to the given (non-zero) rank.\nGuard to ensure that the given origin is inducted into …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA piece of evidence to underpin a Wish.\nSome submitted evidence was judged and removed. There may …\nThe maximum size in bytes submitted evidence is allowed to …\nThe origin that has permission to “fast” promote a …\nPre-ranked account has been inducted at their current rank.\nThe origin which has permission to move a candidate into …\nMember has begun being tracked in this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe given rank is invalid - this generally means it’s …\nRepresents the highest possible rank in this pallet.\nThe status of a claimant.\nSome evidence together with the desired outcome for which …\nThe status of a single member.\nThe current membership of the fellowship.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe origin does not have enough permission to do this …\nThe candidate has not been inducted, so cannot be …\nNo work needs to be done at present for this member.\nMember has been removed from being tracked in this pallet …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overall status of the system.\nParameters for the pallet have changed.\nThe origin which has permission update the parameters.\nThe status of the pallet instance.\nThe origin which has permission to promote a member. The …\nMember has been promoted to the given rank.\nMember wishes to be promoted.\nMember has been proven at their current rank, postponing …\nMember’s rank is not zero.\nMember has stated evidence of their efforts their request …\nMember wishes only to retain their current rank.\nThe runtime event type.\nWeights for <code>pallet_core_fellowship</code> using the Substrate …\nA member had its AccountId swapped.\nOperation cannot be done yet since not enough time has …\nMember’s rank is not as expected - generally means that …\nMember’s rank is too low.\nWeight functions needed for <code>pallet_core_fellowship</code>.\nWeight information for extrinsics in this pallet.\nThe desired outcome for which evidence is presented.\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nApprove a member to continue at their rank.\nApprove a member to continue at their rank.\nBump the state of a member.\nBump the state of a member.\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nThe period between which unproven members become demoted.\nThe period between which unproven members become demoted.\nThe period between which unproven members become demoted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nIntroduce an already-ranked individual of the collective …\nIntroduce an already-ranked individual of the collective …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nIntroduce an already-ranked individual of the collective …\nIntroduce an already-ranked individual of the collective …\nStorage: <code>CoreFellowship::Member</code> (r:1 w:1) Proof: …\nIntroduce a new and unranked candidate (rank zero).\nIntroduce a new and unranked candidate (rank zero).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage migrations for the core-fellowship pallet.\nThe period between which members must wait before they may …\nThe period between which members must wait before they may …\nThe period between which members must wait before they may …\nCreate a call with the variant <code>approve</code>.\nCreate a call with the variant <code>bump</code>.\nCreate a call with the variant <code>import</code>.\nCreate a call with the variant <code>import_member</code>.\nCreate a call with the variant <code>induct</code>.\nCreate a call with the variant <code>offboard</code>.\nCreate a call with the variant <code>promote</code>.\nCreate a call with the variant <code>promote_fast</code>.\nCreate a call with the variant <code>set_active</code>.\nCreate a call with the variant <code>set_params</code>.\nCreate a call with the variant <code>set_partial_params</code>.\nCreate a call with the variant <code>submit_evidence</code>.\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nStop tracking a prior member who is now not a ranked …\nStop tracking a prior member who is now not a ranked …\nAmount by which an account can remain at rank 0 (candidate …\nAmount by which an account can remain at rank 0 (candidate …\nAmount by which an account can remain at rank 0 (candidate …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nStorage: <code>RankedCollective::Members</code> (r:1 w:1) Proof: …\nIncrement the rank of a ranked and tracked account.\nIncrement the rank of a ranked and tracked account.\nStorage: <code>RankedCollective::Members</code> (r:1 w:1) Proof: …\nFast promotions can skip ranks and ignore the …\nFast promotions can skip ranks and ignore the …\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nSet whether a member is active or not.\nSet whether a member is active or not.\nStorage: <code>CoreFellowship::Params</code> (r:0 w:1) Proof: …\nSet the parameters.\nSet the parameters.\nStorage: <code>CoreFellowship::Params</code> (r:1 w:1) Proof: …\nSet the parameters partially.\nSet the parameters partially.\nStorage: <code>CoreFellowship::Member</code> (r:1 w:0) Proof: …\nProvide evidence that a rank is deserved.\nProvide evidence that a rank is deserved.\nAutogenerated weights for <code>pallet_core_fellowship</code>\nThe evidence of efforts.\nNew rank. If <code>None</code> then candidate record was removed …\nThe old rank, prior to this change.\nThe member/candidate.\nThe desired outcome for which the evidence was presented.\n<code>UncheckedOnRuntimeUpgrade</code> implementation <code>MigrateToV1</code> …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMember activity flag has been set.\nThe candidate has already been inducted. This should never …\nThe origin which has permission to issue a proof that a …\nThe type in which salaries/budgets are measured.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nMember has been demoted to the given (non-zero) rank.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nSome submitted evidence was judged and removed. There may …\nThe maximum size in bytes submitted evidence is allowed to …\nThe origin that has permission to “fast” promote a …\nPre-ranked account has been inducted at their current rank.\nThe origin which has permission to move a candidate into …\nMember has begun being tracked in this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe given rank is invalid - this generally means it’s …\nRepresents the highest possible rank in this pallet.\nThe status of a claimant.\nSome evidence together with the desired outcome for which …\nThe current membership of the fellowship.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe origin does not have enough permission to do this …\nThe candidate has not been inducted, so cannot be …\nNo work needs to be done at present for this member.\nMember has been removed from being tracked in this pallet …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overall status of the system.\nParameters for the pallet have changed.\nThe origin which has permission update the parameters.\nThe origin which has permission to promote a member. The …\nMember has been promoted to the given rank.\nMember has been proven at their current rank, postponing …\nMember’s rank is not zero.\nMember has stated evidence of their efforts their request …\nThe runtime event type.\nA member had its AccountId swapped.\nOperation cannot be done yet since not enough time has …\nMember’s rank is not as expected - generally means that …\nMember’s rank is too low.\nWeight information for extrinsics in this pallet.\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nApprove a member to continue at their rank.\nBump the state of a member.\nThe period between which unproven members become demoted.\nThe period between which unproven members become demoted.\nIntroduce an already-ranked individual of the collective …\nIntroduce an already-ranked individual of the collective …\nIntroduce a new and unranked candidate (rank zero).\nThe period between which members must wait before they may …\nThe period between which members must wait before they may …\nStop tracking a prior member who is now not a ranked …\nAmount by which an account can remain at rank 0 (candidate …\nAmount by which an account can remain at rank 0 (candidate …\nThe amounts to be paid when a member of a given rank (-1) …\nThe amounts to be paid when a member of a given rank (-1) …\nIncrement the rank of a ranked and tracked account.\nFast promotions can skip ranks and ignore the …\nSet whether a member is active or not.\nSet the parameters.\nSet the parameters partially.\nProvide evidence that a rank is deserved.\nThe evidence of efforts.\nNew rank. If <code>None</code> then candidate record was removed …\nThe old rank, prior to this change.\nThe member/candidate.\nThe desired outcome for which the evidence was presented.\nWeights for <code>pallet_core_fellowship</code> using the Substrate …\nWeight functions needed for <code>pallet_core_fellowship</code>.\nMap of <code>Agent</code> to their <code>Ledger</code>.\nAn existing staker cannot perform this action.\nSome corruption in internal state.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCore staking implementation.\nCurrency type.\nFunds delegated by a delegator.\nMap of Delegators to their <code>Delegation</code>.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA reason for placing a hold on funds.\nDelegation conditions are not met.\nReward Destination cannot be same as <code>Agent</code> account.\nThe log target of this pallet.\nUnclaimed delegation funds migrated to delegator.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot an existing <code>Agent</code> account.\nThe account cannot perform this operation.\nNot a Delegator account.\nThe account does not have enough funds to perform the …\nOperation not supported by this pallet.\n<code>Agent</code> has no pending slash to be applied.\nHandler for the unbalanced reduction when slashing a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nInjected identifier for the pallet.\nFunds released to a delegator.\nThe overarching event type.\nOverarching hold reason.\nFraction of the slash that is rewarded to the caller of …\nFunds slashed from a delegator.\nFunds held for stake delegation to another account.\nUnapplied pending slash restricts operation on <code>Agent</code>.\nFailed to withdraw amount from Core Staking.\nEffective balance of the <code>Agent</code> account.\nAdd more delegation to the <code>Agent</code> account.\nDelegate given <code>amount</code> of tokens to an <code>Agent</code> account.\nTake slash <code>amount</code> from agent’s <code>pending_slash</code>counter and …\nOnly used for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDerive an account from the migrating agent account where …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigrate delegated funds that are held in <code>proxy_delegator</code> …\nMigrate from a <code>Nominator</code> account to <code>Agent</code> account.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturns pending slash of the <code>agent</code>.\nDelegate funds to an <code>Agent</code>.\nRegister an account to become a stake <code>Agent</code>. Sometimes …\nRelease previously delegated funds by delegator to origin.\nRemove an account from being an <code>Agent</code>.\nRemove <code>Agent</code> registration.\nBasic types used in delegated staking.\nWithdraw delegation of <code>delegator</code> to <code>Agent</code>.\nMigrates <code>ProxyDelegator</code> accounts with better entropy than …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMap of <code>Agent</code> to their <code>Ledger</code>.\nAn existing staker cannot perform this action.\nSome corruption in internal state.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCore staking implementation.\nCurrency type.\nFunds delegated by a delegator.\nMap of Delegators to their <code>Delegation</code>.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA reason for placing a hold on funds.\nDelegation conditions are not met.\nReward Destination cannot be same as <code>Agent</code> account.\nUnclaimed delegation funds migrated to delegator.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot an existing <code>Agent</code> account.\nThe account cannot perform this operation.\nNot a Delegator account.\nThe account does not have enough funds to perform the …\nOperation not supported by this pallet.\n<code>Agent</code> has no pending slash to be applied.\nHandler for the unbalanced reduction when slashing a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nInjected identifier for the pallet.\nFunds released to a delegator.\nThe overarching event type.\nOverarching hold reason.\nFraction of the slash that is rewarded to the caller of …\nFunds slashed from a delegator.\nFunds held for stake delegation to another account.\nUnapplied pending slash restricts operation on <code>Agent</code>.\nFailed to withdraw amount from Core Staking.\nLedger of all delegations to an <code>Agent</code>.\nWrapper around <code>AgentLedger</code> to provide some helper …\nInformation about delegation of a <code>delegator</code>.\nThe target of delegation.\nThe amount delegated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstorage key\nstorage value\nWhere the reward should be paid out.\nSlashes that are not yet applied. This affects the …\nSum of all delegated funds to this <code>Agent</code>.\nFunds that are withdrawn from core staking but not …\nA vote for a referendum of a particular account.\nCannot cancel the same proposal twice\nThe account is already delegating.\nIdentity may not veto a proposal twice\nPermitted to do everything.\nA record of who vetoed what. Maps proposal hash to a …\nOrigin from which proposals may be blacklisted.\nA proposal_hash has been blacklisted permanently.\nContains a variant per dispatchable extrinsic that this …\nOrigin from which a proposal may be cancelled and its …\nOrigin from which any referendum may be cancelled in an …\nRecord of all proposals that have been subject to …\nA referendum has been cancelled.\nConfiguration trait of this pallet.\nA value denoting the strength of conviction of a vote.\nPeriod in blocks where an external proposal may not be …\nCurrency type for this pallet.\nAn account has delegated their vote to another account.\nThe account is delegating <code>balance</code> of its balance to a …\nAmount of votes and capital placed in delegation for an …\nThose who have locked a deposit.\nThe account is voting directly. <code>delegations</code> is the total …\nProposal already made\nThe period between a proposal being approved and enacted.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nExternal proposal.\nOrigin from which the next tabled referendum may be …\nOrigin from which the next tabled referendum may be …\nOrigin from which the next tabled referendum may be …\nAn external proposal has been tabled.\nOrigin from which the next majority-carries (or more …\nMinimum voting period allowed for a fast-track referendum.\nReferendum finished at <code>end</code>, and has been <code>approved</code> or …\nCan be used to configure the genesis state of this pallet.\nA bounded <code>Call</code>. Its encoding must be at most 128 bytes.\nIndicator for whether an emergency origin is even allowed …\nThe instant referendum origin is currently disallowed.\nOrigin from which the next majority-carries (or more …\nToo high a balance was provided that the account cannot …\nInvalid hash\nTrue if the last referendum tabled was submitted …\nHow often (in blocks) new public referenda are launched.\nA hash with no preimage length. We do not support creation …\n1x votes, locked for an enactment period following a …\n2x votes, locked for 2x enactment periods following a …\n3x votes, locked for 4x…\n4x votes, locked for 8x…\n5x votes, locked for 16x…\n6x votes, locked for 32x…\nA hash of the call together with an upper limit for its …\nThe lowest referendum index representing an unbaked …\nThe maximum number of items which can be blacklisted.\nThe maximum number of deposits a public proposal may have …\nThe maximum number of public proposals that can exist at …\nThe maximum number of votes for an account.\nMaximum number of votes reached.\nMetadata for a proposal or a referendum has been cleared.\nGeneral information concerning any proposal or referendum. …\nIdentifies an owner of a metadata.\nMetadata for a proposal or a referendum has been set.\nMetadata has been transferred to new owner.\nThe minimum amount to be used as a deposit for a public …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe referendum to be tabled whenever it would be valid to …\nThe actor has no permission to conduct the action.\nNo external proposal\n0.1x votes, unlocked.\nNo proposals waiting\nDelegation to oneself makes no sense.\nThe account is not currently delegating.\nA proposal has been rejected by referendum.\nNext external proposal not simple majority\nThe given account did not vote on the referendum.\nReferendum is happening, the arg is the block number at …\nPermitted to do only the changes that do not need the owner…\nThe <code>Pallet</code> struct, the main type that implements traits …\nOverarching type of all pallets origins.\nA proposal has been approved by referendum.\nThe preimage does not exist.\nThe Preimage provider.\nA proposal index.\nPublic proposal of the index.\nProposal still blacklisted\nA proposal got canceled.\nProposal does not exist\nA motion has been proposed by a public account.\nThe number of (public) proposals that have been made so …\nThe public proposals. Unsorted. The second item is the …\nReferendum of the index.\nThe next free referendum index, aka the number of …\nA referendum index.\nInfo regarding a referendum, present or past.\nInformation concerning any given referendum.\nVote given for invalid referendum\nInfo regarding an ongoing referendum.\nThe Scheduler.\nAn account has seconded a proposal\nA simple majority of approvals is needed to pass this vote.\nHandler for the unbalanced reduction when slashing a …\nA split vote with balances given for both ways, and with …\nA standard vote, one-way (approve or reject) with a given …\nA referendum has begun.\nOrigin from which the new proposal can be made.\nA supermajority of rejects is needed to fail this vote.\nA supermajority of approvals is needed to pass this vote.\nA public proposal has been tabled for referendum vote.\nInfo regarding an ongoing referendum.\nMaximum number of items reached.\nAn account has cancelled a previous delegation operation.\nWhether an <code>unvote</code> operation is able to make actions that …\nValue too low\nOrigin for anyone able to veto proposals.\nAn external proposal has been vetoed.\nA number of lock periods, plus a vote, one way or the …\nThe minimum period of vote locking.\nA means of determining if a vote is past pass threshold.\nAn account has voted in a referendum\nThe account currently has votes attached to it and the …\nAn indicator for what an account is doing; it can either …\nAll votes for a particular voter. We store the balance for …\nHow often (in blocks) to check for new votes.\nVoting period too low\nWeight functions needed for <code>pallet_democracy</code>.\nInvalid upper bound.\nAdd an account’s vote into the tally.\nGiven a <code>tally</code> of votes and a total size of <code>electorate</code>, …\nReturns <code>Some</code> with whether the vote is an aye vote if it is …\nThe number of aye votes, expressed in terms of …\nGet the amount locked in support of <code>proposal</code>; <code>None</code> if …\nThe total balance involved in this vote.\nDemocracy pallet benchmarking.\nPermanently place a proposal into the blacklist. This …\nPermanently place a proposal into the blacklist. This …\nRemove a proposal.\nRemove a proposal.\nRemove a referendum.\nRemove a referendum.\nThe amount of raw capital, used for the turnout.\nClears all public proposals.\nClears all public proposals.\nThe delay (in blocks) to wait after a successful …\nDelegate the voting power (with some given conviction) of …\nDelegate the voting power (with some given conviction) of …\nSchedule an emergency cancellation of a referendum. Cannot …\nSchedule an emergency cancellation of a referendum. Cannot …\nWhen voting on this referendum will end.\nSchedule a referendum to be tabled once it is legal to …\nSchedule a referendum to be tabled once it is legal to …\nSchedule a negative-turnout-bias referendum to be tabled …\nSchedule a negative-turnout-bias referendum to be tabled …\nSchedule a majority-carries referendum to be tabled next …\nSchedule a majority-carries referendum to be tabled next …\nSchedule the currently externally-proposed …\nSchedule the currently externally-proposed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nIncrement some amount of votes.\nRemove a referendum.\nStart a referendum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of time (in number of periods) that our …\nThe amount of this account’s balance that must currently …\nReturns <code>Some</code> of the lock periods that the account is …\nGet all referenda ready for tally at block <code>n</code>.\nAll migrations of this pallet.\nThe number of nay votes, expressed in terms of …\nCreate a new tally.\nCreate a new instance.\nCreate a call with the variant <code>blacklist</code>.\nCreate a call with the variant <code>cancel_proposal</code>.\nCreate a call with the variant <code>cancel_referendum</code>.\nCreate a call with the variant <code>clear_public_proposals</code>.\nCreate a call with the variant <code>delegate</code>.\nCreate a call with the variant <code>emergency_cancel</code>.\nCreate a call with the variant <code>external_propose</code>.\nCreate a call with the variant <code>external_propose_default</code>.\nCreate a call with the variant <code>external_propose_majority</code>.\nCreate a call with the variant <code>fast_track</code>.\nCreate a call with the variant <code>propose</code>.\nCreate a call with the variant <code>remove_other_vote</code>.\nCreate a call with the variant <code>remove_vote</code>.\nCreate a call with the variant <code>second</code>.\nCreate a call with the variant <code>set_metadata</code>.\nCreate a call with the variant <code>undelegate</code>.\nCreate a call with the variant <code>unlock</code>.\nCreate a call with the variant <code>veto_external</code>.\nCreate a call with the variant <code>vote</code>.\nWeight: see <code>begin_block</code>\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe proposal being voted on.\nPropose a sensitive action to be taken.\nPropose a sensitive action to be taken.\nDecrement some amount of votes.\nRemove an account’s vote from the tally.\nRemove a vote for a referendum.\nRemove a vote for a referendum.\nRemove a vote for a referendum.\nRemove a vote for a referendum.\nSignals agreement with a particular proposal.\nSignals agreement with a particular proposal.\nSet or clear a metadata of a proposal or a referendum.\nSet or clear a metadata of a proposal or a referendum.\nThe current tally of votes in this referendum.\nThe thresholding mechanism to determine whether it passed.\nThe amount of funds currently expressing its opinion. …\nUndelegate the voting power of the sending account.\nUndelegate the voting power of the sending account.\nUnlock tokens that have an expired lock.\nUnlock tokens that have an expired lock.\nVeto and blacklist the external proposal hash.\nVeto and blacklist the external proposal hash.\nVote in a referendum. If <code>vote.is_aye()</code>, the vote is to …\nVote in a referendum. If <code>vote.is_aye()</code>, the vote is to …\nThe votes of a voter of the given <code>balance</code> with our …\nThe number of votes (this is post-conviction).\nAutogenerated weights for <code>pallet_democracy</code>\nPreimage hash.\nPreimage hash.\nPreimage hash.\nMetadata owner.\nMetadata owner.\nNew metadata owner.\nPrevious metadata owner.\nThe total amount of delegations that this account has …\nThe total amount of delegations that this account has …\nAny pre-existing locks from past voting/delegating …\nAny pre-existing locks from past voting/delegating …\nThe current votes of the account.\nMigration to unlock and unreserve all pallet funds. A …\nV1 storage migrations for the preimage pallet. Storage …\nThe account ID used in the runtime.\nThe block number as configured in the runtime.\nThe currency type used in the runtime.\nThe DB weight as configured in the runtime to calculate …\nThe maximum deposit as configured previously in the …\nThe maximum number of votes as configured previously in …\nThe name of the pallet as previously configured in …\nA migration that unreserves all deposit and unlocks all …\nThe configuration for <code>UnlockAndUnreserveAllFunds</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nExecutes the migration.\nPerforms post-upgrade sanity checks:\nCollects pre-migration data useful for validating the …\nMigration for translating bare <code>Hash</code>es into <code>Bounded&lt;Call&gt;</code>s.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCannot cancel the same proposal twice\nThe account is already delegating.\nIdentity may not veto a proposal twice\nA record of who vetoed what. Maps proposal hash to a …\nOrigin from which proposals may be blacklisted.\nA proposal_hash has been blacklisted permanently.\nContains a variant per dispatchable extrinsic that this …\nOrigin from which a proposal may be cancelled and its …\nOrigin from which any referendum may be cancelled in an …\nRecord of all proposals that have been subject to …\nA referendum has been cancelled.\nConfiguration trait of this pallet.\nPeriod in blocks where an external proposal may not be …\nCurrency type for this pallet.\nAn account has delegated their vote to another account.\nThose who have locked a deposit.\nProposal already made\nThe period between a proposal being approved and enacted.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nOrigin from which the next tabled referendum may be …\nOrigin from which the next tabled referendum may be …\nOrigin from which the next tabled referendum may be …\nAn external proposal has been tabled.\nOrigin from which the next majority-carries (or more …\nMinimum voting period allowed for a fast-track referendum.\nCan be used to configure the genesis state of this pallet.\nIndicator for whether an emergency origin is even allowed …\nThe instant referendum origin is currently disallowed.\nOrigin from which the next majority-carries (or more …\nToo high a balance was provided that the account cannot …\nInvalid hash\nTrue if the last referendum tabled was submitted …\nHow often (in blocks) new public referenda are launched.\nThe lowest referendum index representing an unbaked …\nThe maximum number of items which can be blacklisted.\nThe maximum number of deposits a public proposal may have …\nThe maximum number of public proposals that can exist at …\nThe maximum number of votes for an account.\nMaximum number of votes reached.\nMetadata for a proposal or a referendum has been cleared.\nGeneral information concerning any proposal or referendum. …\nMetadata for a proposal or a referendum has been set.\nMetadata has been transferred to new owner.\nThe minimum amount to be used as a deposit for a public …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe referendum to be tabled whenever it would be valid to …\nThe actor has no permission to conduct the action.\nNo external proposal\nNo proposals waiting\nDelegation to oneself makes no sense.\nThe account is not currently delegating.\nA proposal has been rejected by referendum.\nNext external proposal not simple majority\nThe given account did not vote on the referendum.\nThe <code>Pallet</code> struct, the main type that implements traits …\nOverarching type of all pallets origins.\nA proposal has been approved by referendum.\nThe preimage does not exist.\nThe Preimage provider.\nProposal still blacklisted\nA proposal got canceled.\nProposal does not exist\nA motion has been proposed by a public account.\nThe number of (public) proposals that have been made so …\nThe public proposals. Unsorted. The second item is the …\nThe next free referendum index, aka the number of …\nInformation concerning any given referendum.\nVote given for invalid referendum\nThe Scheduler.\nAn account has seconded a proposal\nHandler for the unbalanced reduction when slashing a …\nA referendum has begun.\nOrigin from which the new proposal can be made.\nA public proposal has been tabled for referendum vote.\nMaximum number of items reached.\nAn account has cancelled a previous delegation operation.\nValue too low\nOrigin for anyone able to veto proposals.\nAn external proposal has been vetoed.\nThe minimum period of vote locking.\nAn account has voted in a referendum\nThe account currently has votes attached to it and the …\nAll votes for a particular voter. We store the balance for …\nHow often (in blocks) to check for new votes.\nVoting period too low\nInvalid upper bound.\nPermanently place a proposal into the blacklist. This …\nRemove a proposal.\nRemove a referendum.\nClears all public proposals.\nDelegate the voting power (with some given conviction) of …\nSchedule an emergency cancellation of a referendum. Cannot …\nSchedule a referendum to be tabled once it is legal to …\nSchedule a negative-turnout-bias referendum to be tabled …\nSchedule a majority-carries referendum to be tabled next …\nSchedule the currently externally-proposed …\nPropose a sensitive action to be taken.\nRemove a vote for a referendum.\nRemove a vote for a referendum.\nSignals agreement with a particular proposal.\nSet or clear a metadata of a proposal or a referendum.\nUndelegate the voting power of the sending account.\nUnlock tokens that have an expired lock.\nVeto and blacklist the external proposal hash.\nVote in a referendum. If <code>vote.is_aye()</code>, the vote is to …\nPreimage hash.\nPreimage hash.\nPreimage hash.\nMetadata owner.\nMetadata owner.\nNew metadata owner.\nPrevious metadata owner.\nWeights for <code>pallet_democracy</code> using the Substrate node and …\nWeight functions needed for <code>pallet_democracy</code>.\nStorage: <code>Democracy::PublicProps</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::PublicProps</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::MetadataOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:1 w:0) Proof: …\nStorage: <code>Democracy::PublicProps</code> (r:1 w:0) Proof: …\nStorage: <code>Democracy::PublicProps</code> (r:0 w:1) Proof: …\nStorage: <code>Democracy::ReferendumInfoOf</code> (r:1 w:0) Proof: …\nStorage: <code>Democracy::VotingOf</code> (r:3 w:3) Proof: …\nStorage: <code>Democracy::ReferendumInfoOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:0 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:0 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Democracy::LowestUnbaked</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::LowestUnbaked</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::PublicPropCount</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::ReferendumInfoOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::ReferendumInfoOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::DepositOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:1 w:0) Proof: …\nStorage: <code>Democracy::PublicProps</code> (r:1 w:0) Proof: …\nStorage: <code>Preimage::StatusFor</code> (r:1 w:0) Proof: …\nStorage: <code>Democracy::VotingOf</code> (r:2 w:2) Proof: …\nStorage: <code>Democracy::VotingOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::VotingOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::NextExternal</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::ReferendumInfoOf</code> (r:1 w:1) Proof: …\nStorage: <code>Democracy::ReferendumInfoOf</code> (r:1 w:1) Proof: …\nContains a variant per dispatchable extrinsic that this …\nThe <code>ConcatIncrementalExtra</code> implements a creation operation …\nConfiguration trait of this pallet.\nDerivative creation operation. Used in the …\nAn Origin allowed to create a new derivative.\nThe type of a derivative\nA derivative already exists.\nA derivative is created.\nA derivative is destroyed.\nStorage type is <code>StorageMap</code> with key type …\nOptional derivative extra data\nFailed to get the derivative’s extra data.\nA mapping between an original asset ID and a local …\nFailed to find a derivative.\nStorage type is <code>StorageMap</code> with key type …\nThe <code>DerivativeToOriginalConvert</code> uses the provided …\nDerivatives extra data.\nA registry abstracts the mapping between an <code>Original</code> …\nDerivative destruction operation. Used in the …\nAn Origin allowed to destroy a derivative.\nThe <code>EnsureNotDerivativeInstance</code> is an XCM Matcher that …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nInvalid asset to register as a derivative\nGets the <code>InvalidAsset</code> error from the given …\nIterator utilities for a derivatives registry.\nThe log target of this pallet.\nThe <code>MatchDerivativeInstances</code> is an XCM Matcher that uses a …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nFailed to deregister a non-registered derivative.\nThe <code>NoStoredMapping</code> adapter calls the <code>CreateOp</code> (which …\nThe type of an original\nFailed to get an original.\nStorage type is <code>StorageMap</code> with key type …\nThe <code>OriginalToDerivativeConvert</code> uses the provided …\nConverts a given <code>AssetId</code> to a <code>WithConfig</code> strategy with the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe <code>RegisterDerivative</code> implements a creation operation …\nA helper type representing the intention to store the …\nThe <code>StoreMapping</code> adapter obtains a <code>Derivative</code> value by …\nAn auto-generated getter for <code>DerivativeExtra</code>.\nAn auto-generated getter for <code>DerivativeToOriginal</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMiscellaneous traits and types for working with unique …\nCreate a call with the variant <code>create_derivative</code>.\nCreate a call with the variant <code>destroy_derivative</code>.\nAn auto-generated getter for <code>OriginalToDerivative</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe <code>ConcatIncrementalExtra</code> implements a creation operation …\nThe <code>DerivativeToOriginalConvert</code> uses the provided …\nDerivatives extra data.\nA registry abstracts the mapping between an <code>Original</code> …\nThe <code>EnsureNotDerivativeInstance</code> is an XCM Matcher that …\nIterator utilities for a derivatives registry.\nThe <code>MatchDerivativeInstances</code> is an XCM Matcher that uses a …\nThe <code>OriginalToDerivativeConvert</code> uses the provided …\nConverts a given <code>AssetId</code> to a <code>WithConfig</code> strategy with the …\nThe <code>RegisterDerivative</code> implements a creation operation …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nDerivative creation operation. Used in the …\nAn Origin allowed to create a new derivative.\nThe type of a derivative\nA derivative already exists.\nA derivative is created.\nA derivative is destroyed.\nStorage type is <code>StorageMap</code> with key type …\nOptional derivative extra data\nFailed to get the derivative’s extra data.\nA mapping between an original asset ID and a local …\nFailed to find a derivative.\nStorage type is <code>StorageMap</code> with key type …\nDerivative destruction operation. Used in the …\nAn Origin allowed to destroy a derivative.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nInvalid asset to register as a derivative\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nFailed to deregister a non-registered derivative.\nThe type of an original\nFailed to get an original.\nStorage type is <code>StorageMap</code> with key type …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe Hasher requirement is skipped by <code>dev_mode</code>. So, second …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe MEL requirement for bounded pallets is skipped by …\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>add_dummy</code>.\nCreate a call with the variant <code>set_bar</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe Hasher requirement is skipped by <code>dev_mode</code>. So, second …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe MEL requirement for bounded pallets is skipped by …\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nAn ID was renewed.\nA reserved ID was removed.\nA number of IDs was reserved.\nThe maximum number of people supported in a single …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe personal ID does not belong to a recognized person.\nThe personal ID is not reserved and awaiting recognition.\nThe personal ID does not belong to a suspended person.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe people we track along with their records.\nWho to tell when we recognise personhood.\nRegister multiple people.\nSuspend a number of people.\nSomeone’s personhood was resumed.\nThe record of recognized people.\nThe personal IDs that are reserved by unproven people.\nThe runtime event type.\nThe pallet disabled suspensions.\nThe pallet enabled suspensions.\nThe operation does not support this many people.\nThe origin which may command personhood updates through …\nWeight functions needed for pallet_dummy_dim.\nWeight information for extrinsics in this pallet.\nCancel a personal ID reservation.\nCancel a personal ID reservation.\nEnd a mutation session in the underlying <code>People</code> interface. …\nEnd a mutation session in the underlying <code>People</code> interface. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key of the person.\nCreate a call with the variant <code>cancel_id_reservation</code>.\nCreate a call with the variant <code>end_mutation_session</code>.\nCreate a call with the variant <code>recognize_personhood</code>.\nCreate a call with the variant <code>renew_id_reservation</code>.\nCreate a call with the variant <code>reserve_ids</code>.\nCreate a call with the variant <code>resume_personhood</code>.\nCreate a call with the variant <code>start_mutation_session</code>.\nCreate a call with the variant <code>suspend_personhood</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nGrant personhood for a list of candidates that have …\nGrant personhood for a list of candidates that have …\nRenew a personal ID. The ID must not be in use.\nRenew a personal ID. The ID must not be in use.\nReserve a number of personal IDs.\nReserve a number of personal IDs.\nResume someone’s personhood. The person must currently …\nResume someone’s personhood. The person must currently …\nStart a mutation session in the underlying <code>People</code> …\nStart a mutation session in the underlying <code>People</code> …\nSuspend the personhood of a list of recognized people. The …\nSuspend the personhood of a list of recognized people. The …\nFlag describing the suspension status.\nAutogenerated weights for pallet_ranked_collective\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nAn ID was renewed.\nA reserved ID was removed.\nA number of IDs was reserved.\nThe maximum number of people supported in a single …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe personal ID does not belong to a recognized person.\nThe personal ID is not reserved and awaiting recognition.\nThe personal ID does not belong to a suspended person.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe people we track along with their records.\nWho to tell when we recognise personhood.\nRegister multiple people.\nSuspend a number of people.\nSomeone’s personhood was resumed.\nThe record of recognized people.\nThe personal IDs that are reserved by unproven people.\nThe runtime event type.\nThe pallet disabled suspensions.\nThe pallet enabled suspensions.\nThe operation does not support this many people.\nThe origin which may command personhood updates through …\nWeight information for extrinsics in this pallet.\nCancel a personal ID reservation.\nEnd a mutation session in the underlying <code>People</code> interface. …\nThe key of the person.\nGrant personhood for a list of candidates that have …\nRenew a personal ID. The ID must not be in use.\nReserve a number of personal IDs.\nResume someone’s personhood. The person must currently …\nStart a mutation session in the underlying <code>People</code> …\nSuspend the personhood of a list of recognized people. The …\nFlag describing the suspension status.\nWeights for pallet_dummy_dim using the Substrate node and …\nWeight functions needed for pallet_dummy_dim.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe weight/accuracy type of each vote.\nDifferent operations that the <code>Config::AdminOrigin</code> can …\nThe origin that can perform administration operations on …\nSame as <code>AllVoterPagesOf</code>, but instead of being a nested …\nAlias for all pages of voters, parameterized by this crate…\nAn indicator of whether we should move to do the …\nThe relative distribution of a voter’s stake among the …\nContains a variant per dispatchable extrinsic that this …\nAn implementation of <code>OnRoundRotation</code> that immediately …\nCommon errors in all sub-pallets and miner.\nConfiguration trait of this pallet.\nA fallback implementation that silently continues into the …\nCurrent phase.\nAn error happened in the data provider.\nSomething that will provide the election data.\nDesired number of targets to elect for this round.\nSnapshot is done, and we are waiting for <code>Export</code> to kick in.\nSubmission is too early (or too late, depending on your …\nInternal errors of the pallet. This is used in the …\nFinal result of the election.\nThe score of an election. This is the main measure of an …\nThe emergency phase. This is could be enabled by one of …\nTrigger the (single page) fallback in <code>instant</code> mode, with …\nSet the given (single page) emergency solution.\nError of the pallet that can be returned in response to …\nThe <code>Event</code> enum of this pallet\nExporting has begun, and the given page was the last one …\nAn error in the fallback.\nTriggering the <code>Fallback</code> failed.\nThe fallback type used for the election.\nThe fallback election type.\nAn error happened in the feasibility check sub-system.\nForcefully go to the next round, starting from the Off …\nForce-set the phase to the given phase.\nA <code>Get</code> impl for <code>Phase::Done</code>\nA <code>Get</code> impl for <code>Phase::Signed(T::SignedPhase::get())</code>\nA easy means to configure <code>Config::AreWeDone</code>.\nA fallback implementation that transitions the pallet to …\nThe maximum number of votes that are allowed.\nThe common logging prefix of all pallets in this crate.\nMaximum number of items that <code>AllVoterPagesOf</code> can contain, …\nThe miner configuration.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe election is not ongoing and therefore no results may …\nAn opaque index-based, NPoS solution type.\nNothing is happening, but it might.\nAn error in the onchain seq-phragmen implementation\nTrait to notify other sub-systems that a round has ended.\nSingle type that implement <code>super::OnRoundRotation</code> to do …\nThe election is currently ongoing, and therefore we cannot …\nOther misc error\nCalled elect() with wrong page order or in wrong phase.\nHelper trait to pad a partial solution such that the …\nA page index for the multi-block elections pagination.\nA paginated raw solution type.\nPaginated target snapshot.\nSame as <code>PagedTargetSnapshot</code>, but it will store the hash of …\nPaginated voter snapshot. At most [<code>T::Pages</code>] keys will …\nSame as <code>PagedVoterSnapshot</code>, but it will store the hash of …\nThe number of pages.\nA helper trait to deal with the page index of partial …\nThe <code>Pallet</code> struct, the main type that implements traits …\nCurrent phase of the pallet.\nA phase transition happened. Only checks major changes in …\nA shorthand for <code>IfSolutionQueuedElse</code> that proceeds …\nA shorthand for <code>IfSolutionQueuedElse</code> that proceeds to …\nInternal counter for the number of rounds.\nSet the minimum untrusted score. This is directly …\nSigned phase is open.\nDuration of the signed phase.\nWe are validating results.\nDuration of the singed validation phase.\nSnapshot is being created. No other operation is allowed. …\nSnapshot was unavailable.\nSnapshot was not available.\nThe accuracy of the election, when submitted from …\nThe solution type used by this crate.\nThe target index. Derived from <code>SolutionOf</code>.\nThe voter index. Derived from <code>SolutionOf</code>.\nthe corresponding page in the queued supports is not …\nThe target type. Needs to be an index (convert to usize).\nThe number of snapshot targets to fetch per block.\nUnexpected phase\nTarget snapshot creation failed\nVoter snapshot creation failed\nUnsigned phase.\nDuration of the unsigned phase.\nThe verifier pallet’s interface.\nThe voter type. Needs to be an index (convert to usize).\nAlias for a voter, parameterized by the miner config.\nAlias for a page of voters, parameterized by this crate’…\nThe number of snapshot voters to fetch per block.\nSubmission is too weak to be considered an improvement.\nWeight functions needed for …\nThe weight of the pallet.\nThe snapshot fingerprint is not a match. The solution is …\nWrong number of pages in the solution.\nThe round counter is wrong.\nWrong number of winners presented.\nIndividual assignments. for each tuple, the first elements …\nA reasonable next election block number.\nMake this solution corrupt. This should set the index of a …\nAn auto-generated getter for <code>CurrentPhase</code>.\nThe distribution of the voter’s stake.\nGet the total count of edges.\nGet the total number of edges.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild self from a list of assignments.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome helper functions/macros for this crate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert self into a <code>Vec&lt;Assignment&lt;A, Self::Accuracy&gt;&gt;</code>\nWhether the phase is done or not.\nWhether the phase is emergency or not.\nWhether the phase is export or not.\nWhether the phase is off or not.\nWhether the phase is signed or not.\nWhether the phase is signed validation or not.\nWhether the signed phase is opened now.\nWhether the phase is snapshot or not.\nWhether the phase is unsigned or not.\nWhether the unsigned phase is opened now.\nEmit a log specific to this pallet, setting the target to …\nManage this pallet.\nManage this pallet.\nEmit a log from within the offchain miner.\nThe minimal winner, in terms of total backing stake.\nReturn the <code>length</code> most significant pages.\nCreate a call with the variant <code>manage</code>.\nConsume self and return the next variant, as per what the …\n<code>ending</code> round has ended. Implies we are now at round …\nPad the solution to the given number of pages.\nPagify a reference.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nformat the election score in a pretty way with the given …\nRemove a certain voter.\nRemove the least staked voter.\nAn auto-generated getter for <code>Round</code>.\nThe designated round.\nThe final claimed score post feasibility and concatenation …\nThe signed pallet The signed phase of the multi-block …\nThe individual pages.\nSort self by the means of the given function.\nCompares two sets of election scores based on …\nEmit a log within a submodule of the pallet\nThe sum of the total backing of all winners.\nThe sum squared of the total backing of all winners, aka. …\nCommon types of the pallet Common types and traits of the …\nGet the number of unique targets in the whole struct.\nThe unsigned pallet\nThe verifier pallet\nGet the length of all the voters that this type is …\nGet the total number of voters, assuming that voters in …\nThe weight module WeightInfo for the election provider …\nVoter’s identifier.\nGet the total number of winners, assuming that there’s …\nJust winners zipped with their approval stake. Note that …\nthe source phase\nThe target phase\nThe origin that can perform administration operations on …\nAn indicator of whether we should move to do the …\nContains a variant per dispatchable extrinsic that this …\nCommon errors in all sub-pallets and miner.\nConfiguration trait of this pallet.\nCurrent phase.\nSomething that will provide the election data.\nDesired number of targets to elect for this round.\nSubmission is too early (or too late, depending on your …\nError of the pallet that can be returned in response to …\nThe <code>Event</code> enum of this pallet\nTriggering the <code>Fallback</code> failed.\nThe fallback type used for the election.\nThe miner configuration.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSingle type that implement <code>super::OnRoundRotation</code> to do …\nPaginated target snapshot.\nSame as <code>PagedTargetSnapshot</code>, but it will store the hash of …\nPaginated voter snapshot. At most [<code>T::Pages</code>] keys will …\nSame as <code>PagedVoterSnapshot</code>, but it will store the hash of …\nThe number of pages.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA phase transition happened. Only checks major changes in …\nInternal counter for the number of rounds.\nDuration of the signed phase.\nDuration of the singed validation phase.\nSnapshot was unavailable.\nSnapshot was not available.\nThe number of snapshot targets to fetch per block.\nUnexpected phase\nTarget snapshot creation failed\nVoter snapshot creation failed\nDuration of the unsigned phase.\nThe verifier pallet’s interface.\nThe number of snapshot voters to fetch per block.\nSubmission is too weak to be considered an improvement.\nThe weight of the pallet.\nThe snapshot fingerprint is not a match. The solution is …\nWrong number of pages in the solution.\nThe round counter is wrong.\nWrong number of winners presented.\nManage this pallet.\nthe source phase\nThe target phase\nThe page index is out of bounds.\nBad witness data provided.\nThe given account has bailed.\nThe ratio of the deposit to return in case a signed …\nSomething that can compute the base deposit that is …\nSomething that can calculate the deposit per-page upon …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nHandler to the currency.\nBase deposit amount for a submission.\nGet the deposit amount that will be held for a solution of …\nExtra deposit per-page.\nThe given account has been discarded.\nThe submission is a duplicate.\nThe ratio of the deposit to return in case a signed …\nThe given solution, for the given round, was ejected.\nThe <code>Error</code> enum of this pallet.\nHandler to estimate the fee of a call. Useful to refund …\nThe <code>Event</code> enum of this pallet\nThe hold reason of this palelt.\nThe fixed deposit charged upon <code>Pallet::register</code> from …\nAccounts whitelisted by governance to always submit their …\nMaximum number of submissions. This, combined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNo submission found.\nThe account is not registered.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe phase is not signed.\nThe queue is full.\nUpcoming submission has been registered for the given …\nBase reward that is given to the winner.\nThe given account has been rewarded with the given amount.\nRound is not yet over.\nBecause of submitting a signed solution.\nThe given account has been slashed with the given amount.\nStorage type is <code>StorageMap</code> with key type <code>u32</code> and value …\nA page of solution solution with the given index has been …\nAll of the (meta) data around a signed submission\nToo many invulnerable accounts are provided,\nWeight functions needed for …\nProvided weights of this pallet.\nRetract a submission.\nRetract a submission.\nClear the data of a submitter form an old round.\nClear the data of a submitter form an old round.\nGet the deposit amount that will be held for a solution of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new [<code>#view_function_struct_ident</code>] instance.\nCreate a call with the variant <code>bail</code>.\nCreate a call with the variant <code>clear_old_round_data</code>.\nCreate a call with the variant <code>register</code>.\nCreate a call with the variant <code>set_invulnerables</code>.\nCreate a call with the variant <code>submit_page</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRegister oneself for an upcoming signed election.\nRegister oneself for an upcoming signed election.\nSet the invulnerable list.\nSet the invulnerable list.\nSubmit a single page of a solution.\nSubmit a single page of a solution.\nThe page index is out of bounds.\nBad witness data provided.\nThe given account has bailed.\nThe ratio of the deposit to return in case a signed …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nHandler to the currency.\nBase deposit amount for a submission.\nGet the deposit amount that will be held for a solution of …\nExtra deposit per-page.\nThe given account has been discarded.\nThe submission is a duplicate.\nThe ratio of the deposit to return in case a signed …\nThe given solution, for the given round, was ejected.\nThe <code>Error</code> enum of this pallet.\nHandler to estimate the fee of a call. Useful to refund …\nThe <code>Event</code> enum of this pallet\nThe hold reason of this palelt.\nThe fixed deposit charged upon <code>Pallet::register</code> from …\nAccounts whitelisted by governance to always submit their …\nMaximum number of submissions. This, combined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNo submission found.\nThe account is not registered.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe phase is not signed.\nThe queue is full.\nUpcoming submission has been registered for the given …\nBase reward that is given to the winner.\nThe given account has been rewarded with the given amount.\nRound is not yet over.\nBecause of submitting a signed solution.\nThe given account has been slashed with the given amount.\nStorage type is <code>StorageMap</code> with key type <code>u32</code> and value …\nA page of solution solution with the given index has been …\nToo many invulnerable accounts are provided,\nProvided weights of this pallet.\nRetract a submission.\nClear the data of a submitter form an old round.\nRegister oneself for an upcoming signed election.\nSet the invulnerable list.\nSubmit a single page of a solution.\nThe weight/accuracy type of each vote.\nSame as <code>AllVoterPagesOf</code>, but instead of being a nested …\nAlias for all pages of voters, parameterized by this crate…\nThe relative distribution of a voter’s stake among the …\nSnapshot is done, and we are waiting for <code>Export</code> to kick in.\nFinal result of the election.\nThe score of an election. This is the main measure of an …\nThe emergency phase. This is could be enabled by one of …\nExporting has begun, and the given page was the last one …\nThe fallback election type.\nThe maximum number of votes that are allowed.\nMaximum number of items that <code>AllVoterPagesOf</code> can contain, …\nAn opaque index-based, NPoS solution type.\nNothing is happening, but it might.\nHelper trait to pad a partial solution such that the …\nA page index for the multi-block elections pagination.\nA paginated raw solution type.\nA helper trait to deal with the page index of partial …\nCurrent phase of the pallet.\nSigned phase is open.\nWe are validating results.\nSnapshot is being created. No other operation is allowed. …\nThe accuracy of the election, when submitted from …\nThe solution type used by this crate.\nThe target index. Derived from <code>SolutionOf</code>.\nThe voter index. Derived from <code>SolutionOf</code>.\nThe target type. Needs to be an index (convert to usize).\nUnsigned phase.\nThe voter type. Needs to be an index (convert to usize).\nAlias for a voter, parameterized by the miner config.\nAlias for a page of voters, parameterized by this crate’…\nIndividual assignments. for each tuple, the first elements …\nMake this solution corrupt. This should set the index of a …\nThe distribution of the voter’s stake.\nGet the total count of edges.\nBuild self from a list of assignments.\nConvert self into a <code>Vec&lt;Assignment&lt;A, Self::Accuracy&gt;&gt;</code>\nThe minimal winner, in terms of total backing stake.\nPad the solution to the given number of pages.\nPagify a reference.\nRemove a certain voter.\nRemove the least staked voter.\nThe designated round.\nThe final claimed score post feasibility and concatenation …\nThe individual pages.\nSort self by the means of the given function.\nThe sum of the total backing of all winners.\nThe sum squared of the total backing of all winners, aka. …\nGet the number of unique targets in the whole struct.\nGet the length of all the voters that this type is …\nVoter’s identifier.\nJust winners zipped with their approval stake. Note that …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe number of pages that the offchain miner will try and …\nThe priority of the unsigned transaction submitted in the …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe repeat threshold of the offchain worker.\nThe solver used in hte offchain worker miner\nWhether the offchain worker miner would attempt to store …\nThe <code>Pallet</code> struct, the main type that implements traits …\nWeight functions needed for …\nRuntime weight information of this pallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe miner. The miner code for the EPMB pallet.\nCreate a call with the variant <code>submit_unsigned</code>.\nSubmit an unsigned solution.\nSubmit an unsigned solution.\nThe checks that are specific to the (this) unsigned pallet.\nThe account id type.\nA base miner that is only capable of mining a new solution …\nAn error in the base miner.\nThe base, common errors from the pallet.\nThe base, common errors from the pallet.\nA defensive error has occurred.\nDesired targets missing.\nFailed to store a solution.\nThe solution generated from the miner is not feasible.\nThe full version of <code>PageSupportsOfMiner</code>.\nThe hash type of the runtime.\nSome page index has been invalid.\nSomething went wrong fetching the lock.\nMaximum number of backers per winner, per page.\nMaximum number of backers, per winner, across all pages.\nThe maximum length that the miner should use for a …\nMaximum number of votes per voter.\nHelper type that computes the maximum total winners across …\nMaximum number of winners to select per page.\nMetadata missing.\nAggregator for inputs to <code>BaseMiner</code>.\nConfigurations for the miner.\nThe errors related to the <code>BaseMiner</code>.\nCannot restore a solution that was not stored.\nAn internal error in the NPoS elections crate.\nThe errors related to the <code>OffchainWorkerMiner</code>.\nA miner that is suited to work inside offchain worker …\nParameterized <code>BoundedSupports</code> for the miner.\n<strong>Maximum</strong> number of pages that we may compute.\nSubmitting a transaction to the pool failed.\nThe type of the snapshot.\nSnapshot data was unavailable unexpectedly.\nThe solution that the miner is mining. The solution type.\nCached solution is not a <code>submit_unsigned</code> call.\nAn internal error in the generic solver.\nThe solver type.\nMaximum number of targets per snapshot page.\nTargets missing.\nToo many winners were removed during trimming.\nMaximum number of voters per snapshot page.\nVoters at the given page missing.\nCannot mine a solution with zero pages.\nAll of the targets.\nperform the feasibility check on all pages of a solution, …\nNumber of winners to pick.\nWhether to reduce the solution. Almost always``\nChecks if an execution of the offchain worker is permitted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaybe tim the weight and length of the given multi-page …\nMine a new npos solution, with the given number of pages.\nNumber of pages to mind.\nThe current round for which the solution is being …\nPaginated list of voters.\nThe account if type.\nSomething that can do the verification asynchronously.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nThe support type failed to be bounded.\nErrors that can happen in the feasibility check.\nCan be used to configure the genesis state of this pallet.\nThe solution is incomplete, it has too few pages.\nThe provided round is incorrect.\nThe given score was invalid.\nA vote is invalid.\nA voter is invalid.\nA winner is invalid.\nMaximum number of backers that each winner could have, per …\nMaximum number of backers, per winner, per page.\nMaximum number of backers, per winner, among all pages of …\nMaximum number of backers, per winner, among all pages of …\nMaximum number of winners that can be represented in each …\nMaximum number of supports (aka. …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNothing is happening.\nInternal error from the election crate.\nA verification is ongoing, and the next page that will be …\nThe <code>Pallet</code> struct, the main type that implements traits …\nA solution with the given score has replaced our current …\nSolution is valid and is queued.\nA wrapper interface for the storage items related to the …\nSolution is rejected, for whichever of the multiple …\nSolution does not have a good enough score.\nThe snapshot is not available.\nThe solution type.\nThe opaque solution type.\nSomething that can provide candidate solutions to the …\nThe data provider that can provide the candidate solution, …\nSomething that can provide the solution data to the …\nThe minimum amount of improvement to the solution score …\nThe status of this pallet.\nA verification failed at the given page.\nSimple enum to encapsulate the result of the verification …\nThe given page of a solution has been verified, with the …\nThe interface of something that can verify solutions for …\nWeight functions needed for …\nThe weight information of this pallet.\nWrong number of winners presented.\nCheck if the claimed score is sufficient to challenge the …\nSame as <code>feasibility_check_page_inner</code>, but with a snapshot.\nForce set a single page solution as the valid one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the <code>page</code>th page of the current best solution that …\nGet a single page of the best verified solution, if any.\nGet the claimed score of the current best solution.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClear all storage items, there’s nothing else to do …\nAn auto-generated getter for <code>MinimumScore</code>.\nThe score of the current best solution. <code>None</code> if there is …\nHook to report back the results of the verification of the …\nSet the minimum score that is acceptable for any solution.\nStart a verification process.\nGet the current stage of the verification process.\nAn auto-generated getter for <code>StatusStorage</code>.\nPerform the feasibility check on the given single-page …\nPerform synchronous feasibility check on the given …\nWeights for <code>pallet_election_provider_multi_block_signed</code>.\nWeights for <code>pallet_election_provider_multi_block_unsigned</code>.\nWeights for <code>pallet_election_provider_multi_block_verifier</code>.\nWeights for <code>pallet_election_provider_multi_block</code>.\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0xa143099d7a337c5fd879b91b2b157c2d</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0x33ed3d010c1fea25c2adbfba9297161f</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nWeights for <code>pallet_election_provider_multi_block_signed</code>.\nWeights for <code>pallet_election_provider_multi_block_unsigned</code>.\nWeights for <code>pallet_election_provider_multi_block_verifier</code>.\nWeights for <code>pallet_election_provider_multi_block</code>.\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0xa143099d7a337c5fd879b91b2b157c2d</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage: <code>MultiBlockElection::Round</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: UNKNOWN KEY <code>0x33ed3d010c1fea25c2adbfba9297161f</code> …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockElection::CurrentPhase</code> (r:1 w:0) Proof: …\nWeight functions needed for …\nWeight functions needed for …\nWeight functions needed for …\nWeight functions needed for …\nWeights for <code>pallet_election_provider_multi_block_signed</code>.\nWeights for <code>pallet_election_provider_multi_block_unsigned</code>.\nWeights for <code>pallet_election_provider_multi_block_verifier</code>.\nWeights for <code>pallet_election_provider_multi_block</code>.\nRange of active voters.\nThe account id type.\nConfiguration for the benchmarks of the pallet.\nThe configuration of benchmarking.\nThe minimum amount of improvement to the solution score …\nSome bound not met\nConversion into bounded types failed.\nContains a variant per dispatchable extrinsic that this …\nThe call is not allowed at this point.\nConfiguration trait of this pallet.\nCurrency type.\nCurrent phase.\nRange of desired targets.\nAn error happened in the data provider.\nSomething that will provide the election data.\nDesired number of targets to elect for this round.\nThe maximum number of electing voters and electable …\nThe type of <code>Computation</code> that provided this election data.\nInternal errors of the pallet.\nAn election failed.\nThe election has been finalized, with the given …\nThe emergency phase. This is enabled upon a failing call …\nElection was computed with emergency status.\nError of the pallet that can be returned in response to …\nSomething that can predict the fee of a call. Used to …\nThe <code>Event</code> enum of this pallet\nElection was computed using the fallback\nAn error nested in the fallback.\nConfiguration for the fallback.\nThe fallback election type.\nThe fallback failed\nAn error happened in the feasibility check sub-system.\nErrors that can happen in the feasibility check.\nOrigin that can control this pallet. Note that any action …\nType that can be used to calculate the deposit base for …\nConfiguration of the governance-only fallback.\nThe provided round is incorrect.\nThe given score was invalid.\n<code>Self::insert_submission</code> returned an invalid index.\nA vote is invalid.\nA voter is invalid.\nMaximum number of targets expected. This is used only for …\nMaximum number of voters expected. This is used only for …\nThe maximum number of backers per winner in the last …\nMaximum number of voters that can support a winner in an …\nMaximum length of the solution that the miner is allowed …\nMaximum number of votes per voter in the snapshots.\nMaximum weight of the solution that the miner is allowed …\nThe maximum number of winners that can be elected in the …\nMaximum number of winners that an election supports.\nA base miner, suitable to be used for both signed and …\nAn error in the miner (offchain) sub-system.\nConfigurations for a miner that comes with this pallet.\nConfigurations of the embedded miner.\nThe priority of the unsigned transaction submitted in the …\nThe minimum score that each ‘untrusted’ solution must …\nSnapshot metadata should exist but didn’t.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn error occurred when requesting an election result. The …\nNo solution has been queued.\nInternal error from the election crate.\nOCW submitted solution for wrong round\nNothing, the election is not happening.\nThe repeat threshold of the offchain worker.\nElection was computed on-chain.\nThe <code>Pallet</code> struct, the main type that implements traits …\nCurrent phase of the pallet.\nThere was a phase transition in a given round.\nSubmission was prepared for a different round.\nSubmission was too early.\nSubmission was too weak, score-wise.\nWrong number of winners presented.\nCurrent best solution, signed or unsigned, queued to be …\nA raw, unchecked solution.\nA checked solution, ready to be enacted.\nA ready solution parameterized with this pallet’s miner …\nHandler for the rewards.\nAn account has been rewarded for their signed submission …\nInternal counter for the number of rounds.\nA snapshot of all the data that is needed for en entire …\nMaximum number of voters expected. This is used only for …\nSigned phase is open.\nElection was computed with a signed submission.\nThe origin failed to pay the deposit.\nSomething that calculates the signed deposit base based on …\nPer-byte deposit for a signed solution.\nPer-weight deposit for a signed solution.\nWitness data to dispatchable is invalid.\nThe maximum amount of unchecked solutions to refund the …\nMaximum number of signed submissions that can be queued.\nMaximum weight of a signed solution.\nDuration of the signed phase.\nThe queue was full, and the solution was not better than …\nBase reward for a signed solution\nA raw, unchecked signed submission.\nA sorted, bounded vector of <code>(score, block_number, index)</code>, …\nThe next index to be assigned to an incoming signed …\nMask type which pretends to be a set of …\nUnchecked, signed solutions.\nThe signed submission consumes too much weight\nHandler for the slashed deposits.\nAn account has been slashed for submitting an invalid …\nSnapshot data of the round.\nThe metadata of the <code>RoundSnapshot</code>\nThe snapshot is not available.\nThis wrapper is created for handling the synchronization …\nThe solution that the miner is mining.\nThe accuracy of the election, when submitted from …\nThe solution type used by this crate.\nEncodes the length of a solution or a snapshot.\nA solution was stored with the given compute.\nThe target index. Derived from <code>SolutionOf</code>.\nThe voter index. Derived from <code>SolutionOf</code>.\nOCW election solution miner algorithm implementation.\nAlways sorted vector of a score, submitted at the given …\nRange of targets.\nData Provider returned too many desired targets\nSubmitted solution has too many winners\nUnsigned phase. First element is whether it is active or …\nElection was computed with an unsigned submission.\nDuration of the unsigned phase.\nComparison against <code>MinimumUntrustedScore</code> failed.\nRange of voters.\nWeight functions needed for …\nThe weight of the pallet.\nWrong number of winners presented.\nHow this election was computed.\nHow this election was computed.\nCreates the snapshot. Writes new data to:\nCurrent phase.\nDecode the length of the signed submissions without …\nThe deposit reserved for storing this solution.\nThe deposit reserved for storing this solution.\nCollect a sufficient deposit to store this solution.\nDesired number of targets to elect for this round.\nconvert a DispatchError to a custom InvalidTransaction …\nChecks if an execution of the offchain worker is permitted …\nChecks the feasibility of a solution.\nChecks the feasibility of a solution.\nFinish the signed phase. Process the signed submissions …\nHelper function for the case where a solution is accepted …\nHelper function for the case where a solution is accepted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the signed submissions from storage.\nTrigger the governance fallback.\nTrigger the governance fallback.\nSome helper functions/macros for this crate.\nInsert a new signed submission into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")