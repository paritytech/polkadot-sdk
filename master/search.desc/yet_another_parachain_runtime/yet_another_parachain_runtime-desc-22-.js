searchState.loadedDescShard("yet_another_parachain_runtime", 22, "A peer has connected.\nA peer has disconnected.\nPeer has sent a message.\nPeer’s <code>View</code> has changed.\nGet the persisted validation data for a particular para, …\nTry to compile the given validation code and send back the …\nThe outcome of the candidate-validation’s PVF pre-check …\nMessages sent to the Prospective Parachains subsystem.\nA request for the persisted validation data stored in the …\nThis data becomes intrinsics or extrinsics which should be …\nThis data should become part of a relay chain block\nInherent data returned by the provisioner\nMessage to the Provisioner.\nExtends primitives::PvfExecKind, which is a runtime …\nReturns code hashes of PVFs that require pre-checking by …\nQuery all chunks that we have for the given candidate hash.\nQuery a <code>AvailableData</code> from the AV store.\nGet candidate votes for a candidate.\nQuery an <code>ErasureChunk</code> from the AV store by the candidate …\nQuery whether an <code>ErasureChunk</code> exists within the AV Store.\nGet the size of an <code>ErasureChunk</code> from the AV store by the …\nQuery whether a <code>AvailableData</code> exists within the AV Store.\nFetch a list of all recent disputes the coordinator is …\nRecover available data from validators on the network.\nReinitialize the collation generation subsystem, …\nReport a peer for their actions.\nType of peer reporting\nMake a request of the runtime API against the post-state …\nThis message allows external subsystems to request the set …\nThe passed blocks must be marked as reverted, and their …\nA message to the Runtime API subsystem.\nA request to the Runtime API subsystem.\nA sender for the result of a runtime API request.\nGet the lookahead from the scheduler params. <code>V12</code>\nNote that the Candidate Backing subsystem should second …\nThe candidate we recommended to be seconded was validated …\nSend a message to one or more peers on the collation …\nSend a batch of collation messages.\nTell dispute distribution to distribute an explicit …\nSend requests via substrate request/response. Second …\nSend a message to one or more peers on the validation …\nSend a batch of validation messages.\nGet the execution environment parameter set by session …\nGet the session index that a child of the block will have.\nGet the session info for the given session, if stored.\nWe have originated a signed statement in the context of …\nSingle peer report about malicious actions which should be …\nNote a validator’s statement about a particular …\nStatement distribution message.\nComputes and checks the erasure root of <code>AvailableData</code> …\nThe error result type of a …\nStore an <code>ErasureChunk</code> in the AV store.\nSubmit a collation to the subsystem. This will package it …\nSubmits a PVF pre-checking statement into the transaction …\nSubmits an unsigned extrinsic to slash validator who lost …\nThe vote was valid but too far in the future to accept …\nTry to connect to the peer.\nReturns a list of validators that lost a past session …\nThe authority discovery session key has been rotated.\nInform the distribution subsystems about …\nThe PVF has been compiled successfully within the given …\nImport was valid and can be confirmed to peer.\nValidate a candidate with provided, exhaustive parameters …\nGet the validation code for a para, taking the given …\nGet the maximum uncompressed code size. <code>V12</code>\nGet validation code by its hash, either past, current or …\nGet the validation code used by the specified para, taking …\nBlanket error for validation failing for internal reasons.\nGet the validator groups and group rotation info.\nGet the current validator set.\nGet the version of the runtime API, if any.\nParent head-data along with its hash.\nBacked candidates.\nSigned bitfields.\nThe relay-chain block hash.\nHash of the candidate.\nThe para-id of the candidate.\nPara id of the candidate.\nThe candidate receipt itself.\nThe relay-parent of the candidate.\nThe relay-parent of the candidate.\nThe set of para-chain candidates.\nCandidates, in arbitrary order, which should be checked for\nBlock descriptions in the direct path between the …\nDispute statement sets.\nEither a specific fragment chain to check, otherwise all.\nThe block hash of the highest viable ancestor.\nThe block number of the highest viable ancestor.\nThe para-id of the candidate.\nThe parent head-data.\nParent head data hash.\nThe persisted validation data of the candidate.\nThe session index of this block.\nCandidate hash to fetch the PoV for.\nValidator to fetch the PoV from.\nThe id of the parachain that produced this PoV. This field …\nExpected hash of the PoV, a PoV not matching this hash …\nThe relay parent giving the necessary context.\nSender for getting back the result of this fetch.\nThe <code>AvailableData</code> itself.\nA hash of the candidate this chunk belongs to.\nA hash of the candidate this <code>available_data</code> belongs to.\nThe chunk itself.\nCore index where the candidate was backed.\nErasure root we expect to get after chunking.\nThe number of validators in the session.\nNode features at the candidate relay parent. Used for …\nSending side of the channel to send result to.\nSending side of the channel to send result to.\nValidator index. May not be equal to the chunk index.\nThe candidate receipt\nExecution kind, used for timeouts and retries …\nSession’s executor parameters\nThe proof-of-validity\nRelay-parent\nThe sending side of the response channel\nThe sending side of the response channel\nValidation code\nValidation code hash\nPersisted validation data\nThe hash of the block in question.\nThe number of ancestors to request.\nThe response channel.\nThe receipt of the candidate.\nThe core index where the candidate should be backed.\nThis parent head-data is needed for elastic scaling.\nThe hash of the parent head-data. Here to avoid computing …\nProof of validity.\nThe result sender should be informed when at least one …\nThe lowest possible block to vote on.\nDescriptions of all the blocks counting upwards from the …\nThe candidate receipt itself.\nInform the requester once we finished importing (if a …\nThe session the candidate appears in.\nStatements, with signatures checked, by validators …\nThe block to vote on, might be base in case there is no …\nThe hash of the candidate.\nThe claimed hash of the candidate.\nThe claimed para-ID of the candidate.\nThe claimed relay parent of the candidate.\nThe claimed head-data hash of the candidate.\nThe persisted validation data of the candidate.\nThe receipt of the candidate.\nThe updated authority discovery keys of the peer.\nThe canonical shuffling of validators for the session.\nOur validator index in the session, if any.\nThe <code>PeerId</code> of the peer that updated its …\nThe session info this gossip topology is concerned with.\nThe reverse mapping of <code>canonical_shuffling</code>: from validator …\nSends back the number of <code>AuthorityDiscoveryId</code>s which …\nThe underlying protocol to use for this request.\nThe peer set we want the connection on.\nThe peer set we want the connection on.\nEach entry corresponds to the addresses of an already …\nEach entry corresponds to the addresses of an already …\nIds of the validators to connect to.\nParent head-data hash.\nThis will be provided for collations with elastic scaling …\nAlready forwarding errors to another sender\nKeeps track of the validator indices controlled by the …\nData that are supposed to be there a not there\nUtility errors\nPer origin (or subsystem) annotations to wrap an error.\nThe type system wants this even though it doesn’t make …\nCapacity of channels to and from individual jobs\nDuration a job will wait after sending a stop signal …\nThe minimum amount of peers to send gossip messages to.\nCreate a stream of ticks with a defined cycle duration.\nAttempted to send on a MPSC channel which has been canceled\nThe local node is not a validator.\nAttempted to send or receive on a oneshot channel which …\nAn error type that describes faults that may happen\nAn error in the Runtime API.\nA type alias for Runtime API receivers.\nAttempted to convert from an <code>AllMessages</code> to a <code>FromJob</code>, and …\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA subsystem error\nA future that wraps another future with a <code>Delay</code> allowing …\nExtends <code>Future</code> to allow time-limited futures.\nLocal validator information\nHelpers for the validator-&gt;chunk index mapping.\nA utility for managing the implicit view of the …\nChoose a random subset of <code>min</code> elements. But always include …\nChoose a random subset of <code>min</code> elements using a specific …\nConstruct a validator instance without performing runtime …\nDatabase trait for subsystem. Database trait for polkadot …\nGiven a new chain-head hash, this determines the hashes of …\nGet the enabled/disabled state of this validator\nRequests executor parameters from the runtime effective at …\nFind the validator group the given validator index belongs …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns a <code>bool</code> with a probability of <code>a / b</code> of being true.\nReturns a <code>bool</code> with a probability of <code>a / b</code> of being true.\nGet the controlled validator indices for a given session. …\nVerifies if <code>ParachainHost</code> runtime api is at least at …\nGet this validator’s id.\nAn emulator for node-side code to predict the results of …\nGet this validator’s local index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message sending\nCreate a new instance of <code>ControlledValidatorIndices</code>.\nGet a struct representing this node’s validator if this …\nThese reexports are required so that external crates can …\nA utility abstraction to collect and send reputation …\nRequest <code>AssumedValidationData</code> from the runtime\nRequest <code>AsyncBackingParams</code> from the runtime\nRequest <code>Authorities</code> from the runtime\nRequest <code>AvailabilityCores</code> from the runtime\nRequest <code>BackingConstraints</code> from the runtime\nRequest <code>CandidateEvents</code> from the runtime\nRequest <code>CandidatePendingAvailability</code> from the runtime\nRequest <code>CandidatesPendingAvailability</code> from the runtime\nRequest <code>ClaimQueue</code> from the runtime\nRequest <code>DisabledValidators</code> from the runtime\nRequest some data from the <code>RuntimeApi</code>.\nRequest <code>KeyOwnershipProof</code> from the runtime\nRequest <code>MinimumBackingVotes</code> from the runtime\nRequest <code>NodeFeatures</code> from the runtime\nRequest <code>FetchOnChainVotes</code> from the runtime\nRequest <code>ParaBackingState</code> from the runtime\nRequest <code>ParaIds</code> from the runtime\nRequest <code>PersistedValidationData</code> from the runtime\nRequest <code>Version</code> from the runtime\nRequest <code>SessionExecutorParams</code> from the runtime\nRequest <code>SessionIndexForChild</code> from the runtime\nRequest <code>SessionInfo</code> from the runtime\nRequest <code>SubmitReportDisputeLost</code> from the runtime\nRequest <code>UnappliedSlashes</code> from the runtime\nRequest <code>ValidationCode</code> from the runtime\nRequest <code>ValidationCodeByHash</code> from the runtime\nRequest <code>ValidationCodeHash</code> from the runtime\nRequest <code>ValidatorGroups</code> from the runtime\nRequest <code>Validators</code> from the runtime\nConvenient and efficient runtime info access. Convenient …\nSign the given data with the given validator ID.\nSign a payload with this validator\nGet the current signing context.\nFrom the given set of validators, find the first key we …\nFrom the given set of validators, find the first key we …\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nHelpers for working with unreleased runtime calls Contains …\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nCompute the per-validator availability chunk index. …\nCompute the per-core availability chunk indices. Returns a …\nActivated leaf is already present in view.\nFailed to fetch the block header.\nReasons a block header might have been unavailable.\nInformation about a relay-chain block, to be used when …\nA block header was unavailable due to a chain API error.\nRequest to the Chain API subsystem failed.\nErrors when fetching a leaf and associated ancestry.\nInternal Chain API error.\nRequest to the prospective parachains subsystem failed.\nRequest to the runtime API failed.\nThe subsystem was unavailable.\nBlock header simply unknown.\nHandles the implicit view of the relay chain derived from …\nActivate a leaf in the view. This will request the minimum …\nActivate a leaf in the view. To be used by the prospective …\nGet an iterator over all allowed relay-parents in the view …\nGet the block number of a leaf in the current view. …\nCheck if the given block hash is an active leaf of the …\nDeactivate a leaf in the view. This prunes any outdated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe hash of the relay-chain block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the known, allowed relay-parents that are valid for …\nGet an iterator over active leaves in the view.\nCreate a new empty view. If <code>collating_for</code> is <code>Some</code>, the …\nThe number of the relay-chain block.\nThe hash of the parent relay-chain block.\nReturns all paths from each leaf to the last block in …\nThe storage-root of the relay-chain block.\nA tuple holding key and value data, used in the iterator …\nWrite transaction. Batches a sequence of put/delete …\nDatabase value.\nDatabase trait with ordered key capacity.\nGeneric key-value database.\nDelete value by key.\nDelete all values with the given key prefix. Using an …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a value by key.\nGet the first value matching the given prefix.\nCheck for the existence of a value by key.\nCheck for the existence of a value by prefix.\nCalls <code>U::from(self)</code>.\nQuery statistics.\nCheck if column allows content iteration and removal by …\nIterate over the data for a given column.\nIterate over the data for a given column, returning all …\nImplementation for database supporting <code>KeyValueDB</code> already.\nCreate new transaction.\nDatabase operations.\nUtilities for using parity-db database.\nInsert a key-value pair in the transaction. Any existing …\nInsert a key-value pair in the transaction. Any existing …\nHelper to create a new transaction.\nCreate new transaction with capacity.\nWrite a transaction of changes to the backing store.\nAdapter implementing subsystem database for <code>KeyValueDB</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nInstantiate new subsystem database, with the columns that …\nImplementation of of <code>Database</code> for parity-db adapter.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nImplementation of of <code>Database</code> for parity-db adapter.\nNo validation code upgrade to apply.\nNew validation code size too big.\nCode upgrade not allowed.\nModifications to constraints as a result of prospective …\nConstraints on the actions that can be taken by a new …\nThe HRMP watermark is not allowed.\nPara is required to process at least one DMP message from …\nToo many messages processed from DMP.\nA parachain fragment, representing another prospective …\nKinds of errors with the validity of a fragment.\nThis is an update placing the watermark at the head of the …\nHead data size too big.\nToo many bytes submitted to HRMP channel.\nHRMP messages are not ascending or are duplicate.\nToo many messages submitted to HRMP channel.\nToo many messages submitted to all HRMP channels.\nAn update to the HRMP Watermark.\nTrait for a hypothetical or concrete candidate, as needed …\nConstraints on inbound HRMP channels.\nKinds of errors that can occur when modifying constraints.\nNo such HRMP outbound channel.\nConstraints on outbound HRMP channels.\nAn update to outbound HRMP channels.\nThe outputs of the candidate are invalid under the …\nThe persisted-validation-data doesn’t match.\nThe prospective candidate.\nInformation about a relay-chain block.\nRelay parent too old.\nThis is an update placing the watermark behind the head of …\nToo many bytes submitted to UMP.\nToo many messages submitted to UMP.\nToo many messages upward messages submitted.\nThe validation code of the candidate doesn’t match the …\nApply modifications to these constraints. If this …\nThe maximum bytes that can be written to the channel.\nThe number of bytes submitted to the channel.\nAccess the underlying prospective candidate.\nGet a cheap ref-counted copy of the underlying prospective …\nReturn the candidate hash.\nCheck the candidate against the operating constrains and …\nCheck modifications against constraints.\nWhether a pending code upgrade has been applied.\nReturn a reference to the candidate commitments, if …\nThe commitments to the output of the execution.\nModifications to constraints based on the outputs of the …\nThe amount of DMP messages processed.\nRemaining DMP queue. Only includes sent-at block numbers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe future validation code hash, if any, and at what …\nThe hash of the relay-chain block.\nThe limitations of all registered outbound HRMP channels.\nThe limitations of all registered inbound HRMP channels.\nThe new HRMP watermark\nThe ‘identity’ modifications: these can be applied to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum new validation code size allowed, in bytes.\nThe maximum head-data size, in bytes.\nThe maximum number of HRMP messages allowed per candidate.\nThe maximum Proof-of-Validity size allowed, in bytes.\nThe maximum number of UMP messages allowed per candidate.\nThe maximum messages that can be written to the channel.\nThe number of messages submitted to the channel.\nThe minimum relay-parent number accepted under these …\nCreate a new fragment.\nThe number of the relay-chain block.\nAccess the operating constraints\nOutbound HRMP channel modifications.\nReturn the output head hash, if present.\nReturn the parent head hash.\nReturn a reference to the persisted validation data, if …\nThe persisted validation data used to create the candidate.\nThe hash of the PoV.\nReturn the relay parent hash.\nAccess the relay parent information.\nThe required parent head-data of the parachain.\nThe required parent head to build upon.\nStack other modifications on top of these.\nThe storage-root of the relay-chain block.\nThe amount of UMP XCM bytes sent. <code>UMPSignal</code> and separator …\nThe amount of UMP XCM messages sent. <code>UMPSignal</code> and …\nThe amount of UMP messages remaining.\nThe amount of UMP bytes remaining.\nThe code upgrade restriction signal as-of this parachain.\nAn exhaustive set of all valid watermarks, sorted ascending\nValidates if the candidate commitments are obeying the …\nReturn a reference to the validation code hash, if present.\nThe expected validation-code-hash of this parachain.\nThe validation code hash used by the candidate.\nThe amount of messages a single candidate can submit.\nThe amount of messages a single candidate can submit.\nThe amount of messages sent to all HRMP channels.\nThe amount of messages sent to all HRMP channels.\nThe amount of remaining bytes in the capacity of the …\nThe amount of remaining bytes in the capacity of UMP.\nThe amount of bytes submitted to the channel.\nThe amount of bytes submitted to UMP.\nThe amount of messages processed.\nThe amount of remaining messages in the capacity of the …\nThe amount of remaining messages in the capacity of UMP.\nThe amount of messages waiting to be processed from DMP.\nThe amount of messages submitted to the channel.\nThe amount of messages submitted to UMP.\nThe ID of the recipient.\nThe ID of the recipient.\nA message sender that supports sending nested messages.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new <code>NestingSender</code> which wraps a given “parent”…\nCreate a new “root” sender.\nSend a message via the underlying mpsc.\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nError type of random number generators\nTypes which may be filled with random data\nCodes below this point represent OS Errors (i.e. positive …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nRetrieve the error code, if any.\nGenerating random samples from probability distributions\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nConvenience re-export of common members\nGenerates a random value using the thread-local random …\nExtract the raw OS error code (if this error came from the …\nRandom number generators and adapters\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nSequence-related functionality\nUnwrap the inner error (<code>std</code> only)\nRetrieve the lazily-initialized thread-local random number …\nFill self with random data\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nAll items in the provided weight collection are zero.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe Bernoulli distribution.\nError type returned from <code>Bernoulli::new</code>.\nAn iterator that generates random values of <code>T</code> with …\nA distribution of values of type <code>S</code> derived from the …\n<code>String</code> sampler\nTypes (distributions) that can be used to create a random …\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nA distribution to sample items uniformly from a slice.\nA generic random value distribution, implemented for many …\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nSample values uniformly between two bounds.\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nAppend <code>len</code> random chars to <code>string</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct a new <code>Bernoulli</code> with the probability of success …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a distribution of values of ‘S’ by mapping the …\nCreate a distribution of values of ‘S’ by mapping the …\nConstruct a new <code>Bernoulli</code> with the given probability of …\nCreate a new <code>Slice</code> instance which samples uniformly from …\nCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nGenerates a uniformly random instance of the curve.\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates random values of <code>T</code>, …\nGenerate a <code>String</code> of <code>len</code> random chars\nA distribution uniformly sampling numbers within a given …\nUpdate a subset of weights, without changing the number of …\nWeighted index sampling\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nAll items in the provided weight collection are zero.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nA marker trait used to indicate that an <code>RngCore</code> or …\nTypes (distributions) that can be used to create a random …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing random mutation and …\nA small-state, fast non-crypto PRNG\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerates a random value using the thread-local random …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nRetrieve the lazily-initialized thread-local random number …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nA random number generator that retrieves randomness from …\nA small-state, fast non-crypto PRNG\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nWrappers / adapters forming RNGs\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMock random number generator\n<code>ReadRng</code> error type\nAn RNG that reads random bytes straight from any type …\nA wrapper around any PRNG that implements <code>BlockRngCore</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ReadRng</code> from a <code>Read</code>.\nCreate a new <code>ReseedingRng</code> from an existing PRNG, combined …\nReseed the internal PRNG.\nA simple implementation of <code>RngCore</code> for testing purposes.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a <code>StepRng</code>, yielding an arithmetic sequence starting …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn iterator over multiple slice elements.\nExtension trait on slices, providing random mutation and …\nReturns a reference to one random element of the slice, or …\nChooses <code>amount</code> elements from the slice at random, without …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nLow-level API for sampling indices\nCalls <code>U::from(self)</code>.\nShuffle a slice in place, but exit early.\nShuffle a mutable slice in place.\nA vector of indices.\nReturn type of <code>IndexVec::into_iter</code>.\nReturn type of <code>IndexVec::iter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the value at the given <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an iterator over the indices as a sequence of …\nReturn result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …\nReturns <code>true</code> if the length is 0.\nIterate over the indices as a sequence of <code>usize</code> values\nReturns the number of indices\nRandomly sample exactly <code>amount</code> distinct indices from …\nRandomly sample exactly <code>amount</code> distinct indices from …\nThe error type.\nThe message type of this context. Subsystems launched with …\nThe overarching messages <code>enum</code> for this particular …\nThe sender type as provided by <code>sender()</code> and underlying.\nAnd the same for signals.\nAn asynchronous subsystem task..\nA spawner\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe task of the subsystem being spawned.\nCalls <code>U::from(self)</code>.\nName of the subsystem being spawned.\nReceive a signal or a message.\nReceive a signal.\nObtain the sender.\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nTry to asynchronously receive a message.\nDefault delay for sending reputation changes\nCollects reputation changes and sends them in one batch to …\nAdd a reputation change to an existing collection.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nAdds reputation change to inner state or sends it right …\nNew <code>ReputationAggregator</code>\nSends collected reputation changes in a batch, removing …\nA snapshot of the runtime claim queue at an arbitrary …\nConfiguration for construction a <code>RuntimeInfo</code>.\n<code>SessionInfo</code> with additional useful data for validator …\nWe tried fetching executor params for a session which were …\nWe tried fetching executor params for a session which were …\nWe tried fetching a session info which was not available.\nWe tried fetching a session info which was not available.\nCaching of session info.\nSome request to the runtime failed. For example if we …\nSome request to the runtime failed. For example if we …\nRuntime API subsystem is down, which means we’re …\nRuntime API subsystem is down, which means we’re …\nInformation about ourselves, in case we are an <code>Authority</code>.\nConvenience function for quickly checking the signature on …\nConvenience function for checking the signature of …\nSession executor parameters\nFetch the claim queue and wrap it into a helpful …\nReturns the lookahead from the scheduler params if the …\nFetch the validation code bomb limit from the runtime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRequest availability cores from the runtime.\nGet the hash of a pinned block for the given session …\nGet <code>CandidateEvent</code>s for the given <code>relay_parent</code>.\nReturns the <code>ParaId</code> that has a claim for <code>core_index</code> at the …\nGet the list of disabled validators at the relay parent.\nGet group rotation info based on the given <code>relay_parent</code>.\nVariant of <code>request_availability_cores</code> that only returns …\nGet on chain votes.\nReturns the session index expected at any child of the …\nGet <code>ExtendedSessionInfo</code> by relay parent hash.\nGet <code>ExtendedSessionInfo</code> by session index.\nFetch a list of <code>PendingSlashes</code> from the runtime.\nFetch <code>ValidationCode</code> by hash from the runtime.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the whole claim queue.\nReturns an iterator over all claimed cores and the …\nGet all claimed cores for the given <code>para_id</code> at the …\nReturns an iterator over all claims on the given core.\nGenerate validator key ownership proof.\nNeeded for retrieval of <code>ValidatorInfo</code>\nCreate a new <code>RuntimeInfo</code> for convenient runtime fetches.\nCreate with more elaborate configuration options.\nNode features\nThe group we belong to, if any.\nThe index this very validator has in <code>SessionInfo</code> vectors, …\nPin a given block in the given session if none are pinned …\nReceive a response from a runtime request and convert …\nHow many sessions should we keep in the cache?\nActual session info as fetched from the runtime.\nSubmit a past-session dispute slashing report.\nContains useful information about ourselves, in case this …\nTrait that can be used to customize some of the …\nThe current node version for cumulus official binaries, …\nStructure that can be used in order to provide customizers …\nThe author of the resulting node binary.\nChain spec primitives.\nA custom chain spec loader.\nCLI options of the omni-node. See <code>Command</code>.\nThe starting copyright year of the resulting node binary.\nThe description of the resulting node binary.\nOptional / additional CLI options for binaries built with …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe version of the resulting node binary.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RunConfig</code> instance.\nParse command line arguments into service configuration.\nParse command‑line arguments into service configuration …\nRuntime parameters.\nA custom runtime resolver.\nThe support URL for the resulting node binary.\nCommon interface of a chain specification.\nDefault implementation for <code>LoadSpec</code> that just reads a …\nGeneric extensions for Parachain ChainSpecs used for …\nGeneric chain spec for all polkadot-parachain runtimes\nHelper trait used for loading/building a chain spec …\nAdd a bootnode to the list.\nReturn spec as JSON.\nReturn StorageBuilder for this spec.\nA list of bootnode addresses.\nType of the chain.\nReturns a cloned <code>Box&lt;dyn ChainSpec&gt;</code>.\nReturns code substitutes that should be used for the on …\nReturns a reference to the defined chain spec extensions.\nReturns a mutable reference to the defined chain spec …\nOptional network fork identifier. <code>None</code> by default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSpec id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad/Build a chain spec starting from the chain ID.\nSpec name.\nInitialize extensions based on given parameters.\nCreate the extensions only with the relay_chain.\nPara id field getter\nAdditional loosely-typed properties of the chain.\nNetwork protocol id.\nRelay chain field getter\nSet the storage that should be used by this chain spec.\nTelemetry endpoints (if any)\nTry to get the extension from the given <code>ChainSpec</code>.\nCollator implementation to use.\nSub-commands concerned with benchmarking. The pallet …\nBuild a chain specification.\nSubcommand for generating and managing chain …\nValidate blocks.\nCLI Options shipped with <code>polkadot-omni-node</code>.\nTrait that can be used to customize some of the …\nExport blocks.\nExport the genesis state of the parachain.\nExport the genesis wasm of the parachain.\nExport the state of a given block into a chain spec.\nImport blocks.\nKey management CLI utilities\nUse the lookahead collator. Builds a block once per …\nRemove the whole chain.\nThe relay chain CLI flags. These are passed in after a <code>--</code> …\nRevert the chain to a previous state.\nUse the slot-based collator. Builds a block based on time. …\nSub-commands supported by the collator.\nThe author of the resulting node binary.\nAuthoring style to use.\nThe actual relay chain cli object.\nThe base path that should be used by the relay chain.\nOptional chain id that should be passed to the relay chain.\nThe starting copyright year of the resulting node binary.\nThe description of the resulting node binary.\nStart a dev node that produces a block each <code>dev_block_time</code> …\nEnable the statement store.\nDEPRECATED: This feature has been stabilized, pLease use …\nExport all <code>PoVs</code> build by this collator to the given folder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe version of the resulting node binary.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse the relay chain CLI parameters using the parachain …\nDisable automatic hardware benchmarks.\nRelay chain arguments\nThe shared parameters with all cumulus-based parachain …\nPossible subcommands. See <code>Subcommand</code>.\nThe support URL for the resulting node binary.\nBuilt-in extra subcommands provided by …\nExport the chain spec to JSON.\nA trait for injecting and handling additional CLI …\nNo-op subcommand handler. Use this when a binary does not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHandle the command once it’s been parsed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAura consensus.\nThe Aura ID used by the Aura consensus\nThe choice of block number for the parachain omni-node.\nThe choice of consensus for the parachain omni-node.\nExpected frame system pallet runtime type name.\nExpected parachain system pallet runtime type name.\nDefault implementation for <code>RuntimeResolver</code> that just …\nEd25519\nNone of the system-chain runtimes, rather the node will …\nHelper enum listing the supported Runtime types\nHelper trait used for extracting the Runtime variant from …\nSr25519\nu32\nu64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the Runtime variant from the chain spec ID.\nPrimitive types which are strictly necessary from a …\nParachain block data.\nEncoded <code>Vec&lt;u8&gt;</code> messages, all concatenated.\nDouble encoded <code>VersionedXcm</code> messages, all concatenated.\nEncoded <code>VersionedXcm</code> messages, all concatenated.\nSomething that should be called when a downward message is …\nParachain head data included in the chain.\nA type that uniquely identifies an HRMP channel. An HRMP …\nUnique identifier of a parachain.\nDetermine if a parachain is a system parachain or not.\nThe ID of the first publicly registrable parachain.\nMaximum number of HRMP messages allowed per candidate.\nMaximum number of UMP messages allowed per candidate.\nThe block number type used by Polkadot. 32-bits will allow …\nOne or more channel control signals; these should be …\nA message from a parachain to its Relay Chain.\nParachain validation code.\nUnit type wrapper around <code>Hash</code> that represents the …\nValidation parameters for evaluating the parachain …\nThe result of parachain validation.\nThe aggregate XCMP message format.\nSomething that should be called for each batch of messages …\nThe collation body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHandle some incoming DMP messages (note these are …\nHandle some incoming XCMP messages (note these are the big …\nNew head data that should be included in the relay chain …\nOutbound horizontal messages sent by the parachain.\nThe mark which specifies the block number up to which all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if a parachain is a system parachain, <code>false</code> …\nAn update to the validation code that should be scheduled …\nPrevious head-data.\nNumber of downward messages that were processed by the …\nThe para that acts as the recipient in this channel.\nThe current relay-chain block number.\nThe relay-chain block’s storage root.\nThe para that acts as the sender in this channel.\nUpward messages send by the Parachain.\nA special <code>Rng</code> that always returns zero for testing …\nThe legacy descriptor of a legacy candidate receipt.\nA legacy candidate-receipt.\nA legacy candidate-receipt with commitments directly …\nBuilder for <code>CandidateReceipt</code>.\nBuild a <code>CandidateReceipt</code>.\nCheck the signature of the collator within this descriptor.\nThe collator’s sr25519 public key.\nGet a collator signature payload on a relay-parent, …\nThe commitments of the candidate receipt.\nThe hash of the encoded commitments made as a result of …\nDoes this committed candidate receipt corresponds to the …\nGet a reference to the candidate descriptor.\nGet a reference to the candidate descriptor.\nThe descriptor of the candidate.\nThe descriptor of the candidate.\nCreate candidate commitments with filler data.\nCreate a candidate descriptor with filler data.\nCreate a candidate descriptor with a bogus signature and …\nCreate a v2 candidate descriptor with filler data.\nCreates a candidate receipt with filler data.\nCreate a candidate receipt with a bogus signature and …\nCreates a v2 candidate receipt with filler data.\nCreate a candidate receipt with a bogus signature and …\nCreate a meaningless collator id.\nCreate a meaningless collator signature. It is important …\nCreates a committed candidate receipt with filler data.\nCreates a v2 committed candidate receipt with filler data.\nCreate meaningless dummy digest.\nCreate meaningless dummy hash.\nCreate meaningless head data.\nCreate a meaningless persisted validation data.\nCreates a meaningless signature\nCreate meaningless validation code.\nCreate a meaningless validator id.\nThe root of a block’s erasure encoding Merkle tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nComputes the blake2-256 hash of the receipt.\nComputes the hash of the committed candidate receipt.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a meaningless candidate, returning its receipt and …\nCreate a meaningless v2 candidate, returning its receipt …\nCreate a new candidate descriptor, and apply a valid …\nCreate a v2 candidate descriptor.\nHash of the para header that is being generated by this …\nThe ID of the para this is a candidate for.\nThe blake2-256 hash of the persisted validation data. This …\nThe blake2-256 hash of the PoV.\nThe hash of the relay-chain block this is executed in the …\nAfter manually modifying the candidate descriptor, resign …\nSignature on blake2-256 of components of this receipt: The …\nTransforms this into a plain <code>CandidateReceipt</code>.\nThe blake2-256 hash of the validation code bytes.\nExtracts validators’s public keys (<code>ValidatorId</code>) from …\nCreate a zeroed collator signature.\nExtra dependencies for BABE.\nDependencies for BEEFY\nFull client dependencies\nDependencies for GRANDPA\nA type representing all RPC extensions.\nTask executor that is being used by RPC subscriptions.\nBABE specific dependencies.\nA handle to the BABE worker for issuing requests.\nBackend used by the node.\nBEEFY specific dependencies.\nReceives notifications about best block events from BEEFY.\nReceives notifications about finality proof events from …\nA copy of the chain spec.\nThe client instance to use.\nInstantiate all RPC extensions.\nFinality proof provider.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGRANDPA specific dependencies.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceives notifications about justification events from …\nThe keystore that manages the keys of the node.\nTransaction pool instance.\nThe <code>SelectChain</code> Strategy\nAuthority set info.\nVoting round info.\nExecutor to drive the subscription manager in the Grandpa …\nExecutor to drive the subscription manager in the BEEFY …\nWe assume that an on-initialize consumes 1% of the weight …\nThe adjustment variable of the runtime. Higher values will …\nA placeholder since there is currently no provided session …\nConvert a balance to an unsigned 256-bit number, use in …\nContains a variant per dispatchable extrinsic that this …\nMaximum length of block. Up to 5MB.\nNumbers which have upper and lower bounds\nComplex storage builder stuff.\nThe type used for currency conversion.\nChilling.\nWe allow for 2 seconds of compute with a 6 second average …\nThe maximum amount of the multiplier.\nMinimum amount of the multiplier. This value cannot be too …\nWe allow <code>Normal</code> extrinsics to fill up the block up to 75%, …\nDeclaring desire to nominate, delegate, or generally …\nA placeholder since there is currently no provided session …\nParameterized slow adjusting fee updated based on …\nRepresentation of the status of a staker.\nA reasonable benchmarking config for staking pallet.\nThe portion of the <code>NORMAL_DISPATCH_RATIO</code> that we adjust …\nContains a variant per dispatchable extrinsic that this …\nLogic for the author to get a portion of fees.\nConvert an unsigned 256-bit number to balance, use in …\nDeclaring desire in validate, i.e author blocks.\nThis pallet allows to assign permanent (long-lived) or …\nAssimilate the storage for this module into pre-existing …\nAuctioning system to determine the set of Parachains in …\nBurn the specified liquid free balance from the origin …\nPallet to process claims from Ethereum addresses.\nParachain <code>Crowdloaning</code> pallet\nCode for elections.\nAdjust the total issuance in a saturating way.\nSet the regular balance of a given account.\nExactly as <code>transfer_allow_death</code>, except the origin must be …\nUnreserve some balance from a user by force.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nThis pallet is designed to go into a source chain and …\nImplements the weight types for the elections module and a …\nImplements the weight types for a runtime. It expects the …\nAuxiliary <code>struct</code>/<code>enum</code>s for polkadot runtime.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nPallet to handle parachain registration and related fund …\nA simple wrapper allowing <code>Sudo</code> to call into <code>paras</code> routines.\nMacro to set a value (e.g. when using the <code>parameter_types</code> …\nPallet to process purchase of DOTs.\nSet the current time.\nThe <code>SlotRange</code> struct which succinctly handles the 36 …\nParathread and parachains leasing system. Allows para IDs …\nTraits used across pallets for Polkadot.\nTransfer the entire transferable balance from the caller …\nTransfer some liquid free balance to another account.\nSame as the <code>transfer_allow_death</code> call, but with a check …\nCommon try-runtime only tests for runtimes.\nUpgrade a specified account.\nXCM sender for relay chain.\nNumber of active temporary slots in current slot lease …\nOrigin for assigning slots.\nContains a variant per dispatchable extrinsic that this …\nCannot downgrade lease holding parachain to on-demand.\nCannot upgrade on-demand parachain to lease holding …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe type representing the leasing system.\nThe max number of permanent slots that can be assigned.\nThe maximum number of permanent slots has been changed\nThe max number of temporary slots to be scheduled per …\nThe max number of temporary slots that can be assigned.\nThe maximum number of temporary slots has been changed\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot a parathread (on-demand parachain).\nAn ongoing lease already exists.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe specified parachain is not registered.\nInformation about a temporary parachain slot.\nA parachain was assigned a permanent parachain slot\nNumber of assigned (and active) permanent slots.\nThe number of lease periods a permanent parachain slot …\nAssigned permanent slots, with their start lease period, …\nThe overarching event type.\nPermanent or Temporary slot already assigned.\nLease period an assigned slot should start from (current, …\nPermanent or Temporary slot has not been assigned.\nA parachain was assigned a temporary parachain slot\nNumber of assigned temporary slots.\nThe number of lease periods a temporary parachain slot …\nAssigned temporary slots.\nWeight Information for the Extrinsics in the Pallet\nAssign a permanent parachain slot and immediately create a …\nAssign a permanent parachain slot and immediately create a …\nAssign a temporary parachain slot. The function tries to …\nAssign a temporary parachain slot. The function tries to …\nBenchmarking for assigned_slots pallet\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast lease period this slot had a turn in (incl. current). …\nNumber of leases this temporary slot had (incl. current).\nManager account of the para.\nCreate a call with the variant <code>assign_perm_parachain_slot</code>.\nCreate a call with the variant <code>assign_temp_parachain_slot</code>.\nCreate a call with the variant <code>set_max_permanent_slots</code>.\nCreate a call with the variant <code>set_max_temporary_slots</code>.\nCreate a call with the variant <code>unassign_parachain_slot</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nLease period the parachain slot should ideally start from, …\nNumber of lease period the slot lease will last. This is …\nSets the storage value <code>MaxPermanentSlots</code>.\nSets the storage value <code>MaxPermanentSlots</code>.\nSets the storage value <code>MaxTemporarySlots</code>.\nSets the storage value <code>MaxTemporarySlots</code>.\nUnassign a permanent or temporary parachain slot\nUnassign a permanent or temporary parachain slot\n<code>VersionUncheckedMigrateToV1</code> wrapped in a <code>VersionedMigration</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nNumber of active temporary slots in current slot lease …\nOrigin for assigning slots.\nContains a variant per dispatchable extrinsic that this …\nCannot downgrade lease holding parachain to on-demand.\nCannot upgrade on-demand parachain to lease holding …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe type representing the leasing system.\nThe max number of permanent slots that can be assigned.\nThe maximum number of permanent slots has been changed\nThe max number of temporary slots to be scheduled per …\nThe max number of temporary slots that can be assigned.\nThe maximum number of temporary slots has been changed\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot a parathread (on-demand parachain).\nAn ongoing lease already exists.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe specified parachain is not registered.\nA parachain was assigned a permanent parachain slot\nNumber of assigned (and active) permanent slots.\nThe number of lease periods a permanent parachain slot …\nAssigned permanent slots, with their start lease period, …\nThe overarching event type.\nPermanent or Temporary slot already assigned.\nPermanent or Temporary slot has not been assigned.\nA parachain was assigned a temporary parachain slot\nNumber of assigned temporary slots.\nThe number of lease periods a temporary parachain slot …\nAssigned temporary slots.\nWeight Information for the Extrinsics in the Pallet\nAssign a permanent parachain slot and immediately create a …\nAssign a temporary parachain slot. The function tries to …\nSets the storage value <code>MaxPermanentSlots</code>.\nSets the storage value <code>MaxTemporarySlots</code>.\nUnassign a permanent or temporary parachain slot\nThe para is already leased out for part of this range.\nAn auction ended. All funds become unreserved.\nNumber of auctions started so far.\nAuction has already ended.\nThis auction is already in progress.\nAn auction index. We count auctions in this type.\nInformation relating to the current auction, if there is …\nAn auction started. Provides its index and the block …\nA new bid has been accepted as the current winner.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe number of blocks over which an auction may be …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe origin which may initiate auctions.\nThe lease period is in the past.\nThe type representing the leasing system.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot an auction.\nNot a current auction.\nThe <code>Pallet</code> struct, the main type that implements traits …\nPara is not registered\nSomething that provides randomness in the runtime.\nThe parachain registrar type.\nSomeone attempted to lease the same slot twice for a …\nFunds were reserved for a winning bid. First balance is …\nAmounts currently reserved in the accounts of the bidders …\nThe overarching event type.\nThe length of each sample to take during the ending period.\nFunds were unreserved since bidder is no longer active. …\nWeight Information for the Extrinsics in the Pallet\nThe winning bids for each of the 10 ranges at each sample …\nThe winning offset was chosen for an auction. This will …\nMake a new bid from an account (including a parachain …\nMake a new bid from an account (including a parachain …\nCancel an in-progress auction.\nCancel an in-progress auction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nActually place a bid in the current auction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new auction.\nCreate a new auction.\nCreate a call with the variant <code>bid</code>.\nCreate a call with the variant <code>cancel_auction</code>.\nCreate a call with the variant <code>new_auction</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe para is already leased out for part of this range.\nAn auction ended. All funds become unreserved.\nNumber of auctions started so far.\nAuction has already ended.\nThis auction is already in progress.\nInformation relating to the current auction, if there is …\nAn auction started. Provides its index and the block …\nA new bid has been accepted as the current winner.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe number of blocks over which an auction may be …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe origin which may initiate auctions.\nThe lease period is in the past.\nThe type representing the leasing system.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot an auction.\nNot a current auction.\nThe <code>Pallet</code> struct, the main type that implements traits …\nPara is not registered\nSomething that provides randomness in the runtime.\nThe parachain registrar type.\nSomeone attempted to lease the same slot twice for a …\nFunds were reserved for a winning bid. First balance is …\nAmounts currently reserved in the accounts of the bidders …\nThe overarching event type.\nThe length of each sample to take during the ending period.\nFunds were unreserved since bidder is no longer active. …\nWeight Information for the Extrinsics in the Pallet\nThe winning bids for each of the 10 ranges at each sample …\nThe winning offset was chosen for an auction. This will …\nMake a new bid from an account (including a parachain …\nCancel an in-progress auction.\nCreate a new auction.\nContains a variant per dispatchable extrinsic that this …\nSomeone claimed some DOTs.\nStorage type is <code>StorageMap</code> with key type <code>EthereumAddress</code> …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nAn Ethereum address (i.e. 20 bytes, used to represent an …\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nInvalid Ethereum signature.\nA needed statement was not included.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere’s not enough in the pot to pay out some unvested …\nPre-claimed Ethereum accounts, by the Account ID that they …\nValidate <code>attest</code> calls prior to execution. Needed to avoid …\nStatement required to be made by non-SAFT holders.\nThe overarching event type.\nStatement required to be made by SAFT holders.\nAccount ID sending transaction has no claim.\nEthereum address has no claim.\nThe statement kind that must be signed, if any.\nThe kind of statement an account needs to make for a claim …\nStorage type is <code>StorageValue</code> with value type …\nThe account already has a vested balance.\nVesting schedule for a claim. First balance is the total …\nAttest to a statement, needed to finalize the claims …\nAttest to a statement, needed to finalize the claims …\nMake a claim to collect your DOTs.\nMake a claim to collect your DOTs.\nMake a claim to collect your DOTs by signing a statement.\nMake a claim to collect your DOTs by signing a statement.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMint a new claim to collect DOTs.\nMint a new claim to collect DOTs.\nCreate new <code>TransactionExtension</code> to check runtime version.\nCreate a call with the variant <code>attest</code>.\nCreate a call with the variant <code>claim</code>.\nCreate a call with the variant <code>claim_attest</code>.\nCreate a call with the variant <code>mint_claim</code>.\nCreate a call with the variant <code>move_claim</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nSomeone claimed some DOTs.\nStorage type is <code>StorageMap</code> with key type <code>EthereumAddress</code> …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nInvalid Ethereum signature.\nA needed statement was not included.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere’s not enough in the pot to pay out some unvested …\nPre-claimed Ethereum accounts, by the Account ID that they …\nThe overarching event type.\nAccount ID sending transaction has no claim.\nEthereum address has no claim.\nThe statement kind that must be signed, if any.\nStorage type is <code>StorageValue</code> with value type …\nThe account already has a vested balance.\nVesting schedule for a claim. First balance is the total …\nAttest to a statement, needed to finalize the claims …\nMake a claim to collect your DOTs.\nMake a claim to collect your DOTs by signing a statement.\nMint a new claim to collect DOTs.\nA parachain has been moved to <code>NewRaise</code>\nAll loans in a fund have been refunded.\nThe fund is already in <code>NewRaise</code>\nThe type representing the auctioning system.\nThis parachain’s bid or lease is still active and …\nContains a variant per dispatchable extrinsic that this …\nThe campaign ends before the current block number. The end …\nContributions exceed maximum amount.\nConfiguration trait of this pallet.\nContributed to a crowd sale.\nThe contribution period has already ended.\nThe contribution was below the minimum, <code>MinContribution</code>.\nCreate a new crowdloaning campaign.\nFund is dissolved.\nThe configuration to a crowdloan has been edited.\nThe end date for this crowdloan is not sensible.\nThe number of auctions that have entered into their ending …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe current lease period is more than the first lease …\nThe first lease period needs to at least be less than 3 …\nInformation on a funding effort for a pre-existing …\nThe crowdloan has not yet ended.\nInfo on all of the funds.\nThe result of trying to submit a new bid to the Slots …\nThe origin of this call is invalid.\nInvalid fund index.\nInvalid signature.\nLast lease period must be greater than first lease period.\nThe last lease period cannot be more than 3 periods after …\nThis parachain lease is still active and retirement cannot …\nThe maximum length for the memo attached to a crowdloan …\nThe provided memo is too large.\nA memo has been updated.\nThe minimum amount that may be contributed into a …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe funds that have had additional contributions during …\nTracker for the next available fund index\nThere are no contributions stored in this crowdloan.\nA lease period has not started yet, due to an offset in …\nThis crowdloan does not correspond to a parachain.\nThe crowdloan is not ready to dissolve. Potentially still …\nThere was an overflow.\nThe <code>Pallet</code> struct, the main type that implements traits …\n<code>PalletId</code> for the crowdloan pallet. An appropriate value …\nThe loans in a fund have been partially dissolved, i.e. …\nThe parachain registrar type. We just use this to ensure …\nMax number of storage keys to remove per extrinsic call.\nThe amount to be held on deposit by the depositor of a …\nNo contributions allowed during the VRF delay\nWeight Information for the Extrinsics in the Pallet\nWithdrew full balance of a contributor.\nAdd an optional memo to an existing crowdloan contribution.\nAdd an optional memo to an existing crowdloan contribution.\nA hard-cap on the amount that may be contributed.\nContribute to a crowd sale. This will transfer some …\nContribute to a crowd sale. This will transfer some …\nContribute your entire balance to a crowd sale. This will …\nContribute your entire balance to a crowd sale. This will …\nCreate a new crowdloaning campaign for a parachain slot …\nCreate a new crowdloaning campaign for a parachain slot …\nThe amount of deposit placed.\nThe owning account who placed the deposit.\nRemove a fund after the retirement period has ended and …\nRemove a fund after the retirement period has ended and …\nEdit the configuration for an in-progress crowdloan.\nEdit the configuration for an in-progress crowdloan.\nBlock number after which the funding must have succeeded. …\nFirst lease period in range to bid on; it’s actually a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe account ID of the fund pot.\nUnique index used to represent this fund.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe most recent block that this had a contribution. …\nLast lease period in range to bid on; it’s actually a …\nCreate a call with the variant <code>add_memo</code>.\nCreate a call with the variant <code>contribute</code>.\nCreate a call with the variant <code>contribute_all</code>.\nCreate a call with the variant <code>create</code>.\nCreate a call with the variant <code>dissolve</code>.\nCreate a call with the variant <code>edit</code>.\nCreate a call with the variant <code>poke</code>.\nCreate a call with the variant <code>refund</code>.\nCreate a call with the variant <code>withdraw</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPoke the fund into <code>NewRaise</code>\nPoke the fund into <code>NewRaise</code>\nThe total amount raised.\nAutomatically refund contributors of an ended crowdloan. …\nAutomatically refund contributors of an ended crowdloan. …\nAn optional verifier. If exists, contributions must be …\nWithdraw full balance of a specific contributor.\nWithdraw full balance of a specific contributor.\nMigrations for using fund index to create fund accounts …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThis migration converts crowdloans to use a crowdloan …\nA parachain has been moved to <code>NewRaise</code>\nAll loans in a fund have been refunded.\nThe fund is already in <code>NewRaise</code>\nThe type representing the auctioning system.\nThis parachain’s bid or lease is still active and …\nContains a variant per dispatchable extrinsic that this …\nThe campaign ends before the current block number. The end …\nContributions exceed maximum amount.\nConfiguration trait of this pallet.\nContributed to a crowd sale.\nThe contribution period has already ended.\nThe contribution was below the minimum, <code>MinContribution</code>.\nCreate a new crowdloaning campaign.\nFund is dissolved.\nThe configuration to a crowdloan has been edited.\nThe end date for this crowdloan is not sensible.\nThe number of auctions that have entered into their ending …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe current lease period is more than the first lease …\nThe first lease period needs to at least be less than 3 …\nThe crowdloan has not yet ended.\nInfo on all of the funds.\nThe result of trying to submit a new bid to the Slots …\nThe origin of this call is invalid.\nInvalid fund index.\nInvalid signature.\nLast lease period must be greater than first lease period.\nThe last lease period cannot be more than 3 periods after …\nThis parachain lease is still active and retirement cannot …\nThe maximum length for the memo attached to a crowdloan …\nThe provided memo is too large.\nA memo has been updated.\nThe minimum amount that may be contributed into a …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe funds that have had additional contributions during …\nTracker for the next available fund index\nThere are no contributions stored in this crowdloan.\nA lease period has not started yet, due to an offset in …\nThis crowdloan does not correspond to a parachain.\nThe crowdloan is not ready to dissolve. Potentially still …\nThere was an overflow.\nThe <code>Pallet</code> struct, the main type that implements traits …\n<code>PalletId</code> for the crowdloan pallet. An appropriate value …\nThe loans in a fund have been partially dissolved, i.e. …\nThe parachain registrar type. We just use this to ensure …\nMax number of storage keys to remove per extrinsic call.\nThe amount to be held on deposit by the depositor of a …\nNo contributions allowed during the VRF delay\nWeight Information for the Extrinsics in the Pallet\nWithdrew full balance of a contributor.\nAdd an optional memo to an existing crowdloan contribution.\nContribute to a crowd sale. This will transfer some …\nContribute your entire balance to a crowd sale. This will …\nCreate a new crowdloaning campaign for a parachain slot …\nRemove a fund after the retirement period has ended and …\nEdit the configuration for an in-progress crowdloan.\nPoke the fund into <code>NewRaise</code>\nAutomatically refund contributors of an ended crowdloan. …\nWithdraw full balance of a specific contributor.\nThe numbers configured here could always be more than the …\nThe accuracy type used for genesis election provider;\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe deposits held for <code>who</code> were updated. <code>identity</code> is the …\nThe <code>Event</code> enum of this pallet\nThe identity and all sub accounts were reaped for <code>who</code>.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nTrait to handle reaping identity from state.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA handler for what to do when an identity is reaped.\nThe origin that can reap identities. Expected to be …\nOverarching event type.\nWeight information for the extrinsics in the pallet.\nEnsure that identity reaping will be succesful in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>poke_deposit</code>.\nCreate a call with the variant <code>reap_identity</code>.\nWhat to do when an identity is reaped. For example, the …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nUpdate the deposit of <code>who</code>. Meant to be called by the …\nUpdate the deposit of <code>who</code>. Meant to be called by the …\nReap the <code>IdentityInfo</code> of <code>who</code> from the Identity pallet of <code>T</code>…\nReap the <code>IdentityInfo</code> of <code>who</code> from the Identity pallet of <code>T</code>…\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe deposits held for <code>who</code> were updated. <code>identity</code> is the …\nThe <code>Event</code> enum of this pallet\nThe identity and all sub accounts were reaped for <code>who</code>.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA handler for what to do when an identity is reaped.\nThe origin that can reap identities. Expected to be …\nOverarching event type.\nWeight information for the extrinsics in the pallet.\nUpdate the deposit of <code>who</code>. Meant to be called by the …\nReap the <code>IdentityInfo</code> of <code>who</code> from the Identity pallet of <code>T</code>…\nAdapter for <code>Contains</code> trait to match <code>VersionedLocatableAsset</code>…\nParameters passed into <code>relay_era_payout</code> function.\nConverts the <code>VersionedLocatableAsset</code> to the …\nLogic for the author to get a portion of fees.\nVersioned locatable asset type which contains both an XCM …\nConverts the <code>VersionedLocation</code> to the <code>xcm::latest::Location</code>…\nFalloff used to calculate era payouts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nIdeal stake ratio, which is deducted by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLegacy auction proportion, which substracts from …\nMaximum inflation rate.\nMinimum inflation rate.\nFraction of the era period used to calculate era payouts.\nA specialized function to compute the inflation of the …\nTotal stakable amount.\nTotal staked amount.\nProvides a factory method for the <code>VersionedLocatableAsset</code>. …\nProvide factory methods for the <code>VersionedLocatableAsset</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID is already registered.\nContains a variant per dispatchable extrinsic that this …\nCannot deregister para\nCannot schedule downgrade of lease holding parachain to …\nCannot perform a parachain slot / lifecycle swap. Check …\nCannot schedule upgrade of on-demand parachain to lease …\nInvalid para code size.\nConfiguration trait of this pallet.\nThe system’s currency for on-demand parachain payment.\nThe deposit to be paid per byte stored on chain.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nInvalid para head data size.\nThe validation code is invalid.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe next free <code>ParaId</code>.\nThe caller is not the owner of this Id.\nPara is not a Parachain.\nPara is not a Parathread (on-demand parachain).\nThe ID is not registered.\nThe ID given for registration has not been reserved.\nRuntime hook for when a lease holding parachain and …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe deposit to be paid to run a on-demand parachain. This …\nPara is locked from manipulation by the manager. Must use …\nAmount held on deposit for each para and the original …\nThe overarching event type.\nThe aggregated origin type must support the <code>parachains</code> …\nWeight Information for the Extrinsics in the Pallet\nAdd a manager lock from a para. This will prevent the …\nAdd a manager lock from a para. This will prevent the …\nThe amount reserved by the <code>manager</code> account for the …\nDeregister a Para Id, freeing all data and returning any …\nDeregister a Para Id, freeing all data and returning any …\nForce the registration of a Para Id on the relay chain.\nForce the registration of a Para Id on the relay chain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the para is locked.\nWhether the para registration should be locked from being …\nThe account that has placed a deposit for registering this …\nReturn the manager <code>AccountId</code> of a para if one exists.\nCreate a call with the variant <code>add_lock</code>.\nCreate a call with the variant <code>deregister</code>.\nCreate a call with the variant <code>force_register</code>.\nCreate a call with the variant <code>register</code>.\nCreate a call with the variant <code>remove_lock</code>.\nCreate a call with the variant <code>reserve</code>.\nCreate a call with the variant <code>schedule_code_upgrade</code>.\nCreate a call with the variant <code>set_current_head</code>.\nCreate a call with the variant <code>swap</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRegister head data and validation code for a reserved Para …\nRegister head data and validation code for a reserved Para …\nRemove a manager lock from a para. This will allow the …\nRemove a manager lock from a para. This will allow the …\nReserve a Para Id on the relay chain.\nReserve a Para Id on the relay chain.\nSchedule a parachain upgrade.\nSchedule a parachain upgrade.\nSet the parachain’s current head.\nSet the parachain’s current head.\nSwap a lease holding parachain with another parachain, …\nSwap a lease holding parachain with another parachain, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID is already registered.\nContains a variant per dispatchable extrinsic that this …\nCannot deregister para\nCannot schedule downgrade of lease holding parachain to …\nCannot perform a parachain slot / lifecycle swap. Check …\nCannot schedule upgrade of on-demand parachain to lease …\nInvalid para code size.\nConfiguration trait of this pallet.\nThe system’s currency for on-demand parachain payment.\nThe deposit to be paid per byte stored on chain.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nInvalid para head data size.\nThe validation code is invalid.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe next free <code>ParaId</code>.\nThe caller is not the owner of this Id.\nPara is not a Parachain.\nPara is not a Parathread (on-demand parachain).\nThe ID is not registered.\nThe ID given for registration has not been reserved.\nRuntime hook for when a lease holding parachain and …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe deposit to be paid to run a on-demand parachain. This …\nPara is locked from manipulation by the manager. Must use …\nAmount held on deposit for each para and the original …\nThe overarching event type.\nThe aggregated origin type must support the <code>parachains</code> …\nWeight Information for the Extrinsics in the Pallet\nAdd a manager lock from a para. This will prevent the …\nDeregister a Para Id, freeing all data and returning any …\nForce the registration of a Para Id on the relay chain.\nRegister head data and validation code for a reserved Para …\nRemove a manager lock from a para. This will allow the …\nReserve a Para Id on the relay chain.\nSchedule a parachain upgrade.\nSet the parachain’s current head.\nSwap a lease holding parachain with another parachain, …\nContains a variant per dispatchable extrinsic that this …\nCannot downgrade lease holding parachain to on-demand.\nCannot upgrade on-demand parachain to lease holding …\nConfiguration trait of this pallet.\nCould not schedule para cleanup.\nThe <code>Error</code> enum of this pallet.\nA DMP message couldn’t be sent because it exceeds the …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot a lease holding parachain.\nNot a parathread (on-demand parachain).\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe specified parachain is already registered.\nThe specified parachain is not registered.\nThere are more cores than supported by the runtime.\nA DMP message couldn’t be sent because the destination …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>sudo_establish_hrmp_channel</code>.\nCreate a call with the variant <code>sudo_queue_downward_xcm</code>.\nCreate a call with the variant <code>sudo_schedule_para_cleanup</code>.\nCreate a call with the variant …\nCreate a call with the variant …\nCreate a call with the variant …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nForcefully establish a channel from the sender to the …\nForcefully establish a channel from the sender to the …\nSend a downward XCM to the given para.\nSend a downward XCM to the given para.\nSchedule a para to be cleaned up at the start of the next …\nSchedule a para to be cleaned up at the start of the next …\nSchedule a para to be initialized at the start of the next …\nSchedule a para to be initialized at the start of the next …\nDowngrade a lease holding parachain to an on-demand …\nDowngrade a lease holding parachain to an on-demand …\nUpgrade a parathread (on-demand parachain) to a lease …\nUpgrade a parathread (on-demand parachain) to a lease …\nContains a variant per dispatchable extrinsic that this …\nCannot downgrade lease holding parachain to on-demand.\nCannot upgrade on-demand parachain to lease holding …\nConfiguration trait of this pallet.\nCould not schedule para cleanup.\nThe <code>Error</code> enum of this pallet.\nA DMP message couldn’t be sent because it exceeds the …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot a lease holding parachain.\nNot a parathread (on-demand parachain).\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe specified parachain is already registered.\nThe specified parachain is not registered.\nThere are more cores than supported by the runtime.\nA DMP message couldn’t be sent because the destination …\nForcefully establish a channel from the sender to the …\nSend a downward XCM to the given para.\nSchedule a para to be cleaned up at the start of the next …\nSchedule a para to be initialized at the start of the next …\nDowngrade a lease holding parachain to an on-demand …\nUpgrade a parathread (on-demand parachain) to a lease …\nA new account was created.\nAll information about an account regarding the purchase of …\nThe kind of statement an account needs to make for a claim …\nAccount has already completed the purchase process.\nSomeone’s purchase balance was updated.\nContains a variant per dispatchable extrinsic that this …\nAccount has completed the purchase process.\nConfiguration trait of this pallet.\nThe origin allowed to make configurations to the pallet.\nBalances Pallet\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nAccount used in the purchase already exists.\nAccount has initiated the account creation process.\nAccount is not valid.\nAccount is not currently valid to use.\nProvided signature is invalid\nThe statement is too long to be stored on chain.\nThe unlock block is in the past!\nThe maximum statement length for the statement users to …\nThe maximum amount of locked DOTs that we will unlock.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn overflow occurred when doing calculations.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA new payment account was set.\nA payout was made to a purchaser.\nAccount is pending validation.\nThe overarching event type.\nA new statement was set.\nA new statement was set. <code>[block_number]</code>\nThe amount of purchased locked DOTs that we will unlock …\nAccount is valid with a high contribution amount.\nAccount is valid with a low contribution amount.\nThe origin allowed to set account status.\nSomeone’s account validity was updated.\nVesting Pallet\nVesting schedule already exists for this account.\nCreate a new account. Proof of existence through a valid …\nCreate a new account. Proof of existence through a valid …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>create_account</code>.\nCreate a call with the variant <code>payout</code>.\nCreate a call with the variant <code>set_payment_account</code>.\nCreate a call with the variant <code>set_statement</code>.\nCreate a call with the variant <code>set_unlock_block</code>.\nCreate a call with the variant <code>update_balance</code>.\nCreate a call with the variant <code>update_validity_status</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPay the user and complete the purchase process.\nPay the user and complete the purchase process.\nWARNING: Executing this function will clear all storage …\nSet the account that will be used to payout users in the …\nSet the account that will be used to payout users in the …\nSet the statement that must be signed for a user to …\nSet the statement that must be signed for a user to …\nSet the block where locked DOTs will become unlocked.\nSet the block where locked DOTs will become unlocked.\nUpdate the balance of a valid account.\nUpdate the balance of a valid account.\nUpdate the validity status of an existing account. If set …\nUpdate the validity status of an existing account. If set …\nA new account was created.\nAccount has already completed the purchase process.\nSomeone’s purchase balance was updated.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe origin allowed to make configurations to the pallet.\nBalances Pallet\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nAccount used in the purchase already exists.\nAccount is not currently valid to use.\nProvided signature is invalid\nThe statement is too long to be stored on chain.\nThe unlock block is in the past!\nThe maximum statement length for the statement users to …\nThe maximum amount of locked DOTs that we will unlock.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn overflow occurred when doing calculations.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA new payment account was set.\nA payout was made to a purchaser.\nThe overarching event type.\nA new statement was set.\nA new statement was set. <code>[block_number]</code>\nThe amount of purchased locked DOTs that we will unlock …\nThe origin allowed to set account status.\nSomeone’s account validity was updated.\nVesting Pallet\nVesting schedule already exists for this account.\nCreate a new account. Proof of existence through a valid …\nPay the user and complete the purchase process.\nSet the account that will be used to payout users in the …\nSet the statement that must be signed for a user to …\nSet the block where locked DOTs will become unlocked.\nUpdate the balance of a valid account.\nUpdate the validity status of an existing account. If set …\nA compactly represented sub-range from the series.\nReturn a tuple representation of the <code>SlotRange</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn true if two <code>SlotRange</code> intersect in their lease …\nCalls <code>U::from(self)</code>.\nReturn the length of occupying a <code>SlotRange</code>.\nConstruct a <code>SlotRange</code> from the current lease period, the …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency type used for bidding.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe origin which may forcibly create or clear leases. Root …\nThere was an error with the lease.\nThe number of blocks to offset each lease period by.\nThe number of blocks over which a single period lasts.\nA para has won the right to a continuous set of lease …\nAmounts held on deposit for each (possibly future) leased …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new <code>[lease_period]</code> is beginning.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe parachain ID is not onboarding.\nThe parachain registrar type.\nThe overarching event type.\nWeight Information for the Extrinsics in the Pallet\nClear all leases for a Para Id, refunding any deposits …\nClear all leases for a Para Id, refunding any deposits …\nJust a connect into the <code>lease_out</code> call, in case Root wants …\nJust a connect into the <code>lease_out</code> call, in case Root wants …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>clear_all_leases</code>.\nCreate a call with the variant <code>force_lease</code>.\nCreate a call with the variant <code>trigger_onboard</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nTry to onboard a parachain that has a lease for the …\nTry to onboard a parachain that has a lease for the …\nMigrations for using fund index to create fund accounts …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency type used for bidding.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe origin which may forcibly create or clear leases. Root …\nThere was an error with the lease.\nThe number of blocks to offset each lease period by.\nThe number of blocks over which a single period lasts.\nA para has won the right to a continuous set of lease …\nAmounts held on deposit for each (possibly future) leased …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new <code>[lease_period]</code> is beginning.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe parachain ID is not onboarding.\nThe parachain registrar type.\nThe overarching event type.\nWeight Information for the Extrinsics in the Pallet\nClear all leases for a Para Id, refunding any deposits …\nJust a connect into the <code>lease_out</code> call, in case Root wants …\nTry to onboard a parachain that has a lease for the …\nThe account ID type that encodes a parachain manager ID.\nAn account identifier for a leaser.\nAn account identifier for a leaser.\nThe period to be leased has already ended.\nThere is already a lease on at least one period for the …\nAn enum which tracks the status of the auction system, and …\nThe currency type in which the lease is taken.\nThe currency type in which the lease is taken.\nWe are in the ending period of the auction, where we are …\nError type for something that went wrong with leasing.\nThe measurement type for counting lease periods (generally …\nThe measurement type for counting lease periods (generally …\nLease manager. Used by the auction module to handle …\nA lease period has not started yet, due to an offset in …\nAn auction has not started yet.\nRuntime hook for when we swap a lease holding parachain …\nParachain registration API.\nUnable to reserve the funds in the leaser’s account.\nWe are in the starting period of the auction, collecting …\nWe have completed the bidding process and are waiting for …\nReturns true if the parachain already has a lease in any …\nApply a lock to the para registration so that it cannot be …\nGiven the current block number, return the current auction …\nReturn the amount of balance currently held in reserve on …\nDeregister a Para ID, free any data, and return any …\nExecute any pending state transitions for paras. For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if the para and user combination has won an auction …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Some(sample, sub_sample)</code> if the auction is in the …\nReturns true if the auction is in any state other than …\nReturn if a <code>ParaId</code> is a lease holding Parachain.\nReturn if a <code>ParaId</code> is a Parathread (on-demand parachain).\nReturn if a <code>ParaId</code> is registered in the system.\nReturn true if the auction is in the starting period.\nReturns true if the auction is in the <code>VrfDelay</code> period.\nLease a new parachain slot for <code>para</code>.\nReturns the lease period at <code>block</code>, and if this is the …\nReturns the lease period at <code>block</code>, and if this is the …\nThe length of a lease period, and any offset which may be …\nThe length of a lease period, and any offset which may be …\nElevate a para to parachain status.\nDowngrade lease holding parachain into parathread …\nReport the manager (permissioned owner) of a parachain, if …\nCreate a new auction.\nUpdates any needed state/references to enact a logical …\nAll lease holding parachains. Ordered ascending by <code>ParaId</code>. …\nPlace a bid in the current auction.\nRegister a Para ID under control of <code>who</code>. Registration may …\nRemove any lock on the para registration.\nregister all inactive nominators for fast-unstake, and …\nXCM sender for relay chain. It only sends downward message.\nImplementation of <code>PriceForMessageDelivery</code> which returns a …\nImplementation of <code>PriceForMessageDelivery</code> which returns an …\nType used for charging different prices to different …\nSimple value-bearing trait for determining/expressing the …\nImplementation of <code>xcm_builder::EnsureDelivery</code> which helps …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the assets required to deliver <code>message</code> to the given …\nA counter metric.\nHolds a set of counters that have different values for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns current time in ns\nIncrement counter.\nIncrement the counter value.\nIncrement counter by <code>value</code>.\nIncrement the counter by <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new counter as specified by <code>definition</code>. This …\nCreate a new counter as specified by <code>definition</code>. This …\nCreate a new histogram as specified by <code>definition</code>. This …\nReturns a <code>LabeledMetric</code> instance that provides an …\nApply the upgrade directly at the expected relay chain …\nPara is a lease holding Parachain which is downgrading to …\nThe factor that is used to increase the current message …\nEnsure more initialization for <code>ParaId</code> when benchmarking. …\nTrait for tracking message delivery fees on a transport …\nHelper struct used for accessing <code>FeeTracker::MIN_FEE_FACTOR</code>\nType used for assigning different fee factors to different …\nThe factor that is used to increase the current message …\nMinimal delivery fee factor.\nParachain is queued to be offboarded.\nParathread (on-demand parachain) is queued to be …\nPara is new and is onboarding as an on-demand or lease …\nOrigin for the parachains.\nThe possible states of a para, to take into account …\nPara is a lease holding Parachain.\nIt comes from a parachain.\nPara is a Parathread (on-demand parachain).\nSet the <code>GoAhead</code> signal to inform the parachain that it is …\nThe strategy on how to handle a validation code upgrade.\nPara is a Parathread (on-demand parachain) which is …\nThe parachain coretime assignment module.\nConfiguration manager for the Polkadot runtime parachains …\nExtrinsics implementing the relay chain side of the …\nDecreases the delivery fee factor by a constant factor and …\nRuntime component for handling disputes of parachain …\nEnsure that the origin <code>o</code> represents a parachain. Returns <code>Ok</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the current message fee factor.\nThe inclusion pallet is responsible for inclusion and …\nIncreases the delivery fee factor by a factor based on …\nThis module is responsible for maintaining a consistent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if para is currently offboarding.\nReturns true if parachain is currently onboarding. To …\nReturns true if para is currently treated as a parachain. …\nReturns true if para is currently treated as a parathread …\nReturns true if para is in a stable state, i.e. it is …\nReturns true if para is in any transitionary state.\nRuntime declaration of the parachain metrics.\nThe parachain on demand assignment module.\nDeclaration of the parachain specific origin and a pallet …\nThe paras pallet acts as the main registry of paras.\nProvides glue code over the scheduler and inclusion …\nAn implementation of the <code>RewardValidators</code> trait used by …\nRuntime API implementations for Parachains.\nSchedules a validation code upgrade to a parachain with …\nSchedule a para to be cleaned up at the start of the next …\nSchedule a para to be initialized at the start of the next …\nSchedule a lease holding parachain to be downgraded to an …\nSchedule a parathread (on-demand parachain) to be upgraded …\nThe scheduler module for parachains and parathreads.\nThe session info pallet provides information about …\nSets the current parachain head with the given id.\nSets the current message fee factor.\nA pallet for any shared state that other pallets may want …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nassign_core is only allowed to append new assignments at …\nThe <code>Error</code> enum of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nFraction expressed as a nominator with an assumed …\nAppend another assignment for a core.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPush an assignment back to the front of the queue.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nassign_core is only allowed to append new assignments at …\nThe <code>Error</code> enum of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe active configuration for the current session.\nThe implementation of <code>Get&lt;(u32, u32)&gt;</code> which reads …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nCan be used to configure the genesis state of this pallet.\nAll configuration of the runtime with respect to paras.\nEnumerates the possible inconsistencies of …\n<code>executor_params</code> are inconsistent.\nThe new value for a configuration parameter is invalid.\nLookahead is zero, while it must be at least 1 for …\n<code>max_code_size</code> exceeds the hard limit of <code>MAX_CODE_SIZE</code>.\n<code>max_head_data_size</code> exceeds the hard limit of …\nMaximum HRMP message num (<code>MAX_HORIZONTAL_MESSAGE_NUM</code>) …\nMaximum number of HRMP inbound channels exceeded.\nMaximum number of HRMP outbound channels exceeded.\n<code>max_pov_size</code> exceeds the hard limit of <code>POV_SIZE_HARD_LIMIT</code>.\nMaximum UMP message num (<code>MAX_UPWARD_MESSAGE_NUM</code>) exceeded.\nMaximum UMP message size (<code>MAX_UPWARD_MESSAGE_SIZE_BOUND</code>) …\n<code>minimum_validation_upgrade_delay</code> is less than …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nPassed in queue size for on-demand was too large.\nThe <code>Pallet</code> struct, the main type that implements traits …\nPending configuration changes.\nA struct that holds the configuration that was active …\n<code>validation_upgrade_delay</code> is less than or equal 1.\nWeight information for extrinsics in this pallet.\nNumber of delay tranches cannot be 0.\n<code>group_rotation_frequency</code> is set to zero.\n<code>minimum_backing_votes</code> is set to zero.\n<code>no_show_slots</code> is set to zero.\n<code>paras_availability_period</code> is set to zero.\nParams used by approval-voting\nAsynchronous backing parameters.\nChecks that this instance is consistent with the …\nParameters that will unlikely be needed by parachains. How …\nThe amount of sessions to keep for disputes.\nHow long after dispute conclusion to accept statements.\nThe executor environment parameters\nForcibly set the active config. This should be used with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe maximum number of messages allowed in an HRMP channel …\nThe maximum size of a message that could ever be put into …\nThe maximum total size of messages in bytes allowed in an …\nThe maximum number of outbound HRMP messages can be sent …\nThe maximum number of inbound HRMP channels a parachain is …\nThe maximum number of outbound HRMP channels a parachain …\nThe deposit that the recipient should provide for …\nThe deposit that the sender should provide for opening an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe parameters that are required for the parachains. The …\nThe maximum size of a message that can be put in a …\nThe maximum head-data size, in bytes.\nThe parameters that are not essential, but still may be of …\nThe maximum number of messages that a candidate can …\nThe maximum size of an upward message that can be sent by …\nTotal number of individual messages allowed in the …\nTotal size of messages allowed in the parachain -&gt; …\nThe maximum number of validators to use for parachain …\nA module that is responsible for migration of storage.\nThe minimum number of valid backing statements required to …\nThe lower bound number of blocks an upgrade can be …\nThe number of delay tranches in total. Must be at least 1.\nThe number of validators needed to approve a block.\nCreate a call with the variant <code>set_approval_voting_params</code>.\nCreate a call with the variant <code>set_async_backing_params</code>.\nCreate a call with the variant <code>set_bypass_consistency_check</code>…\nCreate a call with the variant <code>set_code_retention_period</code>.\nCreate a call with the variant <code>set_coretime_cores</code>.\nCreate a call with the variant <code>set_dispute_period</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_executor_params</code>.\nCreate a call with the variant <code>set_group_rotation_frequency</code>…\nCreate a call with the variant …\nCreate a call with the variant …\nCreate a call with the variant …\nCreate a call with the variant …\nCreate a call with the variant …\nCreate a call with the variant …\nCreate a call with the variant <code>set_hrmp_open_request_ttl</code>.\nCreate a call with the variant <code>set_hrmp_recipient_deposit</code>.\nCreate a call with the variant <code>set_hrmp_sender_deposit</code>.\nCreate a call with the variant <code>set_max_code_size</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_max_head_data_size</code>.\nCreate a call with the variant <code>set_max_pov_size</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_max_upward_message_size</code>.\nCreate a call with the variant <code>set_max_upward_queue_count</code>.\nCreate a call with the variant <code>set_max_upward_queue_size</code>.\nCreate a call with the variant <code>set_max_validators</code>.\nCreate a call with the variant <code>set_max_validators_per_core</code>.\nCreate a call with the variant <code>set_minimum_backing_votes</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_n_delay_tranches</code>.\nCreate a call with the variant <code>set_needed_approvals</code>.")