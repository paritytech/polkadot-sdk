searchState.loadedDescShard("yet_another_parachain_runtime", 17, "Index of era.\nThe reward points earned by a given validator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether <code>who</code> is a virtual staker whose funds are managed by …\nReturns iterator over voter list, which can have <code>take</code> …\nRemove the given nominations from the calling validator.\nRemove the given nominations from the calling validator.\nA Ledger implementation for stakers.\nFetches the ledger associated with a controller or stash …\nMigrates permissionlessly a stash from locks to holds.\nMigrates permissionlessly a stash from locks to holds.\nOnly meant to be used in tests.\nReturns a new instance of a staking ledger.\nCreate a call with the variant <code>apply_slash</code>.\nCreate a call with the variant <code>bond</code>.\nCreate a call with the variant <code>bond_extra</code>.\nCreate a call with the variant <code>cancel_deferred_slash</code>.\nCreate a call with the variant <code>chill</code>.\nCreate a call with the variant <code>chill_other</code>.\nCreate a call with the variant <code>deprecate_controller_batch</code>.\nCreate a call with the variant <code>force_apply_min_commission</code>.\nCreate a call with the variant <code>force_new_era</code>.\nCreate a call with the variant <code>force_new_era_always</code>.\nCreate a call with the variant <code>force_no_eras</code>.\nCreate a call with the variant <code>force_unstake</code>.\nCreate a call with the variant <code>increase_validator_count</code>.\nCreate a call with the variant <code>kick</code>.\nCreate a call with the variant <code>migrate_currency</code>.\nCreate a call with the variant <code>nominate</code>.\nCreate a call with the variant <code>payout_stakers</code>.\nCreate a call with the variant <code>payout_stakers_by_page</code>.\nCreate a call with the variant <code>prune_era_step</code>.\nCreate a call with the variant <code>reap_stash</code>.\nCreate a call with the variant <code>rebond</code>.\nCreate a call with the variant <code>restore_ledger</code>.\nCreate a call with the variant <code>scale_validator_count</code>.\nCreate a call with the variant <code>set_controller</code>.\nCreate a call with the variant <code>set_invulnerables</code>.\nCreate a call with the variant <code>set_min_commission</code>.\nCreate a call with the variant <code>set_payee</code>.\nCreate a call with the variant <code>set_staking_configs</code>.\nCreate a call with the variant <code>set_validator_count</code>.\nCreate a call with the variant <code>unbond</code>.\nCreate a call with the variant <code>update_payee</code>.\nCreate a call with the variant <code>validate</code>.\nCreate a call with the variant <code>withdraw_unbonded</code>.\nDeclare the desire to nominate <code>targets</code> for the origin …\nDeclare the desire to nominate <code>targets</code> for the origin …\nAccepts offences only if they are from era …\nWhen we receive a session report from the relay chain, it …\nReturns the portions of nominators stashes that are …\nThe portions of nominators stashes that are exposed.\nAll other slashed stakers and amounts.\nReturns validator’s own stake that is exposed\nThe validator’s own stash that is exposed.\nThe validator’s own slash.\nReturns total exposure of this validator for the current …\nThe amount of payout.\nPay out next page of the stakers behind a validator for …\nPay out next page of the stakers behind a validator for …\nPay out a page of the stakers behind a validator for the …\nPay out a page of the stakers behind a validator for the …\nPerform one step of era pruning to prevent PoV size …\nPerform one step of era pruning to prevent PoV size …\nRemove all data structures concerning a staker/stash once …\nRemove all data structures concerning a staker/stash once …\nRebond a portion of the stash scheduled to be unlocked.\nRebond a portion of the stash scheduled to be unlocked.\nReporters of the offence; bounty payout recipients.\nRestores the state of a ledger which is in an inconsistent …\nRestores the state of a ledger which is in an inconsistent …\nScale up the ideal number of validators by a factor up to …\nScale up the ideal number of validators by a factor up to …\nManages all era rotation logic based on session increments.\n(Re-)sets the controller of a stash to the stash itself. …\n(Re-)sets the controller of a stash to the stash itself. …\nSet the validators who cannot be slashed (if any).\nSet the validators who cannot be slashed (if any).\nSets the minimum amount of commission that each validators …\nSets the minimum amount of commission that each validators …\n(Re-)set the payment target for a controller.\n(Re-)set the payment target for a controller.\nUpdate the various staking configurations .\nUpdate the various staking configurations .\nSets the ideal number of validators.\nSets the ideal number of validators.\nSlash the staker for a given amount of balance.\nThe total balance that can be slashed from a stash account …\nInternal impl of <code>Self::slashable_balance_of</code> that returns …\nA slashing implementation for NPoS systems.\nMoment of start expressed as millisecond from <code>$UNIX_EPOCH</code>.\nThe stash account whose balance is actually locked and at …\nThe era the nominations were submitted.\nWhether the nominations have been suppressed. This can …\nThe targets of nomination.\nTesting utils for staking. Provides some common functions …\nReturns total exposure of this validator across pages\nThe total balance backing this validator.\nThe total amount of the stash’s balance that we are …\nTotal number of points. Equals the sum of reward points …\nSchedule a portion of the stash to be unlocked ready for …\nSchedule a portion of the stash to be unlocked ready for …\nAny balance that is becoming free, which may eventually be …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nDeclare the desire to validate for the origin controller.\nDeclare the desire to validate for the origin controller.\nThe stash ID of the offending validator.\nAmount of funds exposed.\nAmount of funds to be unlocked.\nVirtually bonds <code>keyless_who</code> to <code>payee</code> with <code>value</code>.\nSame as <code>weight_of_fn</code>, but made for one time use.\nReturns a closure around <code>slashable_balance_of_vote_weight</code> …\nAutogenerated weights for <code>pallet_staking_async</code>\nThe stash account of the nominator in question.\nRemove any stake that has been fully unbonded and is ready …\nRemove any stake that has been fully unbonded and is ready …\nBurn the amount from the total issuance.\nDeposit newly issued or slashed <code>value</code> into <code>who</code>.\nExistential deposit for the chain.\nBalance of who that can be staked additionally.\nIssue <code>value</code> increasing total issuance.\nRelease all staked amount to <code>who</code>.\nMint <code>value</code> and create account for <code>who</code> if it does not exist.\nMint <code>value</code> into an existing account <code>who</code>.\nSet balance that can be staked for <code>who</code>.\nSlash the value from <code>who</code>.\nStakeable balance of <code>who</code>.\nBalance of <code>who</code> that is currently at stake.\nTotal balance of <code>who</code>. Includes both free and staked.\nTotal issuance of the chain.\nUpdate <code>amount</code> at stake for <code>who</code>.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUsed by the new benchmarking code to specify that a …\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nTrait that must be implemented by all structs that can be …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nAsserts that the type implements <em>all</em> of the given traits.\nAsserts that <em>all</em> types in a list are equal to each other.\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nAn attribute macro used to declare a benchmark within a …\nGet the benchmarks available for this pallet. Generally …\nAn attribute macro that can be attached to a (non-empty) …\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nAn attribute macro used to specify that a block should be …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nRepresents the (inclusive) ending number of this <code>ParamRange</code>…\nAn attribute macro used to specify the extrinsic call …\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nAn attribute macro that can be attached to a (non-empty) …\nNumber of times to repeat benchmark within the Wasm …\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nRepresents the (inclusive) starting number of this …\nThe extrinsic timing results from this benchmark.\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeeps track of the SCALE encoded byte length of the …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTries to register a new target.\nTries to register a new voter.\nThe ledger of a (bonded) stash.\nJust a Balance/BlockNumber tuple to encode when a chunk of …\nThe total amount of the stash’s balance that will be at …\nThe controller associated with this ledger’s stash.\nEra number at which point it’ll be unlocked.\nThe stash account whose balance is actually locked and at …\nThe total amount of the stash’s balance that we are …\nAny balance that is becoming free, which may eventually be …\nAmount of funds to be unlocked.\nA handler for all era-based storage items.\nManages session rotation logic.\nThe session index of the current active era.\nThe session index of a given era.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNext era that is planned to be started.\nLatest era that was planned.\nStore exposure for elected validators at start of an era.\nRepresents an offence record within the staking system, …\nThe specific page of the validator’s exposure currently …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe previous slash fraction of the validator’s stake …\nEra at which the offence was reported.\nThe account ID of the entity that reported the offence.\nThe fraction of the validator’s stake to be slashed for …\nThis function removes all validators and nominators from …\nGrab a funded user.\nGrab a funded user with max Balance.\nCreate a stash and controller pair, where payouts go to a …\nCreate a stash and controller pair.\nCreate a stash and controller pair with fixed balance.\nCreate a unique stash and controller pair.\ncreate <code>max</code> validators.\nThis function generates validators and nominators who are …\ncreate <code>max</code> validators, with a seed to help unintentional …\nget the current era.\nSet active era to the given era index.\nWeights for <code>pallet_staking_async</code> using the Substrate node …\nWeight functions needed for <code>pallet_staking_async</code>.\nStorage: <code>Staking::ActiveEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::CancelledSlashes</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Ledger</code> (r:1502 w:1502) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::VirtualStakers</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::ErasStakersOverview</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ProcessingOffence</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ActiveEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ActiveEra</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::VirtualStakers</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>System::Account</code> (r:1 w:0) Proof: <code>System::Account</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Invulnerables</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ValidatorCount</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nThe validator account ids.\nFully active mode.\nThe origin that can control this pallet’s operations.\nAn origin type that ensures an incoming message is from …\nThe balance type seen from this pallet’s PoV.\nCould not process incoming message because incoming …\nBuffered mode for deferred execution.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nWe could not merge, and therefore dropped a buffered …\nThe balance type of the runtime’s currency interface.\nSee <code>pallet_staking::DefaultExposureOf</code>. This type is the …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA fallback implementation to delegate logic to when the …\nCan be used to configure the genesis state of this pallet.\nAn incomplete validator set report.\nMaximum number of offences to batch in a single message to …\nMaximum number of times we try to send a session report to …\nA safety measure that asserts when iterating over …\nA safety measure that asserts an incoming validator set …\nIndicates the current operating mode of the pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA storage value that is set when a <code>new_session</code> gives a new …\nType alias for offence details\nAn offence report failed to be sent.\nWrapper struct for storing offences, and getting them back …\nRepresents the operating mode of the pallet.\nA session report that is outgoing, and should be sent.\nThe <code>Pallet</code> struct, the main type that implements traits …\nFully delegated mode.\nNumber of points to award a validator per block authored.\nA single buffered offence in <code>OffenceSendQueue</code>.\nA page of buffered offences in <code>OffenceSendQueue</code>.\nA validator set was received while the pallet is in …\nThe interface to communicate to asset hub.\nOur communication interface to AssetHub.\nInterface to talk to the local session pallet.\nInterface to talk to the local Session pallet.\nA session report failed enough times that we should drop …\nA session report failed to be sent.\nThe validator set received is way too small, as per …\nSomething occurred that should never happen under normal …\nRepresents unexpected or invariant-breaking conditions …\nAn unexpected transition was applied between operating …\nA type that gives us a reliable unix timestamp.\nThe validator id type of the session pallet\nSome validator points didn’t make it to be included in …\nAll of the points of the validators.\nThe queued validator sets for a given planning session …\nThe session index at which the latest elected validator …\nA new validator set has been received.\nAdd a single offence to the queue.\nmanually do what this pallet was meant to do at the end of …\nmanually do what this pallet was meant to do at the end of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>force_on_migration_end</code>.\nCreate a call with the variant <code>set_mode</code>.\nCreate a call with the variant <code>validator_set</code>.\nThe offending authority id\nHook to be called when the AssetHub migration is complete.\nHook to be called when the AssetHub migration begins.\nThe initial operating mode of the pallet.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nprune up to the given session index.\nReport a session change to AssetHub.\nReport an offence.\nA list of reporters of offences of this authority ID. …\nAllows governance to force set the operating mode of the …\nAllows governance to force set the operating mode of the …\nThe origin that can control this pallet’s operations.\nAn origin type that ensures an incoming message is from …\nCould not process incoming message because incoming …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nWe could not merge, and therefore dropped a buffered …\nThe balance type of the runtime’s currency interface.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA fallback implementation to delegate logic to when the …\nCan be used to configure the genesis state of this pallet.\nAn incomplete validator set report.\nMaximum number of offences to batch in a single message to …\nMaximum number of times we try to send a session report to …\nA safety measure that asserts when iterating over …\nA safety measure that asserts an incoming validator set …\nIndicates the current operating mode of the pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA storage value that is set when a <code>new_session</code> gives a new …\nAn offence report failed to be sent.\nWrapper struct for storing offences, and getting them back …\nA session report that is outgoing, and should be sent.\nThe <code>Pallet</code> struct, the main type that implements traits …\nNumber of points to award a validator per block authored.\nA single buffered offence in <code>OffenceSendQueue</code>.\nA page of buffered offences in <code>OffenceSendQueue</code>.\nA validator set was received while the pallet is in …\nOur communication interface to AssetHub.\nInterface to talk to the local Session pallet.\nA session report failed enough times that we should drop …\nA session report failed to be sent.\nThe validator set received is way too small, as per …\nSomething occurred that should never happen under normal …\nRepresents unexpected or invariant-breaking conditions …\nAn unexpected transition was applied between operating …\nA type that gives us a reliable unix timestamp.\nSome validator points didn’t make it to be included in …\nAll of the points of the validators.\nThe queued validator sets for a given planning session …\nThe session index at which the latest elected validator …\nA new validator set has been received.\nmanually do what this pallet was meant to do at the end of …\nThe initial operating mode of the pallet.\nAllows governance to force set the operating mode of the …\nOur communication trait of <code>pallet-staking-async-rc-client</code> …\nOur communication handle to the local staking pallet.\nThe validator account ids.\nThe validator account ids.\nThe validator account id type.\nThe validator account ids.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nAn incomplete incoming session report that we have not …\nThe last session report’s <code>end_index</code> that we have acted …\nMaximum number of validators that the staking system may …\nMaximum number of times that we retry sending a validator …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn offence on the relay chain. Based on …\nA new offence was reported.\nA validator set that is outgoing, and should be sent.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe communication trait of <code>pallet-staking-async</code> -&gt; …\nAn origin type that allows us to be sure a call is being …\nThe interface to communicate to asset hub.\nThe communication trait of <code>pallet-staking-async-rc-client</code> …\nOur communication handle to the relay chain.\nA session in the past was received. This will not raise …\nThe information that is sent from RC -&gt; AH on session end.\nWe could not merge the chunks, and therefore dropped the …\nA said session report was received.\nThe received session index is more than what we expected.\nA trait to encapsulate messages between RC and AH that can …\nSomething occurred that should never happen under normal …\nRepresents unexpected or invariant-breaking conditions …\nA validator set was dropped.\nWe could not merge the chunks, and therefore dropped the …\nA report about a new validator set. This is sent from AH …\nA validator set failed to be sent to RC.\nCommon utility to send XCM messages that can use …\nIf none, it means no new validator set was activated as a …\nThe session that is ending.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe id of this validator set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame semantics as <code>SessionReport::leftover</code>.\nIf this session report is self-contained, then it is false.\nCurrent length of the message.\nMerge oneself with another instance.\nMerge oneself with another instance.\nCreate a call with the variant <code>relay_new_offence_paged</code>.\nCreate a call with the variant <code>relay_session_report</code>.\nA new instance of self that is terminal. This is useful …\nA new instance of self that is terminal. This is useful …\nThe new validator set.\nThe offender.\nReport one or more offences on the relay chain.\nNew session report from the relay chain.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSignal the relay chain that it can prune up to this …\nReport a session change to AssetHub.\nCalled to indicate the start of a new session on the relay …\nCalled to indicate the start of a new session on the relay …\nThose who have reported this offence.\nSend the message single-shot; no splitting.\nThe amount that they should be slashed.\nSplit self into chunks of <code>chunk_size</code> element.\nSplit oneself into <code>count</code> number of pieces.\nSplit yourself into pieces of <code>chunk_size</code> size.\nSafe send method to send a <code>message</code>, while validating it …\nAll of the points that validators have accumulated.\nSend a new validator set report to relay chain.\nReport a new validator set.\nReturn the weight of <code>on_new_offences</code> call without …\nReturn the weight of <code>on_relay_session_report</code> call without …\nOur communication handle to the local staking pallet.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nAn incomplete incoming session report that we have not …\nThe last session report’s <code>end_index</code> that we have acted …\nMaximum number of times that we retry sending a validator …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new offence was reported.\nA validator set that is outgoing, and should be sent.\nThe <code>Pallet</code> struct, the main type that implements traits …\nAn origin type that allows us to be sure a call is being …\nOur communication handle to the relay chain.\nA session in the past was received. This will not raise …\nWe could not merge the chunks, and therefore dropped the …\nA said session report was received.\nThe received session index is more than what we expected.\nSomething occurred that should never happen under normal …\nRepresents unexpected or invariant-breaking conditions …\nA validator set was dropped.\nWe could not merge the chunks, and therefore dropped the …\nA validator set failed to be sent to RC.\nCalled to indicate the start of a new session on the relay …\nCompute yearly inflation using function\nReturns the page count of exposures for a validator <code>account</code>…\nReturns the nominations quota for a nominator with a given …\nReturns true if validator <code>account</code> has pages to be claimed …\nAccepts a number of expressions to create a instance of …\nCompute yearly inflation using function\nReturns the page count of exposures for a validator <code>account</code>…\nReturns the nominations quota for a nominator with a given …\nReturns true if validator <code>account</code> has pages to be claimed …\nAn automatic task triggered the migration.\nThe limits that are imposed on automatic migrations.\nThe auto migration task finished.\nBad child root provided.\nBad witness data provided.\nContains a variant per dispatchable extrinsic that this …\nAll done.\nAll done.\nConfiguration trait of this pallet.\nOrigin that can control the configurations of this pallet.\nThe currency provider type.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nInner events of this pallet.\nMigration got halted due to an error or miss-configuration.\nThe reason for this pallet placing a hold on funds.\nA key was longer than the configured maximum.\nOngoing, with the last key given.\nOngoing, with the last key given.\nMaximal number of bytes that a key can have.\nMax signed limits not respected.\nGiven number of <code>(top, child)</code> keys were migrated …\nHow a migration was computed.\nThe limits of a migration.\nMigration progress.\nA migration task stored in state.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nsubmitter does not have enough funds.\nThe outer Pallet struct.\nThe progress of either the top or child keys.\nConvenience type for easier usage of <code>Progress</code>.\nThe overarching event type.\nThe overarching event type.\nThe overarching runtime hold reason.\nThe overarching runtime hold reason.\nA signed origin triggered the migration.\nThe base value of <code>Config::SignedDepositPerItem</code>.\nThe amount of deposit collected per item in advance, for …\nFilter on which origin that trigger the manual migrations.\nThe maximum limits that the signed migration could use.\nSigned migration is not allowed because the maximum limit …\nThe funds are held as a deposit for slashing.\nSome account got slashed by the given amount.\nYet to begin.\nYet to begin.\nWeight functions needed for <code>pallet_state_trie_migration</code>.\nThe weight information of this pallet.\nAn auto-generated getter for <code>AutoLimits</code>.\nContinue the migration for the given <code>limits</code>.\nContinue the migration for the given <code>limits</code>.\nControl the automatic migration.\nControl the automatic migration.\nForcefully set the progress the running migration.\nForcefully set the progress the running migration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of keys limit.\nMigrate the list of child keys by iterating each of them …\nMigrate the list of child keys by iterating each of them …\nMigrate the list of top keys by iterating each of them one …\nMigrate the list of top keys by iterating each of them one …\nMigrate keys until either of the given limits are …\nAn auto-generated getter for <code>MigrationProcess</code>.\nCreate a call with the variant <code>continue_migrate</code>.\nCreate a call with the variant <code>control_auto_migration</code>.\nCreate a call with the variant <code>force_set_progress</code>.\nCreate a call with the variant <code>migrate_custom_child</code>.\nCreate a call with the variant <code>migrate_custom_top</code>.\nCreate a call with the variant <code>set_signed_max_limits</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSet the maximum limit of the signed migration.\nSet the maximum limit of the signed migration.\nAn auto-generated getter for <code>SignedMigrationMaxLimits</code>.\nThe byte size limit.\nAutogenerated weights for <code>pallet_state_trie_migration</code>\nAn automatic task triggered the migration.\nThe limits that are imposed on automatic migrations.\nThe auto migration task finished.\nBad child root provided.\nBad witness data provided.\nContains a variant per dispatchable extrinsic that this …\nAll done.\nAll done.\nConfiguration trait of this pallet.\nOrigin that can control the configurations of this pallet.\nThe currency provider type.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nInner events of this pallet.\nMigration got halted due to an error or miss-configuration.\nThe reason for this pallet placing a hold on funds.\nA key was longer than the configured maximum.\nOngoing, with the last key given.\nOngoing, with the last key given.\nMaximal number of bytes that a key can have.\nMax signed limits not respected.\nGiven number of <code>(top, child)</code> keys were migrated …\nHow a migration was computed.\nThe limits of a migration.\nMigration progress.\nA migration task stored in state.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nsubmitter does not have enough funds.\nThe outer Pallet struct.\nThe progress of either the top or child keys.\nConvenience type for easier usage of <code>Progress</code>.\nThe overarching event type.\nThe overarching event type.\nThe overarching runtime hold reason.\nThe overarching runtime hold reason.\nA signed origin triggered the migration.\nThe base value of <code>Config::SignedDepositPerItem</code>.\nThe amount of deposit collected per item in advance, for …\nFilter on which origin that trigger the manual migrations.\nThe maximum limits that the signed migration could use.\nSigned migration is not allowed because the maximum limit …\nThe funds are held as a deposit for slashing.\nSome account got slashed by the given amount.\nYet to begin.\nYet to begin.\nWeight functions needed for <code>pallet_state_trie_migration</code>.\nThe weight information of this pallet.\nDefault implementations of <code>DefaultConfig</code>, which can be …\nContinue the migration for the given <code>limits</code>.\nControl the automatic migration.\nForcefully set the progress the running migration.\nThe number of keys limit.\nMigrate the list of child keys by iterating each of them …\nMigrate the list of top keys by iterating each of them one …\nSet the maximum limit of the signed migration.\nThe byte size limit.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_state_trie_migration</code> using the …\nWeight functions needed for <code>pallet_state_trie_migration</code>.\nStorage: <code>StateTrieMigration::SignedMigrationMaxLimits</code> (r:1 …\nStorage: <code>StateTrieMigration::SignedMigrationMaxLimits</code> (r:1 …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Balances::Holds</code> (r:1 w:1) Proof: <code>Balances::Holds</code> (…\nStorage: <code>Balances::Holds</code> (r:1 w:0) Proof: <code>Balances::Holds</code> (…\nStorage: <code>Balances::Holds</code> (r:1 w:1) Proof: <code>Balances::Holds</code> (…\nStorage: <code>Balances::Holds</code> (r:1 w:0) Proof: <code>Balances::Holds</code> (…\nStorage: UNKNOWN KEY <code>0x6b6579</code> (r:1 w:1) Proof: UNKNOWN KEY …\nCost of data byte used for priority calculation.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency which is used to calculate account limits.\nThe <code>Event</code> enum of this pallet\nMaximum data bytes allowed per account.\nMaximum number of statements allowed per account.\nMinimum data bytes allowed per account.\nMinimum number of statements allowed per account.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new statement is submitted\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nMin balance for priority statements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSubmit a statement event. The statement will be picked up …\nValidate a statement against current state. This is …\nCost of data byte used for priority calculation.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency which is used to calculate account limits.\nThe <code>Event</code> enum of this pallet\nMaximum data bytes allowed per account.\nMaximum number of statements allowed per account.\nMinimum data bytes allowed per account.\nMinimum number of statements allowed per account.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new statement is submitted\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nMin balance for priority statements.\nContains a variant per dispatchable extrinsic that this …\nEnsure that signed transactions are only valid if they are …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nError for the Sudo pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe <code>AccountId</code> of the sudo key.\nThe sudo key has been updated.\nThe key was permanently removed.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nSender must be the Sudo account.\nA sudo-able call.\nA sudo-able call.\nThe overarching event type.\nThe overarching event type.\nA sudo call just took place.\nA sudo_as call just took place.\nWeight functions needed for <code>pallet_sudo</code>.\nType representing the weight of this pallet\nType representing the weight of this pallet\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>AccountId</code> of the sudo key.\nCreates new <code>TransactionExtension</code> to check sudo key.\nCreate a call with the variant <code>remove_key</code>.\nCreate a call with the variant <code>set_key</code>.\nCreate a call with the variant <code>sudo</code>.\nCreate a call with the variant <code>sudo_as</code>.\nCreate a call with the variant <code>sudo_unchecked_weight</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPermanently removes the sudo key.\nPermanently removes the sudo key.\nAuthenticates the current sudo key and sets the given …\nAuthenticates the current sudo key and sets the given …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nAutogenerated weights for <code>pallet_sudo</code>\nThe new sudo key (if one was set).\nThe old sudo key (if one was previously set).\nThe result of the call made by the sudo user.\nThe result of the call made by the sudo user.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nError for the Sudo pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe <code>AccountId</code> of the sudo key.\nThe sudo key has been updated.\nThe key was permanently removed.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nSender must be the Sudo account.\nA sudo-able call.\nA sudo-able call.\nThe overarching event type.\nThe overarching event type.\nA sudo call just took place.\nA sudo_as call just took place.\nType representing the weight of this pallet\nType representing the weight of this pallet\nDefault preludes for <code>Config</code>.\nThe <code>AccountId</code> of the sudo key.\nPermanently removes the sudo key.\nAuthenticates the current sudo key and sets the given …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nAuthenticates the sudo key and dispatches a function call …\nThe new sudo key (if one was set).\nThe old sudo key (if one was previously set).\nThe result of the call made by the sudo user.\nThe result of the call made by the sudo user.\nDefault prelude sensible to be used in a testing …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_sudo</code> using the Substrate node and …\nWeight functions needed for <code>pallet_sudo</code>.\nStorage: <code>Sudo::Key</code> (r:1 w:0) Proof: <code>Sudo::Key</code> (<code>max_values</code>: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Sudo::Key</code> (r:1 w:1) Proof: <code>Sudo::Key</code> (<code>max_values</code>: …\nStorage: <code>Sudo::Key</code> (r:1 w:1) Proof: <code>Sudo::Key</code> (<code>max_values</code>: …\nStorage: <code>Sudo::Key</code> (r:1 w:0) Proof: <code>Sudo::Key</code> (<code>max_values</code>: …\nStorage: <code>Sudo::Key</code> (r:1 w:0) Proof: <code>Sudo::Key</code> (<code>max_values</code>: …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe minimum period between blocks.\nThe minimum period between blocks.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nType used for expressing a timestamp.\nType used for expressing a timestamp.\nThe current time for the current block.\nSomething which can be notified (e.g. another pallet) when …\nSomething which can be notified (e.g. another pallet) when …\nThe <code>Pallet</code> struct, the main type that implements traits …\nWeight functions needed for <code>pallet_timestamp</code>.\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the current time for the current block.\nCalls <code>U::from(self)</code>.\nAt the end of block execution, the <code>on_finalize</code> hook checks …\nA dummy <code>on_initialize</code> to return the amount of weight that …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSet the current time.\nSet the current time.\nSet the timestamp to something in particular. Only used …\nAutogenerated weights for <code>pallet_timestamp</code>\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe minimum period between blocks.\nThe minimum period between blocks.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nType used for expressing a timestamp.\nType used for expressing a timestamp.\nThe current time for the current block.\nSomething which can be notified (e.g. another pallet) when …\nSomething which can be notified (e.g. another pallet) when …\nThe <code>Pallet</code> struct, the main type that implements traits …\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nDefault preludes for <code>Config</code>.\nSet the current time.\nDefault prelude sensible to be used in a testing …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_timestamp</code> using the Substrate node and …\nWeight functions needed for <code>pallet_timestamp</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Timestamp::Now</code> (r:1 w:1) Proof: <code>Timestamp::Now</code> (…\nThe tip was already found/started.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe amount held on deposit per byte within the tip report …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe maximum amount for a single tip.\nThe tip given was too generous.\nMaximum acceptable reason length.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new tip suggestion has been opened.\nThe account attempting to retract the tip is not the …\nHandler for the unbalanced decrease when slashing for a …\nAn open tipping “motion”. Retains all details of a tip …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe tip cannot be claimed/closed because it’s still in …\nThe reason given is just too big.\nSimple preimage lookup from the reason’s hash to the …\nThe overarching event type.\nThe tip cannot be claimed/closed because there are not …\nA tip suggestion has been closed.\nA tip suggestion has reached threshold and is closing.\nThe period for which a tip remains open after is has …\nThe percent of the final tip which goes to the original …\nThe non-zero amount held on deposit for placing a tip …\nA tip suggestion has been retracted.\nA tip suggestion has been slashed.\nOrigin from which tippers must come.\nTipsMap that are not yet completed. Keyed by the hash of …\nThe tip hash is unknown.\nWeight functions needed for <code>pallet_tips</code>.\nWeight information for extrinsics in this pallet.\nThe account ID of the treasury pot.\nClose and payout a tip.\nClose and payout a tip.\nEnsure the correctness of the state of this pallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>close_tip</code>.\nCreate a call with the variant <code>report_awesome</code>.\nCreate a call with the variant <code>retract_tip</code>.\nCreate a call with the variant <code>slash_tip</code>.\nCreate a call with the variant <code>tip</code>.\nCreate a call with the variant <code>tip_new</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAccess reasons storage from outside\nReport something <code>reason</code> that deserves a tip and claim any …\nReport something <code>reason</code> that deserves a tip and claim any …\nRetract a prior tip-report from <code>report_awesome</code>, and cancel …\nRetract a prior tip-report from <code>report_awesome</code>, and cancel …\nRemove and slash an already-open tip.\nRemove and slash an already-open tip.\nDeclare a tip value for an already-open tip.\nDeclare a tip value for an already-open tip.\nGive a tip for something new; no finder’s fee will be …\nGive a tip for something new; no finder’s fee will be …\nAccess tips storage from outside\nAutogenerated weights for <code>pallet_tips</code>\nA migration that unreserves all funds held in the context …\nVersion 4.\nThe account ID used in the runtime.\nThe block number as configured in the runtime.\nThe currency type used in the runtime.\nDeposit per byte to report a tip.\nThe DB weight as configured in the runtime to calculate …\nThe hash used in the runtime.\nThe name of the pallet as previously configured in …\nBase deposit to report a tip.\nThe configuration for <code>UnreserveDeposits</code>.\nA migration that unreserves all tip deposits.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nExecutes the migration, unreserving funds that are locked …\nVerifies that the account reserved balances were reduced …\nGets the actual reserved amount for each account before …\nMigrate the entire storage of this pallet to a new prefix.\nSome checks for after migration. This can be linked to …\nSome checks prior to migration. This can be linked to …\nThe tip was already found/started.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe amount held on deposit per byte within the tip report …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe maximum amount for a single tip.\nThe tip given was too generous.\nMaximum acceptable reason length.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new tip suggestion has been opened.\nThe account attempting to retract the tip is not the …\nHandler for the unbalanced decrease when slashing for a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe tip cannot be claimed/closed because it’s still in …\nThe reason given is just too big.\nSimple preimage lookup from the reason’s hash to the …\nThe overarching event type.\nThe tip cannot be claimed/closed because there are not …\nA tip suggestion has been closed.\nA tip suggestion has reached threshold and is closing.\nThe period for which a tip remains open after is has …\nThe percent of the final tip which goes to the original …\nThe non-zero amount held on deposit for placing a tip …\nA tip suggestion has been retracted.\nA tip suggestion has been slashed.\nOrigin from which tippers must come.\nTipsMap that are not yet completed. Keyed by the hash of …\nThe tip hash is unknown.\nWeight information for extrinsics in this pallet.\nClose and payout a tip.\nReport something <code>reason</code> that deserves a tip and claim any …\nRetract a prior tip-report from <code>report_awesome</code>, and cancel …\nRemove and slash an already-open tip.\nDeclare a tip value for an already-open tip.\nGive a tip for something new; no finder’s fee will be …\nWeights for <code>pallet_tips</code> using the Substrate node and …\nWeight functions needed for <code>pallet_tips</code>.\nStorage: <code>Tips::Tips</code> (r:1 w:1) Proof: <code>Tips::Tips</code> (<code>max_values</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Tips::Reasons</code> (r:1 w:1) Proof: <code>Tips::Reasons</code> (…\nStorage: <code>Tips::Tips</code> (r:1 w:1) Proof: <code>Tips::Tips</code> (<code>max_values</code>…\nStorage: <code>Tips::Tips</code> (r:1 w:1) Proof: <code>Tips::Tips</code> (<code>max_values</code>…\nStorage: <code>Elections::Members</code> (r:1 w:0) Proof: …\nStorage: <code>Elections::Members</code> (r:1 w:0) Proof: …\nThe underlying integer type in which fees are calculated.\nContains a variant per dispatchable extrinsic that this …\nRequire the transactor pay for themselves and maybe …\nConfiguration trait of this pallet.\nA struct to make the fee multiplier a constant\nThe credit that is used to represent the withdrawn …\nImplements the transaction payment for a pallet …\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Event</code> enum of this pallet\nThe <code>FeeDetails</code> is composed of:\nUpdate the multiplier of the next block, based on the …\nUpdate the multiplier of the next block, based on the …\nImplements transaction payment for a pallet implementing …\nCan be used to configure the genesis state of this pallet.\nThe base fee and adjusted weight and length fees …\nConvert a length value into a deductible fee based on the …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nFee multiplier.\nSomething that can convert the current multiplier to the …\nStorage type is <code>StorageValue</code> with value type <code>Multiplier</code>.\nHandle withdrawing, refunding and depositing of …\nHandler for withdrawing, refunding and depositing the …\nA fee multiplier for <code>Operational</code> extrinsics to compute “…\nA fee multiplier for <code>Operational</code> extrinsics to compute “…\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe info passed between the prepare and post-dispatch …\nStorage releases of the pallet.\nInformation related to a dispatchable’s class, weight, …\nThe overarching event type.\nThe overarching event type.\nStorage type is <code>StorageValue</code> with value type <code>Releases</code>.\nA struct to update the weight multiplier per block. It …\nA transaction fee <code>actual_fee</code>, of which <code>tip</code> was added to …\nNeeds to be implemented for every <code>OnChargeTransaction</code>.\nOriginal version of the pallet.\nOne that bumps the usage to FixedU128 from FixedI128.\nThe info passed between the validate and prepare steps for …\nWeight functions needed for <code>pallet_transaction_payment</code>.\nThe weight information of this pallet.\nThe weight information of this pallet.\nConvert a weight value into a deductible fee based on the …\n<code>targeted_fee_adjustment</code>: This is a multiplier that can …\nThis is the minimum amount a user pays for a transaction. …\nCheck if the predicted fee from the transaction origin can …\nCheck if the predicted fee from the transaction origin can …\nClass of this dispatch.\nCompute the actual post dispatch fee for a particular …\nCompute the actual post dispatch fee details for a …\nCompute the final fee value (including tip) for a …\nCompute the fee details for a particular transaction.\nCompute the fee for the specified weight.\nAfter the transaction was executed the actual fee can be …\nHand the fee and the tip over to the <code>[OnUnbalanced]</code> …\nDeposit the <code>Event::TransactionFeePaid</code> event.\nDeposit some additional balance.\nReturns the final fee.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nutility constructor. Used only in client/factory code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet an appropriate priority for a transaction with the …\nReturns the total of inclusion fee.\nThe minimum fee for a transaction to be included in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length fee, the amount paid for the encoded length (in …\nCompute the length portion of a fee by invoking the …\nMaximum multiplier. Any outcome of the <code>convert</code> function …\nMinimum multiplier. Any outcome of the <code>convert</code> function …\nPublic function to access the next fee multiplier.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe inclusion fee of this dispatch.\nQuery fee details of a given encoded <code>Call</code>.\nQuery information of a dispatch class, weight, and fee of …\nQuery the detailed fee of a given <code>call</code>.\nQuery the data that we know about the fee of a given <code>call</code>.\nReturn how much balance is currently available to pay for …\nTarget block saturation level\nReturns the tip as being chosen by the transaction sender.\nVariability factor\nWeight of this dispatch.\nCompute the unadjusted portion of the weight fee by …\nAutogenerated weights for <code>pallet_transaction_payment</code>\nBefore the transaction is executed the payment of the …\nWithdraw the predicted fee from the transaction origin.\nWithdraw <code>amount</code> from the currents transaction’s fees.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Event</code> enum of this pallet\nUpdate the multiplier of the next block, based on the …\nUpdate the multiplier of the next block, based on the …\nCan be used to configure the genesis state of this pallet.\nConvert a length value into a deductible fee based on the …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nStorage type is <code>StorageValue</code> with value type <code>Multiplier</code>.\nHandler for withdrawing, refunding and depositing the …\nA fee multiplier for <code>Operational</code> extrinsics to compute “…\nA fee multiplier for <code>Operational</code> extrinsics to compute “…\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe overarching event type.\nStorage type is <code>StorageValue</code> with value type <code>Releases</code>.\nA transaction fee <code>actual_fee</code>, of which <code>tip</code> was added to …\nThe weight information of this pallet.\nThe weight information of this pallet.\nConvert a weight value into a deductible fee based on the …\nDefault prelude sensible to be used in a testing …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_transaction_payment</code> using the Substrate …\nWeight functions needed for <code>pallet_transaction_payment</code>.\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe transaction was not decodable.\nError type of this RPC api.\nThe call to runtime failed.\nProvides RPC methods to query a dispatchable’s class, …\nClient implementation for the <code>TransactionPaymentApi</code> RPC …\nServer trait implementation for the <code>TransactionPaymentApi</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCreates a new instance of the TransactionPayment Rpc …\nThe <code>FeeDetails</code> is composed of:\nThe base fee and adjusted weight and length fees …\nInformation related to a dispatchable’s class, weight, …\n<code>targeted_fee_adjustment</code>: This is a multiplier that can …\nThis is the minimum amount a user pays for a transaction. …\nClass of this dispatch.\nThe minimum fee for a transaction to be included in a …\nThe length fee, the amount paid for the encoded length (in …\nThe inclusion fee of this dispatch.\nQuery fee details of a given encoded <code>Call</code>.\nQuery information of a dispatch class, weight, and fee of …\nQuery the output of the current <code>LengthToFee</code> given some …\nQuery the output of the current <code>WeightToFee</code> given some …\nWeight of this dispatch.\nAttempted to call <code>store</code> outside of block execution.\nStorage type is <code>StorageValue</code> with value type …\nStorage fee per byte.\nContains a variant per dispatchable extrinsic that this …\nCount indexed chunks for each block.\nConfiguration trait of this pallet.\nThe fungible type for this pallet.\nMaximum bytes that can be stored in one transaction.\nDouble proof check in the block.\nAttempting to store empty transaction\nStorage fee per transaction.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nHandler for the unbalanced decrease when fees are burned.\nCan be used to configure the genesis state of this pallet.\nA reason for this pallet placing a hold on funds.\nProof failed verification.\nMaximum number of indexed transactions in the block.\nMaximum data set in a single transaction in bytes.\nMissing storage proof.\nUnable to verify proof because state data is missing.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nInvalid configuration.\nThe <code>Pallet</code> struct, the main type that implements traits …\nWas the proof checked in this block?\nStorage proof was successfully checked.\nStorage proof was not checked in the block.\nRenewed data under specified index.\nRenewed extrinsic is not found.\nA dispatchable call.\nThe overarching event type.\nThe overarching runtime hold reason.\nThe funds are held as deposit for the used storage.\nStorage period for data in blocks. Should match …\nStored data under specified index.\nToo many transactions in the block.\nState data for a stored transaction.\nTransaction is too large.\nCollection of transaction metadata by block number.\nProof was not expected in this block.\nWeight functions needed for <code>pallet_transaction_storage</code>.\nWeight information for extrinsics in this pallet.\nGet ByteFee storage information from outside of this …\nCheck storage proof for block number …\nCheck storage proof for block number …\nGet EntryFee storage information from outside of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>check_proof</code>.\nCreate a call with the variant <code>renew</code>.\nCreate a call with the variant <code>store</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRenew previously stored data. Parameters are the block …\nRenew previously stored data. Parameters are the block …\nIndex and store data off chain. Minimum data size is 1 …\nIndex and store data off chain. Minimum data size is 1 …\nGet transaction storage information from outside of this …\nAutogenerated weights for <code>pallet_transaction_storage</code>\nAttempted to call <code>store</code> outside of block execution.\nStorage type is <code>StorageValue</code> with value type …\nStorage fee per byte.\nContains a variant per dispatchable extrinsic that this …\nCount indexed chunks for each block.\nConfiguration trait of this pallet.\nThe fungible type for this pallet.\nDouble proof check in the block.\nAttempting to store empty transaction\nStorage fee per transaction.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nHandler for the unbalanced decrease when fees are burned.\nCan be used to configure the genesis state of this pallet.\nA reason for this pallet placing a hold on funds.\nProof failed verification.\nMaximum number of indexed transactions in the block.\nMaximum data set in a single transaction in bytes.\nMissing storage proof.\nUnable to verify proof because state data is missing.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nInvalid configuration.\nThe <code>Pallet</code> struct, the main type that implements traits …\nWas the proof checked in this block?\nStorage proof was successfully checked.\nStorage proof was not checked in the block.\nRenewed data under specified index.\nRenewed extrinsic is not found.\nA dispatchable call.\nThe overarching event type.\nThe overarching runtime hold reason.\nThe funds are held as deposit for the used storage.\nStorage period for data in blocks. Should match …\nStored data under specified index.\nToo many transactions in the block.\nTransaction is too large.\nCollection of transaction metadata by block number.\nProof was not expected in this block.\nWeight information for extrinsics in this pallet.\nCheck storage proof for block number …\nRenew previously stored data. Parameters are the block …\nIndex and store data off chain. Minimum data size is 1 …\nWeights for <code>pallet_transaction_storage</code> using the Substrate …\nWeight functions needed for <code>pallet_transaction_storage</code>.\nStorage: <code>TransactionStorage::ProofChecked</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>TransactionStorage::Transactions</code> (r:1 w:0) Proof: …\nStorage: <code>TransactionStorage::ByteFee</code> (r:1 w:0) Proof: …\nThe payment has already been attempted.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nTrait describing factory functions for dispatchables’ …\nType parameter representing the asset kinds to be spent …\nA new asset spend proposal has been approved.\nAn approved spend was voided.\nPayment attempted with a payment identifier.\nSome funds have been allocated.\nType for converting the balance of an Self::AssetKind to …\nHelper type for benchmarks.\nType parameter used to identify the beneficiaries eligible …\nConverting trait to take a source type and convert to …\nProvider for the block number. Normally this is the …\nPercentage of spare funds (if any) that are burnt per …\nHandler for the unbalanced decrease when treasury funds …\nSome of our funds have been burnt.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe staking balance.\nThe amount which has been reported as inactive to Currency.\nSome funds have been deposited.\nThe spend is not yet eligible for payout.\nError for the treasury pallet.\nThe <code>Event</code> enum of this pallet\nPayment failed.\nThe balance of the asset kind is not convertible to the …\nCan be used to configure the genesis state of this pallet.\nThe payment has neither failed nor succeeded yet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe spend origin is valid but the amount it is allowed to …\nNo proposal, bounty or spend at that index.\nThe blocknumber for the last triggered spend period.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe payout was not yet attempted/claimed.\nA payment happened.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe treasury’s pallet id, used for deriving its …\nType for processing spends of Self::AssetKind in favor of …\nA payment failed and can be retried.\nThe state of the payment claim.\nThere was some issue with the mechanism of payment.\nThe period during which an approved treasury spend has to …\nPending claim.\nA spending proposal.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nAn index of a proposal. Just a <code>u32</code>.\nProposal has not been approved.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nOrigin from which rejections must come.\nSpending has finished; this is the amount that rolls over …\nThe overarching event type.\nA new spend proposal has been approved.\nThe count of spends that have been made.\nThe spend has expired and cannot be claimed.\nA trait to allow the Treasury Pallet to spend it’s funds …\nRuntime hooks to external pallet using treasury to compute …\nIndex of an approved treasury spend.\nThe origin required for approving spends from the treasury …\nPeriod between successive spends.\nA spend was processed and removed from the storage. It …\nInfo regarding an approved treasury spend.\nWe have ended a spend period and will now allocate funds.\nSpends that have been approved and being processed.\nToo many approvals in the queue.\nTypedGet implementation to get the AccountId of the …\nThe inactive funds of the pallet have been updated.\nWeight functions needed for <code>pallet_treasury</code>.\nWeight information for extrinsics in this pallet.\nThe account ID of the treasury pot.\nThe asset amount of the spend.\nPublic function to approvals storage.\nThe account to whom the payment should be made if the …\nThe beneficiary of the spend.\nThe amount held on deposit (reserved) for making this …\nCheck the status of the spend and remove it from the …\nCheck the status of the spend and remove it from the …\nFactory function for an asset kind.\nFactory function for a beneficiary.\nThe block number by which the spend has to be claimed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTreasury pallet migrations.\nCreate a call with the variant <code>check_status</code>.\nCreate a call with the variant <code>payout</code>.\nCreate a call with the variant <code>remove_approval</code>.\nCreate a call with the variant <code>spend</code>.\nCreate a call with the variant <code>spend_local</code>.\nCreate a call with the variant <code>void_spend</code>.\nComplexity\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nClaim a spend.\nClaim a spend.\nReturn the amount of money in the pot.\nPublic function to proposal_count storage.\nPublic function to proposals storage.\nThe account proposing it.\nForce a previously approved proposal to be removed from …\nForce a previously approved proposal to be removed from …\nPropose and approve a spend of treasury funds.\nPropose and approve a spend of treasury funds.\nSpend some money! returns number of approvals before spend.\nPropose and approve a spend of treasury funds.\nPropose and approve a spend of treasury funds.\nThe status of the payout/claim.\nThe block number from which the spend can be claimed.\nThe (total) amount that should be paid if the proposal is …\nVoid previously approved spend.\nVoid previously approved spend.\nAutogenerated weights for <code>pallet_treasury</code>\nMigration to cleanup unapproved proposals to return the …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe payment has already been attempted.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nType parameter representing the asset kinds to be spent …\nA new asset spend proposal has been approved.\nAn approved spend was voided.\nSome funds have been allocated.\nType for converting the balance of an Self::AssetKind to …\nHelper type for benchmarks.\nType parameter used to identify the beneficiaries eligible …\nConverting trait to take a source type and convert to …\nProvider for the block number. Normally this is the …\nPercentage of spare funds (if any) that are burnt per …\nHandler for the unbalanced decrease when treasury funds …\nSome of our funds have been burnt.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe staking balance.\nThe amount which has been reported as inactive to Currency.\nSome funds have been deposited.\nThe spend is not yet eligible for payout.\nError for the treasury pallet.\nThe <code>Event</code> enum of this pallet\nThe balance of the asset kind is not convertible to the …\nCan be used to configure the genesis state of this pallet.\nThe payment has neither failed nor succeeded yet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe spend origin is valid but the amount it is allowed to …\nNo proposal, bounty or spend at that index.\nThe blocknumber for the last triggered spend period.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe payout was not yet attempted/claimed.\nA payment happened.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe treasury’s pallet id, used for deriving its …\nType for processing spends of Self::AssetKind in favor of …\nA payment failed and can be retried.\nThere was some issue with the mechanism of payment.\nThe period during which an approved treasury spend has to …\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nProposal has not been approved.\nDEPRECATED: associated with <code>spend_local</code> call and will be …\nOrigin from which rejections must come.\nSpending has finished; this is the amount that rolls over …\nThe overarching event type.\nA new spend proposal has been approved.\nThe count of spends that have been made.\nThe spend has expired and cannot be claimed.\nRuntime hooks to external pallet using treasury to compute …\nThe origin required for approving spends from the treasury …\nPeriod between successive spends.\nA spend was processed and removed from the storage. It …\nWe have ended a spend period and will now allocate funds.\nSpends that have been approved and being processed.\nToo many approvals in the queue.\nThe inactive funds of the pallet have been updated.\nWeight information for extrinsics in this pallet.\nCheck the status of the spend and remove it from the …\nClaim a spend.\nForce a previously approved proposal to be removed from …\nPropose and approve a spend of treasury funds.\nPropose and approve a spend of treasury funds.\nVoid previously approved spend.\nWeights for <code>pallet_treasury</code> using the Substrate node and …\nWeight functions needed for <code>pallet_treasury</code>.\nStorage: <code>Treasury::Spends</code> (r:1 w:1) Proof: <code>Treasury::Spends</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Treasury::Deactivated</code> (r:1 w:1) Proof: …\nStorage: <code>Treasury::Spends</code> (r:1 w:1) Proof: <code>Treasury::Spends</code>…\nStorage: <code>Treasury::Approvals</code> (r:1 w:1) Proof: …\nStorage: <code>AssetRate::ConversionRateToNative</code> (r:1 w:0) …\nStorage: <code>Treasury::ProposalCount</code> (r:1 w:1) Proof: …\nStorage: <code>Treasury::Spends</code> (r:1 w:1) Proof: <code>Treasury::Spends</code>…\nContains a variant per dispatchable extrinsic that this …\nThis pallet, or a specific call is now paused.\nThis pallet, or a specific call is now unpaused.\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nConfigure the initial state of this pallet in the genesis …\nThe call is paused.\nThe call is unpaused.\nMaximum length for pallet name and call name SCALE encoded …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe stringy name of a call (within a pallet) from …\nThe stringy name of a pallet from <code>GetCallMetadata</code> for …\nThe only origin that can pause calls.\nThe set of calls that are explicitly paused.\nThe overarching call type.\nA fully specified pallet (<code>PalletNameOf</code>) and optional call (…\nThe overarching event type.\nWeights for <code>pallet_tx_pause</code> using the Substrate node and …\nThe call is whitelisted and cannot be paused.\nThe only origin that can un-pause calls.\nWeight functions needed for <code>pallet_tx_pause</code>.\nContains all calls that cannot be paused.\nReturn whether the call is allowed to be dispatched.\nEnsure that this call can be paused.\nEnsure that this call can be un-paused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether this call is paused.\nSame as <code>Self::is_paused</code> but for inputs unbound by …\nCreate a call with the variant <code>pause</code>.\nCreate a call with the variant <code>unpause</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nStorage: <code>TxPause::PausedCalls</code> (r:1 w:1) Proof: …\nPause a call.\nPause a call.\nInitially paused calls.\nStorage: <code>TxPause::PausedCalls</code> (r:1 w:1) Proof: …\nUn-pause a call.\nUn-pause a call.\nAutogenerated weights for <code>pallet_tx_pause</code>\nContains a variant per dispatchable extrinsic that this …\nThis pallet, or a specific call is now paused.\nThis pallet, or a specific call is now unpaused.\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nConfigure the initial state of this pallet in the genesis …\nThe call is paused.\nThe call is unpaused.\nMaximum length for pallet name and call name SCALE encoded …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe only origin that can pause calls.\nThe set of calls that are explicitly paused.\nThe overarching call type.\nThe overarching event type.\nThe call is whitelisted and cannot be paused.\nThe only origin that can un-pause calls.\nContains all calls that cannot be paused.\nPause a call.\nInitially paused calls.\nUn-pause a call.\nWeights for <code>pallet_tx_pause</code> using the Substrate node and …\nWeight functions needed for <code>pallet_tx_pause</code>.\nThe items held by any given account; set out this way so …\nThe item ID has already been used for an item.\nAn approval for a <code>delegate</code> account to transfer the <code>item</code> of …\nAn <code>item</code> of a <code>collection</code> has been approved by the <code>owner</code> for …\nAttributes of a collection.\nAttribute metadata has been cleared for a <code>collection</code> or …\nThe basic amount of funds that must be reserved when …\nAn attribute is not found.\nNew attribute metadata has been set for a <code>collection</code> or …\nInvalid witness data given.\nThe provided bid is too low.\nAn <code>item</code> was destroyed.\nContains a variant per dispatchable extrinsic that this …\nDetails of a collection.\nThe collections owned by any given account; set out this …\nThe basic amount of funds that must be reserved for …\nA type alias representing the details of a collection.\nSome <code>collection</code> was frozen.\nIdentifier for the collection of item.\nKeeps track of the number of items a collection might have.\nMax supply has been set for a collection.\nMetadata has been cleared for a <code>collection</code>.\nMetadata of a collection.\nNew metadata has been set for a <code>collection</code>.\nSome <code>collection</code> was thawed.\nConfiguration trait of this pallet.\nStandard collection creation is only allowed if the origin …\nA <code>collection</code> was created.\nThe currency mechanism, used for paying for reserves.\nA type alias for handling balance deposits.\nThe additional funds that must be reserved for the number …\nWitness data for the destroy transactions.\nA <code>collection</code> was destroyed.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA <code>collection</code> was force-created.\nThe origin which may forcibly create or destroy an item or …\nSome <code>item</code> was frozen.\nThe item or collection is frozen.\nA set of helper functions for benchmarking.\nThe item ID is already taken.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nAn <code>item</code> was issued.\nThe items in existence and their ownership details.\nAn item was bought.\nThe basic amount of funds that must be reserved for an …\nInformation concerning the ownership of a single unique …\nA type alias for the details of a single item.\nThe type used to identify a unique item within a …\nMetadata of an item.\nA type alias to represent the price of an item.\nPrice of an asset instance.\nThe price for the instance was removed.\nThe price was set for the instance.\nA <code>collection</code> has had its attributes changed by the <code>Force</code> …\nThe maximum length of an attribute key.\nThe item is locked.\nLocker trait to enable Locking mechanism downstream.\nThe max supply has already been set.\nAll items have been minted.\nThe provided max supply is less to the amount of items a …\nMetadata has been cleared for an item.\nThe basic amount of funds that must be reserved when …\nNew metadata has been set for an item.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThere is no delegate approved.\nNo metadata is found.\nThe signing account has no permission to do the operation.\nItem is not for sale.\nThe owner changed.\nThe collection, if any, of which an account is willing to …\nOwnership acceptance has changed for an account.\nThe <code>Pallet</code> struct, the main type that implements traits …\nMetadata has been cleared for an item.\nThe overarching event type.\nThe maximum length of data stored on-chain.\nThe management team changed.\nSome <code>item</code> was thawed.\nAn <code>item</code> was transferred.\nThe named owner has not signed ownership of the collection …\nNo approval exists that would allow the transfer.\nThe given item ID is unknown.\nThe given item ID is unknown.\nThe maximum length of an attribute value.\nWeight functions needed for <code>pallet_uniques</code>.\nWeight information for extrinsics in this pallet.\nWrong attribute key/value bytes supplied.\nThe delegate turned out to be different to what was …\nWrong metadata key/value bytes supplied.\nThe owner turned out to be different to what was expected.\nCan thaw tokens, force transfers and burn tokens from any …\nCan thaw tokens, force transfers and burn tokens from any …\nApprove an item to be transferred by a delegated …\nApprove an item to be transferred by a delegated …\nThe approved transferrer of this item, if one is set.\nThe approved transferrer of this item, if one is set.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nThe total number of attributes for this collection.\nThe total number of attributes for this collection.\nThe total number of attributes for this collection.\nDestroy a single item.\nDestroy a single item.\nAllows to buy an item if it’s up for sale.\nAllows to buy an item if it’s up for sale.\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nCancel the prior approval for the transfer of an item by a …\nCancel the prior approval for the transfer of an item by a …\nClear an attribute for a collection or item.\nClear an attribute for a collection or item.\nClear the metadata for a collection.\nClear the metadata for a collection.\nClear the metadata for an item.\nClear the metadata for an item.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nGet the owner of the item, if the item exists.\nReturns an iterator of the collections in existence.\nIssue a new collection of non-fungible items from a public …\nIssue a new collection of non-fungible items from a public …\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nGeneral information concerning this collection. Limited in …\nGeneral information concerning this item. Limited in …\nThe amount held in the pallet’s default account for this …\nThe amount held in the pallet’s default account for this …\nThe balance deposited for this metadata.\nThe balance deposited for this metadata.\nDestroy a collection of fungible items.\nDestroy a collection of fungible items.\nBurn (destroy) an item from a collection.\nBuy an item from a collection.\nCreate a new collection with the provided details.\nDestroy a collection along with its associated items and …\nMint (create) a new item within a collection and assign …\nSet or remove the price for an item in a collection.\nPerform a transfer of an item from one account to another …\nIssue a new collection of non-fungible items from a …\nIssue a new collection of non-fungible items from a …\nAlter the attributes of a given item.\nAlter the attributes of a given item.\nIf <code>true</code>, then no deposit is needed to hold items of this …\nIf <code>true</code>, then no deposit is needed to hold items of this …\nDisallow further unprivileged transfer of an item.\nDisallow further unprivileged transfer of an item.\nDisallow further unprivileged transfers for a whole …\nDisallow further unprivileged transfers for a whole …\nCan freeze tokens.\nCan freeze tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the collection is frozen for non-admin transfers.\nWhether the item can be transferred or not.\nWhether the collection is frozen for non-admin transfers.\nWhether the item can be transferred or not.\nWhether the collection’s metadata may be changed by a …\nWhether the item metadata may be changed by a non Force …\nCan mint tokens.\nCan mint tokens.\nThe total number of outstanding item metadata of this …\nThe total number of outstanding item metadata of this …\nThe total number of items in this collection that have …\nReturns an iterator of the items of a <code>collection</code> in …\nThe total number of outstanding items of this collection.\nThe total number of outstanding items of this collection.\nThe total number of outstanding items of this collection.\nVarious pieces of common functionality.\nMint an item of a particular collection.\nMint an item of a particular collection.\nCreate a call with the variant <code>approve_transfer</code>.\nCreate a call with the variant <code>burn</code>.\nCreate a call with the variant <code>buy_item</code>.\nCreate a call with the variant <code>cancel_approval</code>.\nCreate a call with the variant <code>clear_attribute</code>.\nCreate a call with the variant <code>clear_collection_metadata</code>.\nCreate a call with the variant <code>clear_metadata</code>.\nCreate a call with the variant <code>create</code>.\nCreate a call with the variant <code>destroy</code>.\nCreate a call with the variant <code>force_create</code>.\nCreate a call with the variant <code>force_item_status</code>.\nCreate a call with the variant <code>freeze</code>.\nCreate a call with the variant <code>freeze_collection</code>.\nCreate a call with the variant <code>mint</code>.\nCreate a call with the variant <code>redeposit</code>.\nCreate a call with the variant <code>set_accept_ownership</code>.\nCreate a call with the variant <code>set_attribute</code>.\nCreate a call with the variant <code>set_collection_max_supply</code>.\nCreate a call with the variant <code>set_collection_metadata</code>.\nCreate a call with the variant <code>set_metadata</code>.\nCreate a call with the variant <code>set_price</code>.\nCreate a call with the variant <code>set_team</code>.\nCreate a call with the variant <code>thaw</code>.\nCreate a call with the variant <code>thaw_collection</code>.\nCreate a call with the variant <code>transfer</code>.\nCreate a call with the variant <code>transfer_ownership</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nGet the owner of the item, if the item exists.\nCan change <code>owner</code>, <code>issuer</code>, <code>freezer</code> and <code>admin</code> accounts.\nThe owner of this item.\nCan change <code>owner</code>, <code>issuer</code>, <code>freezer</code> and <code>admin</code> accounts.\nThe owner of this item.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReevaluate the deposits on some items.\nReevaluate the deposits on some items.\nSet (or reset) the acceptance of ownership for a …\nSet (or reset) the acceptance of ownership for a …\nSet an attribute for a collection or item.\nSet an attribute for a collection or item.\nSet the maximum amount of items a collection could have.\nSet the maximum amount of items a collection could have.\nSet the metadata for a collection.\nSet the metadata for a collection.\nSet the metadata for an item.\nSet the metadata for an item.\nSet (or reset) the price for an item.\nSet (or reset) the price for an item.\nChange the Issuer, Admin and Freezer of a collection.\nChange the Issuer, Admin and Freezer of a collection.\nRe-allow unprivileged transfer of an item.\nRe-allow unprivileged transfer of an item.\nRe-allow unprivileged transfers for a whole collection.\nRe-allow unprivileged transfers for a whole collection.\nThe total balance deposited for the all storage associated …\nThe total balance deposited for the all storage associated …\nMove an item from the sender account to another.\nMove an item from the sender account to another.\nChange the Owner of a collection.\nChange the Owner of a collection.\nAutogenerated weights for <code>pallet_uniques</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMigrate the pallet storage from <code>0</code> to <code>1</code>.\nThe items held by any given account; set out this way so …\nThe item ID has already been used for an item.\nAn approval for a <code>delegate</code> account to transfer the <code>item</code> of …\nAn <code>item</code> of a <code>collection</code> has been approved by the <code>owner</code> for …\nAttributes of a collection.\nAttribute metadata has been cleared for a <code>collection</code> or …\nThe basic amount of funds that must be reserved when …\nAn attribute is not found.\nNew attribute metadata has been set for a <code>collection</code> or …\nInvalid witness data given.\nThe provided bid is too low.\nAn <code>item</code> was destroyed.\nContains a variant per dispatchable extrinsic that this …\nDetails of a collection.\nThe collections owned by any given account; set out this …\nThe basic amount of funds that must be reserved for …\nSome <code>collection</code> was frozen.\nIdentifier for the collection of item.\nKeeps track of the number of items a collection might have.\nMax supply has been set for a collection.\nMetadata has been cleared for a <code>collection</code>.\nMetadata of a collection.\nNew metadata has been set for a <code>collection</code>.\nSome <code>collection</code> was thawed.\nConfiguration trait of this pallet.\nStandard collection creation is only allowed if the origin …\nA <code>collection</code> was created.\nThe currency mechanism, used for paying for reserves.\nThe additional funds that must be reserved for the number …\nA <code>collection</code> was destroyed.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA <code>collection</code> was force-created.\nThe origin which may forcibly create or destroy an item or …\nSome <code>item</code> was frozen.\nThe item or collection is frozen.\nA set of helper functions for benchmarking.\nThe item ID is already taken.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nAn <code>item</code> was issued.\nThe items in existence and their ownership details.\nAn item was bought.\nThe basic amount of funds that must be reserved for an …\nThe type used to identify a unique item within a …\nMetadata of an item.\nPrice of an asset instance.\nThe price for the instance was removed.\nThe price was set for the instance.\nA <code>collection</code> has had its attributes changed by the <code>Force</code> …\nThe maximum length of an attribute key.\nThe item is locked.\nLocker trait to enable Locking mechanism downstream.\nThe max supply has already been set.\nAll items have been minted.\nThe provided max supply is less to the amount of items a …\nMetadata has been cleared for an item.\nThe basic amount of funds that must be reserved when …\nNew metadata has been set for an item.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThere is no delegate approved.\nNo metadata is found.\nThe signing account has no permission to do the operation.\nItem is not for sale.\nThe owner changed.\nThe collection, if any, of which an account is willing to …\nOwnership acceptance has changed for an account.\nThe <code>Pallet</code> struct, the main type that implements traits …\nMetadata has been cleared for an item.\nThe overarching event type.\nThe maximum length of data stored on-chain.\nThe management team changed.\nSome <code>item</code> was thawed.\nAn <code>item</code> was transferred.\nThe named owner has not signed ownership of the collection …\nNo approval exists that would allow the transfer.\nThe given item ID is unknown.\nThe given item ID is unknown.\nThe maximum length of an attribute value.\nWeight information for extrinsics in this pallet.\nWrong attribute key/value bytes supplied.\nThe delegate turned out to be different to what was …\nWrong metadata key/value bytes supplied.\nThe owner turned out to be different to what was expected.\nApprove an item to be transferred by a delegated …\nDestroy a single item.\nAllows to buy an item if it’s up for sale.\nCancel the prior approval for the transfer of an item by a …\nClear an attribute for a collection or item.\nClear the metadata for a collection.\nClear the metadata for an item.\nIssue a new collection of non-fungible items from a public …\nDestroy a collection of fungible items.\nIssue a new collection of non-fungible items from a …\nAlter the attributes of a given item.\nDisallow further unprivileged transfer of an item.\nDisallow further unprivileged transfers for a whole …\nMint an item of a particular collection.\nReevaluate the deposits on some items.\nSet (or reset) the acceptance of ownership for a …\nSet an attribute for a collection or item.\nSet the maximum amount of items a collection could have.\nSet the metadata for a collection.\nSet the metadata for an item.\nSet (or reset) the price for an item.\nChange the Issuer, Admin and Freezer of a collection.\nRe-allow unprivileged transfer of an item.\nRe-allow unprivileged transfers for a whole collection.\nMove an item from the sender account to another.\nChange the Owner of a collection.\nWeights for <code>pallet_uniques</code> using the Substrate node and …\nWeight functions needed for <code>pallet_uniques</code>.\nStorage: <code>Uniques::Class</code> (r:1 w:0) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:0) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::OwnershipAcceptance</code> (r:1 w:1) Proof: …\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::CollectionMaxSupply</code> (r:1 w:1) Proof: …\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:0) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:0) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::OwnershipAcceptance</code> (r:1 w:1) Proof: …\nBatch of dispatches completed fully with no error.\nBatch of dispatches completed but has errors.\nBatch of dispatches did not complete fully. Index of first …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA call was dispatched.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe fallback call was dispatched.\nMain call was dispatched.\nA single item within a Batch of dispatches has completed …\nA single item within a Batch of dispatches has completed …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe caller origin, overarching type of all pallets origins.\nThe overarching call type.\nThe overarching event type.\nToo many calls batched.\nWeight functions needed for <code>pallet_utility</code>.\nWeight information for extrinsics in this pallet.\nSend a call through an indexed pseudonym of the sender.\nSend a call through an indexed pseudonym of the sender.\nSend a batch of dispatch calls.\nSend a batch of dispatch calls.\nSend a batch of dispatch calls and atomically execute them.\nSend a batch of dispatch calls and atomically execute them.\nDerive a derivative account ID from the owner account and …\nDispatches a function call with a provided origin.\nDispatches a function call with a provided origin.\nDispatches a function call with a provided origin.\nDispatches a function call with a provided origin.\nSend a batch of dispatch calls. Unlike <code>batch</code>, it allows …\nSend a batch of dispatch calls. Unlike <code>batch</code>, it allows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDispatch a fallback call in the event the main call fails …\nDispatch a fallback call in the event the main call fails …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>as_derivative</code>.\nCreate a call with the variant <code>batch</code>.\nCreate a call with the variant <code>batch_all</code>.\nCreate a call with the variant <code>dispatch_as</code>.\nCreate a call with the variant <code>dispatch_as_fallible</code>.\nCreate a call with the variant <code>force_batch</code>.\nCreate a call with the variant <code>if_else</code>.\nCreate a call with the variant <code>with_weight</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_utility</code>\nDispatch a function call with a specified weight.\nDispatch a function call with a specified weight.\nBatch of dispatches completed fully with no error.\nBatch of dispatches completed but has errors.\nBatch of dispatches did not complete fully. Index of first …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA call was dispatched.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe fallback call was dispatched.\nMain call was dispatched.\nA single item within a Batch of dispatches has completed …\nA single item within a Batch of dispatches has completed …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe caller origin, overarching type of all pallets origins.\nThe overarching call type.\nThe overarching event type.\nToo many calls batched.\nWeight information for extrinsics in this pallet.\nSend a call through an indexed pseudonym of the sender.\nSend a batch of dispatch calls.\nSend a batch of dispatch calls and atomically execute them.\nDispatches a function call with a provided origin.\nDispatches a function call with a provided origin.\nSend a batch of dispatch calls. Unlike <code>batch</code>, it allows …\nDispatch a fallback call in the event the main call fails …\nDispatch a function call with a specified weight.\nWeights for <code>pallet_utility</code> using the Substrate node and …\nWeight functions needed for <code>pallet_utility</code>.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nCalls <code>U::from(self)</code>.\nThe account identifier used by this pallet’s signature …\nHelper to create a signature to be benchmarked.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe extension is disabled and will be passthrough.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nSignature type that the extension of this pallet can …\nThe extension will verify the signature and, if …\nExtension that, if enabled, validates a signature type …\nWeight functions needed for <code>pallet_verify_signature</code>.\nWeight information for extrinsics in this pallet.\nTransaction extension which validates a signature against …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new passthrough extension instance.\nCreate a new extension instance that will validate the …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_verify_signature</code>\nThe account that signed the payload.\nThe signature provided by the transaction submitter.\nThe extension is disabled and will be passthrough.\nThe extension will verify the signature and, if …\nExtension that, if enabled, validates a signature type …\nThe account that signed the payload.\nThe signature provided by the transaction submitter.\nThe account identifier used by this pallet’s signature …\nHelper to create a signature to be benchmarked.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nSignature type that the extension of this pallet can …\nWeight information for extrinsics in this pallet.\nWeights for <code>pallet_verify_signature</code> using the Substrate …\nWeight functions needed for <code>pallet_verify_signature</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nAmount being transferred is too low to create a vesting …\nThe account already has <code>MaxVestingSchedules</code> count of …\nQuery the current block number.\nConvert the block number into a balance.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency trait.\nError for the vesting pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nFailed to create a new schedule because some parameter was …\nMaximum number of vesting schedules an account may have at …\nThe minimum amount transferred to call <code>vested_transfer</code>.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe account given is not vesting.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nAn index was out of bounds of the vesting schedules.\nStorage version of the pallet.\nReasons that determine under which conditions the balance …\nInformation regarding the vesting of a given account.\nAn [account] has become fully vested.\nA vesting schedule has been created.\nStruct to encode the vesting schedule of an individual …\nThe amount vested has been updated. This could indicate a …\nWeight functions needed for <code>pallet_vesting</code>.\nWeight information for extrinsics in this pallet.\nAdds a vesting schedule to a given account.\nEnsure we can call <code>add_vesting_schedule</code> without error. …\nBlock number at which the schedule ends (as type <code>Balance</code>).\nForce remove a vesting schedule\nForce remove a vesting schedule\nForce a vested transfer.\nForce a vested transfer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate parameters for <code>VestingInfo</code>. Note that this does …\nLocked amount at schedule creation.\nAmount locked at block <code>n</code>.\nMerge two vesting schedules together, creating a new …\nMerge two vesting schedules together, creating a new …\nStorage migrations for the vesting pallet.\nInstantiate a new <code>VestingInfo</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>force_vested_transfer</code>.\nCreate a call with the variant <code>merge_schedules</code>.\nCreate a call with the variant <code>vest</code>.\nCreate a call with the variant <code>vest_other</code>.\nCreate a call with the variant <code>vested_transfer</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAmount that gets unlocked every block after <code>starting_block</code>…\nRemove a vesting schedule for a given account.\nStarting block for unlocking(vesting).\nUnlock any vested funds of the sender account.\nUnlock any vested funds of the sender account.\nUnlock any vested funds of a <code>target</code> account.\nUnlock any vested funds of a <code>target</code> account.\nCreate a vested transfer.\nCreate a vested transfer.\nGet the amount that is currently being vested and cannot …\nAutogenerated weights for <code>pallet_vesting</code>\nMigrate from single schedule to multi schedule storage. …\nAmount being transferred is too low to create a vesting …\nThe account already has <code>MaxVestingSchedules</code> count of …\nQuery the current block number.\nConvert the block number into a balance.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency trait.\nError for the vesting pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nFailed to create a new schedule because some parameter was …\nMaximum number of vesting schedules an account may have at …\nThe minimum amount transferred to call <code>vested_transfer</code>.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe account given is not vesting.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nAn index was out of bounds of the vesting schedules.\nStorage version of the pallet.\nReasons that determine under which conditions the balance …\nInformation regarding the vesting of a given account.\nAn [account] has become fully vested.\nA vesting schedule has been created.\nThe amount vested has been updated. This could indicate a …\nWeight information for extrinsics in this pallet.\nForce remove a vesting schedule\nForce a vested transfer.\nMerge two vesting schedules together, creating a new …\nUnlock any vested funds of the sender account.\nUnlock any vested funds of a <code>target</code> account.\nCreate a vested transfer.\nWeights for <code>pallet_vesting</code> using the Substrate node and …\nWeight functions needed for <code>pallet_vesting</code>.\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nStorage: <code>Vesting::Vesting</code> (r:1 w:1) Proof: <code>Vesting::Vesting</code>…\nA converter between a location to a sovereign account.\nThe asset transactor of our executor\nA base trait for all individual pallets\nHelper that ensures successful delivery for XCM …\nThe XCM executor to use for doing stuff.\nThe overarching call type.\nThe call type of executor’s config. Should eventually …\nThe XCM configurations.\nDoes any necessary setup to create a valid destination for …\nWorst case scenario for a holding account in this runtime.\nContains a variant per dispatchable extrinsic that this …\nThe account used to check assets being teleported.\nConfiguration trait of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe type of <code>fungible</code> that is being used under the hood.\nA trusted location where reserve assets are stored, and …\nA trusted location which we allow teleports from, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGive me a fungible asset that your asset transactor is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nThe account used to check assets being teleported.\nConfiguration trait of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe type of <code>fungible</code> that is being used under the hood.\nA trusted location where reserve assets are stored, and …\nA trusted location which we allow teleports from, and the …\nGive me a fungible asset that your asset transactor is …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe type of <code>fungible</code> that is being used under the hood.\nA <code>(Location, Location)</code> that is one of the <code>Aliasers</code> …\nReturn an origin, ticket, and assets that can be trapped …\nA <code>(Location, NetworkId, InteriorLocation)</code> we can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nA valid <code>Location</code> we can successfully subscribe to.\nThe <code>Location</code> and <code>RuntimeCall</code> used for successful …\nA <code>(Location, Junction)</code> that is one of the <code>UniversalAliases</code> …\nReturn an unlocker, owner and assets that can be locked …\nReturns a valid pallet info for <code>ExpectPallet</code> or <code>QueryPallet</code>…\nThe pair of asset collections which causes the most …\nThe worst case buy execution weight limit and asset to …\nThe response which causes the most runtime weight.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe type of <code>fungible</code> that is being used under the hood.\nA <code>(Location, Location)</code> that is one of the <code>Aliasers</code> …\nReturn an origin, ticket, and assets that can be trapped …\nA <code>(Location, NetworkId, InteriorLocation)</code> we can …\nA valid <code>Location</code> we can successfully subscribe to.\nThe <code>Location</code> and <code>RuntimeCall</code> used for successful …\nA <code>(Location, Junction)</code> that is one of the <code>UniversalAliases</code> …\nReturn an unlocker, owner and assets that can be locked …\nReturns a valid pallet info for <code>ExpectPallet</code> or <code>QueryPallet</code>…\nThe pair of asset collections which causes the most …\nThe worst case buy execution weight limit and asset to …\nThe response which causes the most runtime weight.\nDo not hold <code>Self::BridgeDeposit</code> for the location of …\nXCM-level dispatcher for inbound bridge messages.\nBridge metadata.\nTrying to close already closed bridge.\nThe bridge is already registered in this pallet.\nThe funds are held as a deposit for opened bridge.\nAmount of this chain native tokens that is reserved on the …\nBridge identifier - used <strong>only</strong> for communicating with …\nLocations of bridge endpoints at both sides of the bridge.\nBridge locations error.\nAssociated messages pallet instance that bridges us with …\nAn alias for the bridge metadata.\nThe bridge between two locations has been opened.\nA converter between a location and a sovereign account.\nBridge has been closed and pruned from the runtime …\nBridge state.\nBridged network as relative location of bridged …\nAll registered bridges.\nContains a variant per dispatchable extrinsic that this …\nBridge is closed. Associated lanes are also closed. After …\nBridge is going to be closed, but not yet fully pruned …\nConfiguration trait of this pallet.\nCurrency used to pay for bridge registration.\nChecks the XCM version for the destination.\nMessage has been dispatched.\nThe <code>Error</code> enum of this pallet.\nError that may be returned when suspending/resuming the …\nThe <code>Event</code> enum of this pallet")