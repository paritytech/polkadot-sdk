searchState.loadedDescShard("yet_another_parachain_runtime", 16, "Get a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nComputes the BLAKE2 128-bit hash on the given input. …\nComputes the BLAKE2 128-bit hash on the given input. …\nComputes the BLAKE2 256-bit hash on the given input. …\nComputes the BLAKE2 256-bit hash on the given input. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the minimum balance that is required for creating …\nReturns the minimum balance that is required for creating …\nReturns the code hash of the caller. Function with …\nReturns the code hash of the caller. Container type for …\nRetrieve the account id for a specified <code>H160</code> address.\nRetrieve the account id for a specified <code>H160</code> address.\nReturns the amount of <code>Weight</code> left. Function with signature …\nReturns the amount of <code>Weight</code> left. Container type for the …\nSimple decoder for a Solidity <code>bytes</code> type.\nEncodes a <code>bool</code> to big-endian <code>[u8; 32]</code> with padded zeros.\nEncodes the <code>bytes</code> argument for the Solidity ABI. The …\nEncodes a <code>u32</code> to big-endian <code>[u8; 32]</code> with padded zeros.\nReturns the Solidity selector for <code>fn_sig</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nFailed to get the active era from the staking pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn offence was created by root.\nThe offence handler provided by the runtime.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe offence report system provided by the runtime.\nCustom offence type for testing spam scenarios.\nAllows the <code>root</code>, for example sudo to create an offence.\nAllows the <code>root</code>, for example sudo to create an offence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>create_offence</code>.\nCreate a call with the variant <code>report_offence</code>.\nThe validator being slashed\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSame as <code>Pallet::create_offence</code>, but it reports the offence …\nSame as <code>Pallet::create_offence</code>, but it reports the offence …\nThe session in which the offence occurred\nSlash fraction to apply\nCustom time slot (allows unique offences within same …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nFailed to get the active era from the staking pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn offence was created by root.\nThe offence handler provided by the runtime.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe offence report system provided by the runtime.\nCustom offence type for testing spam scenarios.\nAllows the <code>root</code>, for example sudo to create an offence.\nThe validator being slashed\nSame as <code>Pallet::create_offence</code>, but it reports the offence …\nThe session in which the offence occurred\nSlash fraction to apply\nCustom time slot (allows unique offences within same …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nEvent dispatched when the trigger_defensive extrinsic is …\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nA dispatch that will fill the block weight up to the given …\nA dispatch that will fill the block weight up to the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>fill_block</code>.\nCreate a call with the variant <code>trigger_defensive</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nEvent dispatched when the trigger_defensive extrinsic is …\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nA dispatch that will fill the block weight up to the given …\nThe account already has a deposit reserved and can …\nContains a variant per dispatchable extrinsic that this …\nCould not hold funds for entering or extending the …\nCould not release funds for entering or extending the …\nThis deposit cannot be released yet.\nConfiguration trait of this pallet.\nCurrency type for this pallet, used for Deposits.\nAn error from the underlying <code>Currency</code>.\nAn account reserved funds for either entering or extending …\nAn account had a reserve released that was reserved.\nAn account had reserve slashed that was reserved.\nHolds the reserve that was taken from an account at a …\nThe amount that will be reserved upon calling <code>Pallet::enter</code>…\nFor how many blocks the safe-mode will be entered by …\nFunds are held for entering or extending the safe-mode.\nThe safe-mode is (already or still) entered.\nThe safe-mode was entered until inclusively this block.\nContains the last block number that the safe-mode will …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe reason why the safe-mode was deactivated.\nThe safe-mode is (already or still) exited.\nExited the safe-mode for a specific reason.\nThe amount that will be reserved upon calling …\nFor how many blocks the safe-mode can be extended by each …\nThe safe-mode was extended until inclusively this block.\nThe safe-mode was forcefully deactivated by …\nThe only origin that can force to release or slash a …\nThe origin that may call <code>Pallet::force_enter</code>.\nThe origin that may call <code>Pallet::force_enter</code>.\nThe origin that may call <code>Pallet::force_extend</code>.\nConfigure the initial state of this pallet in the genesis …\nA reason for the pallet placing a hold on funds.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThere is no balance reserved.\nThis functionality of the pallet is disabled by the …\nNotifies external logic when the safe-mode is being …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe minimal duration a deposit will remain reserved after …\nThe overarching event type.\nThe hold reason when reserving funds for entering or …\nWeights for <code>pallet_safe_mode</code> using the Substrate node and …\nThe safe-mode was automatically deactivated after it’s …\nWeight functions needed for <code>pallet_safe_mode</code>.\nContains all runtime calls in any pallet that can be …\nReturn whether the given call is allowed to be dispatched.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:1) Proof: …\nEnter safe-mode permissionlessly for <code>Config::EnterDuration</code> …\nEnter safe-mode permissionlessly for <code>Config::EnterDuration</code> …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:1) Proof: …\nExtend the safe-mode permissionlessly for …\nExtend the safe-mode permissionlessly for …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:1) Proof: …\nEnter safe-mode by force for a per-origin configured …\nEnter safe-mode by force for a per-origin configured …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:1) Proof: …\nExit safe-mode by force.\nExit safe-mode by force.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:1) Proof: …\nExtend the safe-mode by force for a per-origin configured …\nExtend the safe-mode by force for a per-origin configured …\nStorage: <code>SafeMode::Deposits</code> (r:1 w:1) Proof: …\nForce to release a deposit for an account that entered …\nForce to release a deposit for an account that entered …\nStorage: <code>SafeMode::Deposits</code> (r:1 w:1) Proof: …\nSlash a deposit for an account that entered or extended …\nSlash a deposit for an account that entered or extended …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether the given call is allowed to be dispatched.\nReturn whether <code>safe-mode</code> is entered.\nCreate a call with the variant <code>enter</code>.\nCreate a call with the variant <code>extend</code>.\nCreate a call with the variant <code>force_enter</code>.\nCreate a call with the variant <code>force_exit</code>.\nCreate a call with the variant <code>force_extend</code>.\nCreate a call with the variant <code>force_release_deposit</code>.\nCreate a call with the variant <code>force_slash_deposit</code>.\nCreate a call with the variant <code>release_deposit</code>.\nAutomatically exits safe-mode when the current block …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:1) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nStorage: <code>SafeMode::Deposits</code> (r:1 w:1) Proof: …\nPermissionlessly release a deposit for an account that …\nPermissionlessly release a deposit for an account that …\nAutogenerated weights for <code>pallet_safe_mode</code>\nThe account already has a deposit reserved and can …\nContains a variant per dispatchable extrinsic that this …\nCould not hold funds for entering or extending the …\nCould not release funds for entering or extending the …\nThis deposit cannot be released yet.\nConfiguration trait of this pallet.\nCurrency type for this pallet, used for Deposits.\nAn error from the underlying <code>Currency</code>.\nAn account reserved funds for either entering or extending …\nAn account had a reserve released that was reserved.\nAn account had reserve slashed that was reserved.\nHolds the reserve that was taken from an account at a …\nThe amount that will be reserved upon calling <code>Pallet::enter</code>…\nFor how many blocks the safe-mode will be entered by …\nFunds are held for entering or extending the safe-mode.\nThe safe-mode is (already or still) entered.\nThe safe-mode was entered until inclusively this block.\nContains the last block number that the safe-mode will …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe reason why the safe-mode was deactivated.\nThe safe-mode is (already or still) exited.\nExited the safe-mode for a specific reason.\nThe amount that will be reserved upon calling …\nFor how many blocks the safe-mode can be extended by each …\nThe safe-mode was extended until inclusively this block.\nThe safe-mode was forcefully deactivated by …\nThe only origin that can force to release or slash a …\nThe origin that may call <code>Pallet::force_enter</code>.\nThe origin that may call <code>Pallet::force_enter</code>.\nThe origin that may call <code>Pallet::force_extend</code>.\nConfigure the initial state of this pallet in the genesis …\nA reason for the pallet placing a hold on funds.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThere is no balance reserved.\nThis functionality of the pallet is disabled by the …\nNotifies external logic when the safe-mode is being …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe minimal duration a deposit will remain reserved after …\nThe overarching event type.\nThe hold reason when reserving funds for entering or …\nThe safe-mode was automatically deactivated after it’s …\nContains all runtime calls in any pallet that can be …\nEnter safe-mode permissionlessly for <code>Config::EnterDuration</code> …\nExtend the safe-mode permissionlessly for …\nEnter safe-mode by force for a per-origin configured …\nExit safe-mode by force.\nExtend the safe-mode by force for a per-origin configured …\nForce to release a deposit for an account that entered …\nSlash a deposit for an account that entered or extended …\nPermissionlessly release a deposit for an account that …\nWeights for <code>pallet_safe_mode</code> using the Substrate node and …\nWeight functions needed for <code>pallet_safe_mode</code>.\nThe account is already inducted.\nThe salary system has already been started.\nAmount attempted to be paid when last active as well as …\nThere is no budget left for the payout.\nThe total budget per cycle.\nContains a variant per dispatchable extrinsic that this …\nThe state of a specific payment claim.\nThe member’s claim is zero.\nThe status of a claimant.\nThe status of a single payee/claimant.\nConfiguration trait of this pallet.\nPayroll cycle.\nThe next cycle begins.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe payment has neither failed nor succeeded yet.\nA member is inducted into the payroll.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe current membership of payees.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe member does not have a current valid claim.\nThe cycle is after that in which the payment was made.\nThe account is not a ranked member.\nThe payout cycles have not yet started.\nCycle is not yet over.\nNo claim recorded.\nA payment happened.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere was some issue with the mechanism of payment.\nMeans by which we can make payments to accounts. This also …\nThe number of blocks within a cycle which accounts have to …\nAmount reserved when last active.\nA member registered for a payout.\nThe number of blocks within a cycle which accounts have to …\nThe runtime event type.\nThe maximum payout to be made for a single period to an …\nThe overall status of the system.\nThe status of the pallet instance.\nA member swapped their account.\nCurrent cycle’s payment period is not yet begun.\nCurrent cycle’s registration period is over.\nWeight functions needed for <code>pallet_salary</code>.\nWeight information for extrinsics in this pallet.\nMove to next payout cycle, assuming that the present block …\nMove to next payout cycle, assuming that the present block …\nUpdate a payment’s status; if it failed, alter the state …\nUpdate a payment’s status; if it failed, alter the state …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInduct oneself into the payout system.\nInduct oneself into the payout system.\nStart the first payout cycle.\nStart the first payout cycle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>bump</code>.\nCreate a call with the variant <code>check_payment</code>.\nCreate a call with the variant <code>induct</code>.\nCreate a call with the variant <code>init</code>.\nCreate a call with the variant <code>payout</code>.\nCreate a call with the variant <code>payout_other</code>.\nCreate a call with the variant <code>register</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRequest a payout.\nRequest a payout.\nRequest a payout to a secondary account.\nRequest a payout to a secondary account.\nRegister for a payout.\nRegister for a payout.\nAutogenerated weights for <code>pallet_salary</code>\nThe account is already inducted.\nThe salary system has already been started.\nThere is no budget left for the payout.\nThe total budget per cycle.\nContains a variant per dispatchable extrinsic that this …\nThe member’s claim is zero.\nThe status of a claimant.\nConfiguration trait of this pallet.\nThe next cycle begins.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe payment has neither failed nor succeeded yet.\nA member is inducted into the payroll.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe current membership of payees.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe member does not have a current valid claim.\nThe cycle is after that in which the payment was made.\nThe account is not a ranked member.\nThe payout cycles have not yet started.\nCycle is not yet over.\nA payment happened.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere was some issue with the mechanism of payment.\nMeans by which we can make payments to accounts. This also …\nThe number of blocks within a cycle which accounts have to …\nA member registered for a payout.\nThe number of blocks within a cycle which accounts have to …\nThe runtime event type.\nThe maximum payout to be made for a single period to an …\nThe overall status of the system.\nA member swapped their account.\nCurrent cycle’s payment period is not yet begun.\nCurrent cycle’s registration period is over.\nWeight information for extrinsics in this pallet.\nMove to next payout cycle, assuming that the present block …\nUpdate a payment’s status; if it failed, alter the state …\nInduct oneself into the payout system.\nStart the first payout cycle.\nRequest a payout.\nRequest a payout to a secondary account.\nRegister for a payout.\nWeights for <code>pallet_salary</code> using the Substrate node and …\nWeight functions needed for <code>pallet_salary</code>.\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>Salary::Status</code> (r:1 w:0) Proof: <code>Salary::Status</code> (…\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nCalls <code>U::from(self)</code>.\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nStorage: <code>Salary::Status</code> (r:1 w:1) Proof: <code>Salary::Status</code> (…\nStorage: <code>RankedCollective::Members</code> (r:1 w:0) Proof: …\nItems to be executed, indexed by the block number that …\nAgenda is incomplete from <code>when</code>.\nQuery the current block number.\nContains a variant per dispatchable extrinsic that this …\nThe call for the provided hash was not found so the task …\nCanceled some task.\nConfiguration trait of this pallet.\nDispatched some task.\nThe <code>Error</code> enum of this pallet.\nEvents type.\nFailed to schedule a call\nThe hash of the encoded value which this value represents.\nBlock number at which the agenda began incomplete …\nA bounded <code>Call</code>. Its encoding must be at most 128 bytes.\nA hash with no preimage length. We do not support creation …\nLookup from a name to the block number and index of the …\nA hash of the call together with an upper limit for its …\nThe maximum number of scheduled calls in the queue for a …\nThe maximum weight that may be scheduled per block for any …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAttempt to use a non-named function on a named task.\nCannot find the scheduled call.\nCompare the privileges of origins.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe caller origin, overarching type of all pallets origins.\nThe given task was unable to be renewed since the agenda …\nJust a simple index for naming period tasks.\nThe given task can never be executed since it is …\nThe preimage provider with which we look up call hashes to …\nReschedule failed because it does not change scheduled …\nRetry configurations for items to be executed, indexed by …\nCancel a retry configuration for some task.\nThe configuration of the retry mechanism for a given task …\nThe given task was unable to be retried since the agenda …\nSet a retry configuration for some task.\nThe aggregated call type.\nThe overarching event type.\nThe aggregated origin which the dispatch will take.\nRequired origin to schedule or cancel calls.\nInformation regarding an item to be executed in the future.\nScheduled some task.\nGiven target block number is in the past.\nThe location of a scheduled task that can be used to …\nThe value itself.\nWeight functions needed for <code>pallet_scheduler</code>.\nWeight information for extrinsics in this pallet.\nCreate a new task to be used for retry attempts of the …\nThe call to be dispatched.\nThe call to be dispatched.\nThe call to be dispatched.\nThe call to be dispatched.\nCancel an anonymously scheduled task.\nCancel an anonymously scheduled task.\nCancel a named scheduled task.\nCancel a named scheduled task.\nRemoves the retry configuration of a task.\nRemoves the retry configuration of a task.\nCancel the retry configuration of a named task.\nCancel the retry configuration of a named task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unique identity for this task, if there is one.\nThe unique identity for this task, if there is one.\nThe unique identity for this task, if there is one.\nThe unique identity for this task, if there is one.\nIf the call is periodic, then this points to the …\nIf the call is periodic, then this points to the …\nIf the call is periodic, then this points to the …\nIf the call is periodic, then this points to the …\nHelper to migrate scheduler when the pallet origin type …\nMigrate storage format from V1 to V4.\nMigrate storage format from V2 to V4.\nMigrate storage format from V3 to V4.\nMigrations for the scheduler pallet.\nCreate a call with the variant <code>cancel</code>.\nCreate a call with the variant <code>cancel_named</code>.\nCreate a call with the variant <code>cancel_retry</code>.\nCreate a call with the variant <code>cancel_retry_named</code>.\nCreate a call with the variant <code>schedule</code>.\nCreate a call with the variant <code>schedule_after</code>.\nCreate a call with the variant <code>schedule_named</code>.\nCreate a call with the variant <code>schedule_named_after</code>.\nCreate a call with the variant <code>set_retry</code>.\nCreate a call with the variant <code>set_retry_named</code>.\nExecute the scheduled calls\nThe origin with which to dispatch the call.\nThe origin with which to dispatch the call.\nThe origin with which to dispatch the call.\nThe origin with which to dispatch the call.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPeriod of time between retry attempts.\nThis task’s priority.\nThis task’s priority.\nThis task’s priority.\nThis task’s priority.\nAmount of retries left.\nAnonymously schedule a task.\nAnonymously schedule a task.\nAnonymously schedule a task after a delay.\nAnonymously schedule a task after a delay.\nSchedule a named task.\nSchedule a named task.\nSchedule a named task after a delay.\nSchedule a named task after a delay.\nSet a retry configuration for a task so that, in case its …\nSet a retry configuration for a task so that, in case its …\nSet a retry configuration for a named task so that, in …\nSet a retry configuration for a named task so that, in …\nInitial amount of retries allowed.\nAutogenerated weights for <code>pallet_scheduler</code>\nMigrate the scheduler pallet from V3 to V4.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThis migration cleans up empty agendas of the V4 scheduler.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nItems to be executed, indexed by the block number that …\nAgenda is incomplete from <code>when</code>.\nQuery the current block number.\nContains a variant per dispatchable extrinsic that this …\nThe call for the provided hash was not found so the task …\nCanceled some task.\nConfiguration trait of this pallet.\nDispatched some task.\nThe <code>Error</code> enum of this pallet.\nEvents type.\nFailed to schedule a call\nBlock number at which the agenda began incomplete …\nLookup from a name to the block number and index of the …\nThe maximum number of scheduled calls in the queue for a …\nThe maximum weight that may be scheduled per block for any …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAttempt to use a non-named function on a named task.\nCannot find the scheduled call.\nCompare the privileges of origins.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe caller origin, overarching type of all pallets origins.\nThe given task was unable to be renewed since the agenda …\nThe given task can never be executed since it is …\nThe preimage provider with which we look up call hashes to …\nReschedule failed because it does not change scheduled …\nRetry configurations for items to be executed, indexed by …\nCancel a retry configuration for some task.\nThe given task was unable to be retried since the agenda …\nSet a retry configuration for some task.\nThe aggregated call type.\nThe overarching event type.\nThe aggregated origin which the dispatch will take.\nRequired origin to schedule or cancel calls.\nScheduled some task.\nGiven target block number is in the past.\nWeight information for extrinsics in this pallet.\nCancel an anonymously scheduled task.\nCancel a named scheduled task.\nRemoves the retry configuration of a task.\nCancel the retry configuration of a named task.\nAnonymously schedule a task.\nAnonymously schedule a task after a delay.\nSchedule a named task.\nSchedule a named task after a delay.\nSet a retry configuration for a task so that, in case its …\nSet a retry configuration for a named task so that, in …\nWeights for <code>pallet_scheduler</code> using the Substrate node and …\nWeight functions needed for <code>pallet_scheduler</code>.\nStorage: <code>Scheduler::Agenda</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::Lookup</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::Agenda</code> (r:1 w:0) Proof: …\nStorage: <code>Scheduler::Lookup</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Scheduler::Agenda</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::Lookup</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::Agenda</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::Agenda</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::IncompleteSince</code> (r:1 w:1) Proof: …\nStorage: <code>Preimage::PreimageFor</code> (r:1 w:1) Proof: …\nStorage: <code>Scheduler::Lookup</code> (r:0 w:1) Proof: …\nStorage: <code>Scheduler::Agenda</code> (r:1 w:0) Proof: …\nStorage: <code>Scheduler::Lookup</code> (r:1 w:0) Proof: …\nAlready a member.\nContains a variant per dispatchable extrinsic that this …\nAn entity has issued a candidacy. See the transaction for …\nThe candidacy was forcefully removed for an entity. See …\nA score was attributed to the candidate. See the …\nAn entity withdrew candidacy. See the transaction for who.\nConfiguration trait of this pallet.\nThe currency used for deposits.\nError for the scored-pool pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nIndex out of bounds.\nRequired origin for removing a member (though can always …\nMaximum members length allowed.\nThe given member was removed. See the transaction for who.\nThe receiver of the signal for when the members have …\nThe receiver of the signal for when the membership has …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nEvery <code>Period</code> blocks the <code>Members</code> are filled with the …\nThe overarching event type.\nThe score attributed to a member or candidate.\nAllows a configurable origin type to set a score to a …\nNumber of members exceeds <code>MaximumMembers</code>.\nIndex does not match requested account.\nAn auto-generated getter for <code>CandidateExists</code>.\nDispatchable call to change <code>MemberCount</code>.\nDispatchable call to change <code>MemberCount</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKick a member <code>who</code> from the set.\nKick a member <code>who</code> from the set.\nAn auto-generated getter for <code>MemberCount</code>.\nAn auto-generated getter for <code>Members</code>.\nCreate a call with the variant <code>change_member_count</code>.\nCreate a call with the variant <code>kick</code>.\nCreate a call with the variant <code>score</code>.\nCreate a call with the variant <code>submit_candidacy</code>.\nCreate a call with the variant <code>withdraw_candidacy</code>.\nEvery <code>Period</code> blocks the <code>Members</code> set is refreshed from the …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAn auto-generated getter for <code>Pool</code>.\nScore a member <code>who</code> with <code>score</code>.\nScore a member <code>who</code> with <code>score</code>.\nAdd <code>origin</code> to the pool of candidates.\nAdd <code>origin</code> to the pool of candidates.\nAn entity withdraws candidacy and gets its deposit back.\nAn entity withdraws candidacy and gets its deposit back.\nAlready a member.\nContains a variant per dispatchable extrinsic that this …\nAn entity has issued a candidacy. See the transaction for …\nThe candidacy was forcefully removed for an entity. See …\nA score was attributed to the candidate. See the …\nAn entity withdrew candidacy. See the transaction for who.\nConfiguration trait of this pallet.\nThe currency used for deposits.\nError for the scored-pool pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nIndex out of bounds.\nRequired origin for removing a member (though can always …\nMaximum members length allowed.\nThe given member was removed. See the transaction for who.\nThe receiver of the signal for when the members have …\nThe receiver of the signal for when the membership has …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nEvery <code>Period</code> blocks the <code>Members</code> are filled with the …\nThe overarching event type.\nThe score attributed to a member or candidate.\nAllows a configurable origin type to set a score to a …\nNumber of members exceeds <code>MaximumMembers</code>.\nIndex does not match requested account.\nDispatchable call to change <code>MemberCount</code>.\nKick a member <code>who</code> from the set.\nScore a member <code>who</code> with <code>score</code>.\nAdd <code>origin</code> to the pool of candidates.\nAn entity withdraws candidacy and gets its deposit back.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency type for placing holds when setting keys.\nCurrent index of the session.\nIndices of disabled validators.\n<code>DisablingStragegy</code> controls how validators are disabled\nRegistered duplicate key.\nError for the session pallet.\nThe <code>Event</code> enum of this pallet\nWraps the author-scraping logic for consensus engines that …\nCan be used to configure the genesis state of this pallet.\nA reason for the pallet placing a hold on funds.\nInvalid ownership proof.\nAll the key type ids this session handler can process.\nThe amount to be held when setting keys.\nThe owner of a key. The key is the <code>KeyTypeId</code> + the encoded …\nThe keys.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>NewSession</code> event in the current block also implies a …\nNew session has happened. Note that the argument is the …\nThe next session keys for a validator.\nSomething that can predict the next session rotation. This …\nKey setting account is not live, so it’s impossible to …\nNo associated validator ID for account.\nNo keys are associated with this account.\nThe <code>Pallet</code> struct, the main type that implements traits …\nEnds the session after a fixed period of blocks.\nTrue if the underlying economic identities or weighting …\nThe queued keys for the next session. When the next …\nThe overarching event type.\nHandler for session life cycle events.\nHandler when a session has changed.\nA trait for managing creation of new validator set.\nHandler for managing new session.\nDecides whether the session should be ended.\nIndicator for when to end the session.\n<code>SessionHandler</code> for tests that use <code>UintAuthorityId</code> as <code>Keys</code>.\nValidator has been disabled.\nA stable ID for a validator.\nA conversion from account ID to validator ID.\nValidator has been re-enabled.\nThe current set of validators.\nWeight functions needed for <code>pallet_session</code>.\nWeight information for extrinsics in this pallet.\nPublic function to access the current session index.\nDisable the validator of index <code>i</code> with a default severity …\nDisable the validator of index <code>i</code> with a specified severity,\nPublic function to access the disabled validators.\nEnd the session.\nMint enough funds into <code>who</code>, such that they can pay the …\nThis session pallet always calls new_session and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAn opt-in utility for tracking historical sessions in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery the owner of a session key by returning the owner’…\nInitial list of validator at genesis representing by their …\nCreate a call with the variant <code>purge_keys</code>.\nCreate a call with the variant <code>set_keys</code>.\nPlan a new session, and optionally provide the new …\nSame as <code>new_session</code>, but it this should only be called at …\nList of (AccountId, ValidatorId, Keys) that will be …\nA notification for end of the session.\nA validator got disabled. Act accordingly until a new …\nThe given validator set will be used for the genesis …\nCalled when a block is initialized. Will rotate session if …\nSession set has changed; act appropriately. Note that this …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRemoves any session key(s) of the function caller.\nRemoves any session key(s) of the function caller.\nPublic function to access the queued keys.\nRe-enable the validator of index <code>i</code>, returns <code>false</code> if the …\nReport an offence for the given validator and let …\nMove on to next session. Register new validator set and …\nSets the session key(s) of the function caller to <code>keys</code>. …\nSets the session key(s) of the function caller to <code>keys</code>. …\nReturn <code>true</code> if the session should be ended.\nStart an already planned session.\nUpgrade the key type from some old type to a new type. …\nConvert a validator ID to an index. (If using with the …\nPublic function to access the current set of validators.\nAutogenerated weights for <code>pallet_session</code>\nHelper struct representing a decision coming from a given …\nControls validator disabling\nImplementation of <code>DisablingStrategy</code> using …\nImplementation of <code>DisablingStrategy</code> which disables …\nMake a disabling decision. Returning a <code>DisablingDecision</code>\nDisabling limit calculated from the total number of …\nDisabling limit calculated from the total number of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nFull identification of the validator.\nA conversion from validator ID to full identification.\nMapping from historical session indices to session-data …\nA tuple of the validator’s ID and their full …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn <code>SessionManager</code> implementation that wraps an inner <code>I</code> and …\nThe <code>Pallet</code> struct, the main type that implements traits …\nA trie instance for checking and generating proofs.\nThe merkle root of the validators of the said session were …\nThe merkle roots of up to this session index were pruned\nThe overarching event type.\nSpecialization of the crate-level <code>SessionManager</code> which …\nThe range of historical sessions we store. [first, last)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAn auto-generated getter for <code>HistoricalSessions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf there was a validator set change, its returns the set …\nOff-chain logic for creating a proof based data provided …\nOn-chain logic to store a validator-set for deferred …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nProve the full verification data for a given key and key …\nPrune historical stored session roots up to (but not …\nAccess the underlying trie root.\nKeep the newest <code>n</code> items, and prune all items older than …\nCreate a proof based on the data available in the …\nAttempt to prune anything that is older than <code>first_to_keep</code> …\nStore the validator set associated to the <em>current</em> session …\nStore the validator-set associated to the <code>session_index</code> to …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nFull identification of the validator.\nA conversion from validator ID to full identification.\nMapping from historical session indices to session-data …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe merkle root of the validators of the said session were …\nThe merkle roots of up to this session index were pruned\nThe overarching event type.\nThe range of historical sessions we store. [first, last)\nVersion 1.\nMigrate the entire storage of this pallet to a new prefix.\nSome checks for after migration. This can be linked to …\nSome checks prior to migration. This can be linked to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPeek the list of disabled validators and their offence …\nReturn the list of disabled validators and their offence …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency type for placing holds when setting keys.\nCurrent index of the session.\nIndices of disabled validators.\n<code>DisablingStragegy</code> controls how validators are disabled\nRegistered duplicate key.\nError for the session pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nA reason for the pallet placing a hold on funds.\nInvalid ownership proof.\nThe amount to be held when setting keys.\nThe owner of a key. The key is the <code>KeyTypeId</code> + the encoded …\nThe keys.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>NewSession</code> event in the current block also implies a …\nNew session has happened. Note that the argument is the …\nThe next session keys for a validator.\nSomething that can predict the next session rotation. This …\nKey setting account is not live, so it’s impossible to …\nNo associated validator ID for account.\nNo keys are associated with this account.\nThe <code>Pallet</code> struct, the main type that implements traits …\nTrue if the underlying economic identities or weighting …\nThe queued keys for the next session. When the next …\nThe overarching event type.\nHandler when a session has changed.\nHandler for managing new session.\nIndicator for when to end the session.\nValidator has been disabled.\nA stable ID for a validator.\nA conversion from account ID to validator ID.\nValidator has been re-enabled.\nThe current set of validators.\nWeight information for extrinsics in this pallet.\nInitial list of validator at genesis representing by their …\nList of (AccountId, ValidatorId, Keys) that will be …\nRemoves any session key(s) of the function caller.\nSets the session key(s) of the function caller to <code>keys</code>. …\nWeights for <code>pallet_session</code> using the Substrate node and …\nWeight functions needed for <code>pallet_session</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBenchmarks for the Session Pallet.\nCalls <code>U::from(self)</code>.\nThe wrapped extension should be applied.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nA transaction fee was skipped.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe wrapped extension should be skipped.\nA <code>TransactionExtension</code> that skips the wrapped extension if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nA transaction fee was skipped.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nUser has already made a bid.\nUser is already a candidate.\nThe member is already elevated to this rank.\nSociety already founded.\nUser is already a member.\nThe skeptic has already been punished for this offence.\nMember is already vouching or banned from vouching again.\nThe suspension judgement origin approves of the candidate…\nThe candidacy cannot be dropped as the candidate was …\nA candidate was dropped (due to an excess of bids in the …\nA candidate was dropped (due to an excess of bids in the …\nMember is banned from vouching for other members.\nA bid for entry into society.\nA membership bid just happened. The given account is the …\nA membership bid just happened. The given account is the …\nA vote by a member on a candidate application.\nThe current bids, stored ordered by the value of the bid.\nProvider for the block number. Normally this is the …\nContains a variant per dispatchable extrinsic that this …\nA bid for entry into society.\nA candidate has been suspended\nA candidate has been suspended\nStorage type is <code>StorageMap</code> with key type <code>T :: AccountId</code> …\nThe number of Config::BlockNumberProvider blocks between …\nThe number of challenge rounds there have been. Used to …\nA member has been challenged\nA member has been challenged\nThe number of Config::BlockNumberProvider blocks on which …\nConfiguration trait of this pallet.\nThe currency type used for bidding.\nA vote has been placed for a defending member\nA vote has been placed for a defending member\nVotes for the defender, keyed by challenge round.\nThe defending member currently being challenged, along …\nThe given deposit was paid for this bid.\nSome funds were deposited into the society account.\nSome funds were deposited into the society account.\nA deposit was poked / adjusted.\nA deposit was poked / adjusted.\nA [member] got elevated to [rank].\nA [member] got elevated to [rank].\nSimple ensure origin struct to filter for the founder …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe skeptic need not vote on candidates from expired …\nThe society is founded by the given identity.\nThe society is founded by the given identity.\nThe first member.\nCannot remove the founder.\nThe origin that is allowed to call <code>found</code>.\nCan be used to configure the genesis state of this pallet.\nThe maximum number of strikes before a member gets funds …\nThe most primary from the most recently approved rank 0 …\nCannot remove the head of the chain.\nThe candidacy cannot be concluded as the voting is still …\nA group of candidates have been inducted. The batch’s …\nA group of candidates have been inducted. The batch’s …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nFunds are insufficient to pay off society debts.\nNot enough in pot to accept candidate.\nRecord for an individual new member who was elevated from …\nA judgement by the suspension judgement origin on a …\nThe maximum number of bids at once.\nThe maximum duration of the payout lock.\nToo many members in the society.\nThe maximum number of payouts a member may have waiting …\nThe current items in <code>Members</code> keyed by their unique index. …\nThe number of items in <code>Members</code> currently. (Doesn’t …\nInformation concerning a member.\nA member has been suspended\nA member has been suspended\nThe current members and their rank. Doesn’t include …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new set of [params] has been set for the group.\nA new set of [params] has been set for the group.\nNext challenge rotation scheduled with …\nAt the end of the claim period, this contains the most …\nNext intake rotation scheduled with …\nThere is no defender currently.\nThere is no deposit associated with a bid.\nNothing to payout.\nThe candidate/defender has no stale votes to remove.\nThe membership cannot be claimed as the candidate was not …\nUser is not a bidder.\nUser is not a candidate.\nThe caller is not the founder.\nGroup doesn’t exist.\nThe caller is not the head.\nUser is not a member.\nThe candidate cannot be kicked as the candidate was not …\nUser is not suspended.\nMember is not vouching.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe societies’s pallet id\nThe max number of members for the society at one time.\nDetails of a payout given as a per-block linear “trickle…\nInformation concerning a member.\nInformation regarding rank-0 payouts, past and future.\nThe amount of incentive paid within each period. Doesn’t …\nAmount of our account balance that is specifically for the …\nSomething that provides randomness in the runtime.\nThe rank of a member.\nOld name generated by <code>decl_event</code>.\nThe suspension judgement origin takes no direct judgment …\nThe suspension judgement origin has rejected the candidate…\nThe candidacy cannot be bestowed as the candidate was …\nThe number of rounds which have passed.\nThe index of a round of candidates.\nA hash of the rules of this society concerning membership. …\nThe overarching event type.\nThe current skeptic.\nNumber of strikes that a member has against them.\nUser is suspended.\nA suspended member has been judged.\nA suspended member has been judged.\nThe set of suspended members, with their old membership …\nTally of votes.\nThe candidacy cannot be pruned until a full additional …\nA candidate was dropped (by their request).\nA candidate was dropped (by their request).\nSociety is unfounded.\nSociety is unfounded.\nA candidate was dropped (by request of who vouched for …\nA candidate was dropped (by request of who vouched for …\nA vote has been placed\nA vote has been placed\nClear-cursor for Vote, map from Candidate -&gt; (Maybe) …\nThe number of votes.\nThe skeptic already voted.\nDouble map from Candidate -&gt; Voter -&gt; (Maybe) Vote.\nThe number of Config::BlockNumberProvider blocks on which …\nA member vouched for this bid. The account should be …\nA membership bid just happened by vouching. The given …\nA membership bid just happened by vouching. The given …\nMember is currently vouching for a user.\nStatus of a vouching member.\nWeight functions needed for <code>pallet_society</code>.\nWeight information for extrinsics in this pallet.\nThe account ID of the treasury pot.\nThe approval votes.\nBlock number at which the payout begins.\nTransform an approved candidate into a member. Callable …\nTransform an approved candidate into a member. Callable …\nA user outside of the society can make a bid for entry.\nThe reward that the bidder has requested for successfully …\nA user outside of the society can make a bid for entry.\nTransform an approved candidate into a member. Callable …\nTransform an approved candidate into a member. Callable …\nRemove up to <code>max</code> stale votes for the given <code>candidate</code>.\nRemove up to <code>max</code> stale votes for the given <code>candidate</code>.\nRemove up to <code>max</code> stale votes for the defender in the given …\nRemove up to <code>max</code> stale votes for the defender in the given …\nAs a member, vote on the defender.\nAs a member, vote on the defender.\nDissolve the society and remove all members.\nDissolve the society and remove all members.\nRemove a <code>candidate</code>’s failed application from the …\nRemove a <code>candidate</code>’s failed application from the …\nTotal number of blocks over which the payout is spread.\nFound the society.\nFound the society.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow suspension judgement origin to make judgement on a …\nAllow suspension judgement origin to make judgement on a …\nRemove the candidate’s application from the society. …\nRemove the candidate’s application from the society. …\nThe kind of bid placed for this bidder/candidate. See …\nThe kind of bid placed for this bidder/candidate. See …\nMigrations for Society Pallet\nCreate a call with the variant <code>bestow_membership</code>.\nCreate a call with the variant <code>bid</code>.\nCreate a call with the variant <code>claim_membership</code>.\nCreate a call with the variant <code>cleanup_candidacy</code>.\nCreate a call with the variant <code>cleanup_challenge</code>.\nCreate a call with the variant <code>defender_vote</code>.\nCreate a call with the variant <code>dissolve</code>.\nCreate a call with the variant <code>drop_candidate</code>.\nCreate a call with the variant <code>found_society</code>.\nCreate a call with the variant <code>judge_suspended_member</code>.\nCreate a call with the variant <code>kick_candidate</code>.\nCreate a call with the variant <code>payout</code>.\nCreate a call with the variant <code>poke_deposit</code>.\nCreate a call with the variant <code>punish_skeptic</code>.\nCreate a call with the variant <code>resign_candidacy</code>.\nCreate a call with the variant <code>set_parameters</code>.\nCreate a call with the variant <code>unbid</code>.\nCreate a call with the variant <code>unvouch</code>.\nCreate a call with the variant <code>vote</code>.\nCreate a call with the variant <code>vouch</code>.\nCreate a call with the variant <code>waive_repay</code>.\nReturns the next challenge rotation scheduled with …\nNext intake (candidate/membership) rotation scheduled with …\nTotal value paid out so far.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nTransfer the first matured payout for the sender and …\nTransfer the first matured payout for the sender and …\nThe account ID of the payouts pot. This is where payouts …\nPoke the deposit reserved when bidding.\nPoke the deposit reserved when bidding.\nPunish the skeptic with a strike if they did not vote on a …\nPunish the skeptic with a strike if they did not vote on a …\nThe rejection votes.\nRemove a member from the members list and return the …\nRemove the candidate’s application from the society. …\nRemove the candidate’s application from the society. …\nThe index of the round where the candidacy began.\nRemove a selection of bidding accounts such that the total …\nChange the maximum number of members in society and the …\nChange the maximum number of members in society and the …\nTrue if the skeptic was already punished for note voting.\nThe tally of votes so far.\nA bidder can remove their bid for entry into society. By …\nA bidder can remove their bid for entry into society. By …\nAs a vouching member, unvouch a bid. This only works while …\nAs a vouching member, unvouch a bid. This only works while …\nTotal value of the payout.\nThe reward that the bidder has requested for successfully …\nAs a member, vote on a candidate.\nAs a member, vote on a candidate.\nAs a member, vouch for someone to join society by placing …\nAs a member, vouch for someone to join society by placing …\nRepay the payment previously given to the member with the …\nRepay the payment previously given to the member with the …\nAutogenerated weights for <code>pallet_society</code>\nThe bidder/candidate trying to enter society\n<code>VersionUncheckedMigrateToV2</code> wrapped in a …\nThis migration moves all the state to v2 of Society.\nWill panic if there are any inconsistencies in the pallet…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nUser has already made a bid.\nUser is already a candidate.\nThe member is already elevated to this rank.\nSociety already founded.\nUser is already a member.\nThe skeptic has already been punished for this offence.\nMember is already vouching or banned from vouching again.\nThe candidacy cannot be dropped as the candidate was …\nA candidate was dropped (due to an excess of bids in the …\nA candidate was dropped (due to an excess of bids in the …\nA membership bid just happened. The given account is the …\nA membership bid just happened. The given account is the …\nThe current bids, stored ordered by the value of the bid.\nProvider for the block number. Normally this is the …\nContains a variant per dispatchable extrinsic that this …\nA candidate has been suspended\nA candidate has been suspended\nStorage type is <code>StorageMap</code> with key type <code>T :: AccountId</code> …\nThe number of Config::BlockNumberProvider blocks between …\nThe number of challenge rounds there have been. Used to …\nA member has been challenged\nA member has been challenged\nThe number of Config::BlockNumberProvider blocks on which …\nConfiguration trait of this pallet.\nThe currency type used for bidding.\nA vote has been placed for a defending member\nA vote has been placed for a defending member\nVotes for the defender, keyed by challenge round.\nThe defending member currently being challenged, along …\nSome funds were deposited into the society account.\nSome funds were deposited into the society account.\nA deposit was poked / adjusted.\nA deposit was poked / adjusted.\nA [member] got elevated to [rank].\nA [member] got elevated to [rank].\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe skeptic need not vote on candidates from expired …\nThe society is founded by the given identity.\nThe society is founded by the given identity.\nThe first member.\nCannot remove the founder.\nThe origin that is allowed to call <code>found</code>.\nCan be used to configure the genesis state of this pallet.\nThe maximum number of strikes before a member gets funds …\nThe most primary from the most recently approved rank 0 …\nCannot remove the head of the chain.\nThe candidacy cannot be concluded as the voting is still …\nA group of candidates have been inducted. The batch’s …\nA group of candidates have been inducted. The batch’s …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nFunds are insufficient to pay off society debts.\nNot enough in pot to accept candidate.\nThe maximum number of bids at once.\nThe maximum duration of the payout lock.\nToo many members in the society.\nThe maximum number of payouts a member may have waiting …\nThe current items in <code>Members</code> keyed by their unique index. …\nThe number of items in <code>Members</code> currently. (Doesn’t …\nA member has been suspended\nA member has been suspended\nThe current members and their rank. Doesn’t include …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA new set of [params] has been set for the group.\nA new set of [params] has been set for the group.\nNext challenge rotation scheduled with …\nAt the end of the claim period, this contains the most …\nNext intake rotation scheduled with …\nThere is no defender currently.\nThere is no deposit associated with a bid.\nNothing to payout.\nThe candidate/defender has no stale votes to remove.\nThe membership cannot be claimed as the candidate was not …\nUser is not a bidder.\nUser is not a candidate.\nThe caller is not the founder.\nGroup doesn’t exist.\nThe caller is not the head.\nUser is not a member.\nThe candidate cannot be kicked as the candidate was not …\nUser is not suspended.\nMember is not vouching.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe societies’s pallet id\nThe max number of members for the society at one time.\nInformation regarding rank-0 payouts, past and future.\nThe amount of incentive paid within each period. Doesn’t …\nAmount of our account balance that is specifically for the …\nSomething that provides randomness in the runtime.\nOld name generated by <code>decl_event</code>.\nThe candidacy cannot be bestowed as the candidate was …\nThe number of rounds which have passed.\nA hash of the rules of this society concerning membership. …\nThe overarching event type.\nThe current skeptic.\nUser is suspended.\nA suspended member has been judged.\nA suspended member has been judged.\nThe set of suspended members, with their old membership …\nThe candidacy cannot be pruned until a full additional …\nA candidate was dropped (by their request).\nA candidate was dropped (by their request).\nSociety is unfounded.\nSociety is unfounded.\nA candidate was dropped (by request of who vouched for …\nA candidate was dropped (by request of who vouched for …\nA vote has been placed\nA vote has been placed\nClear-cursor for Vote, map from Candidate -&gt; (Maybe) …\nThe skeptic already voted.\nDouble map from Candidate -&gt; Voter -&gt; (Maybe) Vote.\nThe number of Config::BlockNumberProvider blocks on which …\nA membership bid just happened by vouching. The given …\nA membership bid just happened by vouching. The given …\nWeight information for extrinsics in this pallet.\nTransform an approved candidate into a member. Callable …\nA user outside of the society can make a bid for entry.\nTransform an approved candidate into a member. Callable …\nRemove up to <code>max</code> stale votes for the given <code>candidate</code>.\nRemove up to <code>max</code> stale votes for the defender in the given …\nAs a member, vote on the defender.\nDissolve the society and remove all members.\nRemove a <code>candidate</code>’s failed application from the …\nFound the society.\nAllow suspension judgement origin to make judgement on a …\nRemove the candidate’s application from the society. …\nTransfer the first matured payout for the sender and …\nPoke the deposit reserved when bidding.\nPunish the skeptic with a strike if they did not vote on a …\nRemove the candidate’s application from the society. …\nChange the maximum number of members in society and the …\nA bidder can remove their bid for entry into society. By …\nAs a vouching member, unvouch a bid. This only works while …\nAs a member, vote on a candidate.\nAs a member, vouch for someone to join society by placing …\nRepay the payment previously given to the member with the …\nWeights for <code>pallet_society</code> using the Substrate node and …\nWeight functions needed for <code>pallet_society</code>.\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Candidates</code> (r:1 w:0) Proof: …\nStorage: <code>Society::ChallengeRoundCount</code> (r:1 w:0) Proof: …\nStorage: <code>Society::Defending</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Founder</code> (r:1 w:1) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Head</code> (r:1 w:1) Proof: <code>Society::Head</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Members</code> (r:1 w:0) Proof: <code>Society::Members</code>…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Founder</code> (r:1 w:0) Proof: <code>Society::Founder</code>…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Society::Bids</code> (r:1 w:1) Proof: <code>Society::Bids</code> (…\nStorage: <code>Society::Members</code> (r:1 w:1) Proof: <code>Society::Members</code>…\nPay into a specified account.\nThe active era information, it holds index and start.\nInformation regarding the active era (era in used in …\nThe origin which can manage less critical staking …\nA utility struct that provides a way to check if a given …\nStash is already bonded.\nRewards for this era have already been claimed for this …\nThe stake of this account is already migrated to <code>Fungible</code> …\nController is already paired.\nInternal state has become somehow corrupted and the …\nA nomination target was supplied that was blocked or …\nThe balance type of this pallet.\nConfigurations of the benchmarking of the pallet.\nSome parameters of the benchmarking.\nSome parameters of the benchmarking.\nMap from all locked “stash” accounts to the controller …\nAn account has bonded this amount. [stash, amount]\nA mapping from still-bonded eras to the first session …\nNumber of eras that staked funds must remain bonded for.\nNumber of eras that staked funds must remain bonded for.\nSome bound is not met.\nContains a variant per dispatchable extrinsic that this …\nThe amount of currency given to reporters of a slash event …\nThe user has enough bond and thus cannot be chilled …\nStash could not be reaped as other pallet might depend on …\nCannot reset a ledger.\nThe threshold for when users can start calling <code>chill_other</code> …\nAn account has stopped participating as either a validator …\nHistory of claimed paged rewards by era and validator.\nCommission is too low. Must be at least <code>MinCommission</code>.\nConfiguration trait of this pallet.\nPossible operations on the configuration values of this …\nReport of a controller batch deprecation.\nUsed when attempting to use deprecated controller account …\nAdaptor to turn a <code>PiecewiseLinear</code> curve definition into an …\nThe staking balance.\nJust the <code>Currency::Balance</code> type; we have this item to …\nJust the <code>Currency::Balance</code> type; we have this item to …\nStaking balance migrated from locks to holds, with any …\nConvert a balance into a number used for election …\nConvert a balance into a number used for election …\nThe current era index.\nThe last planned session scheduled by the session pallet.\nBased on <code>Config</code>. Auto-generated by …\nIdentify a validator with their default exposure.\nDuplicate index.\nSomething that provides the election functionality.\nTargets cannot be empty.\nWrapper struct for Era related information. It is not a …\nThe era payout has been set; the first balance is the …\nHandler for determining how much of a balance should be …\nThe payout for validators and the system for the current …\nReward points of an era. Used to split era total payout …\nRewards for the last <code>Config::HistoryDepth</code> eras. If reward …\nExposure of validator at era.\nClipped Exposure of validator at era.\nSummary of validator exposure at a given era.\nPaginated exposure of a validator at given era.\nThe session index at which the era start for the last …\nThe total amount staked for the last <code>Config::HistoryDepth</code> …\nSimilar to <code>ErasStakers</code>, this holds the preferences of …\nThe total validator era payout for the last …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nSomething that listens to staking updates and performs …\nSomething that listens to staking updates and performs …\nA snapshot of the stake backing a single validator in the …\nA typed conversion from stash account ID to the active …\nFilter some accounts from participating in staking.\nFilter some accounts from participating in staking.\nFilter historical offences out and only allow those from …\nA nomination quota that allows up to MAX nominations for …\nForce a new era at the end of all sessions indefinitely.\nMode of era forcing.\nA new force era mode was set.\nForce a new era, then reset to <code>NotForcing</code> as soon as it is …\nAvoid a new era indefinitely.\nMode of era-forcing.\nAttempting to target a stash that still has funds.\nCan be used to configure the genesis state of this pallet.\nSomething that provides the election functionality at …\nNumber of eras to keep in history.\nNumber of eras to keep in history.\nA reason for placing a hold on funds.\nChilling.\nIncorrect previous history depth input provided.\nIncorrect number of slashing spans provided.\nThe amount of exposure for an era that an individual …\nCannot have a validator or nominator role, with value less …\nInvalid era to reward.\nInvalid number of nominations.\nNo nominators exist on this page.\nSlash record index out of bounds.\nAny validators that may never be slashed or forcibly …\nA nominator has been kicked from a validator.\nMap from all (unlocked) “controller” accounts to the …\nThe maximum amount of controller accounts that can be …\nThe maximum amount of controller accounts that can be …\nThe maximum size of each <code>T::ExposurePage</code>.\nThe maximum size of each <code>T::ExposurePage</code>.\nStrict maximum number of nominations that caps the …\nMaximum number of nominations per nominator.\nThe maximum number of nominators to use.\nThe maximum nominator count before we stop allowing new …\nMaximum staked rewards, i.e. the percentage of the era …\nThe maximum number of <code>unlocking</code> chunks a <code>StakingLedger</code> can …\nThe maximum number of <code>unlocking</code> chunks a <code>StakingLedger</code> can …\nThe absolute maximum of winner validators this pallet …\nThe absolute maximum of winner validators this pallet …\nThe maximum number of validators to use.\nThe maximum validator count before we stop allowing new …\nAlias for the maximum number of winners (aka. active …\nAlias for the maximum number of winners per page, as …\nThe minimum amount of commission that validators can set.\nThe minimum active bond to become and maintain the role of …\nThe minimum active bond to become and maintain the role of …\nThe minimum active nominator stake of the last successful …\nMinimum number of staking participants before emergency …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSomething that can estimate the next session change, …\nSomething that can estimate the next session change, …\nCan not schedule more unlock chunks.\nCan not rebond without unlocking chunks.\nA record of the nominations made by a specific account.\nSomething that defines the maximum number of nominations …\nSomething that defines the maximum number of nominations …\nSomething that defines the maximum number of nominations …\nDeclaring desire to nominate, delegate, or generally …\nAll slashing events on nominators, mapped by era to the …\nThe map from nominator stash key to their nomination …\nReceive no reward.\nDon’t change.\nNot a controller account.\nNot enough funds available to withdraw.\nNot forcing anything - just let whatever happen.\nItems are not sorted and unique.\nNot a stash account.\nThe old trait for staking balance. Deprecated and only …\nAn old slashing report from a prior era was discarded …\nFacade struct to encapsulate <code>PagedExposureMetadata</code> and a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nWhere the reward payment should be made. Keyed by stash.\nA Page of stakers rewards are getting paid. <code>next</code> is <code>None</code> …\nRemove from storage.\nAccount is restricted from participation in staking. This …\nHandler for the unbalanced increment when rewarding a …\nHandler for the unbalanced increment when rewarding a …\nA destination account for payment.\nProvided reward destination is not allowed.\nCounter for the number of “reward” points earned by a …\nTokens have been minted and are unused for …\nTokens have been minted and are unused for …\nThe nominator has been rewarded by this amount to this …\nThe overarching event type.\nThe overarching event type.\nOverarching hold reason.\nOverarching hold reason.\nMeans for interacting with a specialized version of the …\nInterface for interacting with a session pallet.\nInterface for interacting with a session pallet.\nNumber of sessions per era.\nNumber of sessions per era.\nSet the given value.\nHandler for the unbalanced reduction when slashing a …\nHandler for the unbalanced reduction when slashing a …\nNumber of eras that slashes are deferred by, after …\nNumber of eras that slashes are deferred by, after …\nA slash for the given validator, for the given percentage …\nThe percentage of the slash that is distributed to …\nA staker (validator or nominator) has been slashed by the …\nSlashing spans for stash accounts.\nTargets size limit reached.\nVoters size limit reached.\nRecords information about the maximum slash of a stash …\nPay into the stash account, increasing the amount at stake …\nRepresentation of the status of a staker.\nA new set of stakers was elected.\nFunds on stake by a nominator or a validator.\nThe election failed. No new era is planned.\nThe ledger of a (bonded) stash.\nPay into the stash account, not increasing the amount at …\nWIP: This is a noop as of now, the actual business logic …\nA mock benchmarking config for pallet-staking.\nThere are too many nominators in the system. Governance …\nToo many nomination targets supplied.\nThere are too many validator candidates in the system. …\nA pending slash record. The value of the slash has been …\nAll unapplied slashes that are queued for later.\nAn account has unbonded this amount.\nAn identification type that signifies the existence of a …\nTime used for computing era duration.\nJust a Balance/BlockNumber tuple to encode when a chunk of …\nA simple voter list implementation that does not require …\nA simple sorted list implementation that does not require …\nDeclaring desire in validate, i.e author blocks.\nThe ideal number of active validators.\nPreference of what happens regarding validation.\nA validator has set their preferences.\nAll slashing events on validators, mapped by era to the …\nThe map from (wannabe) validator stash key to the …\nOperation not allowed for virtual stakers.\nStakers whose funds are managed by other pallets.\nSomething that provides a best-effort sorted list of …\nWeight functions needed for <code>pallet_staking</code>.\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nAn account has called <code>withdraw_unbonded</code> and removed …\nThe total amount of the stash’s balance that will be at …\nGet the active era information.\nReturns the current nominations quota for nominators.\nContains all the interactions with <code>Config::Currency</code> to …\nStaking pallet benchmarking.\nWhether or not this validator is accepting more …\nTake the origin account as a stash and lock up <code>value</code> of …\nTake the origin account as a stash and lock up <code>value</code> of …\nAdd some extra amount that have appeared in the stash …\nAdd some extra amount that have appeared in the stash …\nFetches the controller bonded to a stash account, if any.\nCancel enactment of a deferred slash.\nCancel enactment of a deferred slash.\nGet the amount of canceled slash payout.\nDeclare no desire to either validate or nominate.\nDeclare no desire to either validate or nominate.\nDeclare a <code>controller</code> to stop participating as either a …\nDeclare a <code>controller</code> to stop participating as either a …\nGet the paged history of claimed rewards by era for given …\nReward that validator takes up-front; only the rest is …\nDefault implementations of <code>DefaultConfig</code>, which can be …\nChecks if the given account ID corresponds to a staker.\nReturns the controller account of a staking ledger.\nThe controller associated with this ledger’s stash.\nGet the current era index.\nGet the last planned session scheduled by the session …\nReturns the voter’s nomination quota based on its …\nInitializes the default object using the given <code>validator</code>.\nUpdates a batch of controller accounts to their …\nUpdates a batch of controller accounts to their …\nThis function will add a nominator to the <code>Nominators</code> …\nThis function will add a validator to the <code>Validators</code> …\nThis function will remove a nominator from the <code>Nominators</code> …\nThis function will remove a validator from the <code>Validators</code> …\nA static size tracker for the election snapshot data.\nEra number at which point it’ll be unlocked.\nDetermine the payout for this era.\nGet the rewards for the last <code>Config::HistoryDepth</code> eras.\nReturns full exposure of a validator for a given era.\nGet the clipped exposure of a given validator at an era.\nGet the session index at which the era starts for the last …\nGet the total amount staked for the last …\nGet the preferences of given validator at given era.\nGet the total validator era payout for the last …\nForce a validator to have at least the minimum commission. …\nForce a validator to have at least the minimum commission. …\nGet the mode of era forcing.\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of sessions …\nForce there to be a new era at the end of sessions …\nForce there to be no new eras indefinitely.\nForce there to be no new eras indefinitely.\nForce a current staker to become completely unstaked, …\nForce a current staker to become completely unstaked, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance of <code>PagedExposure</code> from legacy clipped …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet full exposure of the validator at a given era.\nGet the targets for an upcoming npos election.\nGet all of the voters that are eligible for the npos …\nGet exposure for a validator at a given era and page.\nReturns the voter’s nomination quota within reasonable …\nIncrements the ideal number of validators up to maximum of …\nIncrements the ideal number of validators up to maximum of …\nIndex of era.\nThe reward points earned by a given validator.\nThis module expose one function <code>P_NPoS</code> (Payout NPoS) or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an <code>Exposure</code> into <code>PagedExposureMetadata</code> and …\nGet the validators that may never be slashed or forcibly …\nWhether <code>who</code> is a virtual staker whose funds are managed by …\nReturns iterator over voter list, which can have <code>take</code> …\nRemove the given nominations from the calling validator.\nRemove the given nominations from the calling validator.\nA Ledger implementation for stakers.\nFetches the ledger associated with a controller or stash …\nList of eras for which the stakers behind a validator have …\nThis function allows governance to manually slash a …\nThis function allows governance to manually slash a …\nRemoves the legacy Staking locks if they exist.\nRemoves the legacy Staking locks if they exist.\nOnly meant to be used in tests.\nStorage migrations for the Staking pallet. The changelog …\nGet the minimum number of staking participants before …\nReturns a new instance of a staking ledger.\nCreate a call with the variant <code>bond</code>.\nCreate a call with the variant <code>bond_extra</code>.\nCreate a call with the variant <code>cancel_deferred_slash</code>.\nCreate a call with the variant <code>chill</code>.\nCreate a call with the variant <code>chill_other</code>.\nCreate a call with the variant <code>deprecate_controller_batch</code>.\nCreate a call with the variant <code>force_apply_min_commission</code>.\nCreate a call with the variant <code>force_new_era</code>.\nCreate a call with the variant <code>force_new_era_always</code>.\nCreate a call with the variant <code>force_no_eras</code>.\nCreate a call with the variant <code>force_unstake</code>.\nCreate a call with the variant <code>increase_validator_count</code>.\nCreate a call with the variant <code>kick</code>.\nCreate a call with the variant <code>manual_slash</code>.\nCreate a call with the variant <code>migrate_currency</code>.\nCreate a call with the variant <code>nominate</code>.\nCreate a call with the variant <code>payout_stakers</code>.\nCreate a call with the variant <code>payout_stakers_by_page</code>.\nCreate a call with the variant <code>reap_stash</code>.\nCreate a call with the variant <code>rebond</code>.\nCreate a call with the variant <code>restore_ledger</code>.\nCreate a call with the variant <code>scale_validator_count</code>.\nCreate a call with the variant <code>set_controller</code>.\nCreate a call with the variant <code>set_invulnerables</code>.\nCreate a call with the variant <code>set_min_commission</code>.\nCreate a call with the variant <code>set_payee</code>.\nCreate a call with the variant <code>set_staking_configs</code>.\nCreate a call with the variant <code>set_validator_count</code>.\nCreate a call with the variant <code>unbond</code>.\nCreate a call with the variant <code>update_payee</code>.\nCreate a call with the variant <code>validate</code>.\nCreate a call with the variant <code>withdraw_unbonded</code>.\nDeclare the desire to nominate <code>targets</code> for the origin …\nDeclare the desire to nominate <code>targets</code> for the origin …\nGet the nomination preferences of a given nominator.\nReturns the portions of nominators stashes that are …\nThe portions of nominators stashes that are exposed.\nAll other slashed stakers and amounts.\nReturns validator’s own stake that is exposed\nThe validator’s own stash that is exposed.\nThe validator’s own slash.\nReturns total exposure of this validator for the current …\nThe amount of payout.\nPay out next page of the stakers behind a validator for …\nPay out next page of the stakers behind a validator for …\nPay out a page of the stakers behind a validator for the …\nPay out a page of the stakers behind a validator for the …\nReturns true if validator has one or more page of era …\nPrune historical session tries up to but not including the …\nRemove all data structures concerning a staker/stash once …\nRemove all data structures concerning a staker/stash once …\nRebond a portion of the stash scheduled to be unlocked.\nRebond a portion of the stash scheduled to be unlocked.\nReport an offending validator.\nReporters of the offence; bounty payout recipients.\nRestores the state of a ledger which is in an inconsistent …\nRestores the state of a ledger which is in an inconsistent …\nScale up the ideal number of validators by a factor up to …\nScale up the ideal number of validators by a factor up to …\n(Re-)sets the controller of a stash to the stash itself. …\n(Re-)sets the controller of a stash to the stash itself. …\nStore exposure for elected validators at start of an era.\nSet the validators who cannot be slashed (if any).\nSet the validators who cannot be slashed (if any).\nSets the minimum amount of commission that each validators …\nSets the minimum amount of commission that each validators …\n(Re-)set the payment target for a controller.\n(Re-)set the payment target for a controller.\nUpdate the various staking configurations .\nUpdate the various staking configurations .\nSets the ideal number of validators.\nSets the ideal number of validators.\nSlash the staker for a given amount of balance.\nGet the percentage of the slash that is distributed to …\nThe total balance that can be slashed from a stash account …\nInternal impl of <code>Self::slashable_balance_of</code> that returns …\nA slashing implementation for NPoS systems.\nGet the slashing spans for given account.\nSplits self into two instances of exposures.\nMoment of start expressed as millisecond from <code>$UNIX_EPOCH</code>.\nThe stash account whose balance is actually locked and at …\nProcess the output of the election.\nThe era the nominations were submitted.\nWhether the nominations have been suppressed. This can …\nThe targets of nomination.\nTesting utils for staking. Provides some common functions …\nReturns total exposure of this validator across pages\nThe total balance backing this validator.\nTotal number of points. Equals the sum of reward points …\nThe total amount of the stash’s balance that we are …\nPlan a new era.\nSchedule a portion of the stash to be unlocked ready for …\nSchedule a portion of the stash to be unlocked ready for …\nAny balance that is becoming free, which may eventually be …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nDeclare the desire to validate for the origin controller.\nDeclare the desire to validate for the origin controller.\nThe stash ID of the offending validator.\nGet the ideal number of active validators.\nGet the validators from session.\nGet the preferences of a given validator.\nAmount of funds exposed.\nAmount of funds to be unlocked.\nVirtually bonds <code>keyless_who</code> to <code>payee</code> with <code>value</code>.\nSame as <code>weight_of_fn</code>, but made for one time use.\nReturns a closure around <code>slashable_balance_of_vote_weight</code> …\nAutogenerated weights for <code>pallet_staking</code>\nThe stash account of the nominator in question.\nRemove any unlocked chunks from the <code>unlocking</code> queue from …\nRemove any unlocked chunks from the <code>unlocking</code> queue from …\nBurn the amount from the total issuance.\nDeposit newly issued or slashed <code>value</code> into <code>who</code>.\nExistential deposit for the chain.\nBalance of who that can be staked additionally.\nIssue <code>value</code> increasing total issuance.\nRelease all staked amount to <code>who</code>.\nMint <code>value</code> and create account for <code>who</code> if it does not exist.\nMint <code>value</code> into an existing account <code>who</code>.\nSet balance that can be staked for <code>who</code>.\nSlash the value from <code>who</code>.\nStakeable balance of <code>who</code>.\nBalance of <code>who</code> that is currently at stake.\nTotal balance of <code>who</code>. Includes both free and staked.\nTotal issuance of the chain.\nUpdate <code>amount</code> at stake for <code>who</code>.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUsed by the new benchmarking code to specify that a …\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nTrait that must be implemented by all structs that can be …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nAsserts that the type implements <em>all</em> of the given traits.\nAsserts that <em>all</em> types in a list are equal to each other.\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nAn attribute macro used to declare a benchmark within a …\nGet the benchmarks available for this pallet. Generally …\nAn attribute macro that can be attached to a (non-empty) …\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nAn attribute macro used to specify that a block should be …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nRepresents the (inclusive) ending number of this <code>ParamRange</code>…\nAn attribute macro used to specify the extrinsic call …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nAn attribute macro that can be attached to a (non-empty) …\nNumber of times to repeat benchmark within the Wasm …\nCalls <code>U::from(self)</code>.\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nRepresents the (inclusive) starting number of this …\nThe extrinsic timing results from this benchmark.\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeeps track of the SCALE encoded byte length of the …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTries to register a new target.\nTries to register a new voter.\nThe total payout to all validators (and their nominators) …\nMigration of era exposure storage items to paged exposures.\nMigrating <code>OffendingValidators</code> from <code>Vec&lt;(u32, bool)&gt;</code> to …\nMigrating <code>DisabledValidators</code> from <code>Vec&lt;u32&gt;</code> to …\nSupports the migration of Validator Disabling from …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMigrate the entire storage of this pallet to a new prefix.\nClean up <code>T::HistoryDepth</code> from storage.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn encoding of all of a nominator’s slashing spans.\nThe index of a slashing span - unique to each stash.\nA slashing-span record for a particular stash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields the era index where the most recent non-zero slash …\nThis function removes all validators and nominators from …\nGrab a funded user.\nGrab a funded user with max Balance.\nCreate a stash and controller pair, where payouts go to a …\nCreate a stash and controller pair.\nCreate a stash and controller pair with fixed balance.\nCreate a unique stash and controller pair.\ncreate <code>max</code> validators.\nThis function generates validators and nominators who are …\ncreate <code>max</code> validators, with a seed to help unintentional …\nget the current era.\nWeights for <code>pallet_staking</code> using the Substrate node and …\nWeight functions needed for <code>pallet_staking</code>.\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::UnappliedSlashes</code> (r:999 w:999) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Ledger</code> (r:11800 w:11800) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::SlashingSpans</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>Staking::CounterForValidators</code> (r:1 w:0) Proof: …\nStorage: <code>VoterList::CounterForListNodes</code> (r:1 w:0) Proof: …\nCalls <code>U::from(self)</code>.\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::VirtualStakers</code> (r:1 w:0) Proof: …\nStorage: <code>VoterList::CounterForListNodes</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::ErasStakersOverview</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::VirtualStakers</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>System::Account</code> (r:1 w:0) Proof: <code>System::Account</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Invulnerables</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ValidatorCount</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nPay into a specified account.\nThe active era information, it holds index and start.\nInformation regarding the active era (era in used in …\nThe origin which can manage less critical staking …\nA utility struct that provides a way to check if a given …\nStash is already bonded.\nRewards for this era have already been claimed for this …\nThe stake of this account is already migrated to <code>Fungible</code> …\nController is already paired.\nInternal state has become somehow corrupted and the …\nA nomination target was supplied that was blocked or …\nThe balance type of this pallet.\nMap from all locked “stash” accounts to the controller …\nAn account has bonded this amount. [stash, amount]\nA mapping from still-bonded eras to the first session …\nCustom bound for <code>BondedEras</code> which is equal to …\nNumber of eras that staked funds must remain bonded for.\nNumber of eras that staked funds must remain bonded for.\nSome bound is not met.\nA bounded wrapper for <code>sp_staking::ExposurePage</code>.\nAlias for a bounded set of exposures behind a validator, …\nContains a variant per dispatchable extrinsic that this …\nThe amount of currency given to reporters of a slash event …\nThe slash has been cancelled and cannot be applied.\nCancelled slashes by era and validator with maximum slash …\nThe user has enough bond and thus cannot be chilled …\nStash could not be reaped as other pallet might depend on …\nCannot reset a ledger.\nThe threshold for when users can start calling <code>chill_other</code> …\nAn account has stopped participating as either a validator …\nHistory of claimed paged rewards by era and validator.\nPruning ClaimedRewards storage\nCommission is too low. Must be at least <code>MinCommission</code>.\nConfiguration trait of this pallet.\nPossible operations on the configuration values of this …\nAll the stakers in the system have been consumed since the …\nReport of a controller batch deprecation.\nUsed when attempting to use deprecated controller account …\nThe staking balance.\nJust the <code>Currency::Balance</code> type; we have this item to …\nJust the <code>Currency::Balance</code> type; we have this item to …\nStaking balance migrated from locks to holds, with any …\nConvert a balance into a number used for election …\nConvert a balance into a number used for election …\nThe current planned era index.\nBased on <code>Config</code>. Auto-generated by …\nDuplicate index.\nA bounded list of the “electable” stashes that …\nSomething that provides the election functionality.\nTargets cannot be empty.\nEmitted when calculated era duration exceeds the …\nThe era is not eligible for pruning.\nEra not yet started.\nThe era payout has been set; the first balance is the …\nHandler for determining how much of a balance should be …\nThe payout for validators and the system for the current …\nAn old era with the given index was pruned.\nTracks the current step of era pruning process for each …\nReward points of an era. Used to split era total payout …\nRewards for the last <code>Config::HistoryDepth</code> eras. If reward …\nPruning ErasRewardPoints storage\nSummary of validator exposure at a given era.\nPruning ErasStakersOverview storage\nPaginated exposure of a validator at given era.\nPruning ErasStakersPaged storage\nThe total amount staked for the last <code>Config::HistoryDepth</code> …\nPruning ErasTotalStake storage\nExposure of validator at era with the preferences of …\nPruning ErasValidatorPrefs storage\nThe total validator era payout for the last …\nPruning ErasValidatorReward storage\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nSomething that listens to staking updates and performs …\nSomething that listens to staking updates and performs …\nA snapshot of the stake backing a single validator in the …\nFilter some accounts from participating in staking.\nFilter some accounts from participating in staking.\nA nomination quota that allows up to MAX nominations for …\nForce a new era at the end of all sessions indefinitely.\nMode of era forcing.\nForce a new era, then reset to <code>NotForcing</code> as soon as it is …\nAvoid a new era indefinitely.\nMode of era-forcing.\nAttempting to target a stash that still has funds.\nCan be used to configure the genesis state of this pallet.\nNumber of eras to keep in history.\nNumber of eras to keep in history.\nA reason for placing a hold on funds.\nChilling.\nIncorrect previous history depth input provided.\nThe amount of exposure for an era that an individual …\nCannot bond, nominate or validate with value less than the …\nInvalid era to reward.\nInvalid number of nominations.\nNo nominators exist on this page.\nSlash record not found.\nAny validators that may never be slashed or forcibly …\nA nominator has been kicked from a validator.\nMap from all (unlocked) “controller” accounts to the …\nThe maximum amount of controller accounts that can be …\nThe maximum amount of controller accounts that can be …\nMaximum allowed era duration in milliseconds.\nMaximum allowed era duration in milliseconds.\nThe maximum size of each <code>T::ExposurePage</code>.\nThe maximum size of each <code>T::ExposurePage</code>.\nMaximum number of invulnerable validators.\nMaximum number of invulnerable validators.\nStrict maximum number of nominations that caps the …\nMaximum number of nominations per nominator.\nThe maximum nominator count before we stop allowing new …\nMaximum number of storage items that can be pruned in a …\nMaximum number of storage items that can be pruned in a …\nMaximum staked rewards, i.e. the percentage of the era …\nThe maximum number of <code>unlocking</code> chunks a <code>StakingLedger</code> can …\nThe maximum number of <code>unlocking</code> chunks a <code>StakingLedger</code> can …\nThe absolute maximum of winner validators this pallet …\nThe absolute maximum of winner validators this pallet …\nThe maximum validator count before we stop allowing new …\nAlias for the maximum number of winners (aka. active …\nAlias for the maximum number of winners per page, as …\nThe minimum amount of commission that validators can set.\nThe minimum active bond to become and maintain the role of …\nThe minimum active bond to become and maintain the role of …\nThe minimum active nominator stake of the last successful …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nKeeps track of an ongoing multi-page election solution …\nCan not schedule more unlock chunks.\nCan not rebond without unlocking chunks.\nA record of the nominations made by a specific account.\nSomething that defines the maximum number of nominations …\nSomething that defines the maximum number of nominations …\nSomething that defines the maximum number of nominations …\nDeclaring desire to nominate, delegate, or generally …\nThe map from nominator stash key to their nomination …\nReceive no reward.\nDon’t change.\nNot a controller account.\nNot enough funds available to withdraw.\nNot forcing anything - just let whatever happen.\nNot a stash account.\nStores reported offences in a queue until they are …\nTracks the eras that contain offences in <code>OffenceQueue</code>, …\nAn offence for the given validator, for the given …\nAn offence was reported that was too old to be processed, …\nThe old trait for staking balance. Deprecated and only …\nAn old slashing report from a prior era was discarded …\nPaged snapshot is in progress, the <code>AccountId</code> was the last …\nA page from a multi-page election was fetched. A number of …\nFacade struct to encapsulate <code>PagedExposureMetadata</code> and a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nWhere the reward payment should be made. Keyed by stash.\nA Page of stakers rewards are getting paid. <code>next</code> is <code>None</code> …\nNumber of sessions before the end of an era when the …\nNumber of sessions before the end of an era when the …\nA smart type to determine the <code>Config::PlanningEraOffset</code>, …\nTracks the currently processed offence record from the …\nRepresents the current step in the era pruning process\nInterface to talk to the RC-Client pallet, possibly …\nRemove from storage.\nAccount is restricted from participation in staking. This …\nHandler for the unbalanced increment when rewarding a …\nHandler for the unbalanced increment when rewarding a …\nA destination account for payment.\nProvided reward destination is not allowed.\nCounter for the number of “reward” points earned by a …\nTokens have been minted and are unused for …\nTokens have been minted and are unused for …\nThe nominator has been rewarded by this amount to this …\nOverarching hold reason.\nOverarching hold reason.\nSession change has been triggered.\nNumber of sessions per era, as per the preferences of the …\nNumber of sessions per era, as per the preferences of the …\nSet the given value.\nHandler for the unbalanced reduction when slashing a …\nHandler for the unbalanced reduction when slashing a …\nAn unapplied slash has been cancelled.\nAn offence has been processed and the corresponding slash …\nNumber of eras that slashes are deferred by, after …\nNumber of eras that slashes are deferred by, after …\nThe percentage of the slash that is distributed to …\nA staker (validator or nominator) has been slashed by the …\nStatus of a paged snapshot progress.\nTargets size limit reached.\nVoters size limit reached.\nPay into the stash account, increasing the amount at stake …\nA subsequent event of <code>Withdrawn</code>, indicating that <code>stash</code> was …\nRepresentation of the status of a staker.\nFunds on stake by a nominator or a validator.\nThe ledger of a (bonded) stash.\nPay into the stash account, not increasing the amount at …\nWIP: This is a noop as of now, the actual business logic …\nThere are too many nominators in the system. Governance …\nToo many nomination targets supplied.\nThere are too many validator candidates in the system. …\nA pending slash record. The value of the slash has been …\nAll unapplied slashes that are queued for later.\nUnapplied slashes in the recently concluded era is …\nAn account has unbonded this amount.\nSomething occurred that should never happen under normal …\nRepresents unexpected or invariant-breaking conditions …\nReceived a validator activation event that is not …\nJust a Balance/BlockNumber tuple to encode when a chunk of …\nA simple voter list implementation that does not require …\nA simple sorted list implementation that does not require …\nDeclaring desire in validate, i.e author blocks.\nThe ideal number of active validators.\nPreference of what happens regarding validation.\nA validator has set their preferences.\nAll slashing events on validators, mapped by era to the …\nThe map from (wannabe) validator stash key to the …\nOperation not allowed for virtual stakers.\nStakers whose funds are managed by other pallets.\nSomething that provides a best-effort sorted list of …\nVoter snapshot progress status.\nWaiting for a new snapshot to be requested.\nWeight functions needed for <code>pallet_staking_async</code>.\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nAn account has called <code>withdraw_unbonded</code> and removed …\nThe total amount of the stash’s balance that will be at …\ninitial active era, corresponding session index and start …\nReturns the current nominations quota for nominators.\nManually and permissionlessly applies a deferred slash for …\nManually and permissionlessly applies a deferred slash for …\nApply previously-unapplied slashes on the beginning of a …\nContains all the interactions with <code>Config::Currency</code> to …\nStaking pallet benchmarking.\nWhether or not this validator is accepting more …\nTake the origin account as a stash and lock up <code>value</code> of …\nTake the origin account as a stash and lock up <code>value</code> of …\nAdd some extra amount that have appeared in the stash …\nAdd some extra amount that have appeared in the stash …\nFetches the controller bonded to a stash account, if any.\nCancels scheduled slashes for a given era before they are …\nCancels scheduled slashes for a given era before they are …\nDeclare no desire to either validate or nominate.\nDeclare no desire to either validate or nominate.\nDeclare a <code>controller</code> to stop participating as either a …\nDeclare a <code>controller</code> to stop participating as either a …\nReward that validator takes up-front; only the rest is …\nDefault implementations of <code>DefaultConfig</code>, which can be …\nChecks if the given account ID corresponds to a staker.\nReturns the controller account of a staking ledger.\nThe controller associated with this ledger’s stash.\nReturns the voter’s nomination quota based on its …\nUpdates a batch of controller accounts to their …\nUpdates a batch of controller accounts to their …\nCreate the given number of validators and nominators.\nThis function will add a nominator to the <code>Nominators</code> …\nThis function will add a validator to the <code>Validators</code> …\nThis function will remove a nominator from the <code>Nominators</code> …\nThis function will remove a validator from the <code>Validators</code> …\nA static size tracker for the election snapshot data.\nEra number at which point it’ll be unlocked.\nDetermine the payout for this era.\nReturns full exposure of a validator for a given era.\nForce a validator to have at least the minimum commission. …\nForce a validator to have at least the minimum commission. …\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of sessions …\nForce there to be a new era at the end of sessions …\nForce there to be no new eras indefinitely.\nForce there to be no new eras indefinitely.\nForce a current staker to become completely unstaked, …\nForce a current staker to become completely unstaked, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance of <code>PagedExposure</code> from legacy clipped …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet all the targets associated are eligible for the npos …\nReturns the voter’s nomination quota within reasonable …\nIncrements the ideal number of validators up to maximum of …\nIncrements the ideal number of validators up to maximum of …")