searchState.loadedDescShard("yet_another_parachain_runtime", 24, "The precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nA pallet that provides or verifies an inherent extrinsic …\nA public key that is capable of identifying <code>AccountId</code>s.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nIn order to reserve some funds for a later return or …\nRanked membership data structure.\nHandler that can deal with the swap of two members.\nA wrapper for any rational number with a 128 bit numerator …\nA wrapper for any rational number with infinitely large …\nMutator which reduces a scalar by a particular amount.\nAccount balance would reduce to zero, potentially …\nMorpher to disregard the source value and replace with the …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nA submission result.\nA submission result.\nThe resultant type.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being …\nRoot origin is not allowed.\nThe rounding method to use for unsigned quantities.\nA application-specific crypto.\nThe runtime’s call type.\nType alias for the <code>RuntimeCall</code> associated type of system …\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nEvery function call from your runtime has an origin, which …\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nSubmit a signed transaction to the transaction pool.\nSubmit an unsigned transaction onchain with a signed …\nA <strong>data structure</strong> that can be serialized into any data …\nA message signer.\nA matching <code>Signature</code> type.\nA signature data.\nUseful functions for signed numbers (i.e. numbers that can …\nUtility trait to be implemented on payloads that can be …\nThe rounding method to use.\nProvides an implementation for signing transaction …\nA wrapper around the types which are used for signing.\nType to lookup from.\nGeneral error to do with the transaction being outdated …\nMeans of changing one type into another in a manner …\nA type representing a <em>double map</em> in storage. This …\nA trait to give information about storage.\nA non-continuous container type.\nA type representing a <em>map</em> in storage. A <em>storage map</em> is a …\nA type representing an <em>NMap</em> in storage. This structure …\nA type representing a <em>value</em> in storage. A <em>storage value</em> is …\nThe storage version of a pallet.\nProvides the ability to directly submit signed and unsigned\nAccount continued in existence.\nAccount continued in existence.\nA return type.\nIn order to tip a validator for transaction inclusion.\nIn order to pay for (system) transaction costs.\nIn order to transfer ownership.\nType to lookup into.\nA general-purpose trait which defines a type of service …\nTrait for comparing two numbers with an threshold.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nInput that adds infinite number of zero after wrapped …\nMeans by which a transaction may be extended. This type …\nMinimum number of blocks a transaction will remain valid …\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nTag for a transaction. No two transactions with the same …\nInformation on a transaction’s validity and, if valid, …\nErrors that can occur while checking the validity of a …\nInformation on a transaction’s validity and, if valid, …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nHash storage keys with twox 128\nHash storage keys with twox 256\nHash storage keys with <code>concat(twox64(key), key)</code>\nThe type which is returned.\nImplementors return their meta type information.\nA trait for querying a single value from a type defined in …\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThere has been an underflow in the system. This is …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nTransaction validity can’t be determined.\nThe asset in question is unknown.\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe transaction extension did not authorize any origin.\nAn unknown transaction validity.\nA trait for values which cannot be negative\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nGet the number of variants.\nThe <code>Val</code> of the extension.\nThe type that encodes information that can be passed from …\nInformation concerning a valid transaction.\nShortcut for the result value of the <code>validate</code> function.\nProvide validation for unsigned extrinsics.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Value</code>.\nTrait to get the number of variants in any enum.\nAdapter for <code>Get&lt;u32&gt;</code> to access <code>VARIANT_COUNT</code> from …\nA weakly bounded vector.\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nTransactor will pay related fees.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nThe positive difference of two numbers.\nActual weight consumed by a call or <code>None</code> which stands for …\nAdd a filter to the origin.\nReturns the set containing all flags.\nA fast append iterator.\nCopied from <code>sp-runtime</code> and documented there.\nThe authorize function.\nAllows to authorize some general transactions with …\nReturn the average length of a session.\nPost dispatch logic run after dispatching bare extrinsics.\nPost dispatch logic run after dispatching bare extrinsics.\nPost dispatch logic run after dispatching bare extrinsics.\nPost dispatch logic run after dispatching bare extrinsics.\nPost dispatch logic run after dispatching bare extrinsics.\nPost dispatch logic run after dispatching bare extrinsics.\nValidation logic for bare extrinsics.\nValidation logic for bare extrinsics.\nValidation logic for bare extrinsics.\nValidation logic for bare extrinsics.\nValidation logic for bare extrinsics.\nValidation logic for bare extrinsics.\nAll pre-flight logic run before dispatching bare …\nAll pre-flight logic run before dispatching bare …\nAll pre-flight logic run before dispatching bare …\nAll pre-flight logic run before dispatching bare …\nAll pre-flight logic run before dispatching bare …\nAll pre-flight logic run before dispatching bare …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nDo a Blake2 128-bit hash and return result.\nDo a Blake2 256-bit hash and return result.\nDo a Blake2 512-bit hash and return result.\nDo a Blake2 512-bit hash and place result in <code>dest</code>.\nDo a Blake2 64-bit hash and return result.\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nDocumentation for this macro can be found at …\nEach dispatchable may also be annotated with the …\nGet a reference to the caller (<code>CallerTrait</code> impl).\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>incoming</code> just joined the set and …\nA number of members <code>_incoming</code> just joined the set and …\nCheck how a payment has proceeded. <code>id</code> must have been …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nCompute the square root. If it overflows or is negative, …\nSubtracts two numbers, checking for underflow. If …\nDocumentation for this macro can be found at …\nReturns the complement of this set of flags.\nDocumentation for this macro can be found at …\nCompute diff between new and old members; they <strong>must </strong>…\nCompute diff between new and old members; they <strong>must </strong>…\nCompute diff between new and old members; they <strong>must </strong>…\nCompute diff between new and old members; they <strong>must </strong>…\nCompute diff between new and old members; they <strong>must </strong>…\nCompute diff between new and old members; they <strong>must </strong>…\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nMake conversion.\nMake conversion back.\nVersion of the crate containing the pallet.\nCreate a bare extrinsic.\nCreate a bare extrinsic.\nCreate the transaction extension to be used alongside an …\nCreate an inherent out of the given <code>InherentData</code>.\nAttempt to create signed extrinsic data that encodes call …\nCreate a transaction using the call and the desired …\nReturns the current block number.\nReturn the denominator reference.\nAttempt to deserialise the value from input.\nConsume self and return the number of parts per thing.\nDoes not alter the inner value at all, but it will log …\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nIncrease <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> plus <code>other</code> defensively.\nDecrement <code>self</code> by one defensively.\nIncrement <code>self</code> by one defensively.\nReturn the product of <code>self</code> and <code>other</code> defensively.\nReduce <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> minus <code>other</code> defensively.\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nDemote a member to the next lower rank; demoting beyond …\nDeserialize this value from the given Serde deserializer.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nActually dispatch this call and return the result of it.\nDispatch a transaction with the given base origin and call.\nDrain the elements in append order.\nReturns an empty set of flags.\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nAdds two numbers, checking for overflow.\nAdds two numbers, checking for overflow.\nAdds two numbers, checking for overflow.\nAdds two numbers, checking for overflow.\nAdds two numbers, checking for overflow.\nAdds two numbers, checking for overflow.\nAdds two numbers overwriting the left hand one, checking …\nAdds two numbers overwriting the left hand one, checking …\nAdds two numbers overwriting the left hand one, checking …\nAdds two numbers overwriting the left hand one, checking …\nAdds two numbers overwriting the left hand one, checking …\nAdds two numbers overwriting the left hand one, checking …\nEnsure that the origin <code>o</code> represents an extrinsic with …\nEnsure that a call to <code>check_payment</code> with the given …\nDivides two numbers, checking for overflow.\nDivides two numbers, checking for overflow.\nDivides two numbers, checking for overflow.\nDivides two numbers, checking for overflow.\nDivides two numbers, checking for overflow.\nDivides two numbers, checking for overflow.\nDivides two numbers overwriting the left hand one, …\nDivides two numbers overwriting the left hand one, …\nDivides two numbers overwriting the left hand one, …\nDivides two numbers overwriting the left hand one, …\nDivides two numbers overwriting the left hand one, …\nDivides two numbers overwriting the left hand one, …\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nEnsure division for integer type <code>N</code>. Equal to <code>self / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nPerforms the conversion returning an <code>ArithmeticError</code> if …\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers, checking for overflow.\nMultiplies two numbers overwriting the left hand one, …\nMultiplies two numbers overwriting the left hand one, …\nMultiplies two numbers overwriting the left hand one, …\nMultiplies two numbers overwriting the left hand one, …\nMultiplies two numbers overwriting the left hand one, …\nMultiplies two numbers overwriting the left hand one, …\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure multiplication for integer type <code>N</code>. Equal to <code>self * n</code>…\nEnsure that the origin <code>o</code> represents an unsigned extrinsic. …\nRaises a value to the power of exp, returning …\nEnsure that the origin <code>o</code> represents the root. Returns <code>Ok</code> …\nEnsure that the origin <code>o</code> represents a signed extrinsic …\nEnsure that the origin <code>o</code> represents either a signed …\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers, checking for overflow.\nSubtracts two numbers overwriting the left hand one, …\nSubtracts two numbers overwriting the left hand one, …\nSubtracts two numbers overwriting the left hand one, …\nSubtracts two numbers overwriting the left hand one, …\nSubtracts two numbers overwriting the left hand one, …\nSubtracts two numbers overwriting the left hand one, …\nEnsure that a call to pay with the given parameters will …\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nDocumentation for this macro can be found at …\nReturn an estimate of the current session progress.\nReturn the block number at which the next session rotation …\nDocumentation for this macro can be found at …\nChoose all variants except for <code>one</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDetermine if a given value should be allowed through the …\nFilter the call if caller is not root, if false is …\nFormats the value using the given formatter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConverts a fraction into <code>Self</code>.\nBuilds this type from an integer number.\nCast mutable reference.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCast reference.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nName of the function.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn the current value.\nReturn the current value.\nReturn a <code>CallMetadata</code>, containing function and pallet name …\nReturn all function names for the given <code>module</code>.\nReturn a <code>DispatchInfo</code>, containing relevant information of …\nReturn all module names.\nGet the current prime.\nGet the current prime.\nGet the current prime.\nGet the current prime.\nGet the current prime.\nGet the current prime.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nRuntime-specific <code>AccountId</code>.\nHelper macro to be used in a <code>impl TransactionExtension</code> …\nDetermine any additional data which was known at the time …\nDetermine any additional data which was known at the time …\nDetermine any additional data which was known at the time …\nDetermine any additional data which was known at the time …\nDetermine any additional data which was known at the time …\nDetermine any additional data which was known at the time …\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nReturns the in-code storage version as specified in the …\nDocumentation for this macro can be found at …\nIndex of the pallet as configured in the runtime.\nIndex on the provided list of accounts or list of all …\nAdd a member to the group at the <code>min_rank()</code>.\nDocumentation for this macro can be found at …\nInitialize the members to the given <code>members</code>.\nThe optional attribute <code>#[inject_runtime_type]</code> can be …\nInserts the specified flags in-place.\nFind the integer square root.\nFind the integer square root.\nFind the integer square root.\nFind the integer square root.\nFind the integer square root.\nFind the integer square root.\nFind the integer square root, returning <code>None</code> if the number …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform into an account.\nConvert into an account ID. This is infallible, and may …\nConvert into an account ID. This is infallible, and may …\nConvert into an account ID. This is infallible, and may …\nConvert into an account ID. This is infallible, and may …\nConvert into an account ID. This is infallible, and may …\nConsume <code>self</code> and return the caller.\nConsumes <code>self</code> and returns the inner raw value.\nCast mutable reference.\nCast reference.\nConvert the type into a <code>Result</code> with <code>DispatchError</code> as the …\nConvert the type into a <code>Result</code> with <code>TokenError</code> as the …\nConvert this value amalgamated with a secondary “sub” …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturn whether the call is an inherent call.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns <code>Some(_)</code> if <code>self</code> is an instance of sub type <code>T</code>.\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nDetermines whether <code>self</code> matches at least everything that <code>_o</code>…\nWhether the origin is authorized to include a transaction …\nChecks if a particular instance of this <code>Task</code> variant is a …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nList the elements in append order.\nInspects the pallet’s state and enumerates tasks of this …\nDo a keccak 256-bit hash and return result.\nDo a keccak 512-bit hash and return result.\nTransaction longevity\nAttempt a lookup.\nUpper bound, in bytes, of the maximum encoded size of this …\nReturns the largest finite number this type can represent\nReturns the metadata for this extension.\nReturns the metadata for this extension.\nReturns the metadata for this extension.\nReturns the metadata for this extension.\nReturns the metadata for this extension.\nReturns the metadata for this extension.\nThe lowest rank possible in this membership organisation.\nReturns the smallest finite number this type can represent\nName of the Rust module containing the pallet.\nReturn the numerator reference.\nName of the pallet as configured in the runtime.\nTwo128 hash of name.\nCreate a new instance from the given byte array.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nCreate with system none origin and …\nNormalize <code>input</code> so that the sum of all elements reaches …\nNormalize self around <code>targeted_sum</code>.\nReturns the complement of this set of flags.\nA notification for end of the session.\nA notification for end of the session.\nA notification for end of the session.\nA notification for end of the session.\nA notification for end of the session.\nReturns the storage version of the pallet as last set in …\nA validator got disabled. Act accordingly until a new …\nThe given validator set will be used for the genesis …\nSession set has changed; act appropriately. Note that this …\nActually handle a non-zero imbalance. You probably want to …\nActually handle a non-zero imbalance. You probably want to …\nActually handle a non-zero imbalance. You probably want to …\nActually handle a non-zero imbalance. You probably want to …\nActually handle a non-zero imbalance. You probably want to …\nActually handle a non-zero imbalance. You probably want to …\nSee <code>Hooks::on_runtime_upgrade</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nHandler for some imbalance. Infallible.\nHandler for some imbalance. Infallible.\nHandler for some imbalance. Infallible.\nHandler for some imbalance. Infallible.\nHandler for some imbalance. Infallible.\nHandler for some imbalance. Infallible.\nHandler for some imbalances. The different imbalances …\nHandler for some imbalances. The different imbalances …\nHandler for some imbalances. The different imbalances …\nHandler for some imbalances. The different imbalances …\nHandler for some imbalances. The different imbalances …\nHandler for some imbalances. The different imbalances …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nOne.\nThe ordered Patricia tree root of the given <code>input</code>.\nDocumentation for this macro can be found at …\nName of the pallet to which the function belongs.\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nMake a payment and return an identifier for later …\nWhether this transaction should pay fees when all is said …\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nA wrapper for <code>post_dispatch_details</code> that refunds the …\nDo any post-flight stuff for an extrinsic.\nDo any post-flight stuff for an extrinsic.\nDo any post-flight stuff for an extrinsic.\nDo any post-flight stuff for an extrinsic.\nDo any post-flight stuff for an extrinsic.\nDo any post-flight stuff for an extrinsic.\nAdditional information about the <code>Dispatchable</code> which is …\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::post_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nSee <code>Hooks::pre_upgrade</code>.\nDo any pre-flight stuff for a transaction after validation.\nPriority of the transaction.\nPromote a member to the next higher rank.\nA flag indicating if the transaction should be propagated …\nProvided tags\nReturn a public key that is expected to have a matching …\nA runtime-specific <code>Public</code> key for that key pair.\nReturn the rank of the given ID, or <code>None</code> if they are not a …\nAttach this attribute to an impl statement that you want …\nRemoves the specified flags in-place.\nTransaction dependencies\nReset origin filters to default one, i.e …\nCreate with system root origin and …\nPerforms the work for this particular <code>Task</code> variant.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSubmit a signed transaction to the local pool.\nSend an unsigned transaction with a signed payload.\nSerialize this value into the given Serde serializer.\nInserts or removes the specified flags depending on the …\nUtility function only to be used in benchmarking scenarios …\nUtility function only to be used in benchmarking scenarios …\nUtility function only to be used in benchmarking scenarios …\nUtility function only to be used in benchmarking scenarios …\nUtility function only to be used in benchmarking scenarios …\nReplace the caller with caller from the other origin\nReplace the caller with caller from the other origin\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the new members; they <strong>must already be sorted</strong>. This …\nSet the prime member.\nSet the prime member.\nSet the prime member.\nSet the prime member.\nSet the prime member.\nSet the prime member.\nDo a sha2 256-bit hash and return result.\nConstruct and sign given payload.\nSign a message.\nCreate with system signed origin and …\nReturns the sign of the number.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nMember <code>old</code> was swapped with <code>new</code> at <code>rank</code>.\nReturns the symmetric difference between the flags in <code>self</code> …\nAllows defining conditions for a task to run.\nA unique value representing this <code>Task</code> within the current …\nAllows defining an index for a task.\nAllows defining an iterator over available work items for …\nAllows defining the weight of a task.\nAllows you to define some service work that can be …\nCompare if <code>self</code> is <code>threshold</code> greater or less than <code>other</code>.\nDo everything which would be done in a dispatch_transaction…\nToggles the specified flags in-place.\nThe Patricia tree root of the given mapping.\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nConvert into an account ID, checking that all bytes of the …\nConvert into an account ID, checking that all bytes of the …\nConvert into an account ID, checking that all bytes of the …\nConvert into an account ID, checking that all bytes of the …\nConvert into an account ID, checking that all bytes of the …\nSame as <code>into_sub_account_truncating</code>, but ensuring that all …\nThe expected and default behavior of this method is to …\nThe expected and default behavior of this method is to …\nThe expected and default behavior of this method is to …\nThe expected and default behavior of this method is to …\nThe expected and default behavior of this method is to …\nPerform the origin check.\nAttempt to get an outer origin capable of passing …\nDo something with the caller, consuming self but returning …\nDo a XX 128-bit hash and return result.\nDo a XX 128-bit hash and place result in <code>dest</code>.\nDo a XX 256-bit hash and return result.\nDo a XX 256-bit hash and place result in <code>dest</code>.\nDo a XX 64-bit hash and return result.\nDo a XX 64-bit hash and place result in <code>dest</code>.\nReturns the static type identifier for <code>Self</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nConvert from Target back to Source.\nValidate a transaction for the transaction queue.\nValidate and prepare a transaction, ready for dispatch.\nJust validate a transaction.\nReturn the validity of the call\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nThe weight consumed by executing this extension instance …\nReturns the weight of executing this <code>Task</code>.\nDocumentation for this macro can be found at …\nThe weight of the authorization function.\nAllows to define the weight of the authorize function.\nDocumentation for this macro can be found at …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nZero.\nCreate a new instance which only contains zeroes as input.\nTypes and traits for runtimes that implement runtime APIs.\nThe main prelude of <code>FRAME</code> for building runtimes.\nThe main prelude of FRAME for building runtimes, and in …\nA set of opinionated types aliases commonly used in …\nThe <code>ConsensusEngineId</code> of AuRa.\nThe API to query account nonce.\nThe concrete type that provides the api.\nAn error describing which API call failed.\nExtends the runtime api implementation with some common …\nAuxiliary wrapper that holds an api instance and binds it …\nAPI necessary for block authorship with aura.\nIdentity of a Grandpa authority.\nA list of Grandpa authorities with associated weights.\nThe grandpa crypto scheme defined via the keypair type.\nSignature for a Grandpa authority.\nThe weight of an authority.\nThe <code>BlockBuilder</code> api trait that provides the required …\nThe log target to be used by client code.\nSomething that can call into an api at a given block.\nParameters for <code>CallApiAt::call_api_at</code>.\nThe context in which a call is done.\nA catch up message for this chain’s block type.\nCheck inherents error\nErrors that occur when creating and checking on the client …\nUnknown inherent error for identifier\nClient Error\nA commit message for this chain’s block type.\nCommit the transaction.\nA compact commit message for this chain’s block type.\nSomething that can be constructed to a runtime api.\nThe <code>Core</code> runtime api that every Substrate runtime needs to …\nCreate inherents error.\nThe default <code>development</code> preset used to communicate with …\nWrapper object for GRANDPA equivocation proofs, useful for …\nProof of voter misbehavior on a given set id. …\nContains the error value\nThe <code>ConsensusEngineId</code> of GRANDPA.\nAPI to interact with <code>RuntimeGenesisConfig</code> for the runtime\nAPIs for integrating the GRANDPA finality gadget into …\nA GRANDPA justification for block finality, it includes a …\nThe identifier of the runtime api.\nInvalid signature.\nKey type for GRANDPA module.\nAn identifier for a type of cryptographic key.\nThe default <code>local_testnet</code> preset used to communicate with …\nA GRANDPA message for a substrate chain.\nThe <code>Metadata</code> api trait that returns metadata for the …\nThe call is happening in some offchain context.\nThe offchain worker api.\nContains the success value\nThe call is happening in some on-chain context like …\nAn opaque type used to represent the key ownership proof …\nValid signature, but the message was signed in the …\nA precommit message for this chain’s block type.\nA precommit message.\nProof of equivocation at precommit stage.\nThe type representing preset ID.\nA prevote message for this chain’s block type.\nA prevote message.\nProof of equivocation at prevote stage.\nA primary propose message for this chain’s block type.\nA primary proposal message.\nA type that records all accessed trie nodes and generates …\nSomething that provides a runtime api.\nThe number of bytes required to encode a <code>RuntimeApiInfo</code>.\nThe log target to be used by runtime code.\nThe result type alias, used in build methods. <code>Err</code> contains …\nRollback the transaction.\nThe round indicator.\nThe actual runtime api that will be constructed.\nSomething that provides information about a runtime api.\nPersistent storage prefix used by the Offchain Worker API …\nA scheduled change of authority set.\nSession keys runtime api.\nThe monotonic identifier of a GRANDPA set of authorities.\nResult of checking a message signature.\nA signed message.\nUnit type wrapper that represents a slot.\nA slot duration defined in milliseconds.\nThe state backend that is used to store the block states.\nA proof that some set of key-value pairs are included in …\nThe <code>TaggedTransactionQueue</code> api trait for interfering with …\nDescribes on what should happen with a storage transaction.\nThe version of the runtime api.\nValid signature.\nReturns the version of the given api.\nApply the given extrinsic.\nApply the given extrinsic.\nThe encoded arguments of the function.\nThe block id that determines the state that should be …\nAuthentication data for the commit.\nReturn the current set of authorities.\nReturn the current set of authorities.\nThe base hash. See struct docs.\nThe base number. See struct docs.\nBuild <code>RuntimeGenesisConfig</code> from a JSON blob not using any …\nBuild <code>RuntimeGenesisConfig</code> from a JSON blob not using any …\nCalls the given api function with the given encoded …\nThe call context of this call.\nVerifies the equivocation proof by making sure that both …\nCreate inherent data and check that the inherents are …\nCheck that the inherents are valid. The inherent data will …\nCheck that the inherents are valid. The inherent data will …\nCheck that the inherents are valid.\nCheck a message signature by encoding the message as a …\nCheck a message signature by encoding the message as a …\nAll changes to the child storages.\nConstruct an instance of the runtime api.\nDecode the given public session keys.\nThe number of blocks to delay.\nDeserialize the runtime API info serialized by …\nAura (Authority-Round) digests\nExecute the given closure inside a new transaction.\nThe extensions that should be used for this call.\nExtract the recorded proof.\nFinish the current block.\nFinish the current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe name of the function that should be called.\nGenerate a set of session keys with optionally using the …\nReturns a JSON blob representation of the built-in …\nReturns a JSON blob representation of the built-in …\nChecks if the given api is implemented and versions match.\nCheck if the given api is implemented and the version …\nThe Id of the signer\nGenerate inherent extrinsics. The inherent data will vary …\nGenerate inherent extrinsics. The inherent data will vary …\nInit the <code>RuntimeLogger</code>.\nInitialize the <code>extensions</code> for the given block <code>at</code> by using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the api object into the storage changes that were …\nEncode round message localized to a given round and set id.\nEncode round message localized to a given round and set id …\nAll changes to the main storage.\nThe internal message which has been signed.\nReturns the metadata of a runtime.\nReturns the metadata at a given version.\nReturns the supported metadata versions.\nThe new authorities after the change, along with their …\nOffchain state changes to write to the offchain database.\nStarts the off-chain task for given block header.\nStarts the off-chain task for given block header.\nStarts the off-chain task for given block number.\nStarts the off-chain task for given block number.\nThe overlayed changes that are on top of the state.\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nReturns a list of identifiers for available builtin …\nReturns a list of identifiers for available builtin …\nPrevotes for target block or any block after it that …\nReturns the current active proof recorder.\nStart recording all accessed trie nodes.\nStart recording all accessed trie nodes using the given …\nThe optional proof recorder for recording storage accesses.\nRegister an <code>Extension</code> that will be accessible while …\nRound number.\nReturns the runtime api. The returned instance will keep …\nReturns the runtime version at the given block.\nCrude and simple way to serialize the <code>RuntimeApiInfo</code> into …\nSet the <code>CallContext</code> to be used by the runtime api calls …\nLocalizes the message to the given set and round and signs …\nThe signature on the message.\nReturns the slot duration for Aura.\nReturns the slot duration for Aura.\nGet the state <code>at</code> the given block.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s number\nThe target block’s number.\nThe target block’s number\nThe target block’s number.\nThe target block’s number.\nA transaction for the backend that contains all changes …\nChanges to the transaction index,\nThe storage root after applying the transaction.\nValidate the transaction.\nValidate the transaction.\nValidate the transaction.\nA digest item which is usable with aura consensus.\nIf this item is an AuRa pre-digest, return the slot number\nIf this item is an Aura seal, return the signature.\nConstruct a digest item which contains the slot number\nConstruct a digest item which contains a signature on the …\nAn Aura authority identifier using Ed25519 as its crypto.\nAn Aura authority keypair using Ed25519 as its crypto.\nAn Aura authority signature using Ed25519 as its crypto.\nAuxiliary trait to extract Aura inherent data.\nThe Aura inherent identifier.\nProvides the slot duration inherent data for <code>Aura</code>.\nThe type of the Aura inherent.\nGet aura inherent data.\nReplace aura inherent data.\nThe concrete type that provides the api.\nAn error describing which API call failed.\nExtends the runtime api implementation with some common …\nAuxiliary wrapper that holds an api instance and binds it …\nSomething that can call into an api at a given block.\nParameters for <code>CallApiAt::call_api_at</code>.\nThe context in which a call is done.\nCommit the transaction.\nSomething that can be constructed to a runtime api.\nThe <code>Core</code> runtime api that every Substrate runtime needs to …\nThe identifier of the runtime api.\nThe <code>Metadata</code> api trait that returns metadata for the …\nThe call is happening in some offchain context.\nThe call is happening in some on-chain context like …\nA type that records all accessed trie nodes and generates …\nSomething that provides a runtime api.\nThe number of bytes required to encode a <code>RuntimeApiInfo</code>.\nRollback the transaction.\nThe actual runtime api that will be constructed.\nSomething that provides information about a runtime api.\nThe state backend that is used to store the block states.\nA proof that some set of key-value pairs are included in …\nDescribes on what should happen with a storage transaction.\nThe version of the runtime api.\nReturns the version of the given api.\nThe encoded arguments of the function.\nThe block id that determines the state that should be …\nCalls the given api function with the given encoded …\nThe call context of this call.\nAll changes to the child storages.\nConstruct an instance of the runtime api.\nDeserialize the runtime API info serialized by …\nExecute the given closure inside a new transaction.\nThe extensions that should be used for this call.\nExtract the recorded proof.\nThe name of the function that should be called.\nChecks if the given api is implemented and versions match.\nCheck if the given api is implemented and the version …\nInit the <code>RuntimeLogger</code>.\nInitialize the <code>extensions</code> for the given block <code>at</code> by using …\nConvert the api object into the storage changes that were …\nAll changes to the main storage.\nReturns the metadata of a runtime.\nReturns the metadata at a given version.\nReturns the supported metadata versions.\nOffchain state changes to write to the offchain database.\nThe overlayed changes that are on top of the state.\nReturns the current active proof recorder.\nStart recording all accessed trie nodes.\nStart recording all accessed trie nodes using the given …\nThe optional proof recorder for recording storage accesses.\nRegister an <code>Extension</code> that will be accessible while …\nReturns the runtime api. The returned instance will keep …\nReturns the runtime version at the given block.\nCrude and simple way to serialize the <code>RuntimeApiInfo</code> into …\nSet the <code>CallContext</code> to be used by the runtime api calls …\nGet the state <code>at</code> the given block.\nA transaction for the backend that contains all changes …\nChanges to the transaction index,\nThe storage root after applying the transaction.\nAn Aura authority identifier using S/R 25519 as its crypto.\nAn Aura authority keypair using S/R 25519 as its crypto.\nAn Aura authority signature using S/R 25519 as its crypto.\nThe accuracy of this type.\nDetails of an account for which a private key is contained …\nThe account ID that this can be transformed into.\nThe AccountId used across the system.\nThis type can be converted into and possibly from an …\nType alias for the <code>AccountId</code> associated type of system …\nAll extrinsics are allowed to be included in this block.\nOperation may result in account going out of existence.\nThe transaction birth block is ancient.\nA type binding runtime-level <code>Public/Signature</code> pair with …\nAppend iterator for fast append operations.\nThe result of applying of an extrinsic.\nAn arithmetic error.\nArithmetic errors.\nInterface to differentiate between Runtime Origins …\nSimple amalgamation trait to collect together properties …\nThe type for the kinds of asset that are going to be paid.\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast16Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast8Bit</code>, but …\nA trait to allow calls to authorize themselves from the …\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nA bad origin.\nGeneral error to do with the transaction’s proofs (e.g. …\nThe sending address is disabled or known to be invalid.\nThe type by which we measure units of the currency in …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nA meta trait for arithmetic type operations, regardless of …\nAccount cannot exist with the funds that would be given.\nDeposit couldn’t happen due to the amount being too low. …\nThe type by which we identify the beneficiaries to whom a …\nThe operation may be considered successful even if less …\nHash storage keys with blake2 128\nHash storage keys with <code>concat(blake2_128(key), key)</code>\nHash storage keys with blake2 256\nBlake2-256 Hash implementation.\nType of <code>BlockNumber</code> to provide.\nType alias for the <code>BlockNumber</code> associated type of system …\nGet current block number\nAccount cannot receive the assets.\nAccount cannot receive the assets.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nNumbers which have upper and lower bounds\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nA trait to define the build function of a genesis config …\nThe call of the transaction is not expected.\nThe call type of the pallet.\nThe call to validate\nRuntime call type, as in <code>frame_system::Config::Call</code>\nThe function and pallet name of the Call.\nAccount cannot be created.\nDeposit cannot happen since the account cannot be created …\nAccount cannot be created for a held balance.\nCould not lookup some information that is required to …\nFailed to lookup some data.\nTrait for type that can handle incremental changes to a …\nThe result of checking inherents.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDerive [<code>Clone</code>] but do not bound any generic.\n…\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for unsigned integers.\nAt least one consumer is remaining so the account cannot …\nA trait for querying whether a type can be said to “…\nInfallible conversion trait. Generic over both source and …\nReversing infallible conversion trait. Generic over both …\nThe state is corrupt; this is generally not going to fix …\nA wrapper around a <code>StorageMap</code> and a <code>StorageValue</code> (with the …\nA wrapper around a <code>StorageNMap</code> and a <code>StorageValue</code> (with …\nInterface for creating a transaction for a call that will …\nInterface for creating a bare extrinsic.\nInterface for creating a bare extrinsic.\nInterface for creating an old-school signed transaction.\nInterface for creating a transaction.\nCommon interface for the <code>CreateTransaction</code> trait family to …\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nThe default <code>development</code> preset used to communicate with …\nPrecision of this fixed point implementation. It should be …\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nDerive [<code>Debug</code>] but do not bound any generics.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> for struct and enum.\nMarker trait used for identifying types that call the …\nDerive <code>parity_scale_codec::DecodeWithMemTracking</code> for …\nderive <code>Default</code> but do no bound any generic. Docs are at …\nA trait to handle errors and options when you are really …\nA variant of <code>Defensive</code> with the same rationale, for the …\nOne of a number of consequences of withdrawing a fungible …\nA <strong>data structure</strong> that can be deserialized from any data …\nA generalized group of dispatch types.\nReason why a dispatch call failed.\nResult of a <code>Dispatchable</code> which contains the <code>DispatchResult</code> …\nShortcut to reference the <code>Info</code> type of a <code>Dispatchable</code>.\nUn-augmented version of <code>DispatchResultWithPostInfo</code> that …\nReturn type of a <code>Dispatchable</code> which contains the …\nThe return type of a <code>Dispatchable</code> in frame. When returned …\nSingle-function utility trait with a blanket impl over …\nA lazy call (module function and argument values) that can …\nDivision by zero.\n“OR gate” implementation of <code>EnsureOrigin</code>, <code>Success</code> type …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\nAlways fail.\nEnsure the origin is <code>None</code>. i.e. unsigned transaction.\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nSome sort of check on the origin is performed by this …\nEnsure the origin is Root.\nEnsure the origin is Root and return the provided <code>Success</code> …\nEnsure the origin is any <code>Signed</code> origin.\nEnsure the origin is <code>Signed</code> origin from the given <code>AccountId</code>…\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nAn <code>Iterator</code> over tasks of this type used as the return …\nDeriveEq but do no bound any generic.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nThe error returned by <code>check_inherent</code>.\nAn error which could be returned by the Pay type\nSomething that can estimate at which block the next …\nA <code>Contains</code> implementation that contains every value.\nThe operation should must either proceed either exactly …\nMain entry point for certain runtime actions as e.g. …\nResources exhausted, e.g. attempt to read/write data which …\nThe transaction would exhaust the resources of current …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nThe extension.\nType to represent the version of the Extension used in …\nTransaction has been received externally.\nThe extrinsic.\nType alias for the <code>Extrinsic</code> associated type of system …\nConfines the kind of extrinsics that can be included in a …\nImplementor of <code>WeightToFee</code> such that it maps any unit of …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nMarker struct used to flag using all supported keys to …\nMarker struct used to flag using any of the supported keys …\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nFunds exist but are frozen.\nNot enough of the funds in the account are available for …\nFunds are unavailable.\nGeneral error to do with the transaction not yet being …\nA raw crypto public key wrapped by <code>RuntimeAppPublic</code>.\nA matching raw crypto <code>Signature</code> type.\nThe result type alias, used in build methods. <code>Err</code> contains …\nA trait for querying a single value from a type.\nGets the metadata for the Call - function name and pallet …\nImplement Get by returning Default for any type that …\nA <code>Dispatchable</code> function (aka transaction) that can carry …\nProvides information about a pallet’s storage versions.\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nAbstraction around hashing\nType alias for the <code>Header</code>.\nThe pallet hooks trait. This is merely an umbrella trait …\nUnique identifier of this signed extension.\nThe inherent identifier used by this inherent.\nAn identifier given to an individual payment.\nSome type that is able to be collapsed into an account ID. …\nStore the key directly.\nThe type identifying for which type info is provided.\nA lookup implementation returning the input value.\nAny additional data which was known at the time of …\nTransaction is already included in block.\nThis type is generated by the <code>pallet</code> macro.\nThe implicit data was unable to be calculated.\nThe info type.\nAn opaque set of information attached to the transaction. …\nInherent data to include in a block.\nAn identifier for an inherent.\nTrait for type that can handle the initialization of …\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nA <code>Contains</code> implementation which contains all members of …\nSimple trait for providing a filter over a reference to …\nA trait implementing integer square root.\nThe transaction is invalid.\nAn invalid transaction validity.\nSomething that can be checked to be a of sub type <code>T</code>.\nTrait to be used when types are exactly same.\nIterator for normal and draining iteration.\nKeccak-256 Hash implementation.\nOperation must not result in the account going out of …\nThe key type expected.\nThe default <code>local_testnet</code> preset used to communicate with …\nTransaction is coming from a local source.\nThe number of bytes of the module-specific <code>error</code> field …\nAuxiliary to make any given error resolve to …\nA mandatory dispatch. These kinds of dispatch are always …\nAn extrinsic with a mandatory dispatch tried to be …\nA derivative <code>EnsureOrigin</code> implementation. It mutates the …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nThe funds will be minted into the system, increasing total …\nA custom error in a module.\nA type used exclusively by storage maps as their key type.\nThe version of the native runtime.\nTransactor will NOT pay related fees.\nAn implementation of <code>WeightToFee</code> that collects no fee.\nNoOp polling is required if pallet-referenda functionality …\nThere are no providers so the account cannot be created.\nNo validator found for the given unsigned transaction.\nA normal dispatch.\nA collection-like object that is made of values of type <code>T</code> …\nWithdrawal would cause unwanted loss of account.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nExtension trait for <code>OnInitialize</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nHandler for when some currency “account” decreased in …\nDefines a multiplicative identity element for <code>Self</code>.\nA session handler for specific key type.\nInherents are allowed to be included.\nSome part of the balance gives the only provider reference …\nStores the encoded <code>RuntimeMetadata</code> for the native side as …\nAn operational dispatch.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Option&lt;_&gt;</code>.\nDerive [<code>Ord</code>] but do no bound any generic. Docs are at …\nThe origin type of the transaction.\nType alias for the <code>Origin</code> associated type of system config.\nMethods available on <code>frame_system::Config::RuntimeOrigin</code>.\nSome error occurred.\nThe hash type produced.\nOverflow.\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nA pallet identifier. These are per pallet and should be …\nProvides information about the pallet itself and its setup …\nThe caller origin, overarching type of all pallets origins.\nA type that can be used as a parameter in a dispatchable …\nDerive [<code>PartialEq</code>] but do not bound any generic.\nDerive [<code>PartialOrd</code>] but do not bound any generic. Docs are …\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nGeneral error to do with the inability to pay some fees …\nExplicit enum to denote if a transaction pays fee or not.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nZero-sized type used to mark things that “act like” …\nThe operation should execute with regular privilege.\nWeight information that is only available post dispatch. …\nAdditional information that is returned by <code>dispatch</code>. Can …\nThe <code>Pre</code> of the extension.\nThe type that encodes information that can be passed from …\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe type representing preset ID.\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nA pallet that provides or verifies an inherent extrinsic …\nA public key that is capable of identifying <code>AccountId</code>s.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nRanked membership data structure.\nHandler that can deal with the swap of two members.\nA wrapper for any rational number with a 128 bit numerator …\nA wrapper for any rational number with infinitely large …\nMutator which reduces a scalar by a particular amount.\nAccount balance would reduce to zero, potentially …\nMorpher to disregard the source value and replace with the …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nA submission result.\nA submission result.\nThe resultant type.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being …\nRoot origin is not allowed.\nThe rounding method to use for unsigned quantities.\nA application-specific crypto.\nThe runtime’s call type.\nType alias for the <code>RuntimeCall</code> associated type of system …\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nEvery function call from your runtime has an origin, which …\nRuntime version. This should not be thought of as classic …\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nSubmit a signed transaction to the transaction pool.\nSubmit an unsigned transaction onchain with a signed …\nA <strong>data structure</strong> that can be serialized into any data …\nA message signer.\nA matching <code>Signature</code> type.\nA signature data.\nUseful functions for signed numbers (i.e. numbers that can …\nUtility trait to be implemented on payloads that can be …\nThe rounding method to use.\nProvides an implementation for signing transaction …\nA wrapper around the types which are used for signing.\nType to lookup from.\nSet of test accounts.\nGeneral error to do with the transaction being outdated …\nMeans of changing one type into another in a manner …\nA type representing a <em>double map</em> in storage. This …\nA trait to give information about storage.\nA non-continuous container type.\nA type representing a <em>map</em> in storage. A <em>storage map</em> is a …\nA type representing an <em>NMap</em> in storage. This structure …\nA type representing a <em>value</em> in storage. A <em>storage value</em> is …\nThe storage version of a pallet.\nProvides the ability to directly submit signed and unsigned\nAccount continued in existence.\nAccount continued in existence.\nA return type.\nType to lookup into.\nA general-purpose trait which defines a type of service …\nTrait for comparing two numbers with an threshold.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nInput that adds infinite number of zero after wrapped …\nMeans by which a transaction may be extended. This type …\nMinimum number of blocks a transaction will remain valid …\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nTag for a transaction. No two transactions with the same …\nInformation on a transaction’s validity and, if valid, …\nErrors that can occur while checking the validity of a …\nInformation on a transaction’s validity and, if valid, …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nHash storage keys with twox 128\nHash storage keys with twox 256\nHash storage keys with <code>concat(twox64(key), key)</code>\nThe type which is returned.\nImplementors return their meta type information.\nA trait for querying a single value from a type defined in …\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThere has been an underflow in the system. This is …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nTransaction validity can’t be determined.\nThe asset in question is unknown.\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe transaction extension did not authorize any origin.\nAn unknown transaction validity.\nA trait for values which cannot be negative\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nGet the number of variants.\nThe <code>Val</code> of the extension.\nThe type that encodes information that can be passed from …\nInformation concerning a valid transaction.\nShortcut for the result value of the <code>validate</code> function.\nProvide validation for unsigned extrinsics.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Value</code>.\nTrait to get the number of variants in any enum.\nAdapter for <code>Get&lt;u32&gt;</code> to access <code>VARIANT_COUNT</code> from …\nA weakly bounded vector.\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nTransactor will pay related fees.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nThe positive difference of two numbers.\nActual weight consumed by a call or <code>None</code> which stands for …\nAdd a filter to the origin.\nList of supported API “features” along with their …\nA fast append iterator.\nCopied from <code>sp-runtime</code> and documented there.\n<code>authoring_version</code> is the version of the authorship …\nThe authorize function.\nAllows to authorize some general transactions with …\nReturn the average length of a session.\nDo a Blake2 128-bit hash and return result.\nDo a Blake2 256-bit hash and return result.\nDo a Blake2 512-bit hash and return result.\nDo a Blake2 512-bit hash and place result in <code>dest</code>.\nDo a Blake2 64-bit hash and return result.\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nBuild <code>GenesisConfig</code> from a JSON blob not using any …\nDocumentation for this macro can be found at …\nEach dispatchable may also be annotated with the …\nGet a reference to the caller (<code>CallerTrait</code> impl).\nAuthoring runtimes (<code>spec_version</code>s) that this native …\nA number of members <code>_incoming</code> just joined the set and …\nCheck how a payment has proceeded. <code>id</code> must have been …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nCompute the square root. If it overflows or is negative, …\nSubtracts two numbers, checking for underflow. If …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nConstruct a runtime, with the given name and the given …\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nMake conversion.\nMake conversion back.\nVersion of the crate containing the pallet.\nCreate a bare extrinsic.\nCreate a bare extrinsic.\nCreate the transaction extension to be used alongside an …\nCreate an inherent out of the given <code>InherentData</code>.\nDeprecated <code>Cow::Borrowed()</code> wrapper.\nAttempt to create signed extrinsic data that encodes call …\nCreate a transaction using the call and the desired …\nReturns the current block number.\nAttempt to deserialise the value from input.\nConsume self and return the number of parts per thing.\nDoes not alter the inner value at all, but it will log …\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nIncrease <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> plus <code>other</code> defensively.\nDecrement <code>self</code> by one defensively.\nIncrement <code>self</code> by one defensively.\nReturn the product of <code>self</code> and <code>other</code> defensively.\nReduce <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> minus <code>other</code> defensively.\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nDemote a member to the next lower rank; demoting beyond …\nThis attribute can be used to derive a full implementation …\nDeserialize this value from the given Serde deserializer.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nActually dispatch this call and return the result of it.\nDispatch a transaction with the given base origin and call.\nDrain the elements in append order.\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nEnsure that the origin <code>o</code> represents an extrinsic with …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that the origin <code>o</code> represents an unsigned extrinsic. …\nRaises a value to the power of exp, returning …\nEnsure that the origin <code>o</code> represents the root. Returns <code>Ok</code> …\nEnsure that the origin <code>o</code> represents a signed extrinsic …\nEnsure that the origin <code>o</code> represents either a signed …\nEnsure that a call to pay with the given parameters will …\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nDocumentation for this macro can be found at …\nReturn an estimate of the current session progress.\nReturn the block number at which the next session rotation …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDetermine if a given value should be allowed through the …\nFilter the call if caller is not root, if false is …\nFormats the value using the given formatter.\nConstruct a runtime, with the given name and the given …\nConverts a fraction into <code>Self</code>.\nBuilds this type from an integer number.\nCast mutable reference.\nBuild this type from a number of parts per thing.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCast reference.\nName of the function.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn the current value.\nReturn the current value.\nReturn a <code>CallMetadata</code>, containing function and pallet name …\nReturn all function names for the given <code>module</code>.\nReturn a <code>DispatchInfo</code>, containing relevant information of …\nReturn all module names.\nGet the default <code>GenesisConfig</code> as a JSON blob if <code>name</code> is …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nRuntime-specific <code>AccountId</code>.\nName of the implementation of the spec. This is of little …\nHelper macro to be used in a <code>impl TransactionExtension</code> …\nVersion of the implementation of the specification.\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nReturns the in-code storage version as specified in the …\nDocumentation for this macro can be found at …\nIndex of the pallet as configured in the runtime.\nIndex on the provided list of accounts or list of all …\nAdd a member to the group at the <code>min_rank()</code>.\nDocumentation for this macro can be found at …\nInitialize the members to the given <code>members</code>.\nThe optional attribute <code>#[inject_runtime_type]</code> can be …\nFind the integer square root, returning <code>None</code> if the number …\nTransform into an account.\nConsume <code>self</code> and return the caller.\nConsumes <code>self</code> and returns the inner raw value.\nCast mutable reference.\nCast reference.\nConvert this value amalgamated with a secondary “sub” …\nReturn whether the call is an inherent call.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns <code>Some(_)</code> if <code>self</code> is an instance of sub type <code>T</code>.\nWhether the origin is authorized to include a transaction …\nChecks if a particular instance of this <code>Task</code> variant is a …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nList the elements in append order.\nInspects the pallet’s state and enumerates tasks of this …\nDo a keccak 256-bit hash and return result.\nDo a keccak 512-bit hash and return result.\nTransaction longevity\nAttempt a lookup.\nUpper bound, in bytes, of the maximum encoded size of this …\nReturns the largest finite number this type can represent\nThe lowest rank possible in this membership organisation.\nReturns the smallest finite number this type can represent\nName of the Rust module containing the pallet.\nName of the pallet as configured in the runtime.\nTwo128 hash of name.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nCreate with system none origin and …\nNormalize <code>input</code> so that the sum of all elements reaches …\nNormalize self around <code>targeted_sum</code>.\nReturns the storage version of the pallet as last set in …\nA validator got disabled. Act accordingly until a new …\nThe given validator set will be used for the genesis …\nThe actual logic that calls <code>on_initialize</code> and registers …\nSession set has changed; act appropriately. Note that this …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nMacro for easily creating a new implementation of both the …\nThe ordered Patricia tree root of the given <code>input</code>.\nDocumentation for this macro can be found at …\nName of the pallet to which the function belongs.\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nCreate new implementations of the <code>Get</code> trait.\nMake a payment and return an identifier for later …\nWhether this transaction should pay fees when all is said …\nAdditional information about the <code>Dispatchable</code> which is …\nDo any pre-flight stuff for a transaction after validation.\nPriority of the transaction.\nPromote a member to the next higher rank.\nA flag indicating if the transaction should be propagated …\nProvided tags\nReturn a public key that is expected to have a matching …\nA runtime-specific <code>Public</code> key for that key pair.\nReturn the rank of the given ID, or <code>None</code> if they are not a …\nAttach this attribute to an impl statement that you want …\nTransaction dependencies\nReset origin filters to default one, i.e …\nCreate with system root origin and …\nPerforms the work for this particular <code>Task</code> variant.\nBasic runtime version info.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSubmit a signed transaction to the local pool.\nSend an unsigned transaction with a signed payload.\nSerialize this value into the given Serde serializer.\nReplace the caller with caller from the other origin\nReplace the caller with caller from the other origin\nDo a sha2 256-bit hash and return result.\nConstruct and sign given payload.\nSign a message.\nCreate with system signed origin and …\nReturns the sign of the number.\nIdentifies the different Substrate runtimes. There’ll be …\nVersion of the runtime specification.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nMember <code>old</code> was swapped with <code>new</code> at <code>rank</code>.\nVersion of the system implementation used by this runtime. …\nAllows defining conditions for a task to run.\nA unique value representing this <code>Task</code> within the current …\nAllows defining an index for a task.\nAllows defining an iterator over available work items for …\nAllows defining the weight of a task.\nAllows you to define some service work that can be …\nCompare if <code>self</code> is <code>threshold</code> greater or less than <code>other</code>.\nDo everything which would be done in a dispatch_transaction…\nAll existing calls (dispatchables) are fully compatible …\nThe Patricia tree root of the given mapping.\nTry to convert an account ID into this type. Might not …\nSame as <code>into_sub_account_truncating</code>, but ensuring that all …\nPerform the origin check.\nAttempt to get an outer origin capable of passing …\nDo something with the caller, consuming self but returning …\nDo a XX 128-bit hash and return result.\nDo a XX 128-bit hash and place result in <code>dest</code>.\nDo a XX 256-bit hash and return result.\nDo a XX 256-bit hash and place result in <code>dest</code>.\nDo a XX 64-bit hash and return result.\nDo a XX 64-bit hash and place result in <code>dest</code>.\nReturns the static type identifier for <code>Self</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nConvert from Target back to Source.\nValidate a transaction for the transaction queue.\nValidate and prepare a transaction, ready for dispatch.\nJust validate a transaction.\nReturn the validity of the call\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nThe weight consumed by executing this extension instance …\nReturns the weight of executing this <code>Task</code>.\nDocumentation for this macro can be found at …\nThe weight of the authorization function.\nAllows to define the weight of the authorize function.\nDocumentation for this macro can be found at …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nAn arithmetic error.\nA bad origin.\nComplex storage builder stuff.\nFailed to lookup some data.\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nReason why a dispatch call failed.\nResources exhausted, e.g. attempt to read/write data which …\nA custom error in a module.\nThere are no providers so the account cannot be created.\nSome error occurred.\nRoot origin is not allowed.\nStruct containing data needed for a storage.\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nSome resource (e.g. a preimage) is unavailable right now. …\nAssimilate the storage for this module into pre-existing …\nChildren trie storage data. Key does not include prefix, …\nTop trie storage data.\nThe corresponding account-id type of <code>Signature</code>.\nThe block-number type, which should be fed into …\nThe block type, which should be fed into …\nAn ECDSA/SECP256k1 signature.\nAn Ed25519 signature.\nAn ECDSA/SECP256k1 signature but with a different address …\nThe opaque block type. This is the same <code>BlockOf</code>, but it has\nA signature type compatible capably of handling multiple …\nAn Sr25519 signature.\nDefault set of signed extensions exposed from the …\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe block header.\nThe block header.\nThe accuracy of this type.\nDetails of an account for which a private key is contained …\nThe account ID that this can be transformed into.\nThe AccountId used across the system.\nThis type can be converted into and possibly from an …\nType alias for the <code>AccountId</code> associated type of system …\nAll extrinsics are allowed to be included in this block.\nOperation may result in account going out of existence.\nThe transaction birth block is ancient.\nA type binding runtime-level <code>Public/Signature</code> pair with …\nAppend iterator for fast append operations.\nThe result of applying of an extrinsic.\nAn arithmetic error.\nArithmetic errors.\nInterface to differentiate between Runtime Origins …\nSimple amalgamation trait to collect together properties …\nThe type for the kinds of asset that are going to be paid.\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast16Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast8Bit</code>, but …\nA trait to allow calls to authorize themselves from the …\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nAn error type that indicates that the origin is invalid.\nA bad origin.\nGeneral error to do with the transaction’s proofs (e.g. …\nThe sending address is disabled or known to be invalid.\nThe type by which we measure units of the currency in …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nA meta trait for arithmetic type operations, regardless of …\nAccount cannot exist with the funds that would be given.\nDeposit couldn’t happen due to the amount being too low. …\nThe type by which we identify the beneficiaries to whom a …\nThe operation may be considered successful even if less …\nHash storage keys with blake2 128\nHash storage keys with <code>concat(blake2_128(key), key)</code>\nHash storage keys with blake2 256\nBlake2-256 Hash implementation.\nType of <code>BlockNumber</code> to provide.\nType alias for the <code>BlockNumber</code> associated type of system …\nGet current block number\nAccount cannot receive the assets.\nAccount cannot receive the assets.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nNumbers which have upper and lower bounds\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nA trait to define the build function of a genesis config …\nComplex storage builder stuff.\nThe call of the transaction is not expected.\nThe call type of the pallet.\nThe call to validate\nRuntime call type, as in <code>frame_system::Config::Call</code>\nThe function and pallet name of the Call.\nAccount cannot be created.\nDeposit cannot happen since the account cannot be created …\nAccount cannot be created for a held balance.\nCould not lookup some information that is required to …\nFailed to lookup some data.\nTrait for type that can handle incremental changes to a …\nThe result of checking inherents.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDerive [<code>Clone</code>] but do not bound any generic.\n…\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for unsigned integers.\nAt least one consumer is remaining so the account cannot …\nA trait for querying whether a type can be said to “…\nInfallible conversion trait. Generic over both source and …\nReversing infallible conversion trait. Generic over both …\nThe state is corrupt; this is generally not going to fix …\nA wrapper around a <code>StorageMap</code> and a <code>StorageValue</code> (with the …\nA wrapper around a <code>StorageNMap</code> and a <code>StorageValue</code> (with …\nInterface for creating a transaction for a call that will …\nInterface for creating a bare extrinsic.\nInterface for creating a bare extrinsic.\nInterface for creating an old-school signed transaction.\nInterface for creating a transaction.\nCommon interface for the <code>CreateTransaction</code> trait family to …\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nThe default <code>development</code> preset used to communicate with …\nPrecision of this fixed point implementation. It should be …\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nDerive [<code>Debug</code>] but do not bound any generics.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> for struct and enum.\nMarker trait used for identifying types that call the …\nDerive <code>parity_scale_codec::DecodeWithMemTracking</code> for …\nderive <code>Default</code> but do no bound any generic. Docs are at …\nA trait to handle errors and options when you are really …\nA variant of <code>Defensive</code> with the same rationale, for the …\nOne of a number of consequences of withdrawing a fungible …\nA <strong>data structure</strong> that can be deserialized from any data …\nA generalized group of dispatch types.\nReason why a dispatch call failed.\nResult of a <code>Dispatchable</code> which contains the <code>DispatchResult</code> …\nShortcut to reference the <code>Info</code> type of a <code>Dispatchable</code>.\nUn-augmented version of <code>DispatchResultWithPostInfo</code> that …\nReturn type of a <code>Dispatchable</code> which contains the …\nThe return type of a <code>Dispatchable</code> in frame. When returned …\nSingle-function utility trait with a blanket impl over …\nA lazy call (module function and argument values) that can …\nDivision by zero.\n“OR gate” implementation of <code>EnsureOrigin</code>, <code>Success</code> type …\n“OR gate” implementation of <code>EnsureOrigin</code> allowing for …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nPerforms addition that returns <code>ArithmeticError</code> instead of …\nPerforms self addition that returns <code>ArithmeticError</code> …\nPerforms division that returns <code>ArithmeticError</code> instead of …\nPerforms self division that returns <code>ArithmeticError</code> …\nExtends <code>FixedPointNumber</code> with the Ensure family functions.\nSimilar to <code>TryFrom</code> but returning an <code>ArithmeticError</code> error.\nSimilar to <code>TryInto</code> but returning an <code>ArithmeticError</code> error.\nPerforms multiplication that returns <code>ArithmeticError</code> …\nPerforms self multiplication that returns <code>ArithmeticError</code> …\nAlways fail.\nEnsure the origin is <code>None</code>. i.e. unsigned transaction.\nMeta trait that supports all immutable arithmetic <code>Ensure*</code> …\nMeta trait that supports all assigned arithmetic <code>Ensure*</code> …\nSome sort of check on the origin is performed by this …\nEnsure the origin is Root.\nEnsure the origin is Root and return the provided <code>Success</code> …\nEnsure the origin is any <code>Signed</code> origin.\nEnsure the origin is <code>Signed</code> origin from the given <code>AccountId</code>…\nPerforms subtraction that returns <code>ArithmeticError</code> instead …\nPerforms self subtraction that returns <code>ArithmeticError</code> …\nAn <code>Iterator</code> over tasks of this type used as the return …\nDeriveEq but do no bound any generic.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nThe error returned by <code>check_inherent</code>.\nAn error which could be returned by the Pay type\nSomething that can estimate at which block the next …\nA <code>Contains</code> implementation that contains every value.\nThe operation should must either proceed either exactly …\nMain entry point for certain runtime actions as e.g. …\nResources exhausted, e.g. attempt to read/write data which …\nThe transaction would exhaust the resources of current …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nThe extension.\nType to represent the version of the Extension used in …\nTransaction has been received externally.\nThe extrinsic.\nType alias for the <code>Extrinsic</code> associated type of system …\nConfines the kind of extrinsics that can be included in a …\nImplementor of <code>WeightToFee</code> such that it maps any unit of …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nMarker struct used to flag using all supported keys to …\nMarker struct used to flag using any of the supported keys …\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nFunds exist but are frozen.\nNot enough of the funds in the account are available for …\nFunds are unavailable.\nGeneral error to do with the transaction not yet being …\nA raw crypto public key wrapped by <code>RuntimeAppPublic</code>.\nA matching raw crypto <code>Signature</code> type.\nThe result type alias, used in build methods. <code>Err</code> contains …\nA trait for querying a single value from a type.\nGets the metadata for the Call - function name and pallet …\nImplement Get by returning Default for any type that …\nA <code>Dispatchable</code> function (aka transaction) that can carry …\nProvides information about a pallet’s storage versions.\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nAbstraction around hashing\nType alias for the <code>Header</code>.\nThe pallet hooks trait. This is merely an umbrella trait …\nUnique identifier of this signed extension.\nThe inherent identifier used by this inherent.\nAn identifier given to an individual payment.\nSome type that is able to be collapsed into an account ID. …\nStore the key directly.\nThe type identifying for which type info is provided.\nA lookup implementation returning the input value.\nAny additional data which was known at the time of …\nTransaction is already included in block.\nThis type is generated by the <code>pallet</code> macro.\nThe implicit data was unable to be calculated.\nThe info type.\nAn opaque set of information attached to the transaction. …\nInherent data to include in a block.\nAn identifier for an inherent.\nTrait for type that can handle the initialization of …\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nA <code>Contains</code> implementation which contains all members of …\nSimple trait for providing a filter over a reference to …\nA trait implementing integer square root.\nThe transaction is invalid.\nAn invalid transaction validity.\nSomething that can be checked to be a of sub type <code>T</code>.\nTrait to be used when types are exactly same.\nIterator for normal and draining iteration.\nKeccak-256 Hash implementation.\nOperation must not result in the account going out of …\nThe key type expected.\nThe default <code>local_testnet</code> preset used to communicate with …\nTransaction is coming from a local source.\nThe number of bytes of the module-specific <code>error</code> field …\nAuxiliary to make any given error resolve to …\nA mandatory dispatch. These kinds of dispatch are always …\nAn extrinsic with a mandatory dispatch tried to be …\nA derivative <code>EnsureOrigin</code> implementation. It mutates the …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nThe funds will be minted into the system, increasing total …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn implementation of <code>sp_runtime::traits::Block</code> to be used …\nAn unchecked extrinsic type to be used in tests.\nA custom error in a module.\nA type used exclusively by storage maps as their key type.\nThe version of the native runtime.\nTransactor will NOT pay related fees.\nAn implementation of <code>WeightToFee</code> that collects no fee.\nNoOp polling is required if pallet-referenda functionality …\nThere are no providers so the account cannot be created.\nNo validator found for the given unsigned transaction.\nA normal dispatch.\nA collection-like object that is made of values of type <code>T</code> …\nWithdrawal would cause unwanted loss of account.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nExtension trait for <code>OnInitialize</code>.\nSee <code>Hooks::on_runtime_upgrade</code>.\nHandler for when some currency “account” decreased in …\nDefines a multiplicative identity element for <code>Self</code>.\nA session handler for specific key type.\nInherents are allowed to be included.\nSome part of the balance gives the only provider reference …\nStores the encoded <code>RuntimeMetadata</code> for the native side as …\nAn operational dispatch.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Option&lt;_&gt;</code>.\nDerive [<code>Ord</code>] but do no bound any generic. Docs are at …\nThe origin type of the transaction.\nType alias for the <code>Origin</code> associated type of system config.\nMethods available on <code>frame_system::Config::RuntimeOrigin</code>.\nSome error occurred.\nThe hash type produced.\nOverflow.\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nA pallet identifier. These are per pallet and should be …\nProvides information about the pallet itself and its setup …\nThe caller origin, overarching type of all pallets origins.\nA type that can be used as a parameter in a dispatchable …\nDerive [<code>PartialEq</code>] but do not bound any generic.\nDerive [<code>PartialOrd</code>] but do not bound any generic. Docs are …\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nGeneral error to do with the inability to pay some fees …\nExplicit enum to denote if a transaction pays fee or not.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nZero-sized type used to mark things that “act like” …\nThe operation should execute with regular privilege.\nWeight information that is only available post dispatch. …\nAdditional information that is returned by <code>dispatch</code>. Can …\nThe <code>Pre</code> of the extension.\nThe type that encodes information that can be passed from …\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe type representing preset ID.\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nA pallet that provides or verifies an inherent extrinsic …\nA public key that is capable of identifying <code>AccountId</code>s.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nRanked membership data structure.\nHandler that can deal with the swap of two members.\nA wrapper for any rational number with a 128 bit numerator …\nA wrapper for any rational number with infinitely large …\nMutator which reduces a scalar by a particular amount.\nAccount balance would reduce to zero, potentially …\nMorpher to disregard the source value and replace with the …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nA submission result.\nA submission result.\nThe resultant type.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being …\nRoot origin is not allowed.\nThe rounding method to use for unsigned quantities.\nHooks for the <code>Pallet::run_to_block_with</code> function.\nA application-specific crypto.\nThe runtime’s call type.\nType alias for the <code>RuntimeCall</code> associated type of system …\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nEvery function call from your runtime has an origin, which …\nRuntime version. This should not be thought of as classic …\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nSubmit a signed transaction to the transaction pool.\nSubmit an unsigned transaction onchain with a signed …\nA <strong>data structure</strong> that can be serialized into any data …\nA message signer.\nA matching <code>Signature</code> type.\nA signature data.\nUseful functions for signed numbers (i.e. numbers that can …\nUtility trait to be implemented on payloads that can be …\nThe rounding method to use.\nProvides an implementation for signing transaction …\nA wrapper around the types which are used for signing.\nType to lookup from.\nSet of test accounts.\nGeneral error to do with the transaction being outdated …\nDifferent possible state version.\nMeans of changing one type into another in a manner …\nStruct containing data needed for a storage.\nA type representing a <em>double map</em> in storage. This …\nA trait to give information about storage.\nA non-continuous container type.\nA type representing a <em>map</em> in storage. A <em>storage map</em> is a …\nA type representing an <em>NMap</em> in storage. This structure …\nAsserts that no storage changes took place between con- …\nA type representing a <em>value</em> in storage. A <em>storage value</em> is …\nThe storage version of a pallet.\nProvides the ability to directly submit signed and unsigned\nAccount continued in existence.\nAccount continued in existence.\nA return type.\nType to lookup into.\nA general-purpose trait which defines a type of service …\nType alias for Externalities implementation used in tests.\nType alias for Externalities implementation used in tests.\nTrait for comparing two numbers with an threshold.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nInput that adds infinite number of zero after wrapped …\nMeans by which a transaction may be extended. This type …\nMinimum number of blocks a transaction will remain valid …\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nTag for a transaction. No two transactions with the same …\nInformation on a transaction’s validity and, if valid, …\nErrors that can occur while checking the validity of a …\nInformation on a transaction’s validity and, if valid, …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nHash storage keys with twox 128\nHash storage keys with twox 256\nHash storage keys with <code>concat(twox64(key), key)</code>\nThe type which is returned.\nImplementors return their meta type information.\nA trait for querying a single value from a type defined in …\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThere has been an underflow in the system. This is …\nJust like <code>From</code> except that if the source value is too big …\nJust like <code>Into</code> except that if the source value is too big …\nTransaction validity can’t be determined.\nThe asset in question is unknown.\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe transaction extension did not authorize any origin.\nAn unknown transaction validity.\nA trait for values which cannot be negative\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nOld state version, no value nodes.\nNew state version can use value nodes.\nGet the number of variants.\nThe <code>Val</code> of the extension.\nThe type that encodes information that can be passed from …\nInformation concerning a valid transaction.\nShortcut for the result value of the <code>validate</code> function.\nProvide validation for unsigned extrinsics.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Value</code>.\nTrait to get the number of variants in any enum.\nAdapter for <code>Get&lt;u32&gt;</code> to access <code>VARIANT_COUNT</code> from …\nA weakly bounded vector.\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nTransactor will pay related fees.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nThe positive difference of two numbers.\nActual weight consumed by a call or <code>None</code> which stands for …\nAdd a filter to the origin.\nList of supported API “features” along with their …\nA fast append iterator.\nCopied from <code>sp-runtime</code> and documented there.\nAssert an expression returns an error specified.\nAssert an expression returns an error specified.\nAssert that the maximum encoding size does not exceed the …\nEvaluate an expression, assert it returns an expected <code>Err</code> …\nPanic if an expression doesn’t evaluate to <code>Ok</code>.\nEvaluate any expression and assert that runtime storage …\nAssimilate the storage for this module into pre-existing …\n<code>authoring_version</code> is the version of the authorship …\nThe authorize function.\nAllows to authorize some general transactions with …\nReturn the average length of a session.\nStorage backend.\nStorage backend.\nDo a Blake2 128-bit hash and return result.\nDo a Blake2 256-bit hash and return result.\nDo a Blake2 512-bit hash and return result.\nDo a Blake2 512-bit hash and place result in <code>dest</code>.\nDo a Blake2 64-bit hash and return result.\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nBuild <code>GenesisConfig</code> from a JSON blob not using any …\nDocumentation for this macro can be found at …\nEach dispatchable may also be annotated with the …\nGet a reference to the caller (<code>CallerTrait</code> impl).\nAuthoring runtimes (<code>spec_version</code>s) that this native …\nA number of members <code>_incoming</code> just joined the set and …\nCheck how a payment has proceeded. <code>id</code> must have been …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nCompute the square root. If it overflows or is negative, …\nSubtracts two numbers, checking for underflow. If …\nChildren trie storage data. Key does not include prefix, …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nConstruct a runtime, with the given name and the given …\nReturn <code>true</code> if this “contains” the given value <code>t</code>.\nMake conversion.\nMake conversion back.\nVersion of the crate containing the pallet.\nCreate a bare extrinsic.\nCreate a bare extrinsic.\nCreate the transaction extension to be used alongside an …\nCreate an inherent out of the given <code>InherentData</code>.\nDeprecated <code>Cow::Borrowed()</code> wrapper.\nAttempt to create signed extrinsic data that encodes call …\nCreate a transaction using the call and the desired …\nReturns the current block number.\nAttempt to deserialise the value from input.\nConsume self and return the number of parts per thing.\nDoes not alter the inner value at all, but it will log …\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nSame as <code>Defensive::defensive</code>, but it takes a proof as …\nIncrease <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> plus <code>other</code> defensively.\nDecrement <code>self</code> by one defensively.\nIncrement <code>self</code> by one defensively.\nReturn the product of <code>self</code> and <code>other</code> defensively.\nReduce <code>self</code> by <code>other</code> defensively.\nReturn <code>self</code> minus <code>other</code> defensively.\nExactly the same as <code>unwrap_or</code>, but it does the defensive …\nExactly the same as <code>unwrap_or_default</code>, but it does the …\nExactly the same as <code>unwrap_or_else</code>, but it does the …\nDemote a member to the next lower rank; demoting beyond …\nThis attribute can be used to derive a full implementation …\nDeserialize this value from the given Serde deserializer.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nActually dispatch this call and return the result of it.\nDispatch a transaction with the given base origin and call.\nDrain the elements in append order.\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nEnsure that the origin <code>o</code> represents an extrinsic with …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that the origin <code>o</code> represents an unsigned extrinsic. …\nRaises a value to the power of exp, returning …\nEnsure that the origin <code>o</code> represents the root. Returns <code>Ok</code> …\nEnsure that the origin <code>o</code> represents a signed extrinsic …\nEnsure that the origin <code>o</code> represents either a signed …\nEnsure that a call to pay with the given parameters will …\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nDocumentation for this macro can be found at …\nReturn an estimate of the current session progress.\nReturn the block number at which the next session rotation …\nDocumentation for this macro can be found at …\nExtensions.\nExtensions.\nDocumentation for this macro can be found at …\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nThe accompanying extrinsics.\nDocumentation for this macro can be found at …\nDetermine if a given value should be allowed through the …\nFilter the call if caller is not root, if false is …\nFormats the value using the given formatter.\nConstruct a runtime, with the given name and the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fraction into <code>Self</code>.\nBuilds this type from an integer number.\nCast mutable reference.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCast reference.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe function that should be called.\nName of the function.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn the current value.\nReturn the current value.\nReturn a <code>CallMetadata</code>, containing function and pallet name …\nReturn all function names for the given <code>module</code>.\nReturn a <code>DispatchInfo</code>, containing relevant information of …\nReturn all module names.\nGet the default <code>GenesisConfig</code> as a JSON blob if <code>name</code> is …\nDocumentation for this macro can be found at …\nThe block header.\nThe block header.\nThe block header.\nDocumentation for this macro can be found at …\nDo something hypothetically by rolling back any changes …\nAssert something to be <em>hypothetically</em> <code>Ok</code>, without actually …\nRuntime-specific <code>AccountId</code>.\nName of the implementation of the spec. This is of little …\nHelper macro to be used in a <code>impl TransactionExtension</code> …\nVersion of the implementation of the specification.\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nReturns the in-code storage version as specified in the …\nDocumentation for this macro can be found at …\nIndex of the pallet as configured in the runtime.\nIndex on the provided list of accounts or list of all …\nAdd a member to the group at the <code>min_rank()</code>.\nDocumentation for this macro can be found at …\nInitialize the members to the given <code>members</code>.\nThe optional attribute <code>#[inject_runtime_type]</code> can be …\nFind the integer square root, returning <code>None</code> if the number …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform into an account.\nConsume <code>self</code> and return the caller.\nConsumes <code>self</code> and returns the inner raw value.\nCast mutable reference.\nCast reference.\nConvert this value amalgamated with a secondary “sub” …\nReturn whether the call is an inherent call.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns <code>Some(_)</code> if <code>self</code> is an instance of sub type <code>T</code>.\nWhether the origin is authorized to include a transaction …\nChecks if a particular instance of this <code>Task</code> variant is a …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nList the elements in append order.\nInspects the pallet’s state and enumerates tasks of this …\nReturns an iterator over all test accounts.\nDo a keccak 256-bit hash and return result.\nDo a keccak 512-bit hash and return result.\nTransaction longevity\nAttempt a lookup.\nUpper bound, in bytes, of the maximum encoded size of this …\nReturns the largest finite number this type can represent\nThe lowest rank possible in this membership organisation.\nReturns the smallest finite number this type can represent\nName of the Rust module containing the pallet.\nName of the pallet as configured in the runtime.\nTwo128 hash of name.\nCreates a new instance with the given metadata blob.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nCreate with system none origin and …\nNormalize <code>input</code> so that the sum of all elements reaches …\nNormalize self around <code>targeted_sum</code>.\nCreate a crypto <code>Pair</code> from a numeric value.\nGet account id of a <code>numeric</code> account.\nReturns the storage version of the pallet as last set in …\nA validator got disabled. Act accordingly until a new …\nThe given validator set will be used for the genesis …\nThe actual logic that calls <code>on_initialize</code> and registers …\nSession set has changed; act appropriately. Note that this …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nMacro for easily creating a new implementation of both the …\nThe ordered Patricia tree root of the given <code>input</code>.\nDocumentation for this macro can be found at …\nName of the pallet to which the function belongs.\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nCreate new implementations of the <code>Get</code> trait.\nMake a payment and return an identifier for later …\nWhether this transaction should pay fees when all is said …\nAdditional information about the <code>Dispatchable</code> which is …\nInformation regarding the type of extrinsic this is …\nDo any pre-flight stuff for a transaction after validation.\nPriority of the transaction.\nPromote a member to the next higher rank.\nA flag indicating if the transaction should be propagated …\nProvided tags\nReturn a public key that is expected to have a matching …\nA runtime-specific <code>Public</code> key for that key pair.\nReturn the rank of the given ID, or <code>None</code> if they are not a …\nAttach this attribute to an impl statement that you want …\nTransaction dependencies\nReset origin filters to default one, i.e …\nCreate with system root origin and …\nPerforms the work for this particular <code>Task</code> variant.\nBasic runtime version info.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSubmit a signed transaction to the local pool.\nSend an unsigned transaction with a signed payload.\nSerialize this value into the given Serde serializer.\nReplace the caller with caller from the other origin\nReplace the caller with caller from the other origin\nDo a sha2 256-bit hash and return result.\nConstruct and sign given payload.\nSign a message.\nCreate with system signed origin and …\nReturns the sign of the number.\nIdentifies the different Substrate runtimes. There’ll be …\nVersion of the runtime specification.\nState version to use during tests.\nState version to use during tests.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nMember <code>old</code> was swapped with <code>new</code> at <code>rank</code>.\nVersion of the system implementation used by this runtime. …\nAllows defining conditions for a task to run.\nA unique value representing this <code>Task</code> within the current …\nAllows defining an index for a task.\nAllows defining an iterator over available work items for …\nAllows defining the weight of a task.\nAllows you to define some service work that can be …\nCompare if <code>self</code> is <code>threshold</code> greater or less than <code>other</code>.\nDo everything which would be done in a dispatch_transaction…\nTop trie storage data.\nAll existing calls (dispatchables) are fully compatible …\nThe Patricia tree root of the given mapping.\nTry to convert an account ID into this type. Might not …\nSame as <code>into_sub_account_truncating</code>, but ensuring that all …\nPerform the origin check.\nAttempt to get an outer origin capable of passing …\nDo something with the caller, consuming self but returning …\nDo a XX 128-bit hash and return result.\nDo a XX 128-bit hash and place result in <code>dest</code>.\nDo a XX 256-bit hash and return result.\nDo a XX 256-bit hash and place result in <code>dest</code>.\nDo a XX 64-bit hash and return result.\nDo a XX 64-bit hash and place result in <code>dest</code>.\nReturns the static type identifier for <code>Self</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nConvert from Target back to Source.\nValidate a transaction for the transaction queue.\nValidate and prepare a transaction, ready for dispatch.\nJust validate a transaction.\nReturn the validity of the call\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nThe weight consumed by executing this extension instance …\nReturns the weight of executing this <code>Task</code>.\nDocumentation for this macro can be found at …\nThe weight of the authorization function.\nAllows to define the weight of the authorize function.\nDocumentation for this macro can be found at …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nOperation may result in account going out of existence.\nSimple amalgamation trait to collect together properties …\nThe type for the kinds of asset that are going to be paid.\nThe type by which we measure units of the currency in …\nWithdraw could not happen since the amount to be withdrawn …\nStatus of funds.\nDeposit couldn’t happen due to the amount being too low. …\nThe type by which we identify the beneficiaries to whom a …\nThe operation may be considered successful even if less …\nAccount cannot receive the assets.\nDeposit cannot happen since the account cannot be created …\nOne of a number of consequences of withdrawing a fungible …\nAn error which could be returned by the Pay type\nThe operation should must either proceed either exactly …\nSimple boolean for whether an account needs to be kept in …\nWe don’t care if the account gets killed by this …\nThe funds already exist in the system, therefore will not …\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nFunds are free, as corresponding to <code>free</code> item in Balances.\nNot enough of the funds in the account are available for …\nAn identifier given to an individual payment.\nOperation must not result in the account going out of …\nThe funds will be minted into the system, increasing total …\nHandler for when some currency “account” decreased in …\nThere has been an overflow in the system. This is …\nAn overflow would occur. This is practically unexpected, …\nCan be implemented by <code>PayFromAccount</code> using a <code>fungible</code> …\nThe operation should execute with regular privilege.\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\nThe origin of funds to be used for a deposit operation.\nAccount balance would reduce to zero, potentially …\nFunds are reserved, as corresponding to <code>reserved</code> item in …\nAccount continued in existence.\nAccount continued in existence.\nThere has been an underflow in the system. This is …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nThe asset is unknown. Usually because an <code>AssetId</code> has been …\nOne of a number of consequences of withdrawing a fungible …\nReasons for moving funds out of an account.\nThe withdraw would mean the account dying when it needs to …\nCheck how a payment has proceeded. <code>id</code> must have been …\nEnsure that a call to <code>check_payment</code> with the given …\nEnsure that a call to pay with the given parameters will …\nMake a payment and return an identifier for later …\nThe account ID that this can be transformed into.\nType of the signer.\nThe type which encodes the sender identity.\nThe AccountId used across the system.\nThis type can be converted into and possibly from an …\nA lookup implementation returning the <code>AccountId</code> from a …\nTrait for touching/creating an asset account with a …\nA non-const <code>Get</code> implementation parameterised by a <code>Currency</code> …\nAny additional data that will go into the signed payload. …\nAll of them.\nRun the <code>try_state</code>, <code>pre_upgrade</code> and <code>post_upgrade</code> checks.\nOperation may result in account going out of existence.\nSafe mode is already entered.\nSafe mode is already exited.\nCall is already paused.\nThe message was already processed.\nCall is already unpaused.\nMeans of signature verification of an application key.\nInput that adds infinite number of zero after wrapped …\nAn “executable” piece of information, used by the …\nAdapter struct for turning an <code>OrderedMembership</code> impl into …\nRuntime Origin which includes a System Origin variant …\nInterface to differentiate between Runtime Origins …\nA meta trait for arithmetic.\nA meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …\nA trait to allow calls to authorize themselves from the …\nSome amount of backing from a group. The precise …\nThe message data format is unknown (e.g. unrecognised …\nAn error type that indicates that the origin is invalid.\nThe balance of an account.\nThe type for currency units of the deposit.\nStatus of funds.\nThe resource footprint of a batch of messages.\nThe resource footprints of continuous subsets of messages.\nImplemented by pallets, allows defining logic to run prior …\nImplements <code>VerifyExistenceProof</code> using a binary merkle tree.\nBlake2-256 Hash implementation.\nA “checkable” piece of information, used by the …\nSomething which fulfills the abstract idea of a Substrate …\nSomething that can convert a <code>BlockId</code> to a number or a hash.\nSuper trait with all the attributes for a block number.\nType of <code>BlockNumber</code> to provide.\nBlock number type.\nGet current block number\nA trait to define the build function of a genesis config …\nThe function call.\nThe type of the call.\nThe type which encodes the call to be dispatched.\nType by which we can dispatch. Restricts the …\nThe call to validate\nRuntime call type, as in <code>frame_system::Config::Call</code>\nHow to unambiguously identify a call.\nThe function and pallet name of the Call.\nThe trait implemented by the overarching enumeration of …\nTrait for type that can handle incremental changes to a …\nSomething that can be checked for equality and printed out …\nExtract the digest type for a block. A “checkable” …\nReturned if <code>check</code> succeeds.\nReturned if <code>check</code> succeeds.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …")