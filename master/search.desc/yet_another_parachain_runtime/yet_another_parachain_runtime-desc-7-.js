searchState.loadedDescShard("yet_another_parachain_runtime", 7, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe item whose tokens are being forwarded\nContains the <code>Item</code> that has been imported.\nSafely access a subpath of <code>macro_magic</code>\nSafely access the <code>macro_magic</code> root based on the …\nSpecified the type of this proc macro, i.e. attribute vs …\nContains the override path that will be used instead of …\nParses a proc macro function from a <code>TokenStream2</code> expecting …\nSafely access a subpath of <code>macro_magic::__private</code>\nThe underlying proc macro function definition\nThe path of the item whose tokens are being forwarded\nRepresents the path of the item that is being imported.\nThe <code>Path</code> where the item we are importing can be found.\nContains the underlying <code>TokenStream2</code> inside the brace.\nThe path of the macro that will receive the forwarded …\nThe path of the macro that will receive the forwarded …\nGets the <code>Attribute</code> representation of this proc macro type\nReturns the specified string in snake_case\nGets the <code>&amp;&#39;static str</code> representation of this proc macro …\nA <code>TokenStream2</code> representing the raw tokens for the <code>Ident</code> …\nSpecifies the <code>Ident</code> for the <code>tokens</code> parameter of this proc …\nThe <code>Ident</code> for the <code>tokens</code> variable. Usually called <code>tokens</code> …\nRepresents the <code>Ident</code> that was used to refer to the <code>tokens</code> …\nThe internal implementation for the …\nThe cursor type that stores the progress (aka. state) of …\nEnter safe mode on a failed runtime upgrade.\nThe migration encountered a permanent error and cannot …\nHandles a failed runtime migration.\nHow to proceed after a runtime upgrade failed.\nResume extrinsic processing of the chain. This will not …\nDo now allow any transactions to be processed after a …\nThe unique identifier type of this migration.\nDon’t do anything with the cursor and let the handler …\nThe remaining weight is not enough to do anything.\nThe migration cannot decode its cursor and therefore not …\nSet the cursor to <code>Stuck</code> and keep blocking extrinsics.\nThe migration ran, inner vec contains pre_upgrade data.\nA generic migration identifier that can be used by MBMs.\nNotification handler for status updates regarding …\nSomething that can do multi step migrations.\nThis migration is a noop, do not run post_upgrade checks.\nTrait used by …\n<code>RemovePallet</code> is a utility struct used to remove all …\n<code>RemoveStorage</code> is a utility struct used to remove a storage …\nA migration that can proceed in multiple steps.\nError that can occur during a <code>SteppedMigration</code>.\nMultiple <code>SteppedMigration</code>.\nCan store the in-code pallet version on-chain.\nHandles storage migration pallet versioning.\nA helper enum to wrap the pre_upgrade bytes like an Option …\nNotifies of the completion of a runtime migration.\nThe maximal encoded length across all cursors.\nInfallibly handle a failed runtime migration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe unique identifier of this migration.\nThe maximal encoded length across all identifiers.\nAssert the integrity of the migrations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of migrations that <code>Self</code> aggregates.\nThe maximum number of steps that this migration can take.\nMigrate from the <code>PalletVersion</code> struct to the new …\nThe <code>n</code>th <code>SteppedMigration::id</code>.\nThe <code>SteppedMigration::max_steps</code> of the <code>n</code>th migration.\nCall the post-upgrade hooks of the <code>n</code>th migration.\nCall the pre-upgrade hooks of the <code>n</code>th migration.\nDo a <code>SteppedMigration::step</code> on the <code>n</code>th migration.\nDo a <code>SteppedMigration::transactional_step</code> on the <code>n</code>th …\nExecutes the versioned runtime upgrade.\nHint for whether <code>Self::step</code> should be called.\nExecutes <code>Inner::post_upgrade</code> if the migration just ran.\nHook for testing that is run after the migration is …\nExecutes pre_upgrade if the migration will run, and wraps …\nHook for testing that is run before the migration is …\nNotifies of the start of a runtime migration.\nTry to migrate as much as possible with the given weight.\nDo the next step in the MBM process.\nWrite the in-code storage version on-chain.\nSame as <code>Self::step</code>, but rolls back pending changes in the …\nAmount of weight required to make progress.\nAllows to authorize some general transactions with …\nDocumentation for this macro can be found at …\nEach dispatchable may also be annotated with the …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nAllows defining conditions for a task to run.\nAllows defining an index for a task.\nAllows defining an iterator over available work items for …\nAllows defining the weight of a task.\nAllows you to define some service work that can be …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nAllows to define the weight of the authorize function.\nDocumentation for this macro can be found at …\nThe AccountId used across the system.\nThe transaction birth block is ancient.\nAppend iterator for fast append operations.\nAn arithmetic error.\nA trait to allow calls to authorize themselves from the …\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nA bad origin.\nGeneral error to do with the transaction’s proofs (e.g. …\nThe sending address is disabled or known to be invalid.\nHash storage keys with blake2 128\nHash storage keys with <code>concat(blake2_128(key), key)</code>\nHash storage keys with blake2 256\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded vector.\nA trait to define the build function of a genesis config …\nThe call of the transaction is not expected.\nThe call type of the pallet.\nThe call to validate\nRuntime call type, as in <code>frame_system::Config::Call</code>\nCould not lookup some information that is required to …\nFailed to lookup some data.\nPerforms addition that returns <code>None</code> instead of wrapping …\nConvenience type to work around the highly unergonomic …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDerive [<code>Clone</code>] but do not bound any generic.\nConst getter for a basic type.\nConst getter for unsigned integers.\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nA wrapper around a <code>StorageMap</code> and a <code>StorageValue</code> (with the …\nA wrapper around a <code>StorageNMap</code> and a <code>StorageValue</code> (with …\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nDerive [<code>Debug</code>] but do not bound any generics.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> for struct and enum.\nMarker trait used for identifying types that call the …\nDerive <code>parity_scale_codec::DecodeWithMemTracking</code> for …\nA generalized group of dispatch types.\nReason why a dispatch call failed.\nUn-augmented version of <code>DispatchResultWithPostInfo</code> that …\nThe return type of a <code>Dispatchable</code> in frame. When returned …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nSome sort of check on the origin is performed by this …\nAn <code>Iterator</code> over tasks of this type used as the return …\nDeriveEq but do no bound any generic.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nThe error returned by <code>check_inherent</code>.\nResources exhausted, e.g. attempt to read/write data which …\nThe transaction would exhaust the resources of current …\nTransaction has been received externally.\nGeneral error to do with the transaction not yet being …\nA trait for querying a single value from a type.\nImplement Get by returning Default for any type that …\nProvides information about a pallet’s storage versions.\nThe pallet hooks trait. This is merely an umbrella trait …\nThe inherent identifier used by this inherent.\nStore the key directly.\nThe type identifying for which type info is provided.\nTransaction is already included in block.\nThis type is generated by the <code>pallet</code> macro.\nThe implicit data was unable to be calculated.\nInherent data to include in a block.\nAn identifier for an inherent.\nThe transaction is invalid.\nAn invalid transaction validity.\nTrait to be used when types are exactly same.\nIterator for normal and draining iteration.\nTransaction is coming from a local source.\nThe number of bytes of the module-specific <code>error</code> field …\nAuxiliary to make any given error resolve to …\nA mandatory dispatch. These kinds of dispatch are always …\nAn extrinsic with a mandatory dispatch tried to be …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nA type that implements Serialize, DeserializeOwned and …\nA type that can be used in runtime structures.\nA custom error in a module.\nA type used exclusively by storage maps as their key type.\nTransactor will NOT pay related fees.\nThere are no providers so the account cannot be created.\nNo validator found for the given unsigned transaction.\nA normal dispatch.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nDefines a multiplicative identity element for <code>Self</code>.\nAn operational dispatch.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Option&lt;_&gt;</code>.\nMethods available on <code>frame_system::Config::RuntimeOrigin</code>.\nSome error occurred.\nProvides information about the pallet itself and its setup …\nThe caller origin, overarching type of all pallets origins.\nA type that can be used as a parameter in a dispatchable …\nDerive [<code>PartialEq</code>] but do not bound any generic.\nGeneral error to do with the inability to pay some fees …\nExplicit enum to denote if a transaction pays fee or not.\nZero-sized type used to mark things that “act like” …\nA pallet that provides or verifies an inherent extrinsic …\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being …\nRoot origin is not allowed.\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nGeneral error to do with the transaction being outdated …\nA type representing a <em>double map</em> in storage. This …\nA trait to give information about storage.\nA non-continuous container type.\nA type representing a <em>map</em> in storage. A <em>storage map</em> is a …\nA type representing an <em>NMap</em> in storage. This structure …\nA type representing a <em>value</em> in storage. A <em>storage value</em> is …\nThe storage version of a pallet.\nA return type.\nA general-purpose trait which defines a type of service …\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\nMinimum number of blocks a transaction will remain valid …\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nTag for a transaction. No two transactions with the same …\nInformation on a transaction’s validity and, if valid, …\nErrors that can occur while checking the validity of a …\nInformation on a transaction’s validity and, if valid, …\nThe number of transactional layers has been reached, or we …\nAn error with tries.\nHash storage keys with twox 128\nHash storage keys with twox 256\nHash storage keys with <code>concat(twox64(key), key)</code>\nThe type which is returned.\nImplementors return their meta type information.\nA trait for querying a single value from a type defined in …\nSome resource (e.g. a preimage) is unavailable right now. …\nTransaction validity can’t be determined.\nThe transaction extension did not authorize any origin.\nAn unknown transaction validity.\nInformation concerning a valid transaction.\nShortcut for the result value of the <code>validate</code> function.\nProvide validation for unsigned extrinsics.\nImplements <code>QueryKindTrait</code> with <code>Query</code> type being <code>Value</code>.\nA weakly bounded vector.\nTransactor will pay related fees.\nDefines an additive identity element for <code>Self</code>.\nAdd a filter to the origin.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given item to the value in the storage.\nAppend many elements.\nAppend many elements.\nAppend many elements.\nAppend many elements.\nAppend many elements.\nAppend a single element.\nAppend a single element.\nAppend a single element.\nAppend a single element.\nAppend a single element.\nA fast append iterator.\nThe authorize function.\nAllows to authorize some general transactions with …\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nDocumentation for this macro can be found at …\nEach dispatchable may also be annotated with the …\nGet a reference to the caller (<code>CallerTrait</code> impl).\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nConsume self to return <code>Some</code> equivalent value of <code>Option&lt;T&gt;</code>.\nMultiplies two numbers, checking for underflow or …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove items from the map matching a <code>partial_key</code>…\nAttempt to remove items from the map matching a <code>first_key</code> …\nAttempt to remove items from the map matching a <code>partial_key</code>…\nCombine two instances into one, as a best effort. This …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nReturn the count.\nReturn the count.\nThe key used to store the counter of the map.\nThe key used to store the counter of the map.\nVersion of the crate containing the pallet.\nCreate an inherent out of the given <code>InherentData</code>.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nDEPRECATED: Use <code>Self::current_storage_version</code> instead.\nAttempt to deserialise the value from input.\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDrain the elements in append order.\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map with prefix key <code>kp</code> and …\nRemove all elements from the map with first key <code>k1</code> and …\nRemove all elements from the map with prefix key <code>kp</code> and …\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nPerform the origin check.\nThe same as <code>ensure_origin</code> except that Root origin will …\nThe same as <code>ensure_origin</code> except that Root origin will …\nThe same as <code>ensure_origin</code> except that Root origin will …\nThe same as <code>ensure_origin</code> except that Root origin will …\nThe same as <code>ensure_origin</code> except that Root origin will …\nThe same as <code>ensure_origin</code> except that Root origin will …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturns if the reason for the invalidity was block …\nDoes the value (explicitly) exist in storage?\nReturns if the storage version key for the given pallet …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nFilter the call if caller is not root, if false is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCast mutable reference.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCast reference.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn the current value.\nReturn the current value.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the …\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the map.\nLoad the value from the provided storage instance.\nGet the storage version of the given pallet from the …\nDocumentation for this macro can be found at …\nGet the storage key.\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nDocumentation for this macro can be found at …\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nReturns the in-code storage version as specified in the …\nDocumentation for this macro can be found at …\nIndex of the pallet as configured in the runtime.\nDocumentation for this macro can be found at …\nInitialize the counter with the actual number of items in …\nInitialize the counter with the actual number of items in …\nThe optional attribute <code>#[inject_runtime_type]</code> can be …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and return the caller.\nCast mutable reference.\nCast reference.\nReturn whether the call is an inherent call.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nChecks if a particular instance of this <code>Task</code> variant is a …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nList the elements in append order.\nInspects the pallet’s state and enumerates tasks of this …\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the counted map after a …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all keys in the counted map.\nEnumerate all keys in the map in no particular order.\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map in no particular …\nEnumerate all keys in the map in no particular order.\nEnumerate all keys in the map in no particular order.\nEnumerate all keys in the map after a specified …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all elements in the map with prefix key <code>kp</code> in no …\nEnumerate all elements in the map with first key <code>k1</code> in no …\nEnumerate all elements in the map with prefix key <code>kp</code> in no …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nEnumerate all elements in the map with first key <code>k1</code> after …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nIterate over values that share the first key.\nIterate over values that share the first key.\nIterate over values that share the first key.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nClear the storage value.\nTransaction longevity\nThe prefix used to generate the key of the map.\nThe prefix used to generate the key of the map.\nUpper bound, in bytes, of the maximum encoded size of this …\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nMigrate an item with the given <code>key1</code> and <code>key2</code> from defunct …\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nName of the Rust module containing the pallet.\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value under the given keys.\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value\nMutate the value under a key. Deletes the item if mutated …\nMutate the value under the given keys. Deletes the item if …\nMutate the value under the given keys. Deletes the item if …\nMutate the value under a key. Deletes the item if mutated …\nMutate the value under the given keys. Deletes the item if …\nMutate the value. Deletes the item if mutated to a <code>None</code>.\nMutate the value under a key iff it exists. Do nothing and …\nMutate the value under a key iff it exists. Do nothing and …\nName of the pallet as configured in the runtime.\nTwo128 hash of name.\nCreates a new instance of <code>Self</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nCreate with system none origin and …\nReturns the storage version of the pallet as last set in …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nDocumentation for this macro can be found at …\n<strong>Rust-Analyzer users</strong>: See the documentation of the Rust …\nValidate the call right before dispatch.\nValidate the call right before dispatch.\nValidate the call right before dispatch.\nValidate the call right before dispatch.\nValidate the call right before dispatch.\nValidate the call right before dispatch.\nValidate the call right before dispatch.\nPriority of the transaction.\nA flag indicating if the transaction should be propagated …\nProvided tags\nStore a value under this key into the provided storage …\nPut this storage version for the given pallet into the …\nAttach this attribute to an impl statement that you want …\nRemove the value under a key.\nRemove the value under the given keys.\nRemove the value under the given keys.\nRemove the value under a key.\nRemove the value under the given keys.\nRemove all values in the map.\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values of the storage in the overlay and up to …\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values under <code>k1</code> in the overlay and up to <code>limit</code> …\nRemove all values starting with <code>partial_key</code> in the overlay …\nTransaction dependencies\nReset origin filters to default one, i.e …\nCreate with system root origin and …\nPerforms the work for this particular <code>Task</code> variant.\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore a value under this key into the provided storage …\nReplace the caller with caller from the other origin\nReplace the caller with caller from the other origin\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nCreate with system signed origin and …\nDocumentation for this macro can be found at …\nReturns the storage key for a storage version.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn the same error but without the attached message.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nSwap the values of two key-pairs.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake a value from storage, removing it afterwards.\nAllows defining conditions for a task to run.\nA unique value representing this <code>Task</code> within the current …\nAllows defining an index for a task.\nAllows defining an iterator over available work items for …\nAllows defining the weight of a task.\nAllows you to define some service work that can be …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate a value from some previous type (<code>O</code>) to the …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the double map.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the map.\nTry to get the underlying value from the provided storage …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the value under the given keys when the closure …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the value if closure returns <code>Ok</code>\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the value if closure returns <code>Ok</code>. Deletes the item …\nPerform the origin check.\nThe same as <code>try_origin</code> except that Root origin will always …\nThe same as <code>try_origin</code> except that Root origin will always …\nThe same as <code>try_origin</code> except that Root origin will always …\nThe same as <code>try_origin</code> except that Root origin will always …\nThe same as <code>try_origin</code> except that Root origin will always …\nThe same as <code>try_origin</code> except that Root origin will always …\nAttempt to get an outer origin capable of passing …\nDo something with the caller, consuming self but returning …\nReturns the static type identifier for <code>Self</code>.\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturn the validity of the call\nDocumentation for this macro can be found at …\nDocumentation for this macro can be found at …\nReturns if the reason for the invalidity was a mandatory …\nReturns the weight of executing this <code>Task</code>.\nDocumentation for this macro can be found at …\nThe weight of the authorization function.\nAllows to define the weight of the authorize function.\nDocumentation for this macro can be found at …\nInitiate <code>ValidTransaction</code> builder object with a particular …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nThe accuracy of this type.\nAn opaque 32-byte cryptographic identifier.\nIt’s a 20 byte representation.\nIt’s a 32 byte representation.\nAll extrinsics are allowed to be included in this block.\nSignature verify that can work with any known signature …\nThe result of applying of an extrinsic.\nSame as <code>ApplyExtrinsicResult</code> but augmented with …\nAn arithmetic error.\nAn arithmetic error.\nArithmetic errors.\nA bad origin.\nA bad origin.\nAccount cannot exist with the funds that would be given.\nAccount cannot receive the assets.\nBorrowed data.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nSomething that can build the genesis storage of a module.\nComplex storage builder stuff.\nAccount cannot be created.\nAccount cannot be created for a held balance.\nFailed to lookup some data.\nFailed to lookup some data.\nCommit the transaction.\nA message from the runtime to the consensus engine. This …\nConsensus engine unique ID.\nAt least one consumer is remaining so the account cannot …\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nThe state is corrupt; this is generally not going to fix …\nA clone-on-write smart pointer.\nType which has a particular kind of crypto associated with …\nAn identifier for a specific cryptographic algorithm used …\nPrecision of this fixed point implementation. It should be …\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\nGeneric header digest.\nDigest item that is able to encode/decode ‘system’ …\nReason why a dispatch call failed.\nResult of a <code>Dispatchable</code> which contains the <code>DispatchResult</code> …\nThis type specifies the outcome of dispatching a call to a …\nThis is the legacy return type of <code>Dispatchable</code>. It is …\nReturn type of a <code>Dispatchable</code> which contains the …\nDivision by zero.\nAn ECDSA/SECP256k1 signature.\nAn SECP256k1/ECDSA identity (actually, the Blake2 hash of …\nAn Ed25519 signature.\nAn Ed25519 identity.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe encoded justification specific to a consensus engine.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nAn ECDSA/SECP256k1 signature but with a different address …\nSame as <code>Ecdsa</code> but its account id is derived based off its …\nResources exhausted, e.g. attempt to read/write data which …\nResources exhausted, e.g. attempt to read/write data which …\nConfines the kind of extrinsics that can be included in a …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nFunds exist but are frozen.\nFunds are unavailable.\nAn identifier for this application-specific key type.\nIt’s an account ID (pubkey).\nIt’s an account index.\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nAn abstraction over justification for a block’s validity …\nCollection of justifications for a given block, multiple …\nAn identifier for a type of cryptographic key.\nA value of type <code>L</code>.\nToo many transactional layers have been spawned.\nThe number of bytes of the module-specific <code>error</code> field …\nA custom error in a module.\nA custom error in a module.\nReason why a pallet call failed.\nA multi-format address wrapper for on-chain accounts.\nSignature verify that can work with any known signature …\nPublic key for any known crypto algorithm.\nA transactional layer was expected, but does not exist.\nThere are no providers so the account cannot be created.\nThere are no providers so the account cannot be created.\nWithdrawal would cause unwanted loss of account.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nInherents are allowed to be included.\nSome part of the balance gives the only provider reference …\nSimple blob to hold an extrinsic without committing to its …\nSimple blob that hold a value in an encoded form without …\nSome error occurred.\nSome other thing. Unsupported and experimental.\nSome error occurred.\nOverflow.\nOwned data.\nThe pair key type of this crypto.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA pre-runtime digest.\nThe Proof Of Possession the corresponding private key.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nA wrapper for any rational number with a 128 bit numerator …\nIt’s some arbitrary raw bytes.\nA value of type <code>R</code>.\nRollback the transaction.\nRoot origin is not allowed.\nRoot origin is not allowed.\nThe rounding method to use for unsigned quantities.\nRuntime interface for an application’s public key.\nAn indication for the light clients that the runtime …\nDeprecated alias to improve upgrade experience\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nPut a Seal on it. This is only used by native code, and is …\nA <strong>data structure</strong> that can be serialized into any data …\nThe signature that will be generated when signing with the …\nAn Sr25519 signature.\nAn Sr25519 identity.\nDifferent possible state version.\nStruct containing data needed for a storage.\nChild trie storage data.\nSimple 4 byte identifier.\nAn error to do with tokens.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nThere are too many consumers so the account cannot be …\nDescribes on what should happen with a storage transaction.\nThe number of transactional layers has been reached, or we …\nThe number of transactional layers has been reached, or we …\nErrors related to transactional storage layers.\nAn error with tries.\nAn error with tries.\nThe error type used as return type in try runtime hooks.\nProvide a simple 4 byte identifier for a type.\nSome resource (e.g. a preimage) is unavailable right now. …\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThe asset in question is unknown.\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nOld state version, no value nodes.\nNew state version can use value nodes.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nA weakly bounded vector.\nPrecision of this fixed point implementation.\nPrecision of this fixed point implementation.\nPrecision of this fixed point implementation.\nPrecision of this fixed point implementation.\nPrecision of this fixed point implementation.\nPrecision of this fixed point implementation.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nReturns all public keys for this application in the …\nAppend a justification. Returns false if a justification …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nChecks that <code>$x</code> is equal to <code>$y</code> with an error rate of <code>$error</code>.\nSame as <code>assert_eq_error_rate</code>, but intended to be used with …\nAssimilate the storage for this module into pre-existing …\nBuild a bounded btree-map from the given literals.\nBuild a bounded vec from the given literals.\nCreate the module genesis storage into the given <code>storage</code> …\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nAddition. Simply tries to unify the denominators and add …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nChecked multiplication for integer type <code>N</code>. Equal to …\nChecked multiplication for integer type <code>N</code>. Equal to …\nChecked multiplication for integer type <code>N</code>. Equal to …\nChecked multiplication for integer type <code>N</code>. Equal to …\nChecked multiplication for integer type <code>N</code>. Equal to …\nChecked multiplication for integer type <code>N</code>. Equal to …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nCompute the square root. If it overflows or is negative, …\nCompute the square root. If it overflows or is negative, …\nCompute the square root. If it overflows or is negative, …\nCompute the square root. If it overflows or is negative, …\nCompute the square root. If it overflows or is negative, …\nSubtraction. Simply tries to unify the denominators and …\nAssociated child info for a child trie.\nChildren trie storage data. Key does not include prefix, …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nCalls a given macro a number of times with a set of fixed …\nDeprecated <code>Cow::Borrowed()</code> wrapper.\nProvides some utilities to define a piecewise linear …\nReturn the denominator.\nChild data for storage.\nTry to decode this <code>OpaqueValue</code> into the given concrete …\nConsume self and return the number of parts per thing.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nDeserialize this value from the given Serde deserializer.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nSCALE encode this type to bytes, possibly with the help of …\nModule specific error value.\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part.\nReturns the fractional part.\nReturns the fractional part.\nReturns the fractional part.\nReturns the fractional part.\nReturns the fractional part.\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nCreates a clone-on-write pointer from a reference to …\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nReturns the argument unchanged.\nCreates a clone-on-write pointer from an owned instance of …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nMoves the string into a <code>Cow::Owned</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fraction into <code>Self</code>.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value for <code>Rounding</code> which would give the same …\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nBuild from a raw <code>n/d</code>. This could lead to / 0 if not …\nGenerate a public/private pair with an optional <code>seed</code> and …\nGenerate proof of legitimacy for the corresponding public …\nGeneric implementations of <code>crate::traits::Header</code>, …\nReturn the encoded justification for the given consensus …\nImplement <code>OpaqueKeys</code> for a described struct.\nHelper macro to be used in a <code>impl TransactionExtension</code> …\nModule index, matching the metadata module index.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nConsumes <code>self</code> and returns the inner raw value.\nExtract the value of an either over two equivalent types.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nConvert into the inner type.\nConvert the inner value to an iterator.\nReturn a copy of the encoded justification for the given …\nExtracts the owned data.\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nChecks if the number is one.\nChecks if the number is one.\nChecks if the number is one.\nChecks if the number is one.\nChecks if the number is one.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturn true if the value is the <code>Right</code> variant.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nIf it is zero or not\nBorrow the inner value as an iterator.\nReturn an iterator over the justifications.\nMutably borrow the inner value as an iterator.\nA saturating add that assumes <code>self</code> and <code>other</code> have the same …\nA saturating subtraction that assumes <code>self</code> and <code>other</code> have …\nGet the least common divisor of <code>self</code> and <code>other</code>.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nRuntime types that existed in old API versions.\nA list of logs in the digest.\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nOptional error message.\nCreate a <code>Morph</code> and/or <code>TryMorph</code> impls with a simple …\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nReturn the numerator.\nNegate the value.\nNegate the value.\nNegate the value.\nNegate the value.\nCreate a new <code>Justifications</code> instance with the given …\nCreate a new <code>OpaqueValue</code> using the given encoded …\nA collection of higher lever helpers for offchain calls.\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nOne\nAdditional information about the <code>Dispatchable</code> which is …\nPrint something that implements <code>Printable</code> from the runtime.\nTypes for merkle tries compatible with the runtime.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nRemove the encoded justification for the given consensus …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturns the number rounded to the nearest integer. Rounds …\nReturns the number rounded to the nearest integer. Rounds …\nReturns the number rounded to the nearest integer. Rounds …\nReturns the number rounded to the nearest integer. Rounds …\nReturns the number rounded to the nearest integer. Rounds …\nReturns the number rounded to the nearest integer. Rounds …\nA logger that can be used to log from the runtime.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nConsume self to return an equivalent value of <code>T</code>.\nConsume self to return an equivalent value of <code>T</code>.\nConsume self to return an equivalent value of <code>T</code>.\nConsume self to return an equivalent value of <code>T</code>.\nConsume self to return an equivalent value of <code>T</code>.\nConsume self to return an equivalent value of <code>T</code>.\nSaturating absolute value.\nSaturating absolute value.\nSaturating absolute value.\nSaturating absolute value.\nSaturating absolute value.\nSaturating absolute value.\nIncrement self by some <code>amount</code>, saturating.\nIncrement self by some <code>amount</code>, saturating.\nIncrement self by some <code>amount</code>, saturating.\nIncrement self by some <code>amount</code>, saturating.\nIncrement self by some <code>amount</code>, saturating.\nIncrement self by some <code>amount</code>, saturating.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates self from an integer number <code>int</code>.\nCreates self from an integer number <code>int</code>.\nCreates self from an integer number <code>int</code>.\nCreates self from an integer number <code>int</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nIncrement self by one, saturating.\nIncrement self by one, saturating.\nIncrement self by one, saturating.\nIncrement self by one, saturating.\nIncrement self by one, saturating.\nIncrement self by one, saturating.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nIncrement self by one, saturating at the numeric bounds …\nIncrement self by one, saturating at the numeric bounds …\nIncrement self by one, saturating at the numeric bounds …\nIncrement self by one, saturating at the numeric bounds …\nIncrement self by one, saturating at the numeric bounds …\nIncrement self by one, saturating at the numeric bounds …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nDecrement self by some <code>amount</code>, saturating at zero.\nDecrement self by some <code>amount</code>, saturating at zero.\nDecrement self by some <code>amount</code>, saturating at zero.\nDecrement self by some <code>amount</code>, saturating at zero.\nDecrement self by some <code>amount</code>, saturating at zero.\nDecrement self by some <code>amount</code>, saturating at zero.\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSerialize this value into the given Serde serializer.\nSign the given message with the corresponding private key …\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nIf defined, values in state of size bigger or equal to …\nUtility function to declare string literals backed by an …\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nTesting utilities.\nConvert <code>self</code> to a similar rational number where …\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nAcquires a mutable reference to the owned form of the data.\nReturns <code>Self</code> as raw vec.\nTop trie storage data.\nPrimitives for the runtime modules.\nTransaction validity interface.\nReturns the integer part.\nReturns the integer part.\nReturns the integer part.\nReturns the integer part.\nReturns the integer part.\nReturns the integer part.\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nProvides a type that wraps another type and provides a …\nReturns the left value\nReturns the right value\nVerify that the given signature matches the given message …\nVerify a signature on an encoded value in a lazy manner. …\nVerify that the given proof of possession is valid for the …\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nZero.\nApplication-specific cryptographic object.\nApplication-specific key pair.\nApplication-specific public key.\nApplication-specific signature and Proof Of Possession\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nTrait used for types that are really just a fixed-length …\nIdentifier of the crypto type of this application-specific …\nType which has a particular kind of crypto associated with …\nAn identifier for a specific cryptographic algorithm used …\nUsed for immutable dereferencing operations, like <code>*v</code>.\nDerivable key trait.\nAn error when deriving a key.\nA since derivation junction description. It is the single …\nThe wrapped type which is just a plain instance of <code>Pair</code>.\nThe wrapped type which is just a plain instance of <code>Public</code>.\nThe wrapped type which is just a plain instance of …\nHard (“hardened”) derivation. Public keys do not have …\nIdentifier for application-specific key type.\nAn identifier for this application-specific key type.\nThe inner type it is wrapping.\nThe overall format was invalid (e.g. the seed phrase …\nThe supplied password was invalid.\nThe derivation path was invalid (e.g. contains soft …\nThe seed phrase provided is not a valid BIP39 phrase.\nThe seed is invalid (bad content).\nThe seed has an invalid length.\nOne type is wrapped by another.\nAn identifier for a type of cryptographic key.\nThe “length” of the values of this type, which is …\nType which implements Hash in std, not when no-std (std …\nTrait suitable for typical cryptographic PKI key pair type.\nThe corresponding key pair type in this application scheme.\nThe pair key type of this crypto.\nThe corresponding proof of possession type in this …\nThe type used to represent proof of possession and …\nThe Proof Of Possession the corresponding private key.\nThe Proof Of Possession the corresponding private key.\nPair which is able to generate proof of possession.\nPair which is able to verify proof of possession.\nTrait suitable for cryptographic public keys.\nThe corresponding public key type in this application …\nThe type which is used to encode a public key.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nRuntime interface for an application’s public key.\nRuntime interface for a public key.\nAn error with the interpretation of a secret.\nThe type used to (minimally) encode the data required to …\nTrait suitable for cryptographic signatures.\nThe corresponding signature type in this application …\nThe type used to represent a signature. Can be created …\nThe signature that will be generated when signing with the …\nThe signature that will be generated when signing with the …\nSoft (vanilla) derivation. Public keys have a …\nA soft key was found in the path (and is unsupported).\nKey that can be encoded to/from SS58.\nThe resulting type after dereferencing.\nSimilar to <code>From</code>, except that the onus is on the part of …\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nOpposite of <code>IsWrappedBy</code> - denotes a type which is a simple …\nReturns all public keys for the given key type in the …\nReturns all public keys for this application in the …\nDeclares <code>Public</code>, <code>Pair</code>, <code>Signature</code> and <code>ProofOfPossession</code> …\nDeclares <code>Pair</code> type which is functionally equivalent to …\nGet a reference to the inner type that is wrapped.\nReturn a slice filled with raw data.\nBandersnatch VRF application crypto types.\nBLS12-381 crypto applications.\nDereferences the value.\nDerive a child key from a series of given junctions.\nDerive a child key from a series of given junctions.\nEcdsa crypto types.\nECDSA and BLS12-381 paired crypto applications.\nEd25519 crypto types.\nA format filterer, can be used to ensure that …\nA format filterer, can be used to ensure that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nA new instance from the given slice that should be …\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check …\nSome if the string is a properly encoded SS58Check …\nSome if the string is a properly encoded SS58Check …\nSome if the string is a properly encoded SS58Check …\nGenerate a public/private pair for the given key type with …\nGenerate a public/private pair with an optional <code>seed</code> and …\nGenerates the necessary proof(s) usually as a signature or …\nGenerate proof of legitimacy for the corresponding public …\nGenerate proof of possession.\nCreate a new hard (hardened) DeriveJunction from a given, …\nConsume self to return a hard derive junction with the …\nGet a reference to the inner junction id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the junction is hard.\nReturn <code>true</code> if the junction is soft.\nKnown key types; this also functions as a global registry …\nGet the public key.\nSign a message.\nSign the given message with the corresponding private key …\nSign the given message with the corresponding private key …\nCreate a new soft (vanilla) DeriveJunction from a given, …\nConsume self to return a soft derive junction with the …\nSr25519 crypto types.\nReturn a vec filled with raw data.\nReturns <code>Self</code> as raw vec.\nReturns <code>Self</code> as raw vec.\nReturn a <code>Vec&lt;u8&gt;</code> filled with raw data.\nReturn the ss58-check string for this key.\nReturn the ss58-check string for this key.\nReturn the ss58-check string for this key.\nReturn the ss58-check string for this key.\nConvert from an instance of <code>T</code> to Self. This is not …\nConsume self to return the chain code.\nVerify a signature on a message. Returns true if the …\nVerify that the given signature matches the given message …\nVerify that the given signature matches the given message …\nVerifies that the given proof is valid for the …\nVerify that the given proof of possession is valid for the …\nVerify proof of possession.\nGenerate the given code if the pair type is available.\nImplement bidirectional <code>From</code> and on-way <code>AsRef</code>/<code>AsMut</code> for …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nIdentifier used to match public keys against …\nThe byte length of serialized pre-output.\nThe byte length of serialized public key.\nBandersnatch secret key.\nProof of Possession is the same as Signature for …\nBandersnatch public key.\nThe byte length of secret key seed.\nThe byte length of serialized signature.\nBandersnatch Schnorr signature.\nDerive a child key from a series of given (hard) junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGenerate VRF output bytes for the given <code>input</code>.\nBandersnatch Ring-VRF types and operations.\nProduce a ring-vrf signature.\nGet the key seed.\nReturn a vector filled with the seed.\nBandersnatch VRF types and operations.\n<code>RingVrfSignature</code> serialized size.\n<code>RingVerifierKey</code> serialized size.\nContext used to construct ring prover and verifier.\nRing verifier key\nRing VRF signature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the keyset max size.\nBuild an dummy instance for testing purposes.\nVRF pre-output.\nRing signature.\nGet ring prover for the key at index <code>public_idx</code> in the …\nVerify a ring-vrf signature.\nGet ring verifier for the <code>public_keys</code> set.\nBuild <code>RingVerifierKey</code> for lazy <code>RingVerifier</code> construction.\nConstructs a <code>RingVerifier</code> from a <code>VerifierKey</code> without a …\n<code>VrfSignature</code> serialized size.\nVRF input to construct a <code>VrfPreOutput</code> instance and …\nVRF pre-output derived from <code>VrfInput</code> using a <code>VrfSecret</code>.\nData to be signed via one of the two provided vrf flavors.\nVRF signature.\nAdditional data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate VRF output bytes.\nConstruct a new VRF input.\nConstruct a new data to be signed.\nVRF pre-output.\nVRF proof.\nVRF input.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic BLS ProofOfpossession\nA key pair.\nAn identifier used to match public keys against BLS12-381 …\nSignature serialized size (for back cert) + Nugget BLS PoP …\nPublic key serialized size\nBLS12-381 key pair.\nBLS12-381 Proof Of Possesion.\nBLS12-381 public key.\nSignature serialized size\nBLS12-381 signature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate proof of possession for BLS12 curves.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGet the seed for this key.\nVerify both proof of ownership (back cert) and proof of …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against ecdsa keys\nAn ecdsa key pair using the keccak algorithm for hashing …\nProof of Possession is the same as Signature.\nThe ECDSA compressed public key.\nA signature (a 512-bit value, plus 8 bits for recovery ID).\nThe byte length of public key\nAn ecdsa key pair using the blake2 algorithm for hashing …\nProof of Possession is the same as Signature.\nThe ECDSA compressed public key.\nThe public key that will be recovered from the signature.\nA signature that allows recovering the public key from a …\nThe byte length of signature\nA signature (a 512-bit value, plus 8 bits for recovery ID).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nRecover the public key from this signature and a message.\nRecover the public key from this signature and a …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against BLS12-381 …\nSize of Proof Of Possession for (ECDSA, BLS12-381) type …\nAggregate public key size.\n(ECDSA,BLS12-381) key-pair pair.\n(ECDSA, (BLS12-381, BLS12-381))\n(ECDSA,BLS12-381) public key pair.\nAggregate signature serialized size.\n(ECDSA,BLS12-381) signature pair.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against ed25519 …\nGeneric byte array holding some crypto-related raw data.\nThe byte length of public key\nA key pair.\nProof of Possession is the same as Signature for ed25519\nA public key.\nThe byte length of signature\nA signature.\nGeneric encoded signature.\nDummy implementation. Returns an empty vector.\nDummy implementation. Returns an empty vector.\nDummy implementation. Returns an empty vector.\nReturn a slice filled with raw data.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the given full public key.\nA new instance from an H256.\nA new instance from an H512.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct from raw array.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGet the public key.\nRecover the public key from this signature and a message.\nRecover the public key from this signature and a message.\nRecover the public key from this signature and a …\nGet the seed for this key.\nDummy implementation. Returns <code>None</code>.\nDummy implementation. Returns <code>None</code>.\nSign a message.\nConstruct from raw array.\nReturn a vec filled with raw data.\nDummy implementation. Returns <code>false</code>.\nDummy implementation. Returns <code>false</code>.\nVerify a signature on a message.\nKey type for controlling an account in a Substrate …\nKey type for Aura module, built-in. Identified as <code>aura</code>.\nKey type for AuthorityDiscovery module, built-in. …\nKey type for Babe module, built-in. Identified as <code>babe</code>.\nKey type for BEEFY module.\nA key type ID useful for tests.\nKey type for Grandpa module, built-in. Identified as <code>gran</code>.\nKey type for ImOnline module, built-in. Identified as <code>imon</code>.\nKey type for Mixnet module, used to sign key-exchange …\nKey type for Sassafras module, built-in. Identified as <code>sass</code>…\nKey type for staking, built-in. Identified as <code>stak</code>.\nA key type for signing statements\nConcrete implementation of Hasher using Blake2b 256-bit …\nTrait used for types that are really just a fixed-length …\nHex-serialized shim for <code>Vec&lt;u8&gt;</code>.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for signed integers.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for unsigned integers.\n<code>Debug</code> log level.\n<code>Debug</code> log level filter.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> for struct and enum.\nMarker trait used for identifying types that call the …\nDerive <code>parity_scale_codec::DecodeWithMemTracking</code> for …\nA since derivation junction description. It is the single …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\n<code>Error</code> log level.\n<code>Error</code> log level filter.\nThe error type that gets returned when a collection can’…\nA trait for querying a single value from a type.\nImplement Get by returning Default for any type that …\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nHard (“hardened”) derivation. Public keys do not have …\nTrait describing an object that can hash a slice of bytes. …\n<code>Info</code> log level.\n<code>Info</code> log level filter.\nConcrete implementation of Hasher using Keccak 256-bit …\nThe “length” of the values of this type, which is …\nThe length in bytes of the <code>Hasher</code> output.\nLog level filter that expresses which log levels should be …\nThe maximum number of bytes that can be allocated at one …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\n<code>Off</code> log level filter.\nStores the encoded <code>RuntimeMetadata</code> for the native side as …\nSimple blob to hold a <code>PeerId</code> without committing to its …\nThe output type of the <code>Hasher</code>\nTrait suitable for typical cryptographic PKI key pair type.\nThe type used to represent proof of possession and …\nTrait suitable for cryptographic public keys.\nThe type which is used to encode a public key.\nA log level matching the one from <code>log</code> crate.\nThe type used to (minimally) encode the data required to …\nThe type used to represent a signature. Can be created …\nSoft (vanilla) derivation. Public keys have a …\nWhat to use to build <code>HashMap</code>s with this <code>Hasher</code>.\nSimple 4 byte identifier.\n<code>Trace</code> log level.\n<code>Trace</code> log level filter.\nTry and collect into a collection <code>C</code>.\nThe type which is returned.\nProvide a simple 4 byte identifier for a type.\nA trait for querying a single value from a type defined in …\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nThe void type - it cannot exist.\n<code>Warn</code> log level.\n<code>Warn</code> log level filter.\nReturn a slice filled with raw data.\nVRFs backed by Bandersnatch, an elliptic curve built over …\nDo a Blake2 128-bit hash and return result.\nDo a Blake2 256-bit hash and return result.\nDo a Blake2 512-bit hash and return result.\nDo a Blake2 512-bit hash and place result in <code>dest</code>.\nDo a Blake2 64-bit hash and return result.\nBLS (Boneh–Lynn–Shacham) Signature along with …\nBuild a bounded btree-map from the given literals.\nBuild a bounded vec from the given literals.\nProvides a const function for converting a hex string to a …\nHash conversion. Used to convert between unbound …\nCryptographic utilities.\nGeneric byte array which can be specialized with a marker …\nAttempt to deserialise the value from input.\nExecutes the given code when the current scope is dropped.\nDerive a child key from a series of given junctions.\nSimple ECDSA secp256k1 API.\nSimple Ed25519 API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nA new instance from the given slice that should be …\nGenerates a macro for checking if a certain feature is …\nReturn the current value.\nReturn the current value.\nA fixed hash type.\nCompute the hash of the provided slice of bytes returning …\nProvides a const array from given string literal.\nWrapper type for byte collections that outputs hex.\nMacro for creating <code>Maybe*</code> marker traits.\nMacro for creating <code>Maybe*</code> marker traits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo a keccak 256-bit hash and return result.\nDo a keccak 512-bit hash and return result.\nInitialize a key-value collection from array.\nUpper bound, in bytes, of the maximum encoded size of this …\nCreate new <code>OpaquePeerId</code>\nOffchain workers types\nAPI for using a pair of crypto schemes together.\nCreate new implementations of the <code>Get</code> trait.\nUtilities for proving possession of a particular public key\nGet the public key.\nDo a sha2 256-bit hash and return result.\nSign a message.\nTypes that should only be used for testing!\nReturn a vec filled with raw data.\nReturn a <code>Vec&lt;u8&gt;</code> filled with raw data.\nShareable Substrate traits.\nConsume self and try to collect the results into <code>C</code>.\nDo a XX 128-bit hash and return result.\nDo a XX 128-bit hash and place result in <code>dest</code>.\nDo a XX 256-bit hash and return result.\nDo a XX 256-bit hash and place result in <code>dest</code>.\nDo a XX 64-bit hash and return result.\nDo a XX 64-bit hash and place result in <code>dest</code>.\nAn unsigned fixed-size integer.\nVerify a signature on a message. Returns true if the …\nMacro for exporting functions from wasm in with the …\nIdentifier used to match public keys against …\nThe byte length of serialized pre-output.\nThe byte length of serialized public key.\nBandersnatch secret key.\nProof of Possession is the same as Signature for …\nBandersnatch public key.\nThe byte length of secret key seed.\nThe byte length of serialized signature.\nBandersnatch Schnorr signature.\nSignature serialized size (for back cert) + Nugget BLS PoP …\nPublic key serialized size\nA key pair.\nA generic BLS ProofOfpossession\nA public key.\nSignature serialized size\nA generic BLS signature.\nBLS-377 specialized types\nBLS-381 specialized types\nAn identifier used to match public keys against BLS12-377 …\nSignature serialized size (for back cert) + Nugget BLS PoP …\nPublic key serialized size\nBLS12-377 key pair.\nBLS12-377 Proof Of Possesion.\nBLS12-377 public key.\nSignature serialized size\nBLS12-377 signature.\nAn identifier used to match public keys against BLS12-381 …\nSignature serialized size (for back cert) + Nugget BLS PoP …\nPublic key serialized size\nBLS12-381 key pair.\nBLS12-381 Proof Of Possesion.\nBLS12-381 public key.\nSignature serialized size\nBLS12-381 signature.\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for signed integers.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for unsigned integers.\nThe error type that gets returned when a collection can’…\nA trait for querying a single value from a type.\nImplement Get by returning Default for any type that …\nConverts <code>Get&lt;I&gt;</code> to <code>Get&lt;R&gt;</code> using <code>Into</code>.\nTry and collect into a collection <code>C</code>.\nThe type which is returned.\nA trait for querying a single value from a type defined in …\nA weakly bounded vector.\nBuild a bounded btree-map from the given literals.\nTraits, types and structs to support a bounded <code>BTreeSet</code>.\nBuild a bounded vec from the given literals.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the current value.\nReturn the current value.\nReturns the converted value by:\nCalls <code>U::from(self)</code>.\nCreate new implementations of the <code>Get</code> trait.\nConsume self and try to collect the results into <code>C</code>.\nTraits, types and structs to support putting a bounded …\nMemory allocation APIs\nThe <code>ByteStr</code> and <code>ByteString</code> types and trait implementations.\nCollection types.\nUtilities related to FFI bindings.\nCreates a <code>String</code> using interpolation of runtime …\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe <code>LayoutError</code> is returned when the parameters given to …\nThe minimum byte alignment for a memory block of this …\nCreates a layout describing the record that can hold a …\nAllocates memory with the global allocator.\nAllocates memory as described by the given <code>layout</code>.\nAllocates zero-initialized memory with the global …\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a layout describing the record for a <code>[T; n]</code>.\nCreates a “by reference” adapter for this instance of …\nCreates a <code>NonNull</code> that is dangling, but well-aligned for …\nDeallocates memory with the global allocator.\nDeallocates the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nCreates a layout describing the record for <code>self</code> followed by\nCreates a layout describing the record for <code>self</code> followed by\nProduces layout describing a record that could be used to …\nProduces layout describing a record that could be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …\nCreates a layout, bypassing all checks.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignals a memory allocation error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.\nCreates a layout by rounding the size of this layout up to …\nReturns the amount of padding we must insert after <code>self</code> to …\nReallocates memory with the global allocator.\nShrinks or grows a block of memory to the given <code>new_size</code> …\nCreates a layout describing the record for <code>n</code> instances of …\nCreates a layout describing the record for <code>n</code> instances of …\nAttempts to shrink the memory block.\nThe minimum size in bytes for a memory block of this …\nA wrapper for <code>&amp;[u8]</code> representing a human-readable string …\nA wrapper for <code>Vec&lt;u8&gt;</code> representing a human-readable string …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates a <code>ByteStr</code> slice from anything that can be …\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> to the end of the list.\nReturns a slice of all values in the underlying vector, in …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the binary heap can hold …\nDrops all items from the binary heap.\nClears the map, removing all elements.\nClears the set, removing all elements.\nRemoves all elements from the <code>LinkedList</code>.\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains an element equal to the …\nReturns <code>true</code> if the <code>LinkedList</code> contains an element equal …\nReturns <code>true</code> if the map contains a value for the specified …\nProvides a cursor at the back element.\nProvides a cursor with editing operations at the back …\nProvides a cursor at the front element.\nProvides a cursor with editing operations at the front …\nCreates an empty <code>BinaryHeap&lt;T&gt;</code>.\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList&lt;T&gt;</code>.\nDeserializes a <code>BTreeMap</code> from …\nDeserializes a <code>BTreeMap</code> from …\nDeserializes a <code>BTreeSet</code> from …\nDeserializes a <code>BTreeSet</code> from …\nVisits the elements representing the difference, i.e., the …\nClears the binary heap, returning an iterator over the …\nClears the binary heap, returning an iterator over the …\nSCALE encode this type to bytes, possibly with the help of …\nSCALE encode this type to bytes, possibly with the help of …\nSCALE encode this type to bytes, possibly with the help of …\nSCALE encode this type to bytes, possibly with the help of …\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nCreates an iterator that visits all elements (key-value …\nCreates an iterator that visits all elements in ascending …\nCreates an iterator which uses a closure to determine if …\nReturns a reference to the first element in the set, if …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nReturns the argument unchanged.\nConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nReturns the argument unchanged.\nConstructs a <code>BTreeMap&lt;K, V&gt;</code> from an iterator of key-value …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nVisits the elements representing the intersection, i.e., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nGets an owning iterator over the entries of the map, …\nGets an iterator for moving out the <code>BTreeSet</code>’s contents …\nConsumes the list into an iterator yielding elements by …\nReturns an iterator which retrieves elements in heap order.\nCreates a consuming iterator visiting all the keys, in …\nConsumes the <code>BinaryHeap</code> and returns a vector in sorted …\nCreates a consuming iterator visiting all the values, in …\nConsumes the <code>BinaryHeap</code> and returns the underlying vector …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nChecks if the binary heap is empty.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the <code>LinkedList</code> is empty.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns an iterator visiting all values in the underlying …\nGets an iterator over the entries of the map, sorted by …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nProvides a forward iterator.\nGets a mutable iterator over the entries of the map, …\nProvides a forward iterator with mutable references.\nGets an iterator over the keys of the map, in sorted order.\nDetails about the allocation that caused the error\nReturns a reference to the last element in the set, if any.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the length of the binary heap.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the length of the <code>LinkedList</code>.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nCreates an empty <code>BinaryHeap</code> as a max-heap.\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new, empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList</code>.\nCreates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as …\nMakes a new empty BTreeMap with a reasonable choice for B.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nConstructs an empty <code>LinkedList&lt;T, A&gt;</code>.\nReturns the greatest item in the binary heap, or <code>None</code> if …\nReturns a mutable reference to the greatest item in the …\nRemoves the greatest item from the binary heap and returns …\nRemoves the last element from a list and returns it, or …\nRemoves and returns the first element in the map. The key …\nRemoves the first element from the set and returns it, if …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves and returns the last element in the map. The key …\nRemoves the last element from the set and returns it, if …\nPushes an item onto the binary heap.\nAppends an element to the back of a list.\nAdds an element first in the list.\nConstructs a double-ended iterator over a sub-range of …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nRemoves a key from the map, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves the element at the given index and returns it.\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing element, …\nReserves capacity for at least <code>additional</code> elements more …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nSerializes a <code>BTreeMap</code> as …\nSerializes a <code>BTreeMap</code> as …\nSerializes a <code>BTreeSet</code> as …\nSerializes a <code>BTreeSet</code> as …\nDiscards capacity with a lower bound.\nDiscards as much additional capacity as possible.\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the value. Returns a new …\nSplits the list into two at the given index. Returns …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…\nVisits the elements representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> elements …\nTries to reserve the minimum capacity for at least …\nVisits the elements representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>Cursor</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nThe layout of allocation request that failed\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nReturns the contents of this <code>CString</code> as a slice of bytes.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nEquivalent to <code>CString::as_bytes()</code> except that the returned …\nExtracts a <code>CStr</code> slice containing the entire string.\n<code>CString</code> and its related types.\nCreates an empty <code>CString</code>.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …\nReturns the argument unchanged.\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying …\nConverts a &amp;CStr into a <code>CString</code> by copying the contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nRetakes ownership of a <code>CString</code> that was transferred to C …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConverts a string <code>s</code> into a <code>CString</code>.\nCreates a C-compatible string by consuming a byte vector, …\nAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.\nConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>CString</code> into a boxed <code>CStr</code>.\nConsumes the <code>CString</code> and returns the underlying byte …\nReturns the bytes that were attempted to convert to a …\nEquivalent to <code>CString::into_bytes()</code> except that the …\nConsumes this error, returning original <code>CString</code> which …\nConsumes the <code>CString</code> and transfers ownership of the string …\nConverts the <code>CString</code> into a <code>String</code> if it contains valid …\nConsumes this error, returning the underlying vector of …\nCreates a new C-compatible string from a container of …\nReturns the position of the nul byte in the slice that …\nAccess the underlying UTF-8 error that was the cause of …\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nA uniquely owned <code>Arc</code>.\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>UniqueArc</code>s.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …\nCreates a new weak reference to the <code>UniqueArc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>UniqueArc</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConverts a raw pointer previously created by <code>into_raw</code> back …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n‘Greater than or equal to’ comparison for two <code>UniqueArc</code>…\nGreater-than comparison for two <code>UniqueArc</code>s.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>UniqueArc</code> into a regular <code>Arc</code>.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\n‘Less than or equal to’ comparison for two <code>UniqueArc</code>s.\nLess-than comparison for two <code>UniqueArc</code>s.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new <code>UniqueArc</code>.\nConstructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any …\nCreates a new <code>UniqueArc</code> in the provided allocator.\nPartial comparison for two <code>UniqueArc</code>s.\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nGets the number of strong (<code>Arc</code>) pointers pointing to this …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …\nGets an approximation of the number of <code>Weak</code> pointers …\nAn analogous trait to <code>Wake</code> but used to construct a …\nThe implementation of waking a task on an executor.\nWake this task.\nWake this task.\nWake this task without consuming the waker.\nWake this task without consuming the local waker.\nA bounded set based on a B-Tree.\nConst getter for signed integers.\nConst getter for unsigned integers.\nA weakly bounded vector.\nAcala - https://acala.network/\nAn opaque 32-byte cryptographic identifier.\nA container for results of parsing the address uri string.\nErrors that are possible during parsing the address URI.\nAjuna Network - https://ajuna.io\nAllfeat Network - https://allfeat.network\nAltair - https://centrifuge.io/\nAmplitude chain - https://pendulumchain.org/\nAnmol Network - https://anmol.network/\nAres Protocol - https://www.aresprotocol.com/\nAstar Network - https://astar.network\nAventus Mainnet - https://aventus.io\nBajun Network - https://ajuna.io\nBare 32-bit Ed25519 public key.\nBare 32-bit ECDSA SECP-256k1 public key.\nBare 32-bit Schnorr/Ristretto (S/R 25519) public key.\nBasilisk - https://bsx.fi\nBifrost - https://bifrost.finance/\nBitgreen - https://bitgreen.org/\nBittensor - https://bittensor.com\nTrait used for types that are really just a fixed-length …\nCalamari: Manta Canary Network - https://manta.network\nCentrifuge Chain - https://centrifuge.io/\nCere Network - https://cere.network\nCESS - https://cess.cloud\nCESS Testnet - https://cess.cloud\nChainflip - https://chainflip.io/\nChainX - https://chainx.org/\nCloudWalk Network Mainnet - …\nClover Finance - https://clover.finance\nComposable Finance - https://composable.finance")