searchState.loadedDescShard("yet_another_parachain_runtime", 29, "The error of the method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCreate a new <code>Archive</code>.\nConstructs a successful result.\nMethod was successful.\nMethod encountered an error.\nThe result of the method.\nClient implementation for the <code>ArchiveApi</code> RPC API.\nServer trait implementation for the <code>ArchiveApi</code> RPC API.\nRetrieves the body (list of transactions) of a given block …\nRetrieves the body (list of transactions) of a given block …\nCall into the Runtime API at a specified block’s state.\nCall into the Runtime API at a specified block’s state.\nGet the height of the current finalized block.\nGet the height of the current finalized block.\nGet the chain’s genesis hash.\nGet the chain’s genesis hash.\nGet the hashes of blocks from the given height.\nGet the hashes of blocks from the given height.\nGet the block’s header.\nGet the block’s header.\nReturns storage entries at a specific block’s state.\nReturns storage entries at a specific block’s state.\nReturns the storage difference between two blocks.\nReturns the storage difference between two blocks.\nCollects all the methods and subscriptions defined in the …\nAn API for archive RPC calls.\nChainHead RPC errors.\nFailed to fetch leaves.\nThe error type for errors that can never happen.\nInvalid parameter provided to the RPC method.\nRuntime call failed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicate the block hash of the new best block.\nThe best block of the chain.\nAn API for chain head RPC calls.\nServer trait implementation for the <code>ChainHeadApi</code> RPC API.\nThe configuration of <code>ChainHead</code>.\nThe operation could not be processed due to an error.\nIndicate the finalized and pruned block hashes.\nA list of finalized and pruned blocks.\nThe event generated by the <code>follow</code> method.\nContain information about the latest finalized block.\nThe latest finalized block.\nThe runtime could not be obtained due to an error.\nIndicate a new non-finalized block.\nA new non-finalized block was added.\nThe response of the <code>chainHead_body</code> method.\nThe response of the <code>chainHead_call</code> method.\nThe RPC server encountered an error while processing an …\nThe RPC server was unable to provide the response of the …\nThe responses of the <code>chainHead_storage</code> method have been …\nYield one or more items found in the storage.\nAsk the user to call <code>chainHead_continue</code> to produce more …\nThe runtime event generated if the <code>follow</code> subscription has …\nThe runtime specification of the current block.\nThe subscription is dropped and no further events will be …\nThe runtime version of this block.\nAPI trait of the chain head.\nThe block hash of the new best block.\nThe hash of the new block.\nAPI implementation for <code>chainHead</code>.\nRetrieves the body (list of transactions) of a pinned …\nCall into the Runtime API at a specified block’s state.\nResumes a storage fetch started with <code>chainHead_storage</code> …\nTrack the state of the head of the chain: the finalized, …\nRetrieves the header of a pinned block.\nStops an operation started with chainHead_v1_body, …\nReturns storage entries at a specific block’s state.\nUnpin a block or multiple blocks reported by the <code>follow</code> …\nError helpers for <code>chainHead</code> RPC module.\nReason of the error.\nThe chain head’s event returned as json compatible …\nThe hash of the latest finalized blocks.\nBlock hashes that are finalized.\nThe runtime version of the finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe maximum number of pinned blocks across all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nThe maximum number of <code>chainHead_follow</code> subscriptions per …\nStop all subscriptions if the distance between the leaves …\nCreate a new <code>ChainHead</code>.\nThe runtime version of the new block.\nThe parent hash of the new block.\nBlock hashes that are pruned (removed).\nCustom serialize implementation to include the <code>RuntimeEvent</code>…\nCustom serialize implementation to include the <code>RuntimeEvent</code>…\nThe runtime version.\nThe maximum number of pending messages per subscription.\nThe maximum number of ongoing operations per subscription.\nThe maximum duration that a block is allowed to be pinned …\nClient implementation for the <code>ChainHeadApi</code> RPC API.\nServer trait implementation for the <code>ChainHeadApi</code> RPC API.\nA list of values of given type.\nRPC list or value wrapper.\nA single value of given type.\nRetrieves the body (list of transactions) of a pinned …\nRetrieves the body (list of transactions) of a pinned …\nCall into the Runtime API at a specified block’s state.\nCall into the Runtime API at a specified block’s state.\nResumes a storage fetch started with <code>chainHead_storage</code> …\nResumes a storage fetch started with <code>chainHead_storage</code> …\nTrack the state of the head of the chain: the finalized, …\nTrack the state of the head of the chain: the finalized, …\nRetrieves the header of a pinned block.\nRetrieves the header of a pinned block.\nStops an operation started with chainHead_v1_body, …\nStops an operation started with chainHead_v1_body, …\nReturns storage entries at a specific block’s state.\nReturns storage entries at a specific block’s state.\nUnpin a block or multiple blocks reported by the <code>follow</code> …\nUnpin a block or multiple blocks reported by the <code>follow</code> …\nCollects all the methods and subscriptions defined in the …\nAn API for chain head RPC calls.\nThe configuration of <code>ChainHead</code>.\nThe maximum number of pinned blocks across all …\nThe maximum number of <code>chainHead_follow</code> subscriptions per …\nStop all subscriptions if the distance between the leaves …\nHelper to convert the <code>subscription ID</code> to a string.\nThe maximum number of pending messages per subscription.\nThe maximum number of ongoing operations per subscription.\nThe maximum duration that a block is allowed to be pinned …\nChainHead RPC errors.\nInternal error.\nThe provided block hash is invalid.\nWait-for-continue event not generated.\nReceived duplicate hashes for the <code>chainHead_unpin</code> method.\nInvalid parameter provided to the RPC method.\nThe follow subscription was started with <code>withRuntime</code> set …\nMaximum number of chainHead_follow has been reached.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nGeneral purpose errors, as defined in …\nErrors for <code>chainHead</code> RPC module, as defined in …\nInternal error.\nInvalid parameter error.\nThe provided block hash is invalid.\nWait-for-continue event not generated.\nReceived duplicate hashes for the <code>chainHead_unpin</code> method.\nThe follow subscription was started with <code>withRuntime</code> set …\nMaximum number of chainHead_follow has been reached.\nIndicate the block hash of the new best block.\nThe best block of the chain.\nSimplified type clone of <code>sp_version::RuntimeVersion</code>. Used …\nThe operation could not be processed due to an error.\nIndicate the finalized and pruned block hashes.\nA list of finalized and pruned blocks.\nThe event generated by the <code>follow</code> method.\nContain information about the latest finalized block.\nThe latest finalized block.\nThe runtime could not be obtained due to an error.\nThe RPC server cannot handle the request at the moment.\nThe method response of <code>chainHead_body</code>, <code>chainHead_call</code> and …\nThe <code>started</code> result of a method.\nIndicate a new non-finalized block.\nA new non-finalized block was added.\nThe response of the <code>chainHead_body</code> method.\nThe response of the <code>chainHead_body</code> method.\nThe response of the <code>chainHead_call</code> method.\nThe response of the <code>chainHead_call</code> method.\nIndicate a problem during the operation.\nThe RPC server encountered an error while processing an …\nIndicate the operation id of the event.\nThe RPC server was unable to provide the response of the …\nThe responses of the <code>chainHead_storage</code> method have been …\nThe response of the <code>chainHead_storage</code> method.\nYield one or more items found in the storage.\nAsk the user to call <code>chainHead_continue</code> to produce more …\nThe runtime event generated if the <code>follow</code> subscription has …\nThe runtime specification of the current block.\nThe method has started.\nThe subscription is dropped and no further events will be …\nThe runtime version of this block.\nMap of all supported API “features” and their versions.\nThe block hash of the new best block.\nThe hash of the new block.\nThe number of items from the back of the <code>chainHead_storage</code> …\nReason of the error.\nThe reason of the error.\nThe hash of the latest finalized blocks.\nBlock hashes that are finalized.\nThe runtime version of the finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nName of the implementation of the spec.\nVersion of the implementation of the specification.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resulting items.\nThe runtime version of the new block.\nThe operation id of the event.\nThe operation id of the event.\nThe operation id of the event.\nThe operation id of the event.\nThe operation id of the event.\nThe operation id of the response.\nHexadecimal-encoded output of the runtime function call.\nThe parent hash of the new block.\nBlock hashes that are pruned (removed).\nThe runtime version.\nIdentifies the different Substrate runtimes.\nVersion of the runtime specification.\nTransaction version.\nArray of hexadecimal-encoded scale-encoded extrinsics …\nAn API for chain spec RPC calls.\nServer trait implementation for the <code>ChainSpecApi</code> RPC API.\nAPI trait of the chain spec.\nAPI implementation for the specification of a chain.\nGet the chain name, as present in the chain specification.\nGet the chain’s genesis hash.\nGet the properties of the chain, as present in the chain …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCreates a new <code>ChainSpec</code>.\nClient implementation for the <code>ChainSpecApi</code> RPC API.\nServer trait implementation for the <code>ChainSpecApi</code> RPC API.\nGet the chain name, as present in the chain specification.\nGet the chain name, as present in the chain specification.\nGet the chain’s genesis hash.\nGet the chain’s genesis hash.\nGet the properties of the chain, as present in the chain …\nGet the properties of the chain, as present in the chain …\nCollects all the methods and subscriptions defined in the …\nAn API for chain spec RPC calls.\nThe transaction was included in a best block of the chain.\nThe client was not capable of keeping track of this …\nThe transaction could not be processed due to an error.\nThe transaction was included in a finalized block.\nThe transaction is marked as invalid.\nAn API for transaction RPC calls.\nServer trait implementation for the <code>TransactionApi</code> RPC API.\nThe transaction was included in a block of the chain.\nAn API for transaction RPC calls.\nServer trait implementation for the <code>TransactionBroadcastApi</code>…\nThe transaction was dropped because of exceeding limits.\nThe transaction could not be processed due to an error.\nPossible transaction status events.\nRPC layer metrics for transaction pool.\nThe transaction was validated by the runtime.\nAPI trait for transactions.\nBroadcast an extrinsic to the chain.\nTransaction RPC errors.\nReason of the error.\nReason of the event.\nThe transaction’s event returned as json compatible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate an unique operation ID for the …\nThe hash of the block the transaction was included into.\nThe index (zero-based) of the transaction within the body …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nReturns true if this is the last event emitted by the RPC …\nCreates a new <code>Transaction</code>.\nCreates a new <code>TransactionBroadcast</code>.\nCreates a new <code>Metrics</code> instance.\nBroadcast an extrinsic to the chain.\nSubmit an extrinsic to watch.\nAPI implementation for submitting transactions.\nAPI implementation for broadcasting transactions.\nClient implementation for the <code>TransactionApi</code> RPC API.\nServer trait implementation for the <code>TransactionApi</code> RPC API.\nClient implementation for the <code>TransactionBroadcastApi</code> RPC …\nServer trait implementation for the <code>TransactionBroadcastApi</code>…\nBroadcast an extrinsic to the chain.\nBroadcast an extrinsic to the chain.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nBroadcast an extrinsic to the chain.\nBroadcast an extrinsic to the chain.\nSubmit an extrinsic to watch.\nSubmit an extrinsic to watch.\nTransaction RPC errors.\nTransactionBroadcast error.\nThe provided operation ID is invalid.\nTransaction pool error.\nVerification error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneral purpose errors, as defined in …\nInvalid parameter error.\nThe transaction was included in a best block of the chain.\nThe client was not capable of keeping track of this …\nThe transaction could not be processed due to an error.\nThe transaction was included in a finalized block.\nThe transaction is marked as invalid.\nThe transaction was included in a block of the chain.\nThe transaction was dropped because of exceeding limits.\nThe transaction could not be processed due to an error.\nPossible transaction status events.\nThe transaction was validated by the runtime.\nReason of the error.\nReason of the event.\nThe hash of the block the transaction was included into.\nThe index (zero-based) of the transaction within the body …\nAn API for transaction RPC calls.\nAn API for transaction RPC calls.\nSimple utility that is used to call into the runtime.\nCalls a runtime function represented by a <code>method</code> name and …\nErrors types of runtime utilities.\nFetches the latest metadata from the given runtime blob.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nInstantiate a new runtime caller.\nContains the error value\nError type for the runtime utilities.\nContains the success value\nGeneric result for the runtime utilities.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nNo pruning. Canonicalization is a no-op.\nCanonicalization discards non-canonical nodes. All the …\nRegular non-blocking futures. Polling the task is expected …\nActual authority.\nAutomatically determine the RPC methods based on the …\nCheck given path, and see if there is an existing database …\nTransaction is invalid.\nThe base path that is used for everything that needs to be …\nBlock type.\nThe import operation used to import the genesis block into …\nThe task might perform a lot of expensive CPU operations …\nBlock pruning settings.\nTrait for building the genesis block.\nParameters to pass into <code>build_network_advanced</code>.\nParameters to pass into <code>build_network</code>.\nCommon interface of a chain specification.\nA collection of <code>ChainSpec</code> extensions.\nThe type of chain.\nClient configuration items.\nService configuration.\nMaintain a pruning window.\nUse a custom already-open database.\nSome custom chain type.\nDefault task group name.\nWhere to find the database..\nConfiguration for <code>build_default_syncing_engine</code>.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nA development chain that runs mainly on one node.\nContains the error value\nService errors.\nError type.\nHost functions for custom runtime interfaces that should …\nRegular full node.\nA configuration of a chain. Can be used to build a genesis …\nDefault genesis block builder in Substrate.\nTransaction hash type.\nTransaction hash type.\nIn-pool transaction interface.\nIn-pool transaction type.\nTransaction pool error conversion.\nKeep full block history, of every block that was ever …\nKeep full finalized block history.\nConstruct a local keystore shareable container\nTransaction is good but already known by the transaction …\nA live chain.\nA local chain that runs locally on multiple nodes for …\nCall executor that executes methods locally, querying all …\nOutput to logger\nA <code>MetricsService</code> periodically sends general client and …\nDelegate for dispatching a CodeExecutor call.\nTransaction is good and not yet known.\nA type denoting empty extensions.\nNo value.\nTransaction import was not performed.\nContains the success value\nLoad a ParityDb database from a given path.\nAn incomplete set of chain components, but enough to run …\nArbitrary properties defined in chain spec as a JSON object\nPruning mode.\nGenerates random integers as subscription ID.\nGenerates random strings of length <code>len</code> as subscription ID.\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nLoad a RocksDB database from a given path. Recommended for …\nRole of the local node.\nA running RPC service that can perform in-memory RPC …\nAvailable RPC methods.\nAllow only a safe subset of RPC methods.\nSome value of type <code>T</code>.\nKeep N recent finalized blocks.\nA wrapper over <code>SpawnTaskHandle</code> that will notify a receiver …\nAn handle for spawning tasks in the service.\nParameters to pass into <code>build</code>.\nFull client backend type.\nFull client call executor type.\nFull client type.\nThe resulting type after dereferencing.\nRepresents a running async task in the <code>TaskManager</code>.\nHelper struct to manage background/async tasks in Service.\nKeeps track of all running <code>Task</code>s in <code>TaskManager</code>.\nType for tasks spawned by the executor.\nUsed to configure how to receive the metrics\nTransaction type.\nResult of the transaction import.\nFuture resolving to transaction import result.\nTransaction pool interface.\nTransaction pool adapter.\nTransaction pool options.\nExpose every RPC method (even potentially unsafe ones).\nWarp sync configuration as accepted by <code>WarpSync</code>.\nStandard warp sync for the chain.\nSkip downloading proofs and use provided header of the …\nAdd a bootnode to the list.\nRegister another TaskManager to terminate and gracefully …\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nAnnounce block automatically after they have been imported.\nAnnounce block automatically after they have been imported\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nReturn spec as JSON.\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nReturn StorageBuilder for this spec.\nA shared backend returned by <code>new_full_parts</code>.\nA shared backend instance.\nBase path of the configuration. This is shared between …\nBlock announce config.\nValidator for incoming block announcements.\nA block announce validator builder.\nUser specified block relay params. If not specified, the …\nNumber of blocks to keep in the db.\nA list of bootnode addresses.\nBuild default block downloader\nBuild default syncing engine using …\nReturns the built genesis block along with the block …\nBuild the network service, the network status sinks and an …\nBuild the network service, the network status sinks and an …\nBuild standard polkadot syncing strategy\nBuilds a future that processes system RPC requests.\nChain utilities.\nChain configuration.\nType of the chain.\nSubstrate Client and associated logic.\nA shared client returned by <code>new_full_parts</code>.\nA shared client returned by <code>new_full_parts</code>.\nA shared client returned by <code>new_full_parts</code>.\nA shared client returned by <code>new_full_parts</code>.\nA shared client instance.\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nReturns a cloned <code>Box&lt;dyn ChainSpec&gt;</code>.\nReturns code substitutes that should be used for the on …\nService configuration.\nThe service configuration.\nThe service configuration.\nCreate a genesis block, given the initial storage.\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nGet the reference to the transaction data.\nData path root for the configured chain.\nConfiguration for the database.\nReturns the database config for creating the backend.\nDereferences the value.\nDevelopment key seed.\nDisable GRANDPA when running in validator mode\nDispatch a method in the runtime.\nReturns a string displaying the node role.\nEnable recording of storage proofs during block import\nSCALE encode this type to bytes, possibly with the help of …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nErrors that can occur during the service operation.\nRuntime executor configuration.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns a reference to the defined chain spec extensions.\nReturns a mutable reference to the defined chain spec …\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nEnable authoring even when offline.\nOptional network fork identifier. <code>None</code> by default.\nFork ID.\nFork ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nReturns the argument unchanged.\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nNOTE: converting to pallet origin loses the origin filter …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn a future that will end with success if the signal …\nGet futures transaction list.\nGenerate RPC module using provided configuration\nGet an extension of specific type.\nGet an extension of specific type as reference to <code>Any</code>.\nGet an extension of specific type as mutable reference to …\nThe group this task is associated to.\nProvides access to the underlying <code>RpcModule</code>\nGet hash of the transaction.\nReturns transaction hash\nSpec id.\nImplementation name\nImplementation version (see sc-cli to see an example of …\nReturn an event stream of transactions imported to the …\nAn import queue.\nAn import queue.\nAn import queue.\nBlocks import queue API.\nInitialize telemetry with provided configuration and …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained <code>Err</code> value, but never panics.\nReturns a consuming iterator over the possibly contained …\nReturns the contained <code>Ok</code> value, but never panics.\nTry to extract original <code>Error</code>\nTry to extract original <code>Error</code>\nConsume <code>self</code> and return the <code>TaskRegistry</code>.\nEnable serving block data over IPFS bitswap.\nReturns if the <code>group</code> is the <code>DEFAULT_GROUP_NAME</code>.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nReturn a flag indicating if the transaction should be …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nSet what the task manager should keep alive, can be called …\nReturns a shared reference to a dynamic <code>Keystore</code> trait …\nA shared keystore returned by <code>new_full_parts</code>.\nConfiguration for the keystore.\nA keystore container instance.\nProvides access to listen addresses\nReturns a shared reference to the local keystore .\nGet longevity of the transaction.\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default (if <code>Err</code>), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nMetrics.\nMetrics.\nMetrics.\nPrometheus metrics registry.\nPrometheus metrics registry.\nSpec name.\nThe name of the task.\nProvide native runtime version.\nFull network configuration.\nFull network configuration.\nFull network configuration.\nA shared network instance.\nNetwork configuration.\nHandle to communicate with <code>NetworkService</code>.\nNetwork service provider to drive with network internally.\nCreates new instance of local call executor.\nConstruct KeystoreContainer\nCreates a <code>MetricsService</code> that only sends information to …\nIf a Prometheus registry is passed, it will be used to …\nConstructs a new instance of <code>TransactionPoolAdapter</code>.\nCreates a new <code>SpawnEssentialTaskHandle</code>.\nCreate PRC handlers instance.\nCreate an instance of client backed by given backend.\nCreate an instance of default DB-backend backend.\nCreates predefined options for benchmarking\nCreates a new full client for the given config.\nCreate the initial parts of a full node with the default …\nCreate the initial parts of a full node with the default …\nCreate the initial parts of a full node.\nCreates a <code>NativeElseWasmExecutor</code> according to <code>Configuration</code>…\nCreates a <code>WasmExecutor</code> according to <code>ExecutorConfiguration</code>.\nCreates the options for the transaction pool using given …\nReturns true if the genesis state writing will be skipped …\nSkip writing genesis state on first start.\nExpected max total number of peer connections (in + out).\nIf true, allows access from the runtime to write into …\nShould offchain workers be executed.\nEnable the offchain worker db.\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nNotify the pool about transactions broadcast.\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nEverything else that needs to be passed into the main …\nThis method should behave in a way similar to <code>Future::poll</code>…\nGet priority of the transaction.\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nPrometheus endpoint configuration. <code>None</code> if disabled.\nReturns the prometheus metrics registry, if available.\nReturns a future that forwards imported transactions to …\nAdditional loosely-typed properties of the chain.\nNetwork protocol id.\nReturns the network protocol id from the chain spec, or …\nProtocol name prefix.\nProtocol name prefix.\nGet tags that transaction provides.\nGet an iterator for ready transactions ordered by priority.\nGet an iterator for ready transactions ordered by priority.\nAsynchronously returns a set of ready transaction at given …\nReturn specific ready transaction by hash, if there is one.\nReports invalid transactions to the transaction pool.\nGet transaction dependencies.\nReturn the state version given the genesis storage and …\nRole of the local node.\nRole of the local node.\nNode role.\nRPC configuration.\nBuilds additional <code>RpcModule</code>s that should be added to the …\nStarts an RPC query.\nStart asynchronous runner for import queue.\nReturns a never-ending <code>Future</code> that performs the metric and …\nReturns the running tasks.\nA chain selection algorithm instance.\nGet a copy of the handle to <code>ImportQueueService</code>.\nGet a reference to the handle to <code>ImportQueueService</code>.\nSet the storage that should be used by this chain spec.\nSpawns the given task with the given name and a group name.\nSpawns the given task with the given name.\nSpawns the blocking task with the given name. See also …\nSpawns the blocking task with the given name.\nGet a handle for spawning essential tasks.\nGet a handle for spawning tasks.\nA handle for spawning tasks.\nA handle for spawning tasks.\nA handle for spawning tasks.\nSpawn the tasks that are required to run a node.\nStarts RPC servers.\nState pruning settings.\nReturns pool status.\nAsynchronously imports a single transaction and starts to …\nAsynchronously imports a bunch of unverified transactions …\nAsynchronously imports one unverified transaction to the …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nSyncing service.\nSyncing service to communicate with syncing engine.\nA Sender for RPC requests.\nA task manager returned by <code>new_full_parts</code>.\nThe chain task manager.\nTelemetry instance for this node.\nTelemetry endpoints (if any)\nTelemetry service URL. <code>None</code> if disabled.\nHandle to the tokio runtime. Will be used to spawn futures …\nOptional <code>TracingExecuteBlock</code> handle.\nTracing receiver\nTracing targets\nA shared transaction pool.\nA shared transaction pool.\nA shared transaction pool.\nA shared transaction pool.\nExtrinsic pool configuration.\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nMaximum size of internal trie cache in bytes.\nController for transactions handlers\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value, …\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Ok</code> value or computes it from a …\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, …\nGet the value out of an always-ok Result.\nGet the error out of an always-err Result.\nForce the trie cache to be in memory.\nOptional warp sync config.\nWarp sync configuration (when used).\nPath where WASM files exist to override the on-chain WASM.\nDirectory where local WASM runtimes live. These runtimes …\nMap of WASM runtime substitute starting at the child of …\nCreates a <code>MetricsService</code> that sends metrics to prometheus …\nCache size in MiB. Used only by <code>RocksDb</code> variant of …\nCache size in MiB.\nthe handle to the custom storage\nPath to the paritydb database.\nPath to the database.\nPath to the database.\nif set, the <code>create</code> flag will be required to open such …\nPath to the rocksdb database.\nBuild a chain spec json\nRe-validate known block.\nPerforms the blocks export.\nExport the raw state at the given <code>block</code>. If <code>block</code> is <code>None</code>, …\nStarts the process of importing blocks.\nPerforms a revert of <code>blocks</code> blocks.\nSubstrate Client\nClient configuration items.\nCall executor that executes methods locally, querying all …\nGet block status.\nGet block body by id.\nGet blockchain info.\nCheck block preconditions.\nGet the code at a given block.\nEnable recording of storage proofs during block import\nreturns a reference to the finality notification sinks …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nQuery auxiliary data from key-value store.\nGet block hash by number. Returns <code>None</code> if the header is …\nGet block header. Returns <code>None</code> if block is not found.\nGet block header by id.\nImport a checked and validated block.\nreturns a reference to the block import notification sinks …\nGet block import event stream.\nGet blockchain info.\nInsert auxiliary data into key-value store.\nCalls <code>U::from(self)</code>.\nCreates new Substrate Client with given blockchain and …\nCreate a client with the explicitly provided backend. This …\nSkip writing genesis state on first start.\nGet block number by hash. Returns <code>None</code> if the header is …\nIf true, allows access from the runtime to write into …\nEnable the offchain worker db.\nAttempts to revert the chain by <code>n</code> blocks guaranteeing that …\nGet the RuntimeVersion at a given block.\nGet a reference to the state at a given block.\nGet storage changes event stream.\nGets the uncles of the block with <code>target_hash</code> going back …\nAttempts to revert the chain by <code>n</code> blocks disregarding …\nGet usage info about current client.\nPath where WASM files exist to override the on-chain WASM.\nMap of WASM runtime substitute starting at the child of …\nNo pruning. Canonicalization is a no-op.\nCanonicalization discards non-canonical nodes. All the …\nRegular non-blocking futures. Polling the task is expected …\nActual authority.\nAutomatically determine the RPC methods based on the …\nCheck given path, and see if there is an existing database …\nThe base path that is used for everything that needs to be …\nWarm up the cache in a blocking way.\nThe task might perform a lot of expensive CPU operations …\nBlock pruning settings.\nUses the Wasmtime compiled runtime.\nService configuration.\nMaintain a pruning window.\nUse a custom already-open database.\nWhere to find the database..\nBatch requests are disabled.\nA Ed25519 secret key configuration.\nRuntime executor configuration.\nRegular full node.\nFull block download and verification.\nIn-memory keystore. Recommended for in-browser nodes.\nA single request received by a peer on a request-response …\nHolds IPv4 or IPv6 network.\nKeep full block history, of every block that was ever …\nKeep full finalized block history.\nConfiguration of the client keystore.\nDownload blocks and the latest state.\nEach batch request is limited to <code>len</code> and any batch request …\nOnly allow connections within the same process. Only …\n<code>Multiaddr</code> type used in Substrate. Converted to libp2p’s …\nAddress of a node, including its identity.\nNetwork service configuration.\nThe configuration of a node’s secret key, describing the …\nWarm up the cache in a non-blocking way.\nExtension to <code>SetConfig</code> for sets that aren’t the default …\nNormal transport mode.\nConfiguration of the database of the client.\nResponse for an incoming request to be send by a request …\nLoad a ParityDb database from a given path.\nKeystore at a path on-disk. Recommended for native nodes.\nPool the instances to avoid initializing everything from …\nPool the instances to avoid initializing everything from …\nConfiguration of the Prometheus endpoint.\nProtocol name prefix, transmitted on the wire for legacy …\nPruning mode.\nRecreate the instance from scratch on every instantiation. …\nRecreate the instance from scratch on every instantiation. …\nConfiguration for a single request-response protocol.\nLoad a RocksDB database from a given path. Recommended for …\nRole of the local node.\nConfiguration for batch request handling.\nRPC configuration.\nRepresent a single RPC endpoint with its configuration.\nAvailable RPC methods.\nTrait for providing subscription IDs that can be cloned.\nAllow only a safe subset of RPC methods.\nConfiguration for a set of nodes.\nKeep N recent finalized blocks.\nSync operation mode.\nType for tasks spawned by the executor.\nList of telemetry servers we want to talk to. Contains the …\nTransaction pool options.\nConfiguration for the transport layer.\nWarmup strategy for the trie cache.\nThe batch request is unlimited.\nExpose every RPC method (even potentially unsafe ones).\nWarp sync - verify authority set transitions and the …\nSpecification of different methods of executing the …\nThe instantiation strategy to use for the WASM executor.\nAdd a list of protocol names used for backward …\nAdd a node to the list of reserved nodes.\nJSON-RPC server endpoints.\nShould we insert non-global addresses into the DHT?\nModifies the configuration to allow non-reserved nodes.\nAnnounce block automatically after they have been imported\nBase path of the configuration. This is shared between …\nBatch request configuration.\nJSON-RPC server batch config.\nNumber of blocks to keep in the db.\nList of initial node addresses\nChain configuration.\nClient identifier. Sent over the wire for debugging …\nCommit the <code>transaction</code> to the database atomically. Any …\nConcatenates the multiaddress and peer ID into one …\nCORS.\nCORS settings for HTTP &amp; WS servers. <code>None</code> if all origins …\nData path root for the configured chain.\nConfiguration for the database.\nThe default number of 64KB pages to allocate for Wasm …\nConfiguration for the default set of nodes used for block …\nNumber of substreams to reserve for full nodes for block …\nDevelopment key seed.\nDisable GRANDPA when running in validator mode\nTrue if Kademlia random discovery should be enabled.\nIf this is allowed.\nRuntime executor configuration.\nGet reference to fallback protocol names.\nFallback on the wire protocol names to support.\nEnable authoring even when offline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieve the value previously stored against <code>key</code> or <code>None</code> if\nGet reference to handshake.\nCustom JSON-RPC subscription ID provider.\nIdle connection timeout.\nImplementation name\nImplementation version (see sc-cli to see an example of …\nMaximum allowed number of incoming substreams related to …\nChannel on which the networking service will send incoming …\nallow writes from the runtime to the offchain worker …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvaluate a <code>NodeKeyConfig</code> to obtain an identity <code>Keypair</code>:\nEnable serving block data over IPFS bitswap.\nWhether it’s an optional listening address i.e, it’s …\nRequire iterative Kademlia DHT queries to use disjoint …\nKademlia replication factor determines to how many closest …\nConfiguration for the keystore.\nListen address.\nMultiaddresses to listen for incoming connections.\nMaximum number of blocks per request.\nMaximum buffer capacity per connection.\nMaximum number of connections.\nMaximum number of connections for JSON-RPC server.\nGet maximum notification size.\nMaximum number of peers to ask the same blocks in parallel.\nMaximum inbound payload size in MB.\nMaximum outbound payload size in MB.\nMaximum payload of a rpc request\nMaximum allowed size, in bytes, of a request.\nMaximum payload of a rpc response.\nMaximum allowed size, in bytes, of a response.\nThe size of the instances cache.\nMaximum allowed subscriptions per rpc connection\nMaximum number of subscriptions per connection.\nThe number of messages the JSON-RPC server is allowed to …\nRPC methods to expose (by default only a safe subset or …\nNumber of peers that need to be connected before warp sync …\nAddress of the node.\nName of the protocol on the wire. Should be something like …\nDirectory path to store network-specific configuration. …\nNetwork configuration.\nNetworking backend used for P2P communication.\nCreates a new <code>NonDefaultSetConfig</code>. Zero slots and accepts …\nCreate new default configuration\nCreate new default configuration for localhost-only …\nCreate new default configuration for localhost-only …\nThe node key configuration, which determines the node’s …\nName of the node. Sent over the wire for debugging …\nWhether nodes that aren’t in <code>SetConfig::reserved_nodes</code> …\nShould offchain workers be executed.\nNumber of outgoing substreams related to this set that we…\nReturns the path for the keystore.\nRequest sent by the remote. Will always be smaller than …\nWho sent the request.\nIts identity.\nChannel to send back the response.\nPort to use.\nJSON-RPC server default port.\nPrometheus endpoint configuration. <code>None</code> if disabled.\nGet reference to protocol name.\nGet reference to protocol name.\nMultiaddresses to advertise. Detected automatically if …\nRate limit per minute.\nRPC rate limit per minute.\nWhether to trust proxy headers for rate limiting.\nRPC rate limit trust proxy headers.\nWhitelisted IPs for rate limiting.\nRPC rate limit whitelisted ip addresses.\nA metrics registry to use. Useful for setting the metric …\nReputation changes accrued while handling the request. To …\nDuration after which emitted requests are considered timed …\nList of reserved node addresses.\nThe payload of the response.\nWhether to retry with a random port if the provided port …\nNode role.\nRPC configuration.\nRPC methods to expose.\nMaximum number of different runtime versions that can be …\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nGet reference to <code>SetConfig</code>.\nState pruning settings.\nInitial syncing mode.\nTake <code>ProtocolHandlePair</code> from <code>NonDefaultSetConfig</code>\nTelemetry service URL. <code>None</code> if disabled.\nHandle to the tokio runtime. Will be used to spawn futures …\nTracing receiver\nTracing targets\nExtrinsic pool configuration.\nConfiguration for the transport layer.\nMaximum size of internal trie cache in bytes.\nForce the trie cache to be in memory.\nWasm execution method.\nDirectory where local WASM runtimes live. These runtimes …\nCache size in MiB. Used only by <code>RocksDb</code> variant of …\nCache size in MiB.\nthe handle to the custom storage\nPath to the paritydb database.\nPath to the database.\nPath to the database.\nif set, the <code>create</code> flag will be required to open such …\nPath to the rocksdb database.\nNode keystore’s password.\nThe path of the keystore.\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nIf true, allow connecting to private IPv4/IPv6 addresses …\nIf true, the network will use mDNS to discover other …\nThe instantiation strategy to use.\nContains the error value\nService errors.\nContains the success value\nService Result typedef.\nNo pruning. Canonicalization is a no-op.\nCanonicalization discards non-canonical nodes. All the …\nThe given block number is the last canonicalized block.\nTrying to insert existing block.\nBlock record is missing from the pruning window\nTrying to get a block record from db while it is not …\nA set of state node changes.\nA set of changes to the backing database.\nMaintain a pruning window.\nPruning constraints. If none are specified pruning is\nDatabase value type.\nDatabase backend error.\n<code>Codec</code> decoding error.\nError type.\nBasic set of requirements for the Block hash and node key …\nInvalid pruning mode specified. Contains expected mode.\nTrying to canonicalize invalid block.\nTrying to pin invalid block.\nTrying to insert block with invalid number.\nTrying to insert block with unknown parent.\nThe result return by <code>StateDb::is_pruned</code>\nStatus information about the last canonicalized block.\nMay or may not pruned, need further checking\nBackend database trait. Read-only.\nInvalid metadata\nBackend database trait. Read-only.\nNot yet have canonicalized any block.\nNo canonicalization is happening (pruning mode is archive …\nDefinitely not pruned\nPinning error type.\nDefinitely pruned\nPruning mode.\nState DB maintenance. See module description. Can be …\nToo many unfinalized sibling blocks inserted.\nFinalize a previously inserted block.\nState node changes.\nDeleted nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet state trie node.\nGet a value from non-canonical/pruning overlay or the …\nGet meta value, such as the journal.\nAdd a new non-canonical block.\nInserted nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if block is pruned away.\nReturns last canonicalized block.\nMaximum blocks. Defaults to 0 when unspecified, …\nMetadata changes.\nCreate an instance of <code>StateDb</code>.\nPrevents pruning of specified block and its descendants. …\nRemove specified non-canonical block. Returns a database …\nReset in-memory changes to the last disk-backed state.\nRevert all non-canonical blocks with the best block number.\nConfirm that all changes made to commit sets are on disk. …\nAllows pruning of specified block.\nThe maximum amount of data the statement store can hold, …\nThe maximum number of statements the statement store can …\nThe amount of time an expired statement is kept before it …\nDatabase error.\nError decoding statement structure.\nStatement store error.\nTotal number of topic fields allowed.\nStore configuration\nError making runtime call.\nStatement store API.\nStatement store.\nReturns <code>self</code> as <code>StatementStoreExt</code>.\nReturn the data of all known statements which include all …\nReturn the data of all known statements which include all …\nReturn all known statements which include all topics and …\nReturn all known statements which include all topics and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform periodic store maintenance\nCreate a new shared store instance. There should only be …\nReturn the data of all known statements whose decryption …\nReturn the data of all known statements whose decryption …\nReturn the decrypted data of all known statements whose …\nReturn the decrypted data of all known statements whose …\nReturn the statement and the decrypted data of all known …\nReturn the statement and the decrypted data of all known …\nReturn all known statements whose decryption key is …\nReturn all known statements whose decryption key is …\nRemove a statement from the store.\nRemove a statement by hash.\nRemove all statements authored by <code>who</code>.\nRemove all statements by an account.\nGet statement by hash.\nReturns a statement by hash.\nReturn all statements.\nReturn all statements.\nSubmit a statement.\nSubmit a statement to the store. Validates the statement …\nContains the error value\nError type used in this crate.\nContains the success value\nResult type used in this crate.\nParameters used to create the storage monitor.\nStorage monitor service: checks the available space for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow often available space is polled.\nRequired available space on database storage.\nCreates new StorageMonitorService for given client config\nError type used by this crate.\nHardcoded information that allows light clients to sync …\nThe light sync state extension.\nNo value.\nSome value of type <code>T</code>.\nAn api for sync state RPC calls.\nClient implementation for the <code>SyncStateApi</code> RPC API.\nServer trait implementation for the <code>SyncStateApi</code> RPC API.\nThe epoch changes tree for babe.\nThe babe weight of the finalized block.\nThe header of the best finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe authority set for grandpa.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCreate a new sync state RPC helper.\nReturns the JSON serialized chainspec running the node, …\nReturns the JSON serialized chainspec running the node, …\nBlake2-256 hashing algorithm.\nBlake2-256 hashing algorithm executed in parallel\nLimit by the maximal duration and maximal number of …\nDisk random write.\nDisk sequential write.\nLimit the execution time of a benchmark.\nHardware benchmark results for the node.\nLimit by the maximal duration.\nLimit by the maximal number of iterations.\nCopying data in RAM.\nA single hardware metric.\nA single requirement for the hardware.\nMultiple requirements for the hardware.\nSR25519 signature verification.\nThe CPU ISA architecture part of the current target …\nThe environment part of the current target triplet.\nThe operating system part of the current target triplet.\nThroughput as measured in bytes per second.\n<code>Self</code> as number of byte/s.\n<code>Self</code> as number of gibibyte/s.\n<code>Self</code> as number of kibibyte/s.\n<code>Self</code> as number of mebibyte/s.\nBenchmarks the verification speed of sr25519 signatures.\nThe category of the metric.\nWhether the hardware requirements are met by the provided …\nThe CPU speed, as measured in how many MB/s it can hash …\nRandom disk write speed in MB/s.\nSequential disk write speed in MB/s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Self</code> from gibibyte/s.\nConstruct <code>Self</code> from kibibyte/s.\nConstruct <code>Self</code> from mebibyte/s.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates a new execution limit with the passed seconds as …\nBenchmarks the hardware and returns the results of those …\nGathers information about node’s hardware and software.\nInitializes the hardware benchmarks telemetry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the duration limit or <code>MAX</code> if none is present.\nReturns the iterations limit or <code>MAX</code> if none is present.\nMemory bandwidth in MB/s, calculated by measuring the …\nThe metric to measure.\nThe minimal throughput that needs to be archived for this …\nThe name of the metric. It is always prefixed by the […\nNormalizes <code>Self</code> to use the largest unit possible.\nThe number of expected cores used for computing the …\nThe parallel CPU speed, as measured in how many MB/s it …\nPrints out the results of the hardware benchmarks in the …\nPrints out the system software/hardware information in the …\nSerializes <code>Throughput</code> and uses MiBs as the unit.\nSerializes <code>Option&lt;Throughput&gt;</code> and uses MiBs as the unit.\nCheck this requirement only for relay chain validator …\nConsensus DEBUG log level.\nConsensus INFO log level.\nConsensus TRACE log level.\nConsensus WARN log level.\nMessage sent when the connection (re-)establishes.\nContains the error value\nContains the success value\nSubstrate DEBUG log level.\nSubstrate INFO log level.\nHardware and software information for the node.\nA telemetry instance that can be used to send telemetry …\nUsed to create a stream of events with only one event: …\nList of telemetry servers we want to talk to. Contains the …\nHandle to a <code>Telemetry</code>.\nTelemetry worker.\nHandle to the <code>TelemetryWorker</code> thats allows initializing …\nTelemetry message verbosity.\nNode is an authority.\nNode’s chain.\nNode’s configuration.\nThe number of physical CPU cores.\nThe exact CPU model.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nNode’s genesis hash.\nGet a new <code>TelemetryWorkerHandle</code>.\nMake a new clonable handle to this <code>Telemetry</code>. This is used …\nNode’s implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if there are no telemetry endpoints, <code>false</code> …\nWhether the node’s running under a virtual machine.\nThe exact Linux distribution used.\nThe Linux kernel version.\nThe total amount of memory, in bytes.\nNode’s name.\nNode’s network ID.\nCreate a <code>TelemetryEndpoints</code> based on a list of <code>(String, u8)</code>…\nInstantiate a new <code>TelemetryWorker</code> which can run in …\nInstantiate a new <code>Telemetry</code> object.\nGet event stream for telemetry connection established …\nRun the telemetry worker.\nSend telemetry messages.\nInitialize the telemetry with the endpoints provided in …\nNode’s startup time.\nNode’s software and hardware information.\nNode’s ISA.\nNode’s target platform ABI or libc.\nNode’s OS.\nReport a telemetry.\nNode’s version.\nAn event.\nOutput to logger\nTraceHandler for sending span data to the logger\nResponsible for assigning ids to new spans, which are not …\nA span.\nRepresents a single instance of a tracing span\nRepresents a tracing event, complete with values\nA handler for tracing <code>SpanDatum</code>\nTrace handler event types.\nUsed to configure how to receive the metrics\nHolds associated values for a tracing span\nAttach additional handlers to allow handling of custom …\nUtilities for tracing block execution\nFxHashMap of <code>bool</code> values\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nProcess a <code>TraceEvent</code>.\nProcess a <code>SpanDatum</code>.\nFxHashMap of <code>i64</code> values\nid for this span\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if all individual collections are empty\nLevel of the event.\nTracing Level - ERROR, WARN, INFO, DEBUG or TRACE\nLine number in source\nSubstrate logging library.\nName of the event.\nName of this span\nTakes a <code>TracingReceiver</code> and a comma separated list of …\nReturns a new instance of Values\nAllows use of a custom TraceHandler to create a new …\nTotal duration of span while entered\nId of the parent tracing event, if any.\nid of the parent span, if any\nTime that the span was last entered\nFxHashMap of <code>String</code> values\nTarget of the event.\nTarget, typically module\nFxHashMap of <code>u64</code> values\nValues for this event.\nValues recorded to this span\nHolds a reference to the client in order to execute the …\nContains the error value\nTracing Block error\nContains the success value\nTracing Block Result type alias\nSomething that can execute a block in a tracing context.\nExecute the given <code>block</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockExecutor</code>\nExecute block, record all spans and events belonging to …\nContains the error value\nLogging errors.\nA pre-configured event formatter.\nA structure which, when <code>Display</code>d, will print out the …\nA builder that is used to initialize the global logger.\nContains the success value\nSpan name used for the logging prefix. See macro …\nA <code>Layer</code> that captures the prefix span (<code>PREFIX_LOG_SPAN</code>) …\nLogging Result typedef.\nAdd directives to current directives.\nSets whether or not an event’s level is displayed.\nSets whether or not an event’s target is displayed.\nSets whether or not the name of the current thread is …\nDuplicate INFO, WARN and ERROR messages to stdout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the current directives.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis prefixes all the log lines with <code>[&lt;name&gt;]</code> (after the …\nReload the logging filter with the supplied directives …\nResets the log filter back to the original state when the …\nUse the given timer for log message timestamps.\nDecides whenever the fractional timestamp with be included …\nThis prefixes all the log lines with <code>[&lt;name&gt;]</code> (after the …\nBasic implementation of transaction pool that can be …\nBlock type.\nBuilder allowing to create specific instance of …\nConcrete extrinsic validation and query logic.\nError type.\nFork-aware transaction pool\nThe fork-aware transaction pool.\nFork aware transaction pool task, that needs to be polled.\nFull revalidation type.\nThe transaction pool logic for full client.\nLog target for transaction pool.\nLight revalidation type.\nValidate the transaction during maintainance process,\nPool configuration options.\nExtrinsics pool that performs validation.\nQueue limits\nType of revalidation.\nSingle-state transaction pool\nValidate the newly submitted transactions\nA transaction source that includes a timestamp indicating …\nThe public type alias for the actual type providing the …\nTransaction pool options.\nThe type of transaction pool.\nThe wrapper for actual object providing implementation of …\nThe priority of request to validate the transaction.\nProvides a number of views at the tips of the forks.\nGet access to the underlying api\nGet access to the underlying api\nHow long the extrinsic is banned for.\nReturns a block body given the block.\nReturns a block header given the block id.\nReturns a block hash given the block id.\nReturns a block number given the block id.\nCreates an instance of transaction pool.\nClears the recently pruned transactions in validated pool.\nBuild a map from blocks to their extrinsics.\nMaximal number of transactions in the queue.\nDeep clones the pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates a new instance with an given source and an …\nFuture queue limits.\nReturns a list of future transactions in the pool.\nReturns a set of future transactions for given block hash.\nChecks if there is a view at the tip of the fork with …\nReturns hash and encoding length of the extrinsic.\nReturns the hash of a given transaction.\nReturns transaction hash\nNumber of notified items in import_notification_sink.\nReturn an event stream of notifications when transactions …\nProvides a number of views at the tips of the forks.\nInserts a value into a <code>SlidingStats</code> and conditionally logs …\nSync version of <code>insert_and_log_throttled</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if any of the provided values exceeds the …\nExecutes the maintainance for the given chain event.\nReturns a number of unwatched and watched transactions in …\nCreates new instance of <code>Builder</code>\nCreate new transaction pool logic.\nCreate a new transaction pool.\nCreates a new instance with an internal …\nCreate new fork aware transaction pool for a full node …\nCreate new basic transaction pool for a full node with the …\nCreates a new instance with an internal …\nCreates a new instance with an internal …\nCreate new fork aware transaction pool with provided …\nCreate new basic transaction pool with provided api, for …\nCreate new fork aware transaction pool with given limits …\nCreates new fork aware transaction pool with the …\nCreate a new transaction pool.\nCreate a new transaction pool with statically sized …\nInform the transaction pool about imported and finalized …\nNotifies the pool about the broadcasting status of …\nGets shared reference to the underlying pool.\nPrunes ready transactions.\nPrunes known ready transactions.\nPrunes ready transactions that provide given list of tags.\nReturns an iterator for ready transactions, ordered by …\nReady queue limits.\nReturns an iterator for ready transactions at a specific …\nReturns a best-effort set of ready transactions for a …\nReturns a set of ready transactions at a given block …\nReturn specific ready transaction by hash, if there is one.\nReject future transactions.\nReports invalid transactions to the transaction pool.\nResolves block number by id.\nResubmit some transaction that were validated elsewhere.\nResubmit the given extrinsics to the pool.\nThe original source of the transaction.\nReturns the pool status which includes information like …\nProvides a status for all views at the tips of the forks.\nSubmits a transaction and starts to watch its progress in …\nImport a single extrinsic and starts to watch its progress …\nSubmits multiple transactions and returns a future …\nImports a bunch of unverified extrinsics to the pool\nSubmits a single transaction and returns a future …\nImports one unverified extrinsic to the pool\nThe time at which the transaction was submitted.\nMaximal size of encodings of all transactions in the queue.\nTotal (ready+future) maximal number of transactions in the …\nCompute a tree-route between two blocks. See <code>TreeRoute</code> for …\nAsynchronously verify extrinsic at given block.\nSynchronously verify given extrinsic at given block.\nValidates a transaction by calling into the runtime.\nGet a reference to the underlying validated pool.\nSets the options used for creating a transaction pool …\nSets the prometheus endpoint used in a transaction pool …\nCreate new basic transaction pool with provided api and …\nBlock type.\nBlock type.\nBlock hash type for a pool.\nThe transaction has been broadcast to the given peers.\nEvents that the transaction pool listens for.\nTransaction has been dropped from the pool because of the …\nError type.\nError type.\nTransaction has been received externally.\nMaximum number of finality watchers has been reached, old …\nTransaction has been finalized by a finality-gadget, e.g. …\nAn existing block has been finalized.\nTransaction is part of the future queue.\nTransaction hash type.\nTransaction hash type.\nTransaction hash type.\nThe import notification event stream.\nTransaction has been included in block with given hash at …\nTransaction is already included in block.\nIn-pool transaction interface.\nIn-pool transaction type.\nTransaction is no longer valid in the current state.\nThe transaction is invalid.\nTransaction is coming from a local source.\nTransaction type for a local pool.\nTransaction pool interface for submitting local …\nTrait for transaction pool maintenance.\nNew best block have been added to the chain.\nFactory for creating <code>TransactionPoolExt</code>s.\nTransaction pool status.\nTransaction is part of the ready queue.\nAn iterator of ready transactions.\nTransaction pool that rejects all submitted transactions.\nThe block this transaction was included in has been …\nTransaction type.\nTransaction type for a pool.\nMinimum number of blocks a transaction will remain valid …\nTransaction pool interface.\nPriority for a transaction. Additive. Higher is better.\nThe source of the transaction.\nPossible transaction status events.\nThe stream of transaction events.\nType of transactions event stream for a pool.\nTag for a transaction. No two transactions with the same …\nErrors that can occur while checking the validity of a …\nTransaction hash type for a pool.\nTransaction’s index within the block in which it was …\nMap containing validity errors associated with transaction …\nTransaction validity can’t be determined.\nTransaction has been replaced in the pool, by another …\nGet the reference to the transaction data.\nTransaction pool errors.\nReturns <code>true</code> if the reason for the error was block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nNumber of transactions in the future queue.\nSum of bytes of ready transaction encodings.\nGet futures transaction list.\nGet hash of the transaction.\nReturns the block hash associated to the event.\nReturns transaction hash\nReturn an event stream of transactions imported to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no transactions in the pool.\nReturns true if this is the last event emitted by …\nIs <code>self == Self::Finalized</code>?\nReturn a flag indicating if the transaction should be …\nReturns true if the transaction could be re-submitted to …\nGet longevity of the transaction.\nPerform maintenance\nCreates a new instance using the given <code>tx_pool</code>.\nReturns an instance of <code>TransactionPoolExt</code> bound to the …\nNotify the pool about transactions broadcast.\nGet priority of the transaction.\nGet tags that transaction provides.\nGet an iterator for ready transactions ordered by priority.\nNumber of transactions in the ready queue.\nGet an iterator for ready transactions ordered by priority.\nAsynchronously returns a set of ready transaction at given …\nSum of bytes of ready transaction encodings.\nReturn specific ready transaction by hash, if there is one.\nReport given transaction as invalid.\nReports invalid transactions to the transaction pool.\nGet transaction dependencies.\nReturns pool status.\nAsynchronously imports a single transaction and starts to …\nAsynchronously imports a bunch of unverified transactions …\nSubmits the given local unverified transaction to the pool …\nAsynchronously imports one unverified transaction to the …\nReturns <code>true</code> if the reason for the error was it being a …\nHash of the block.\nHash of just finalized block.\nTree route from old best to new best parent that was …\nPath from old finalized to new finalized parent.\nContains the error value\nTransaction pool error type.\nTransaction pool error conversion.\nThe transaction validity returned no “provides” tag.\nContains the success value\nTransaction pool result.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns true if the transaction could be re-submitted to …\nTransaction entering the pool.\nTransaction already in the pool.\nProduce opaque sequential IDs.\nMetering primitives and globals\nCode to meter unbounded channels.\nProvides mpsc notification channel that can be instantiated\nProvides means to implement a typical Pub/Sub mechanism.\nA Sequence of IDs.\nA Sequential ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ID-sequence.\nObtain another ID from this sequence.\nRegister the statics to report to registry\nThe channel is closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nThe channel is full but not closed.\nWrapper Type around <code>async_channel::Receiver</code> that decreases …\nWrapper Type around <code>async_channel::Sender</code> that increases …\nAn error returned from <code>Receiver::try_recv()</code>.\nAn error returned from <code>Sender::try_send()</code>.\nProxy function to <code>async_channel::Sender</code>.\nProxy function to <code>async_channel::Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message that couldn’t be sent.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is empty and closed.\nProxy function to <code>async_channel::Sender</code>.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if the channel is full but not closed.\nThe number of elements in the channel (proxy function to …\nThe number of elements in the channel (proxy function to …\nThe name of this receiver\nWrapper around <code>async_channel::unbounded</code> that tracks the …\nProxy function to <code>async_channel::Receiver</code> that discounts …\nProxy function to <code>async_channel::Sender::try_send</code>.\nThe receiving half of the notifications channel(s).\nThe sending half of the notifications channel(s).\nThe receiving half of the notifications channel.\nConst <code>str</code> representing the “tracing key” used to tag …\nTrait used to define the “tracing key” string used to …\nCreates a new pair of receiver and sender of <code>Payload</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend out a notification to all subscribers that a new …\nSubscribe to a channel through which the generic payload …\nDispatch a message of type <code>M</code>.\nA subscription hub.\nThe type of the that shall be sent through the channel as …\nThe receiving side of the subscription.\nThe type returned by the <code>dispatch</code>-method.\nSubscribe using a key of type <code>K</code>\nUnsubscribe: unregisters a previously created subscription.\nDispatch the message of type <code>M</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide access to the registry (for test purposes).\nCreate a new instance of Hub (with default value for the …\nCreate a new instance of Hub over the initialized Registry.\nSend the message produced with <code>Trigger</code>.\nRegister subscriber with the ID <code>subs_id</code> as having interest …\nSubscribe to this Hub using the <code>subs_key: K</code>.\nRemove all registrations of the subscriber with ID <code>subs_id</code>.\nOne of the sinks is ready.\nHolds a list of <code>UnboundedSender</code>s, each associated with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a new empty collection.\nWaits until one of the sinks is ready, then returns an …\nAdds a sender to the collection.\nSends an element on the sender.\nThe addition operator <code>+</code>.\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> for struct and enum.\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nThe resulting type after applying the <code>+</code> operator.\nPerforms the <code>+</code> operation.\nSubtracts two numbers, checking for underflow. If …\nAttempt to deserialise the value from input.\nThis macro generates a <code>SlotRange</code> enum of arbitrary length …\nThe authority discovery api.\nAn authority discovery authority identifier.\nAn authority discovery authority keypair.\nAn authority discovery authority signature.\nRetrieve authority identifiers of the current and next …\nBlock data origin.\nBlock status.\nSigning failed.\nError from the client while fetching some data from the …\nError from the client while importing.\nBlock that was received from the network and validated in …\nA future that resolves to the proposer.\nExpress that proof recording is disabled.\nIs proof recording enabled?\nExpress that proof recording is enabled.\nEnvironment for a Consensus instance.\nThe error type for consensus-related operations.\nError which can occur upon creation.\nAn error type when fetching data is not possible.\nError type which can occur when proposing or evaluating.\nBlock was imported from a file.\nGenesis block built into the client.\nIn the blockchain, but the state is not available.\nAlready in the blockchain and the state is available.\nInherent data to include in a block.\nInvalid authorities set received from the runtime.\nIntermediate is of wrong type.\nJustification requirements not met.\nError checking signature.\nBlock or parent is known to be bad.\nBlock was broadcasted on the network.\nBlock is part of the initial sync with the network.\nIntermediate missing.\nA synchronization oracle for when there is no network.\nError that is returned when <code>ProofRecording</code> requested to …\nSome other error.\nThe justification provided is outdated and corresponds to …\nBlock that was collated by this node.\nThe proof type that will be used internally.\nThe proof type used by <code>Self::ProofRecording</code>.\nA trait to express the state of proof recording on type …\nThe supported proof recording by the implementor of this …\nA proposal that is created by a <code>Proposer</code>.\nFuture that resolves to a committed proposal with an …\nLogic for a proposer.\nThe proposer type this creates.\nAdded to the import queue.\nType of the raw storage iterator.\nThe SelectChain trait defines the strategy upon which the …\nA state backend is used to read state data and can have …\nMissing state at block with given descriptor.\nAn oracle for when major synchronization work is being …\nType of trie backend storage.\nNot in the queue or the blockchain.\nAmong those <code>leaves</code> deterministically pick one chain as the …\nThe block that was build.\nBlock announcement validation.\nGet the child merkle value or None if there is nothing …\nGet child keyed child storage or None if there is nothing …\nGet child keyed storage value hash or None if there is …\nCalculate the child storage root, with given delta over …\nGet the merkle value or None if there is nothing …\nError types for consensus modules.\nGet the best descendent of <code>base_hash</code> that we should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the data for the requested inherent.\nGet the identifiers of stored inherent data\nInitialize the proposal logic on top of a specific header. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the given <code>storage_proof</code> into <code>Self::Proof</code>.\nWhether the synchronization service is undergoing major …\nWhether the synchronization service is offline. Returns …\nGet all leaves of the chain, i.e. block hashes that have …\nGet the number of inherents in this instance\nCreate a new instance.\nReturn the next key in child storage in lexicographic …\nReturn the next key in storage in lexicographic order or …\nProof that was recorded while building the block.\nCreate a proposal.\nPut data for an inherent into the internal storage.\nReturns a lifetimeless raw storage iterator.\nRegister stats from overlay of state machine.\nReplace the data for an inherent.\nGet keyed storage or None if there is nothing associated.\nThe storage changes while building this block.\nGet keyed storage value hash or None if there is nothing …\nCalculate the storage root, with given delta over what is …\nQuery backend usage statistics (i/o, memory)\nType which checks incoming block announcements.\nA type which provides access to chain information.\nDefault implementation of <code>BlockAnnounceValidator</code>.\nInvalid block announcement.\nValid block announcement.\nResult of <code>BlockAnnounceValidator::validate</code>.\nRetrieve the status of the block denoted by the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate the announced header and its associated data.\nShould we disconnect from this peer?\nIs this the new best block of the node?\nSigning failed.\nError from the client while fetching some data from the …\nError from the client while importing.\nContains the error value\nThe error type for consensus-related operations.\nInvalid authorities set received from the runtime.\nIntermediate is of wrong type.\nJustification requirements not met.\nError checking signature.\nIntermediate missing.\nContains the success value\nSome other error.\nThe justification provided is outdated and corresponds to …\nResult type alias.\nMissing state at block with given descriptor.\nTypes of allowed slots.\nA Babe authority identifier. Necessarily equivalent to the …\nThe index of an authority.\nA Babe authority keypair. Necessarily equivalent to the …\nA Babe authority signature.\nThe <code>ConsensusEngineId</code> of BABE.\nAPI necessary for block authorship with BABE.\nThe weight of an authority.\nThe cumulative weight of a BABE block, i.e. sum of block …\nConfiguration data used by the BABE consensus engine.\nConfiguration data used by the BABE consensus engine.\nConfiguration data used by the BABE consensus engine that …\nAn consensus log item for BABE.\nBABE epoch information\nAn equivocation proof for multiple block authorships on …\nKey type for BABE module.\nHow many blocks to wait before running the median …\nThe epoch has changed, and the epoch after the current one …\nThe epoch has changed. This provides information about the …\nDisable the authority with given index.\nAn opaque type used to represent the key ownership proof …\nThe length of the public key\nAllow primary and secondary plain slots.\nAllow primary and secondary VRF slots.\nOnly allow primary slots.\nVRF output length for per-slot randomness.\nVRF context used for per-slot randomness generation.\nRandomness type required by BABE operations.\nUnit type wrapper that represents a slot.\nA slot duration defined in milliseconds.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nType of allowed slots.\nWhether this chain should run with secondary slots, which …\nThe authorities for the genesis epoch.\nThe authorities\nThe authorities and their weights.\nA constant value that is used in the threshold calculation …\nA constant value that is used in the threshold calculation …\nA constant value that is used in the threshold calculation …\nVerifies the equivocation proof by making sure that: both …\nConfiguration of the epoch.\nTry to decode this <code>OpaqueKeyOwnershipProof</code> into the given …\nPrivate implementation details of BABE digests.\nThe duration of this epoch.\nReturns the epoch index the given slot belongs to.\nThe epoch index.\nThe duration of epochs in slots.\nThe duration of epochs in slots.\nReturns the first slot at the given epoch index.\nThe first header involved in the equivocation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInherents for BABE\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nMake VRF signing data suitable for BABE’s protocol.\nMake VRF input suitable for BABE’s randomness generation.\nCreate a new <code>OpaqueKeyOwnershipProof</code> using the given …\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nReturns the authority id of the equivocator.\nVRF pre-output.\nVRF proof.\nThe randomness for the genesis epoch.\nThe randomness\nRandomness for this epoch.\nThe second header involved in the equivocation.\nWhether this chain should run with secondary slots, which …\nThe slot at which the equivocation happened.\nThe slot duration in milliseconds for BABE. Currently, only\nThe slot duration in milliseconds for BABE. Currently, only\nThe starting slot of the epoch.\nAdd some extra data to be signed.\nA digest item which is usable with BABE consensus.\nInformation about the next epoch config, if changed. This …\nInformation about the next epoch. This is broadcast in the …\nA BABE pre-runtime digest. This contains all data required …\nA primary VRF-based slot assignment.\nRaw BABE primary slot assignment pre-digest.\nA secondary deterministic slot assignment.\nBABE secondary slot assignment pre-digest.\nA secondary deterministic slot assignment with VRF outputs.\nBABE secondary deterministic slot assignment with VRF …\nVersion 1.\nIf this item is an BABE pre-digest, return it.\nIf this item is a BABE signature, return the signature.\nIf this item is a BABE config descriptor, return it.\nIf this item is a BABE epoch descriptor, return it.\nThe authorities.\nAuthority index\nAuthority index\nAuthority index\nConstruct a digest item which contains a BABE pre-digest.\nConstruct a digest item which contains a BABE seal.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe value of randomness to use for the slot-assignment.\nSlot\nSlot\nSlot\nVRF signature\nVRF signature\nValue of <code>allowed_slots</code> in <code>BabeEpochConfiguration</code>.\nValue of <code>c</code> in <code>BabeEpochConfiguration</code>.\nCreate inherent data providers for BABE with timestamp.\nAuxiliary trait to extract BABE inherent data.\nThe BABE inherent identifier.\nProvides the slot duration inherent data for BABE.\nThe type of the BABE inherent.\nGet BABE inherent data.\nReplace BABE inherent data.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates the inherent data provider by calculating the slot …\nCalls <code>U::from(self)</code>.\nCreate new inherent data provider from the given <code>slot</code>.\nReturns the <code>slot</code> of this inherent data provider.\nHook containing helper methods for proving/checking …\nWeight information for the logic in <code>AncestryHelper</code>.\nThe authorities have changed.\nA trait bound which lists all traits which are required to …\nThe index of an authority.\nThe <code>ConsensusEngineId</code> of BEEFY.\nAPI necessary for BEEFY voters.\nTrait representing BEEFY authority id, including custom …\nId of different payloads in the <code>crate::Commitment</code> data.\nHasher used for BEEFY signatures.\nNecessary bounds on the Signature associated with the …\nA commitment signed by GRANDPA validators as part of BEEFY …\nA consensus log item for BEEFY.\nProof showing that an authority voted twice in the same …\nProof showing that an authority voted for a non-canonical …\nProof showing that an authority voted for a future block.\nAuthority set id starts with zero at BEEFY pallet genesis.\nKey type for BEEFY module.\nA commitment signature, accompanied by the id of the …\nThe Hashing used within MMR.\nMMR root hash.\nThe type used to represent an MMR root hash.\nDisable the authority with given index.\nNew BEEFY validator set notification hook.\nAn opaque type used to represent the key ownership proof …\nA BEEFY payload type allowing for future extensibility of …\nTrait for custom BEEFY payload providers.\nType containing proved info about the canonical chain at a …\nA commitment with matching GRANDPA validators’ …\nCurrent active version\nThe data needed for validating the proof.\nA set of BEEFY authorities, a.k.a. validators.\nA typedef for validator set id.\nA SignedCommitment with a version number.\nBEEFY vote message.\nProof containing info about the canonical chain at …\nReturn the block number where BEEFY consensus is …\nFinalized block number this commitment is for.\nBEEFY cryptographic types for BLS crypto\nCheck a commitment signature by encoding the commitment and\nVerifies the equivocation proof by making sure that both …\nThe commitment signatures are collected for.\nCommit to information extracted from a finalized block\nBEEFY cryptographic types for (ECDSA,BLS) crypto pair\nBEEFY cryptographic types for ECDSA crypto\nExtract the validation context from the provided header.\nWeight info for the …\nThe first vote in the equivocation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstruct a new payload given an initial value\nGenerates a proof of key ownership for the given authority …\nReturns all decoded payload values under given <code>id</code>.\nReturns all the raw payloads under given <code>id</code>.\nReturns a decoded payload value under given <code>id</code>.\nReturns a raw payload under given <code>id</code>.\nThe header of the block where the ancestry proof was …\nReturn the validator set id.\nNode authority id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a commitment is pointing to a header on a …\nWeight info for the <code>AncestryHelper::is_non_canonical()</code> …\nCheck if the proof is optimal.\nWeight info for the <code>AncestryHelper::is_proof_optimal()</code> …\nReturn the number of validators in the set.\nBEEFY + MMR utilities.\nReturn a validator set with the given validators and set …\nReturns the authority id of the equivocator.\nFunction called by the pallet when BEEFY validator set …\nProvide BEEFY payload if available for <code>header</code>.\nA collection of payloads to be signed, see <code>Payload</code> for …\nPush a <code>Vec&lt;u8&gt;</code> with a given id into the payload vec. This …\nReturns the round number at which the equivocation …\nThe second vote in the equivocation.\nReturns the set id at which the equivocation occurred.\nThe signature.\nNode signature\nReturn the number of collected signatures.\nGRANDPA validators’ signatures for the commitment.\nSubmits an unsigned extrinsic to report a double voting …\nSubmits an unsigned extrinsic to report a fork voting …\nSubmits an unsigned extrinsic to report a future block …\nTest utilities\nCreates a <code>KnownSignature&lt;TAuthorityId, TSignature&gt;</code> from an …\nTry to decode the <code>AncestryProof</code>.\nThe signing validator.\nReturn the current active BEEFY validator set\nBEEFY validator set supposed to sign this commitment.\nReturn a reference to the vec of validators.\nVerify a signature.\nVerify all the commitment signatures against the validator …\nThe equivocated vote.\nThe equivocated vote.\nPrimitives for light, 2-phase interactive verification …\nIdentity of a BEEFY authority using BLS as its crypto.\nSignature for a BEEFY authority using BLS as its crypto.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic key pair type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic public key type.\nIdentity of a BEEFY authority using (ECDSA,BLS) as its …\nSignature for a BEEFY authority using (ECDSA,BLS) as its …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic key pair type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic public key type.\nIdentity of a BEEFY authority using ECDSA as its crypto.\nSignature for a BEEFY authority using ECDSA as its crypto.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic key pair type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic public key type.\nDetails of a BEEFY authority set.\nA provider for extra data that gets added to the Mmr leaf\nDetails of the next BEEFY authority set.\nA standard leaf that gets added every block to the MMR …\nAn MMR leaf versioning scheme.\nA <code>crate::Payload</code> provider where payload is Merkle Mountain …\nA merkle root of the next BEEFY authority set.\nReturn a vector of bytes, ideally should be a merkle root …\nExtract the MMR root hash from a digest in the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nId of the set.\nId of the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommitment(s) to BEEFY AuthorityIds.\nCommitment(s) to BEEFY AuthorityIds.\nArbitrary extra leaf data to be used by downstream pallets …\nNumber of validators in the set.\nNumber of validators in the set.\nCreate new BEEFY Payload provider with MMR Root as payload.\nCreate new version object from <code>major</code> and <code>minor</code> components.\nCurrent block parent number and hash.\nSplit the version into <code>major</code> and <code>minor</code> sub-components.\nVersion of the leaf format.\nTrait representing BEEFY specific generation and signing …\nSet of test accounts using <code>crate::ecdsa_crypto</code> types.\nAn iterator over the variants of Keyring\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet Keyring from public key.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new <code>DoubleVotingProof</code> based on given arguments.\nCreate a new <code>ForkVotingProof</code> based on vote &amp; canonical …\nCreate a new <code>ForkVotingProof</code> based on vote &amp; canonical …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn key pair.\nReturn public key.\nSign <code>msg</code>.\nGenerate and return signature for <code>message</code> using custom …\nCreate a new <code>VoteMessage</code> from commitment primitives and …\nReturn seed string.\nA light form of SignedCommitment.\nThe full content of the commitment.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConvert SignedCommitment into SignedCommitmentWitness.\nCalls <code>U::from(self)</code>.\nEither a merkle root of signatures in the original signed …\nThe bit vector of validators who signed the commitment.\nAPI for those chains that put their difficulty adjustment …\nThe <code>ConsensusEngineId</code> of PoW.\nType of seal.\nAPI necessary for timestamp-based difficulty adjustment …\nDefine methods that total difficulty should implement.\nReturn the target difficulty of the next block.\nReturn the timestamp in the current block.\nRepresents an equivocation proof. An equivocation happens …\nUnit type wrapper that represents a slot.\nA slot duration defined in milliseconds.\nThe first header involved in the equivocation.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the authority id of the equivocator.\nThe second header involved in the equivocation.\nThe slot at which the equivocation happened.\nDo a Blake2 128-bit hash and return result.\nDo a Blake2 256-bit hash and return result.\nDo a Blake2 512-bit hash and return result.\nDo a Blake2 512-bit hash and place result in <code>dest</code>.\nDo a Blake2 64-bit hash and return result.\nDo a keccak 256-bit hash and return result.\nDo a keccak 512-bit hash and return result.\nDo a sha2 256-bit hash and return result.\nDo a XX 128-bit hash and return result.\nDo a XX 128-bit hash and place result in <code>dest</code>.\nDo a XX 256-bit hash and return result.\nDo a XX 256-bit hash and place result in <code>dest</code>.\nDo a XX 64-bit hash and return result.\nDo a XX 64-bit hash and place result in <code>dest</code>.\nApply a Blake2 256-bit hash of bytes parameter, outputs a …\nApply a Blake2 512-bit hash of bytes parameter, outputs a …\nProcess a Blake2 64-bit hash of bytes parameter outputs a …\nApply a keccak 256-bit hash on its bytes parameter, …\nApply a keccak 512-bit hash on its bytes parameter, …\nApply a sha2 256-bit hash on its bytes parameter, outputs …\nApply a XX 128-bit hash on its bytes parameter, outputs a …\nApply a XX 64-bit hash on its bytes parameter, outputs a …\n<em>BLS12-377</em> types and host functions.\n<em>BLS12-381</em> types and host functions.\n<em>BW6-761</em> types and host functions.\n<em>Ed-on-BLS12-377</em> types and host functions.\nElliptic Curves host functions to handle some of the …\n<em>BLS12-377</em> definition.\nConfiguration for <em>BLS12-377</em> curve.\nShort Weierstrass form point affine representation.\nGroup configuration.\nShort Weierstrass form point projective representation.\nShort Weierstrass form point affine representation.\nGroup configuration.\nShort Weierstrass form point projective representation.\nCurve hooks jumping into <code>host_calls</code> host functions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nFirst pairing group definitions.\nSecond pairing group definitions.\nInterfaces for working with <em>Arkworks</em> <em>BLS12-377</em> elliptic …\nCalls <code>U::from(self)</code>.\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProjective multiplicative inverse. Will be <code>0</code> only at …\nGroup configuration.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nTwisted Edwards form point affine representation.\nTwisted Edwards form point projective representation.\nG1_GENERATOR_X = …\nG1_GENERATOR_Y = …\nTE_GENERATOR_X = …\nTE_GENERATOR_Y = …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>X / Z</code> projection of the affine <code>X</code>\nX coordinate of the point represented as a field element\n<code>Y / Z</code> projection of the affine <code>Y</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nY coordinate of the point represented as a field element\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProjective multiplicative inverse. Will be <code>0</code> only at …\nGroup configuration.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nG2_GENERATOR_X_C0 = …\nG2_GENERATOR_X_C1 = …\nG2_GENERATOR_Y_C0 = …\nG2_GENERATOR_Y_C1 = …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProvides implementations for the extern host functions.\nPairing final exponentiation for <em>BLS12-377.</em>\nMulti scalar multiplication on <em>G1</em> for <em>BLS12-377</em>.\nMulti scalar multiplication on <em>G2</em> for <em>BLS12-377</em>.\nProjective multiplication on <em>G1</em> for <em>BLS12-377</em>.\nProjective multiplication on <em>G2</em> for <em>BLS12-377</em>.\nPairing multi Miller loop for <em>BLS12-377</em>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\n<em>BLS12-381</em> definition.\nConfiguration for <em>BLS12-381</em> curve.\nShort Weierstrass form point affine representation.\nGroup configuration.\nShort Weierstrass form point projective representation.\nShort Weierstrass form point affine representation.\nGroup configuration.\nShort Weierstrass form point projective representation.\nCurve hooks jumping into <code>host_calls</code> host functions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nFirst pairing group definitions.\nSecond pairing group definitions.\nInterfaces for working with <em>Arkworks</em> <em>BLS12-381</em> elliptic …\nCalls <code>U::from(self)</code>.\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProjective multiplicative inverse. Will be <code>0</code> only at …\nBETA is a non-trivial cubic root of unity in Fq.\nGroup configuration.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nG1_GENERATOR_X = …\nG1_GENERATOR_Y = …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nGroup configuration.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nG2_GENERATOR_X_C0 = …\nG2_GENERATOR_X_C1 = …\nG2_GENERATOR_Y_C0 = …\nG2_GENERATOR_Y_C1 = …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProvides implementations for the extern host functions.\nPairing final exponentiation for <em>BLS12-381</em>.\nMulti scalar multiplication on <em>G1</em> for <em>BLS12-381</em>\nMulti scalar multiplication on <em>G2</em> for <em>BLS12-381</em>\nProjective multiplication on <em>G1</em> for <em>BLS12-381</em>.\nProjective multiplication on <em>G2</em> for <em>BLS12-381</em>\nPairing multi Miller loop for <em>BLS12-381</em>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\n<em>BW6-361</em> definition.\nConfiguration for <em>BW6-361</em> curve.\nShort Weierstrass form point affine representation.\nGroup configuration.\nShort Weierstrass form point projective representation.\nShort Weierstrass form point affine representation.\nGroup configuration.\nShort Weierstrass form point projective representation.\nCurve hooks jumping into <code>host_calls</code> host functions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nFirst pairing group definitions.\nSecond pairing group definitions.\nInterfaces for working with <em>Arkworks</em> <em>BW6-761</em> elliptic …\nCalls <code>U::from(self)</code>.\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProjective multiplicative inverse. Will be <code>0</code> only at …\nGroup configuration.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nG1_GENERATOR_X = …\nG1_GENERATOR_Y = …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nGroup configuration.\nShort Weierstrass form point affine representation.\nShort Weierstrass form point projective representation.\nG2_GENERATOR_X = …\nG2_GENERATOR_Y = …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProvides implementations for the extern host functions.\nPairing final exponentiation for <em>BW6-761</em>.\nMulti scalar multiplication on <em>G1</em> for <em>BW6-761</em>.\nMulti scalar multiplication on <em>G2</em> for <em>BW6-761</em>.\nProjective multiplication on <em>G1</em> for <em>BW6-761</em>.\nProjective multiplication on <em>G2</em> for <em>BW6-761</em>.\nPairing multi Miller loop for <em>BW6-761</em>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTwisted Edwards form point affine representation.\nGroup configuration.\nTwisted Edwards form point projective representation.\nCurve hooks jumping into <code>host_calls</code> host functions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInterfaces for working with <em>Arkworks</em> <em>Ed-on-BLS12-377</em> …\nCalls <code>U::from(self)</code>.\nX coordinate of the point represented as a field element\nY coordinate of the point represented as a field element\nProvides implementations for the extern host functions.\nTwisted Edwards multi scalar multiplication for …\nTwisted Edwards projective multiplication for …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nGroup configuration.\nTwisted Edwards form point affine representation.\nGroup configuration for Twisted Edwards form (equal to …\nTwisted Edwards form point projective representation.\nCurve hooks jumping into <code>host_calls</code> host functions.\nShort Weierstrass form point affine representation.\nGroup configuration for Short Weierstrass form (equal to …\nShort Weierstrass form point projective representation.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInterfaces for working with <em>Arkworks</em> …\nCalls <code>U::from(self)</code>.\nX coordinate of the point represented as a field element\n<code>X / Z</code> projection of the affine <code>X</code>\nY coordinate of the point represented as a field element\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nProvides implementations for the extern host functions.\nShort Weierstrass multi scalar multiplication for …\nShort Weierstrass projective multiplication for …\nTwisted Edwards multi scalar multiplication for …\nTwisted Edwards projective multiplication for …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nAn alteration to the database.\nAn identifier for a column.\nThis implements <code>Database</code> as an in-memory hash map. <code>commit</code> …\nA series of changes to the database that can be committed …\nWrap RocksDb database into a trait object that implements …\nCommit the <code>transaction</code> to the database atomically. Any …\nCount number of values in a column\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.")