searchState.loadedDescShard("yet_another_parachain_runtime", 30, "Get a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieve the value previously stored against <code>key</code> or <code>None</code> if\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance\nCreate a new transaction to be prepared and committed …\nIncrease the number of references for <code>hash</code> in the database.\nRelease the preimage of <code>hash</code> from the database. An equal …\nRemove the value of <code>key</code> in <code>col</code>.\nSet the value of <code>key</code> in <code>col</code> to <code>value</code>, replacing anything …\nSet the value of <code>key</code> in <code>col</code> to <code>value</code>, replacing anything …\nStore the <code>preimage</code> of <code>hash</code> into the database, so that it …\nCall <code>f</code> with the value previously stored against <code>key</code> and …\nThe error type for database operations.\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for database operations.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nExternalities error.\nMarker trait for types that should be registered as …\nSame extension cannot be registered twice.\nExtension <code>TypeId</code> is not registered.\nSomething that provides access to the <code>Extensions</code> store.\nStores extensions that should be made available through …\nExtensions are not supported.\nThe Substrate externalities.\nExtension for the <code>Externalities</code> trait.\nResults concerning an operation to remove many keys.\nFailed to update storage,\nReturn the extension as <code>&amp;mut dyn Any</code>.\nThe number of items removed from the backend database.\nRead child runtime storage.\nGet child storage value hash.\nGet the trie root of a child storage map.\nClear child storage entries which keys are start with the …\nClear storage entries which keys are start with the given …\n…\nMacro for declaring an extension that usable with …\nDeconstruct into the internal components.\nDeregister extension for the given <code>type_id</code>.\nDeregister and drop extension of <code>T</code> type.\nDeregister extension with specified ‘type_id’ and drop …\nTries to find a registered extension and returns a mutable …\nTries to find a registered extension by the given <code>type_id</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn a mutable reference to the requested extension.\n…\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a mutable iterator over all extensions.\nClear an entire child storage.\nThe number of iterations (each requiring a storage …\nA continuation cursor which, if <code>Some</code> must be provided to …\nMerge <code>other</code> into <code>self</code>.\nCreate new instance of <code>Self</code>.\nReturns the key immediately following the given key, if it …\nReturns the key immediately following the given key, if it …\nSet or clear a child storage entry.\nSet or clear a storage entry (<code>key</code>) of current contract …\n…\nRegister the given extension.\nRegister extension <code>ext</code>.\nRegister extension <code>extension</code> with specified <code>type_id</code>.\nRegister extension <code>extension</code> using the given <code>type_id</code>.\n…\nSet the given externalities while executing the given …\nWrite a key value pair to the offchain storage database.\n…\nRead runtime storage.\nAppend storage item.\nCommit the last transaction started by …\nGet storage value hash.\nRollback the last transaction started by …\nGet the trie root of the current storage map.\nStart a new nested transaction.\nGet the <code>TypeId</code> of this <code>Extension</code>.\nThe number of unique keys removed, taking into account …\n…\nExecute the given closure with the currently set …\nKeystore error\nPublic key type is not supported\nSomething that generates, stores and provides access to …\nThe keystore extension to register/retrieve from the …\nA shared pointer to a keystore implementation.\nProgramming errors\nKeystore unavailable\nValidation error\nGenerate a new bandersnatch key pair for the given key …\nReturns all the bandersnatch public keys for the given key …\nGenerate a bandersnatch ring-VRF signature for the given …\nGenerate an bandersnatch signature for a given message.\nGenerate a bandersnatch VRF pre-output for a given input …\nGenerate a bandersnatch VRF signature for the given data.\nGenerate a new bls381 key pair for the given key type and …\nGenerate a bls381 Proof of Possession for a given public …\nReturns all bls12-381 public keys for the given key type.\nGenerate a bls381 signature for a given message.\nGenerate a new (ecdsa,bls381) key pair for the given key …\nReturns all (ecdsa,bls12-381) paired public keys for the …\nGenerate a (ecdsa,bls381) signature pair for a given …\nHashes the <code>message</code> using keccak256 and then signs it using …\nGenerate a new ecdsa key pair for the given key type and …\nReturns all ecdsa public keys for the given key type.\nGenerate an ecdsa signature for a given message.\nGenerate an ecdsa signature for a given pre-hashed message.\nGenerate a new ed25519 key pair for the given key type and …\nReturns all ed25519 public keys for the given key type.\nGenerate an ed25519 signature for a given message.\nReturns the argument unchanged.\nCreate a new instance of <code>KeystoreExt</code>\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nChecks if the private keys for the given public key and …\nInsert a new secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all supported keys of a given type.\nCreate a new instance of <code>KeystoreExt</code> using the given …\nGenerate a new sr25519 key pair for the given key type and …\nReturns all the sr25519 public keys for the given key type.\nGenerate an sr25519 signature for a given message.\nGenerate an sr25519 VRF pre-output for a given input data.\nGenerate an sr25519 VRF signature for the given data.\nTypes that should only be used for testing!\nA keystore implementation usable in tests.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>Self</code>.\nA recommendation for the bomb limit for code blobs.\nA possible bomb was encountered.\nThe compressed value had an invalid format.\nDecoded size was too large, and the code payload may be a …\nEncode a blob as compressed. If the blob’s size is over …\nDecode a blob, if it indicates that it is compressed. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nRuntime API for querying mixnet configuration and …\nMixnet types used by both host and runtime.\nAPI to query the mixnet session status and mixnode sets, …\nGet the mixnode set for the current session.\nTry to register a mixnode for the next session.\nGet the mixnode set for the previous session.\nGet the index and phase of the current session.\nAuthority public session key, used to verify registration …\nAuthority signature, attached to mixnode registrations.\nGenerate cover traffic to the current session’s mixnode …\nOnly send cover (and forwarded) traffic to the previous …\nDisconnect the previous session’s mixnode set.\nInsufficient mixnodes were registered for the session.\nSize in bytes of a <code>KxPublic</code>.\nX25519 public key, used in key exchange between message …\nInformation published on-chain for each mixnode every …\nError querying the runtime for a session’s mixnode set.\nEd25519 public key of a libp2p peer.\nBuild requests using the current session’s mixnode set.\nAbsolute session index.\nEach session should progress through these phases in order.\nThe index and phase of the current session.\nIndex of the current session.\nExternal addresses for the mixnode, in multiaddr format, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey-exchange public key for the mixnode.\nlibp2p peer ID of the mixnode.\nCurrent session phase.\nThe minimum number of mixnodes that must be registered for …\nThe number of mixnodes that were registered for the …\nAn error occurred in some arithmetic operation.\nA voter’s stake assignment among a set of targets, …\nGeneric representation of a support.\nUtility struct to group parameters for the balancing …\nSome bounds were exceeded when converting election types.\nA candidate entity for the election.\nA pointer to a candidate struct with interior mutability.\nA duplicate target was detected.\nA duplicate voter was detected.\nA vote being casted by a <code>Voter</code> to a <code>Candidate</code> is an <code>Edge</code>.\nFinal result of the election.\nThe score of an election. This is the main measure of an …\nThe errors that might occur in this crate and …\nExtension trait for evaluating a support map or vector.\nA type in which performing operations on vote weights are …\nan aggregator trait for a generic type of a voter/target …\nThe data provided to create support map was invalid.\nAggregator trait for a PerThing that can be multiplied by …\nOne of the index functions returned none.\nOne of the page indices was invalid.\nThe solution type has a voter who’s number of targets is …\nWhile going from solution indices to ratio, the weight of …\nA voter’s stake assignment among a set of targets, …\nA structure to demonstrate the election result from the …\nLinkage from a winner to their <code>Support</code>.\nA target-major representation of the the election outcome.\nThe number of voters is bigger than the <code>MaxVoters</code> bound.\nA type which is used in the API of this crate as a numeric …\nA voter entity.\nConverts a vector of ratio assignments into ones with …\nSame as <code>assignment_ratio_to_staked</code> and try and do …\nConverts a vector of staked assignments into ones with …\nSame as <code>assignment_staked_to_ratio</code> and try and do …\nIndividual assignments. for each tuple, the first elements …\nBalance the weight distribution of a given <code>voters</code> at most …\nBalancing algorithm implementation.\nThis voter’s budget.\nThe distribution of the voter’s stake.\nThe distribution of the voter’s stake.\nEvaluate a support map. The returned tuple contains:\nGeneral evaluation of a list of backings that returns an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHelper methods for npos-elections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts self into the normal <code>Assignment</code> type.\nReturns none if this voter does not have any non-zero …\nThe minimal winner, in terms of total backing stake.\nCreate a new <code>Voter</code>.\n(very) Basic implementation of a graph node used in the …\nImplementation of the sequential-phragmen election method.\nImplementation of the PhragMMS method.\nExecute the phragmms method.\nImplements functions and interfaces to check solutions for …\nCheck a solution to be PJR.\nThe internal implementation of the PJR check after having …\nFormat a single <code>ExtendedBalance</code> into a pretty string with …\nRust implementation of the Phragmén reduce algorithm. …\nReduce the given <code>Vec&lt;StakedAssignment&lt;IdentifierT&gt;&gt;</code>. This …\nExecute sequential phragmen with potentially some rounds …\nCore implementation of seq-phragmen.\nConverts raw inputs to types used in this crate.\nCompute the threshold corresponding to the standard PJR …\nThe sum of the total backing of all winners.\nThe sum squared of the total backing of all winners, aka. …\nConvert some <code>Supports</code>s into vector of <code>StakedAssignment</code>\nCheck a solution to be t-PJR.\nBuild the support map from the assignments.\nSame as <code>to_support_map</code> except it returns a flat vector.\nThe total backing of an individual target.\nGet the total stake of this assignment (aka voter budget).\nTotal support.\nTraits for the npos-election operations.\nTry and normalize this assignment.\nTry and normalize the votes of self.\nSame as <code>Self::try_normalize</code> but the normalization is only …\nValidate a challenge to an election result.\nValidate a challenge to an election result.\nSupport from voters.\nReturns <code>true</code> if <code>self</code> votes for <code>target</code>.\nVoter’s identifier.\nVoter’s identifier\nJust winners zipped with their approval stake. Note that …\nBalance the weight distribution of a given <code>voters</code> at most …\nConverts a vector of ratio assignments into ones with …\nSame as <code>assignment_ratio_to_staked</code> and try and do …\nConverts a vector of staked assignments into ones with …\nSame as <code>assignment_staked_to_ratio</code> and try and do …\nConvert some <code>Supports</code>s into vector of <code>StakedAssignment</code>\nExecute sequential phragmen with potentially some rounds …\nCore implementation of seq-phragmen.\nExecute the phragmms method.\nCheck a solution to be PJR.\nThe internal implementation of the PJR check after having …\nCompute the threshold corresponding to the standard PJR …\nCheck a solution to be t-PJR.\nValidate a challenge to an election result.\nValidate a challenge to an election result.\nReduce the given <code>Vec&lt;StakedAssignment&lt;IdentifierT&gt;&gt;</code>. This …\nan aggregator trait for a generic type of a voter/target …\nAggregator trait for a PerThing that can be multiplied by …\nRAII guard for whether panics in the current thread should …\nCreate a new guard. While the guard is alive, panics that …\nCreate a new guard. While the guard is alive, panics that …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new guard. While the guard is alive, panics that …\nSet the panic hook.\nRPC a lenient list or value type.\nA number type that can be serialized both as a number or a …\nTypes for working with tracing data\nA list of values of given type.\nRPC list or value wrapper.\nA single value of given type.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMap every contained value using function <code>F</code>.\nHex representation of the number.\nThe number represented directly.\nA number type that can be serialized both as a number or a …\nAn error type that signals an out-of-range conversion …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this number into an U256.\nContainer for all related spans and events for the block …\nSuccessful block tracing response\nHolds associated values for a tracing span.\nRepresents a tracing event, complete with recorded data.\nRepresents a single instance of a tracing span.\nResponse for the <code>state_traceBlock</code> RPC.\nError response for the <code>state_traceBlock</code> RPC.\nError block tracing response\nHash of the block being traced\nAssociated data\nError message\nVec of tracing events\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nid for this span\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod targets used to filter out events that do not have …\nName of this span\nParent hash\nParent id, if it exists\nid of the parent span, if any\nVec of tracing spans\nStorage key targets used to filter out events that do not …\nHashMap of <code>String</code> values recorded while tracing\nEvent target\nTarget, typically module\nModule targets that were recorded by the tracing …\nIndicates if the span is from wasm\nSomething that provides access to the <code>Extensions</code> store.\nThe Substrate externalities.\nExtension for the <code>Externalities</code> trait.\nThe raw FFI type that is used to pass <code>Self</code> through the …\nThe inner type without any serialization strategy wrapper.\nA raw pointer that can be used in a runtime interface …\nSomething that can be used by the runtime interface as …\nRead child runtime storage.\nGet child storage value hash.\nGet the trie root of a child storage map.\nClear child storage entries which keys are start with the …\nClear storage entries which keys are start with the given …\n…\nDeregister and drop extension of <code>T</code> type.\nDeregister extension with specified ‘type_id’ and drop …\nTries to find a registered extension and returns a mutable …\nTries to find a registered extension by the given <code>type_id</code> …\n…\n…\nTraits required by the runtime interface from the host …\nClear an entire child storage.\nReturns the key immediately following the given key, if it …\nReturns the key immediately following the given key, if it …\nPack a pointer and length into an <code>u64</code>.\nProvides host &lt;-&gt; runtime FFI marshalling strategy newtype …\nSet or clear a child storage entry.\nSet or clear a storage entry (<code>key</code>) of current contract …\n…\nRegister extension <code>ext</code>.\nRegister extension <code>extension</code> with specified <code>type_id</code>.\n…\nSet the given externalities while executing the given …\nWrite a key value pair to the offchain storage database.\n…\nRead runtime storage.\nAppend storage item.\nCommit the last transaction started by …\nGet storage value hash.\nRollback the last transaction started by …\nGet the trie root of the current storage map.\nStart a new nested transaction.\nUnpacks an <code>u64</code> into the pointer and length.\n…\nExecute the given closure with the currently set …\nA type used as a parameter in a host function. Can be …\nA type used as a return value in a host function. Can be …\nThe owned inner type.\nCreates <code>Self::Owned</code> from the given <code>arg</code> received through …\nConvert <code>Self::Inner</code> into an FFI value.\nCreates <code>Self::Inner</code> from an owned value.\nWrite back a modified <code>value</code> back into the runtime’s …\n(DEPRECATED) Return <code>T</code> into the runtime using the SCALE …\n(DEPRECATED) Return <code>T</code> as a blob of bytes into the runtime.\n(DEPRECATED) Return <code>T</code> as a blob of bytes into the runtime.\nPass <code>T</code> through the FFI boundary by first converting it to <code>U</code>…\nPass a <code>T</code> into the host using the SCALE codec.\nPass a <code>&amp;[T]</code> into the host using the SCALE codec.\nPass a value into the host by a fat pointer.\nPass a value into the host by a fat pointer, writing it …\nPass a value into the host by a thin pointer.\nPass a value into the host by a thin pointer.\nPass a pointer into the host and write to it after the …\nReturn <code>T</code> through the FFI boundary by first converting it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA utility trait to get a session number. This is …\nA utility trait to get the validator count of a given …\nAn identifier for a type of cryptographic key.\nProof of membership of a specific key in a given session.\nSession keys runtime api.\nNumber of validators in a given session.\nDecode the given public session keys.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate the initial session keys with the given seeds, at …\nGenerate a set of session keys with optionally using the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe session index on which the specific key is a member.\nTrie nodes of a merkle proof of session membership.\nThe validator count of the session on which the specific …\nAn identifier for a type of cryptographic key.\nSession keys runtime api.\nDecode the given public session keys.\nGenerate a set of session keys with optionally using the …\nAccountId type used by the staking system.\nAccountId type used by the staking system.\nAccountId type used by the staking system.\nA type that belongs only in the context of an <code>Agent</code>.\nBalance type used by the staking system.\nBalance type used by the staking system.\nBalance type used by the staking system.\nMeans of converting Currency to VoteWeight.\nTrait to provide delegation functionality for stakers.\nTrait to provide functionality for direct stakers to …\nA type that belongs only in the context of a <code>Delegator</code>.\nCounter for the number of eras that have passed.\nA snapshot of the stake backing a single validator in the …\nA snapshot of the stake backing a single validator in the …\nChilling.\nThe amount of exposure for an era that an individual …\nDeclaring desire to nominate, delegate, or generally …\nA generic staking event listener.\nType for identifying a page.\nMetadata for Paged Exposure of a validator such as total …\nSimple index type with which we can count sessions.\nA struct that reflects stake that an account has in the …\nRepresentation of the status of a staker.\nRepresentation of a staking account, which may be a stash …\nA generic representation of a staking implementation.\nSet of low level apis to manipulate staking ledger.\nDeclaring desire in validate, i.e author blocks.\nThe total amount of the stash’s balance that will be at …\nTotal active portion of a staker’s <code>Stake</code>, <code>Err</code> if not a …\nReturns effective balance of the <code>Agent</code> account. <code>None</code> if …\nReturns the total amount of funds that is unbonded and can …\nBond (lock) <code>value</code> of <code>who</code>’s balance, while forwarding any …\nBond some extra amount in <code>who</code>’s free balance against the …\nNumber of eras that staked funds must remain bonded for.\nChill <code>who</code>.\nThe current era index.\nAdd delegation to the <code>Agent</code>.\nReturns the total amount of funds delegated. <code>None</code> if not a …\nApply a pending slash to an <code>Agent</code> by slashing <code>value</code> from …\nThe ideal number of active validators.\nWhether or not there is an ongoing election.\nDrop the <code>Agent</code> account and its associated delegators.\nForce a current staker to become completely unstaked, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns whether a staker is FULLY unbonding, <code>Err</code> if not a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether an account <code>staker</code> has been exposed in an …\nReturns whether a staker is unbonding, <code>Err</code> if not a staker …\nChecks whether or not this is a validator account.\nChecks whether the staker is a virtual account.\nMigrate <code>value</code> of delegation to <code>delegator</code> from a migrating …\nMigrate an existing <code>Nominator</code> to <code>Agent</code> account.\nMigrate a virtual staker to a direct staker.\nMigrate an existing staker to a virtual staker.\nThe minimum amount required to bond in order to set …\nThe minimum amount required to bond in order to set …\nHave <code>who</code> nominate <code>validators</code>.\nGet the nominations of a stash, if they are a nominator, …\nNumber of nominators backing this validator.\nCommon traits and types that are useful for describing …\nFired when someone sets their intention to nominate.\nFired when someone removes their intention to nominate, …\nFired when an existing nominator updates their nominations.\nFired when a staker is slashed.\nFired when the stake amount of someone updates.\nFired when someone is fully unstaked.\nFired when someone sets their intention to validate.\nFired when someone removes their intention to validate, …\nFired when an existing validator updates their preferences.\nFired when a portion of a staker’s balance has been …\nThe portions of nominators stashes that are exposed.\nThe portions of nominators stashes that are exposed.\nThe validator’s own stash that is exposed.\nThe validator’s own stash that is exposed.\nNumber of pages of nominators.\nThe total balance of this chunk/page.\nReturns pending slashes posted to the <code>Agent</code> account. None …\nRegister <code>Agent</code> such that it can accept delegation.\nRemoves <code>Agent</code> registration.\nSet the reward destination for the ledger associated with …\nReturns the fraction of the slash to be rewarded to …\nReturns the <code>Stake</code> of <code>who</code>.\nReturn a stash account that is controlled by a <code>controller</code>.\nReturn the status of the given staker, <code>Err</code> if not staked …\nThe total stake that <code>stash</code> has in the staking system. This …\nThe total balance backing this validator.\nThe total balance backing this validator.\nTotal stake of a staker, <code>Err</code> if not a staker.\nSchedule a portion of the active bonded balance to be …\nConsumes self and returns the result of the metadata …\nAmount of funds exposed.\nBook-keep a new bond for <code>keyless_who</code> without applying any …\nThe stash account of the nominator in question.\nWithdraw or revoke delegation to <code>Agent</code>.\nUnlock any funds schedule to unlock before or at the …\nA trait similar to <code>Convert</code> to convert values from <code>B</code> an …\nA naive implementation of <code>CurrencyConvert</code> that simply …\nAn implementation of <code>CurrencyToVote</code> tailored for chain’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert u128 to balance.\nConvert balance to u64.\nSend a signal whether you are going to downscale the <code>B</code> …\nThe report has already been submitted.\nIdentifier which is unique for this kind of an offence.\nThe kind of an offence, is a byte string representing some …\nLongevity, in blocks, for the evidence report validity.\nA trait implemented by an offence report.\nNumber of times the offence of this authority was already …\nA details about an offending authority for a particular …\nErrors that may happen on offence reports.\nAn abstract system to publish, check and process offence …\nWrapper type representing the severity of an offence.\nA trait to take action on an offence.\nOther error has happened.\nA trait for decoupling offence reporters from the actual …\nA type that represents a point in time on an abstract …\nCheck an offence evidence.\nDefault is the maximum severity. When severity is unclear …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true iff all of the given offenders have been …\nReturns the maximum severity.\nReturns the minimum severity.\nThe offending authority id\nThe list of all offenders involved in this incident.\nA handler for an offence of a particular kind.\nProcess an offence evidence.\nPublish an offence evidence.\nReport an <code>offence</code> and reward given <code>reporters</code>.\nA list of reporters of offences of this authority ID. …\nThe session index that is used for querying the validator …\nA slash fraction of the total exposure that should be …\nA point in time when this offence happened.\nReturn a validator set count at the time when the offence …\nA state backend is used to read state data and can have …\nThe state backend over which the iterator is iterating.\nThe transaction type used by <code>Backend</code>.\nStorage backend trust level.\nSimple Map-based Externalities impl.\nCache type that implements <code>trie_db::TrieCache</code>.\nIn memory arrays of storage values for multiple child …\nStorage proof in compact form.\nDatabase value\nDefault error type to use with state machine trie backend.\nDefault handler of the execution manager.\nState Machine Error bound.\nThe error type.\nAn error type when fetching data is not possible.\nExternalities Error.\nWraps a read-only backend, call executor, and current …\nTrie backend with in-memory storage.\nTransaction index operation.\nInsert transaction into index.\nTrait for inspecting state in any backend.\nA struct containing arguments for iterating over the …\nMultiple key value state. States are ordered by root …\nA key value state at any storage level.\nAn iterator over storage keys.\nsubstrate trie layout\nsubstrate trie layout, with external value nodes.\nState machine only allows a single level of child trie.\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nIn memory array of storage values.\nIn-memory storage for offchain workers recoding changes …\nThe set of changes that are overlaid onto the backend.\nAn iterator over storage keys and values.\nType of the raw storage iterator.\nSimple read-only externalities for any backend.\nRenew existing transaction storage.\nThe substrate state machine.\nAccumulated usage statistics specific to state machine …\nPatricia trie-based storage trait.\nA storage changes structure that can be generated by the …\nIn memory array of storage values.\nA trait for a raw storage iterator.\nStorage key.\nA proof that some set of key-value pairs are included in …\nStorage value.\nSimple HashMap-based Externalities impl.\nPatricia trie-based backend. Transaction type is an …\nBuilder for creating a <code>TrieBackend</code>.\nKey-value pairs storage that is used by trie backend …\nType of trie backend storage.\nA provider of trie caches that are compatible with …\nPersistent trie database write-access interface for a …\nPersistent trie database write-access interface for a …\nA key-value datastore implemented as a database-backed …\nPanics from trusted backends are considered justified, and …\nPanics from untrusted backend are caught and interpreted …\nUsage statistics for state backend.\nMeasured count of operations and total bytes.\nAccumulates some registered stats.\nAdd transaction index operation.\nAppend a element to storage, init with existing value if …\nApply the given transaction to this backend and set the …\nReturn a new backend with all pending changes.\nReturn a <code>trie_db::TrieDB</code> compatible cache.\nReturns a cache that can be used with a <code>trie_db::TrieDBMut</code>.\nState machine backends. These manage the code and storage …\nStorage backend.\nGet backend storage reference.\nGet backend storage reference.\nBatch insert key/values into backend\nBuild the configured <code>TrieBackend</code>.\nNumber of bytes.\nSize in byte of read queries that hit a modified value.\nSize in bytes of the writes overlay operation.\nCache read statistics.\nGet an iterator over all top changes as been by the …\nGet an iterator over all top changes as been by the …\nGet an optional iterator over all child changes stored …\nGet an optional iterator over all child changes stored …\nGet the child merkle value or None if there is nothing …\nThe info of the child trie over which to iterate over.\nReturns an iterator over the keys (in lexicographic order) …\nGet child keyed child storage or None if there is nothing …\nReturns a double-Option: None if the key is unknown (i.e. …\nAll changes to the child storages.\nGet child keyed storage value hash or None if there is …\nCalculate the child storage root, with given delta over …\nGenerate the child storage root using <code>backend</code> and all …\nGet an iterator over all child changes as seen by the …\nGet an iterator over all child changes as seen by the …\nRemoves all key-value pairs which keys share the given …\nClear child storage of given storage key.\nRemoves all key-value pairs which keys share the given …\nGet the merkle value or None if there is nothing …\nCommit all pending changes to the underlying backend.\nCommit the last transaction started by <code>start_transaction</code>.\nDoes the trie contain a given key?\nDoes the trie contain a given key?\nCreate a backend used for checking the proof, using <code>H</code> as …\nLogs a message at the debug level.\nDrain all elements of changeset.\nDrain all changes into a <code>StorageChanges</code> instance. Leave …\nEmpty statistics.\nCall this before transferring control to the runtime.\nThis doesn’t test if they are in the same state, only if …\nCompare with another in-memory backend.\nGet backend essence reference.\nExecute a call using the given state backend, overlayed …\nExecute the given closure while <code>self</code>, with <code>proving_backend</code> …\nExecute the given closure while <code>self</code> is set as …\nExecute the given closure while <code>self</code> is set as …\nExecute the given closure while <code>self</code> is set as …\nExecute the given closure while <code>self</code> is set as …\nExecute the given closure <code>f</code> with the externalities set and …\nCheck execution proof, generated by <code>prove_execution</code> call.\nCheck execution proof on proving backend, generated by …\nCall this when control returns from the runtime.\nGet externalities implementation.\nList of active extensions.\nExtensions.\nExtract the <code>StorageProof</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nSets raw storage key/values and a root.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nState machine fuzzing implementation, behind <code>fuzzing</code> …\nGet a trie node.\nGet the value stored at key.\nWhat is the value of the given key in this trie?\nObtain a associated value to the given key in storage with …\nPseudo-unique id used for tracing.\nAdd collected state machine to this state.\nInsert a <code>key</code>/<code>value</code> pair into the trie. An empty value is …\nInsert key/value into backend\nInsert values into backend trie.\nInsert key/value\nInsert key/value into backend.\nInspect state with a closure.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstruct into the inner values\nConsume the offchain storage and iterate over all key …\nDrains the underlying raw storage key/values and returns …\nConsumes self and returns underlying storage.\nConsume self and returns inner storages\nIs the trie empty?\nWhether no changes are contained in the top nor in any of …\nIterate over all key value pairs by reference.\nReturns an iterator over the keys (in lexicographic order) …\nPair of key and values from this state.\nLogs a message at the error level.\nAll changes to the main storage.\nMemory used.\nMerge the cached data in <code>other</code> into the provider using the …\nModified value read statistics.\nCreate a new <code>Ext</code> from overlayed changes and read-only …\nCreate a new instance of <code>TestExternalities</code> with storage.\nCreate a new builder instance.\nCreates new substrate state machine.\nCreate a new instance of <code>BasicExternalities</code>\nNew empty test externalities.\nNew basic externalities with empty storage.\nCreate a new empty instance of in-memory backend.\nCreate a new builder instance.\nCreate a new instance of <code>TestExternalities</code> with code and …\nCreate a new instance of <code>TestExternalities</code> with code and …\nCreate a new instance of <code>TestExternalities</code> with storage …\nReturn the next key in child storage in lexicographic …\nFetches the next key from the storage.\nFetches the next key and value from the storage.\nReturn the next key in storage in lexicographic order or …\nWrite trie nodes statistics.\nRead only access ot offchain overlay.\nA shared reference type around the offchain worker storage.\nConsume all changes (top + children) and return them.\nOffchain state changes to write to the offchain database.\nNumber of operations.\nReference to inner change set.\nMutable reference to inner change set.\nWrite into cached state machine change overlay.\nReturns the overlayed changes.\nStorage of parents, empty for top root or when exporting …\nMove offchain changes from overlay to the persistent store.\nThe prefix of the keys over which to iterate.\nGenerate child storage read proof.\nGenerate storage read proof on pre-created trie backend.\nProve execution using the given state backend, overlayed …\nProve execution using the given trie backend, overlayed …\nGenerate range storage read proof, with child tries …\nGenerate range storage read proof, with child tries …\nGenerate range storage read proof.\nGenerate range storage read proof on an existing trie …\nGenerate storage read proof.\nGenerate storage read proof on pre-created trie backend.\nReturns a lifetimeless raw storage iterator.\nCheck child storage read proof, generated by …\nCheck child storage read proof on pre-created proving …\nCheck storage read proof, generated by <code>prove_read</code> call.\nCheck storage read proof on pre-created proving backend.\nCheck child storage range proof, generated by …\nCheck storage range proof on pre-created proving backend.\nCheck storage range proof with child trie included, …\nCheck storage range proof on pre-created proving backend.\nRead statistics (total).\nNumber of read query from runtime that hit a modified …\nRegisters the given extension for this instance.\nRegister an extension.\nRegister stats from overlay of state machine.\nRemove a <code>key</code> from the trie. Equivalent to making it equal …\nRemove a key and its associated value from the offchain …\nRemoved trie nodes statistics.\nRollback the last transaction started by <code>start_transaction</code>.\nReturn the root of the trie.\nGet trie root.\nSet the value associated with a key under a prefix to the …\nSet a new value for the specified key and child.\nAsk to collect/not to collect extrinsics indices where …\nWrite a key value pair to the offchain storage overlay.\nSet the given <code>parent_hash</code> as the hash of the parent block.\nSet trie root.\nSet a new value for the specified key.\nTimespan of the statistics.\nThe prefix from which to start the iteration from.\nIf this is <code>true</code> then the iteration will <em>not</em> include the …\nStart a new nested transaction.\nMoment at which current statistics has been started being …\nState root of the level, for top trie it is as an empty …\nState version to use during tests.\nWhether to stop iteration when a missing trie node is …\nGet keyed storage or None if there is nothing associated.\nReturns a double-Option: None if the key is unknown (i.e. …\nGet keyed storage value hash or None if there is nothing …\nRenew existing piece of data storage.\nCalculate the storage root, with given delta over what is …\nGenerate the storage root using <code>backend</code> and all changes as …\nTally one read modified operation, of some length.\nTally one write overlay operation, of some length.\nConstructs an event at the trace level.\nA transaction for the backend that contains all changes …\nReturns the current nesting depth of the transaction stack.\nChanges to the transaction index,\nGet an list of all index operations.\nThe storage root after applying the transaction.\nCopy the state, with applied updates\nMerge trie nodes into this backend.\nQuery backend usage statistics (i/o, memory)\nLogs a message at the warn level.\nReturns whether the end of iteration was reached without …\nUse the given <code>cache</code> for the to be configured <code>TrieBackend</code>.\nUse the given optional <code>cache</code> for the to be configured …\nUse the given optional <code>recorder</code> for the to be configured …\nUse the given <code>recorder</code> for the to be configured <code>TrieBackend</code>…\nWrap the given <code>TrieBackend</code>.\nWrite statistics (total).\nNumber of time a write operation occurs into the state …\nExtrinsic index in the current block.\nExtrinsic index in the current block.\nData content hash.\nReferenced index hash.\nIndexed data size.\nSomething that can be converted into a <code>TrieBackend</code>.\nA state backend is used to read state data and can have …\nThe state backend over which the iterator is iterating.\nWrapper to create a <code>RuntimeCode</code> from a type that …\nThe transaction type used by <code>Backend</code>.\nThe error type.\nAn error type when fetching data is not possible.\nA struct containing arguments for iterating over the …\nAn iterator over storage keys.\nAn iterator over storage keys and values.\nType of the raw storage iterator.\nA trait for a raw storage iterator.\nType of trie backend storage.\nType of trie backend storage.\nReturn the type as <code>TrieBackend</code>.\nGet the child merkle value or None if there is nothing …\nThe info of the child trie over which to iterate over.\nGet child keyed child storage or None if there is nothing …\nGet child keyed storage value hash or None if there is …\nCalculate the child storage root, with given delta over …\nGet the merkle value or None if there is nothing …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nReturn the next key in child storage in lexicographic …\nFetches the next key from the storage.\nFetches the next key and value from the storage.\nReturn the next key in storage in lexicographic order or …\nThe prefix of the keys over which to iterate.\nReturns a lifetimeless raw storage iterator.\nRegister stats from overlay of state machine.\nReturn the <code>RuntimeCode</code> build from the wrapped <code>backend</code>.\nThe prefix from which to start the iteration from.\nIf this is <code>true</code> then the iteration will <em>not</em> include the …\nWhether to stop iteration when a missing trie node is …\nGet keyed storage or None if there is nothing associated.\nGet keyed storage value hash or None if there is nothing …\nCalculate the storage root, with given delta over what is …\nQuery backend usage statistics (i/o, memory)\nReturns whether the end of iteration was reached without …\nArbitrary payload for fuzzing append.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nTest append operation for a given fuzzing payload.\nCalls <code>U::from(self)</code>.\nAccount id\nStatement proof.\nStatement failed validation.\nBlock hash.\nStatement is coming from the on-chain worker.\nStatement channel.\nAccount channel to use. Only one message per …\nAdditional data.\nDatabase error.\nError decoding statement structure.\nDecryption key identifier.\nAn identifier for the key that <code>Data</code> field may be decrypted …\nEd25519 Signature.\nContains the error value\nStatement store error.\nStatement attributes. Each statement is a list of 0 or …\nStatement hash.\nHigh priority. Statement should be broadcast to all peers.\nPriority is too low or the size is too big.\nInternal store error.\nSignature has failed verification.\nKnown statement\nKnown statement that’s already expired.\nStatement has been submitted over the local api.\nLow priority.\nTotal number of topic fields allowed.\nStatement has been received from the gossip network.\nNetwork propagation priority.\nAccepted as new with given score\nNo signature in the proof or no proof.\nContains the success value\nOn-chain event proof.\nPriority when competing with other messages from the same …\nStatement proof.\nResult type for <code>Error</code>\nError making runtime call.\nSecp256k1 Signature.\nResult returned by <code>Statement::verify_signature</code>\nSr25519 Signature.\nStatement structure.\nThe source of the statement.\nStatement store API.\nStatement submission outcome\nStatement topic.\nFirst statement topic.\nSecond statement topic.\nThird statement topic.\nFourth statement topic.\nSignature is valid and matches this account id.\nReturn account id for the proof creator.\nGet proof account id, if any\nReturn the data of all known statements which include all …\nReturn all known statements which include all topics and …\nCheck if the source allows the statement to be resubmitted …\nGet channel, if any.\nGet plain data.\nGet plain data len.\nDecrypt data (if any) with the given private key.\nReturns decryption key if any.\nStatement-store specific ed25519 crypto primitives.\nEncrypt give data with given key and store both in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalculate statement hash.\nReturns blake2-256 hash for the encoded statement.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to internal data.\nCreate a new empty statement with no proof.\nCreate a new statement with a proof.\nReturn the data of all known statements whose decryption …\nReturn the decrypted data of all known statements whose …\nReturn the statement and the decrypted data of all known …\nReturn all known statements whose decryption key is …\nGet priority, if any.\nGet a reference to the statement proof, if any.\nRemove a statement from the store.\nRemove all statements authored by <code>who</code>.\nRemove the proof of this statement.\nRuntime support for the statement store.\nSet statement channel.\nSet decryption key.\nSet unencrypted statement data.\nSet statement priority.\nSet statement proof. Any existing proof is overwritten.\nSet topic by index. Does noting if index is over <code>MAX_TOPICS</code>…\nSign with a given private key and add the signature proof …\nSign with a key that matches given public key in the …\nSign with a given private key and add the signature proof …\nSign with a key that matches given public key in the …\nSign with a given private key and add the signature proof …\nSign with a key that matches given public key in the …\nGet statement by hash.\nReturn all statements.\nSubmit a statement.\nReturns a topic by topic index.\nCheck proof signature, if any.\nHash of block that contains the event.\nIndex of the event in the event list.\nSignature.\nSignature.\nSignature.\nPublic key.\nPublic key.\nPublic key.\nAccount identifier associated with the event.\nStatement-store specific ed25519 key pair.\nStatement-store specific ed25519 public key.\nStatement failed validation.\nFailed proof validation.\nStatement is coming from the on-chain worker.\nStatement could not be inserted because of priority or …\nExport functions for the WASM host.\nValidity could not be checked because of internal error.\nAn reason for an invalid statement.\nStatement has been submitted over the local api.\nStatement has been received from the gossip network.\nMissing proof.\nThe store is not available.\nKnown statement\nAccepted as new.\nThe source of the statement.\nThe offchain database extension that will be registered at …\nSubmission result.\nInformation concerning a valid statement.\nRuntime API trait for statement validation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax statement count for this account, as calculated by the …\nMax total data size for this account, as calculated by the …\nCreate new instance of externalities extensions.\nValidate the statement.\nThe identifier for the <code>timestamp</code> inherent.\nProvide duration since unix epoch in millisecond for …\nErrors that can occur while checking the timestamp …\nThe type of the inherent.\nUnit type wrapper that represents a timestamp.\nAuxiliary trait to extract timestamp inherent data.\nThe time between the blocks is too short.\nThe block timestamp is too far in the future.\nReturns <code>self</code> as <code>Duration</code>.\nReturns <code>self</code> as a <code>u64</code> representing the elapsed time since …\nChecked subtraction that returns <code>None</code> on an underflow.\nThe current timestamp using the system time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate <code>Self</code> while using the system time to get the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>Self</code> using the given <code>timestamp</code>.\nCreate new <code>Self</code>.\nReturns the timestamp of this inherent data provider.\nGet timestamp inherent data.\nTry to create an instance ouf of the given identifier and …\nWith the given maximum drift.\nTagged Transaction Queue Runtime API.\nThe <code>TaggedTransactionQueue</code> api trait for interfering with …\nValidate the transaction.\nValidate the transaction.\nValidate the transaction.\nProof trie value size.\nStorage period for data.\nErrors that occur in context of inherents.\nThe identifier for the proof inherent.\nAn interface to request indexed data from the client.\nProvider for inherent data.\nErrors that can occur while checking the storage proof.\nHolds a chunk of data retrieved from storage along with a …\nAuxiliary trait to extract storage proof.\nGet all indexed transactions for a block, including …\nData chunk that is proved to exist.\nA utility function to encode transaction index as trie key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet block number for a block hash.\nTrie nodes that compose the proof.\nA utility function to extract a chunk index from the …\nGet the proof.\nBuild a proof for a given source of randomness and indexed …\nCreate a new inherent data provider instance for a given …\nIf true, the trie will allow empty values into <code>TrieDBMut</code>\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nBranch node; has slice of child nodes (each possibly null) …\nAlias accessor to <code>NodeCodec</code> associated <code>Error</code> type from a …\nCodec to use (needs to match hasher and nibble ops).\nStorage proof in compact form.\nError for trie node decoding.\nDatabase value\nOne of the proof nodes could not be decoded.\nCorrupt Trie item.\nThe statement being verified contains multiple key-value …\nThe proof contains duplicate nodes.\nAn empty prefix constant. Can be use when the prefix is …\nNull trie node; could be an empty root or an empty branch …\nError type used for trie related errors.\nExtension node; has a partial key plan and child data.\nThe proof contains at least one extraneous hash reference …\nThe proof contains at least one extraneous node.\nThe proof contains at least one extraneous value which …\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nThe merkle value is the hash of the node.\nHasher to use for this trie.\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nTrait modelling datastore keyed by a hash defined by the …\nKey function that only uses the hash\nTrie item not found in the database,\nThe proof is missing trie nodes required to verify.\nRange for byte representation in encoded node.\nThe proof contains an invalid child reference that exceeds …\nHash is not value.\nAttempted to create a trie with a state root not in the DB.\nOutput item.\n<code>HashDB</code> implementation that append a encoded prefix (unique …\n<code>HashDBMut</code> implementation that append a encoded prefix …\nsubstrate trie layout\nsubstrate trie layout, with external value nodes.\nLeaf node; has a partial key plan and value.\nQuerying interface, as in <code>trie_db</code> but less generic.\nThreshold above which an external node should be use to …\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nEither the <code>hash</code> or <code>value</code> of a node depending on its size.\nBranch node with support for a nibble (when extension …\nRange for hash in encoded node and original value size.\nThe merkle value is the node data itself when the node …\nConcrete implementation of a <code>NodeCodecT</code> with SCALE …\nA <code>NodePlan</code> is a blueprint for decoding a node from a byte …\nKey function that concatenates prefix and hash.\nReexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …\nType that is able to provide a proof size estimation.\nDescription of what kind of query will be made to the trie.\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nRaw storage proof type (just raw trie nodes).\nRecords trie nodes as they pass it.\nRecorder type that is going to be returned by implementors …\nThe root hash computed from the proof is incorrect.\nA proof that some set of key-value pairs are included in …\nError associated with the <code>storage_proof</code> module.\nA key-value datastore implemented as a database-backed …\nA cache that can be used to speed-up certain operations …\nThis trait associates a trie definition with preferred …\nPersistent trie database read-access interface for a given …\nBuilder for creating a <code>TrieDB</code>.\nDouble ended iterator for going through all values in the …\nIterator for going through all values in the trie in …\nDouble ended iterator for going through all of key with …\nIterator for going through all of key with values in the …\nPersistent trie database write-access interface for a …\nBuilder for creating a <code>TrieDBMut</code>.\nDouble ended iterator for going through all nodes in the …\nIterator for going through all nodes in the trie in …\nTrieDB error over <code>TrieConfiguration</code> trait.\nHash type for a trie layout.\nTrait with definition of trie layout. Contains all …\nA key-value datastore implemented as a database-backed …\nA trie recorder that can be used to record all kind of …\nType that is able to provide a <code>trie_db::TrieRecorder</code>.\nCodec-flavored TrieStream.\nIf true, the trie will use extension nodes and no partial …\nA value was found in the trie with a nibble key that was …\nThe proof indicates that an expected value was not found …\nPlan for value representation in <code>NodePlan</code>.\nErrors that may occur during proof verification. Most of …\nHelpers for checking for duplicate nodes.\nProvide a recorder implementing <code>trie_db::TrieRecorder</code>.\nBuild a value slice by decoding a byte slice according to …\nBuild a node by decoding a byte slice according to the …\nTrie Cache\nOptional cache that should be used to speed up the lookup.\nCache the given <code>value</code> for the given <code>key</code>.\nDetermine a child trie root given a hash DB and delta …\nDetermine a child trie root given its ordered contents, …\nCheck for the existence of a hash-key.\nDoes the trie contain a given key?\nAccess inner hash db.\ndatabase to query from.\nDecode a byte-slice into the desired item.\nDecode a compact proof.\nConstructs a new <code>RandomState</code>.\nDetermine a trie root given a hash DB and delta values.\nDrain all visited records.\nCreate a <code>StorageProof</code> derived from the internal state.\nLike <code>insert()</code>, except you provide the key and the data is …\nCreate a new empty iterator.\nDetermine the empty child trie root.\nDetermine the empty trie root.\nEncode a compact proof.\nEncoding of index as a key (when reusing general trie for …\nReturns the storage proof size.\nFetch value by hash at a current node height\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nRestore an iterator from a raw iterator.\nRestore an iterator from a raw iterator.\nRestore an iterator from a raw iterators.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a proof for a subset of keys in a trie.\nLook up a given hash into the bytes that hash to it, …\nWhat is the value of the given key in this trie?\nWhat is the value of the given key in this trie?\nReturns the hash of the value for <code>key</code>.\nGet the <code>NodeOwned</code> that corresponds to the given <code>hash</code>.\nGet or insert a <code>NodeOwned</code>.\nSearch for the key with the given query parameter. See the …\nHash to start at\nInsert a datum item into the DB and return the datum’s …\nInsert a <code>key</code>/<code>value</code> pair into the trie. An empty value is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the iterator to a raw iterator.\nConvert the iterator to a raw iterator.\nConvert the iterator to a raw forward iterator.\nConvert the iterator to a raw backward iterator.\nIs the trie empty?\nIs the trie empty?\nReturns a depth-first iterator over the elements of trie.\nReturns a depth-first iterator over the keys of elemets of …\nLook up the <code>MerkleValue</code> of the node that is the closest …\nLookup value for the given <code>key</code>.\nCreate a new iterator.\nCreate a new iterator.\nCreate a new double ended iterator.\nCreate a new double ended iterator.\ninstantiate new keyspaced db\ninstantiate new keyspaced db\nCreate a new iterator.\nCreate a new double ended iterator.\nCreate a new <code>Recorder</code> which records all given nodes.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix.\nCreate a new iterator, but limited to a given prefix. It …\nCreate a new iterator, but limited to a given prefix. It …\nCreate a new iterator, but limited to a given prefix. It …\nFetches the next trie item.\nFetches the next key.\nUtility methods to work on radix 16 nibble.\nA trie root formed from the items, with keys attached …\nAdvance the iterator into a prefix, no value out of the …\nAdvance the iterator into a prefix, no value out of the …\nDerive a database key from hash value of the node (key) …\nFetches the previous trie item.\nFetches the previous key.\nExternalities extension that provides access to the …\nQuery object to record nodes and transform data.\nRead the <code>trie_db::MerkleValue</code> of the node that is the …\nRead a hash from the child trie.\nRead a value from the child trie.\nRead a value from the child trie with given query.\nRead the <code>trie_db::MerkleValue</code> of the node that is the …\nRead a value from the trie.\nRead a value from the trie with given Query.\nRecord the given <code>TrieAccess</code>.\nTrie recorder\nOptional recorder that will be called to record all trie …\nExtension for the default recorder.\nRemove a datum previously inserted. Insertions can be “…\nRemove a <code>key</code> from the trie. Equivalent to making it equal …\nReturn the root of the trie.\nReturn the root of the trie.\nPosition the iterator on the first element with key &gt;= <code>key</code>\nPosition the iterator on the first element with key &gt;= <code>key</code>\nPosition the iterator on the first element with key &gt;= <code>key</code>\nOperation to build a trie db from its ordered iterator …\nCheck if we have recorded any trie nodes for the given <code>key</code>.\nDetermines a trie root given its ordered contents, closed …\nDetermines a trie root node’s data given its ordered …\nThis module is for non generic definition of trie type. …\nAccess value plan from node plan, return <code>None</code> for node …\nMutable ccess value plan from node plan, return <code>None</code> for …\nVerify a set of key-value pairs against a trie root and a …\nHelper struct used to ensure that a storage proof doesn’…\nError associated with the <code>AccessedNodesTracker</code> module.\nThe proof contains unused nodes.\nEnsure that all the nodes in the proof have been accessed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>RedundantNodesChecker</code>, starting …\nThe size of the shared cache.\nThe local trie cache.\nA limiter for the local value cache. This makes sure the …\nThe shared trie cache.\nThe actual <code>TrieCache</code> implementation.\nReturn self as a <code>TrieDB</code> compatible cache.\nReturn self as <code>TrieDBMut</code> compatible cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a TrieCache that allows the local_caches to grow …\nCreate a new <code>LocalTrieCache</code> instance from this shared …\nMerge this cache into the given <code>LocalTrieCache</code>.\nCreate a new <code>SharedTrieCache</code>.\nCreates a new limiter with the given configuration.\nCreates a new limiter with the given configuration.\nA cache size <code>bytes</code> big.\nGet a copy of the node for <code>key</code>.\nGet a copy of the <code>CachedValue</code> for <code>key</code>.\nReset the entire cache.\nReset the node cache.\nReset the value cache.\nAn unlimited cache size.\nReturns the used memory size of this cache in bytes.\nSingle nibble length in bit.\nSize of header.\nNumber of child for a branch (trie radix).\nNumber of nibble per byte.\nNibble (half a byte).\nThe nibble shifts needed to align. We use two value, one …\nGet u8 nibble value at a given index in a <code>NibbleSlice</code>.\nGet u8 nibble value at a given index of a byte.\nCount the biggest common depth between two left aligned …\nCalculate the number of common nibble between two left …\nGet u8 nibble value at a given index in a left aligned …\nCalculate the number of needed padding a array of nibble …\nMask a byte, keeping left nibble.\nMask a byte, keeping right byte.\nPush u8 nibble value at a given index into an existing …\nShifts right aligned key to add a given left offset. …\nThe proof size extension to fetch the current storage …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>ProofSizeExt</code>.\nReturns the storage proof size.\nA list of ignored nodes for <code>Recorder</code>.\nThe trie recorder.\nThe <code>TrieRecorder</code> implementation.\nReturns the recorder as <code>TrieRecorder</code> compatible type.\nCommit the latest transaction.\nDrain the recording into a <code>StorageProof</code>.\nReturns the estimated encoded size of the proof.\nExtend <code>self</code> with the other instance of ignored nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize from the given memory db.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInitialize from the given storage proof.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the node is ignored.\nReturns <code>RecordedForKey</code> per recorded key per trie.\nReset the state.\nRollback the latest transaction.\nStart a new transaction.\nConvert the recording to a <code>StorageProof</code>.\nCreate a new instance with the given <code>ingored_nodes</code>.\nConvenience extension for the <code>Recorder</code> struct.\nConvert the recorder into a <code>RawStorageProof</code>, avoiding …\nConvert the recorder into a <code>BTreeSet</code>.\nCorrupt Trie item.\nTrie item not found in the database,\nHash is not value.\nAttempted to create a trie with a state root not in the DB.\nQuerying interface, as in <code>trie_db</code> but less generic.\nPersistent trie database read-access interface for a given …\nBuilder for creating a <code>TrieDB</code>.\nBuilder for creating a <code>TrieDBMutV0</code>.\nBuilder for creating a <code>TrieDBMutV1</code>.\nPersistent trie database write-access interface for a …\nPersistent trie database write-access interface for a …\nAs in <code>trie_db</code>, but less generic, error type for the crate.\nA value was found in the trie with a nibble key that was …\nOptional cache that should be used to speed up the lookup.\ndatabase to query from.\nHash to start at\nQuery object to record nodes and transform data.\nOptional recorder that will be called to record all trie …\nThe type that is returned as result from calculation.\nThe type that is returned as result from polynomial …\nImplementor of <code>WeightToFee</code> that uses a constant multiplier.\nA list of coefficients that represent a polynomial.\nImplementor of <code>WeightToFee</code> such that it maps any unit of …\nImplementor of <code>WeightToFee</code> that maps one unit of weight to …\nAn implementation of <code>WeightToFee</code> that collects no fee.\nThe weight of database operations that the runtime can …\nMeters consumed weight and a hard limit for the maximal …\nA trait that describes the weight to fee calculation.\nOne coefficient and its position in the <code>WeightToFee</code>.\nA list of coefficients that represent a polynomial.\nA trait that describes the weight to fee calculation as …\nCheck if the given weight can be consumed.\nThe fractional part of the coefficient.\nThe integral part of the coefficient.\nConsume some weight and defensively fail if it is over the …\nThe already consumed weight.\nThe ratio of consumed weight to the limit.\nConsume some weight and defensively fail if it is over the …\nDegree/exponent of the term.\nEvaluate the polynomial at a specific <code>x</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe limit can ever be accrued.\nChange the limit to the given <code>weight</code>.\nTrue iff the coefficient should be interpreted as negative.\nCreates <code>Self</code> with the maximal possible limit for the …\nReturns a polynomial that describes the weight to fee …\nReclaim the given weight.\nThe remaining weight that can still be consumed.\nConsume the given weight after checking that it can be …\nCalculates the fee from the passed <code>weight</code>.\nCreates <code>Self</code> from <code>consumed</code> and <code>limit</code>.\nCreates <code>Self</code> from a limit for the maximal consumable …\nAdd a code substitute in the chain spec.\nA utility to easily create a chain spec definition.\nConverts the given chain spec into the raw format.\nCreate a new chain spec by interacting with the provided …\nDisplays given preset\nLists available presets\nUpdates the code in the provided input chain spec.\nVerifies the provided input chain spec.\nThe block height at which the code should be substituted.\nThe path where the chain spec should be saved.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nProcesses <code>CreateCmd</code> and returns string representation of …\nChain spec to be updated.\nChain spec to be updated.\nChain spec to be converted.\nChain spec to be verified.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe para ID for your chain.\nThe id of the Parachain.\nPreset to be displayed. If none is given default will be …\nChain properties in <code>KEY=VALUE</code> format.\nThe relay chain you wish to connect to.\nThe relay chain of the Parachain.\nExecutes the internal command.\nThe path to new runtime wasm blob to be stored into …\nNew runtime wasm blob that should replace the existing …\nThe path to runtime wasm blob.\nThe path to runtime wasm blob.\nSets the code used by <code>CreateCmd</code>\nExtrinsic as part of existing block.\nA block to retrieve.\nA helper type for a generic block input.\nError accessing blockchain DB.\nRaw SCALE-encoded bytes.\nRaw SCALE-encoded bytes.\nRaw SCALE-encoded extrinsic bytes.\nA helper trait to access block headers and bodies.\nCould not decode Block or Extrinsic.\nDefault dummy debug printer.\nAggregated error for <code>Inspector</code> operations.\nAn extrinsic address to decode and print out.\nGet block by hash.\nGet block by hash.\nBlockchain inspector.\nGiven block has not been found.\nGet block by number.\nGet block by number.\nA Pretty formatter implementation.\nGet a pretty-printed block.\nStructs to easily compose inspect sub-command for CLI.\nCommand ran by the CLI\nGet a pretty-printed extrinsic.\nNicely format block.\nNicely format extrinsic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new instance of the inspector with default printer.\nCustomize pretty-printing of the data.\nDecode block with native version of runtime and print out …\nDecode extrinsic with native version of runtime and print …\nThe <code>inspect</code> command used to print decoded chain data.\nA possible inspect sub-commands.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the inspect command, passing the inspector.\nAddress of the block to print out.\nAddress of an extrinsic to print out.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nEnd tracking and return the peak allocation value in bytes …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStart tracking memory allocations and deallocations.\nExtracts the <code>AccountId32</code> from the passed <code>location</code> if the …\nAlias a descendant location of the original origin.\nAlias a Foreign <code>AccountId32</code> with a local <code>AccountId32</code> if …\nAlias a location if it passes <code>Filter</code> and the original …\nConversion implementation which converts from a <code>[u8; 32]</code>…\nImplementation of <code>Get&lt;Vec&lt;AssetFilter&gt;&gt;</code> which accepts …\nAllows execution from any origin that is contained in <code>T</code> …\nAllows execution for the Relay Chain origin (represented …\nAllows only messages if the generic <code>ResponseHandler</code> …\nAllows execution from <code>origin</code> if it is just a straight …\nAllows execution from <code>origin</code> if it is contained in <code>T</code> (i.e. …\nAllows execution from any origin that is contained in <code>T</code> …\nConverter struct implementing <code>AssetIdConversion</code> converting …\nSimple trait to indicate whether an asset is subject to …\n<code>Convert</code> implementation to convert from some an origin …\nAccepts an asset if it is contained in the given <code>T</code>’s <code>Get</code> …\nUmbrella trait for all Controller traits.\nCreates an instruction matcher from an XCM. Since XCM …\nSimple adapter to use a currency as asset transactor. This …\nDenies execution if the XCM contains instructions not …\nDeny executing the XCM if it matches any of the Deny …\nMeans of converting a location into a stable and unique …\nCreate a description of the remote treasury <code>location</code> if …\nImplementation of <code>AssetChecking</code> which subjects a given set …\nA wrapper router that attempts to <em>encode</em> and <em>decode</em> passed …\nTrait for a type which ensures all requirements for …\n<code>EnsureOrigin</code> barrier to convert from dispatch origin to …\nThe error type to throw when errors happen during matching.\nExecute an XCM locally, for a given origin.\nWeight functions needed for <code>ExecuteController</code>.\nConverts locations from external global consensus systems …\nAdapter <code>struct</code> which implements a conversion from any …\nSimple fee calculator that requires payment in a single …\nThis is deprecated in favor of the more modular …\nTransactional processor implementation using frame …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation to convert a <code>fungibles</code> …\nConverts a location which is a top-level relay chain …\nConverts a location which is a top-level parachain (i.e. a …\nHandles the fees that are taken by certain XCM …\nInspects messages in queues. Meant to be used in runtime …\nThe concrete instruction type. Necessary to specify as it …\nAllows a message only if it is from a system-level child …\nConverts a <code>Asset</code> into balance <code>B</code> if its id is equal to that …\nMatches if the given location contains only the specified …\nMatches if the given location is a system-level sibling …\nThe <code>Location</code> type. Necessary to specify as it changes …\nThis chain is allowed to mint the asset. When we track …\nImplementation of <code>SendXcm</code> which uses the given <code>ExportXcm</code> …\nImplementation of <code>AssetChecking</code> which subjects a given set …\nReturns specified <code>TreasuryAccount</code> as <code>AccountId32</code> if passed …\nSimple struct which contains both an XCM <code>location</code> and …\nConverter that allows specific <code>Location</code>s to act as a …\nAccepts a tuple <code>(location, assets)</code> if the <code>location</code> is …\nAn adapter that implements the unified unique instances …\nAn adapter that implements the unified unique instances …\nAPI that allows to pattern-match against anything that is …\nStruct created from calling <code>fn matcher()</code> on a mutable …\nThe concrete matcher type.\nThe location which is allowed to mint a particular asset.\nAccepts an asset iff it is a native asset.\nAn adapter for the implementation of <code>ExporterFor</code>, which …\nConfiguration item representing a single exporter in the …\nImplementation of <code>AssetChecking</code> which subjects no assets …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\n<code>TransactAsset</code> implementation that allows the use of a …\nThis chain is not allowed to mint the asset. When we track …\nImplementation of <code>AssetChecking</code> which subjects a given set …\n<code>Convert</code> implementation to convert from an origin which …\nA <code>Location</code> consisting of a single <code>Parent</code> <code>Junction</code> will be …\nSpecialization of the <code>PayOverXcm</code> trait to allow <code>[u8; 32]</code>…\nImplementation of the <code>frame_support::traits::tokens::Pay</code> …\nA message processor that delegates execution to an …\nQuery a remote location, from a given origin.\nWeight functions needed for <code>QueryController</code>.\nProvides methods to expect responses from XCMs and query …\nBarrier condition that allows for a <code>SuspensionChecker</code> that …\nSend an XCM from a given origin.\nWeight functions needed for <code>SendController</code>.\nA <code>HandleFee</code> implementation that simply deposits the fees …\n<code>Convert</code> implementation to convert from some a <code>Signed</code> …\nAn adapter from <code>pallet_asset_conversion::SwapCredit</code> and …\nImplementation of <code>SendXcm</code> which wraps the message inside …\nSovereign accounts use the system’s <code>Signed</code> origin with …\nAn implementation of <code>Contains</code> that checks for <code>Location</code> or …\nAn implementation of <code>Contains</code> that checks for <code>Location</code> or …\nFunction trait for handling some revenue. Similar to a …\nExecution barrier that just takes <code>max_weight</code> from …\nSets the message ID to <code>t</code> using a <code>SetTopic(t)</code> in the last …\nRepresents point-to-point link failure with a …\nImplementation of <code>SendXcm</code> which uses the given <code>ExportXcm</code> …\nImplementation of <code>SendXcm</code> which wraps the message inside …\nWeight trader which uses the configured <code>WeightToFee</code> to set …\nWeight information for ExecuteController functions.\nWeight information for SendController functions.\nWeight information for QueryController functions.\nA derivative barrier, which scans the first <code>MaxPrefixes</code> …\nAn adapter implementation of <code>MaybeEquivalence</code> which can …\nWrapper router which, if the message does not already end …\nWrapper router which, if the message does not already end …\nA <code>FeeManager</code> implementation that permits the specified …\nReturns success if the number of instructions that still …\nReturn the teleportation asset-checking policy for the …\nThe asset’s ID.\nLocally-routable bridge with bridging capabilities to the …\nClear the queues at the beginning of Runtime API call, so …\nDenies execution of restricted local nested XCM …\nTry to deposit the given fee in the specified account. …\nCreate a description of the given <code>location</code> if possible. No …\nTakes an incoming blob from over some point-to-point link …\nReturns the network ID and consensus location within that …\nPrepare all requirements for successful <code>XcmSender: SendXcm</code> …\nWeight for <code>ExecuteController::execute</code>\nAttempt to execute an XCM locally, returns Ok with the …\nMakes sure to expect a response with the given id.\nReturn the locally-routable bridge (if any) capable of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet queued messages and their destinations.\nThis router needs to implement <code>InspectMessageQueues</code> but …\nThis router needs to implement <code>InspectMessageQueues</code> but …\nDo something with the fee which has been paid. Doing …\nSends a blob over some point-to-point link. This will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe (relative) location in which the asset ID is …\nAccepts a closure <code>f</code> that contains an argument signifying …\nAttempts to continuously iterate through the instructions …\nMethod that creates and returns the matcher type from <code>Self</code>.\nAttempt to create a new query ID and register it as a …\nThe local payment. See <code>ExporterFor</code> for more details.\nProcess the given message, using no more than the …\nWeight for <code>QueryController::query</code>\nQuery a remote location.\nRemote location filter. If <code>Some</code>, the requested remote …\nSupported remote network.\nConsume <code>message</code> and return another which is equivalent to …\nWeight for <code>SendController::send</code>\nSend an XCM to be executed by a remote location.\nIterate instructions forward until <code>cond</code> returns false. …\nAttempt to remove and return the response of query with ID …\nWeight for <code>QueryHandler::take_response</code>\nDo something with the given <code>revenue</code>, which is a single …\nXCM utilities to work with NFT-like entities (unique …\nThe message destination as a <em>Universal Location</em>. This …\nA 32-byte identifier for an account of a specific network …\nAn 8-byte index for an account of a specific network that …\nA 20-byte identifier for an account of a specific network …\nThe unambiguous administration body (for Polkadot, an …\nAlter the current Origin to another given origin.\nA list of (Origin, Target) pairs allowing a given Origin …\nAll assets in Holding.\nAll assets in Holding, up to <code>u32</code> individual assets …\nAll assets in Holding of a given fungibility and ID.\nAll assets in Holding of a given fungibility and ID up to …\nA unit struct which can be converted into a <code>Location</code> of …\nA unit struct which can be converted into a <code>Location</code> of …\nA 16-byte fixed-length datum.\nA 32-byte fixed-length datum.\nA 4-byte fixed-length datum.\nAn 8-byte fixed-length datum.\nEither an amount of a single fungible asset, or a single …\nSet asset claimer for all the trapped assets during the …\nThe handler for when there is an instruction to claim …\nA service for exchanging assets.\nHandler for exchanging assets.\n<code>Asset</code> collection, defined either by a number of <code>Assets</code> or …\nLocation to identify an asset.\nA general identifier for an instance of a non-fungible …\nDefine a handler for notification of an asset being locked …\nHandler for asset locking.\nThe given asset is not handled.\nHow to withdraw and deposit an asset.\nThe general asset trap - handler for when assets are left …\nA <code>Vec</code> of <code>Asset</code>s.\nSome assets.\nMap of non-wildcard fungible and non-fungible assets held …\nNo less than the given proportion of members of the body.\nThe Origin Register does not contain a valid value for …\nThe XCM did not pass the barrier condition for execution.\nWhether we should execute the given XCM at all.\nThe Bitcoin network, including hard-forks supported by …\nThe Bitcoin network, including hard-forks supported by …\nAn identifier of a pluralistic body.\nA part of a pluralistic body.\nReduce Holding by up to the given assets.\nPay for the execution of some XCM <code>xcm</code> and <code>orders</code> with up …\nNetwork defined by the first 32-bytes of the hash and …\nNetwork specified by the first 32 bytes of its genesis …\nThe call dispatcher used by XCM.\nCreate some assets which are being held on behalf of the …\nClear the Error Register.\nClear the origin.\nClear the Topic Register.\nSet the Transact Status Register to its default, cleared, …\nExecution completed successfully; given weight was used.\nThe trait to parameterize the <code>XcmExecutor</code>.\nA converter <code>trait</code> for origin types.\nThe unambiguous defense body (for Polkadot, an opinion on …\nSpecify the filter as being everything contained by the …\nRemove the asset(s) (<code>assets</code>) from the Holding Register and …\nRemove the asset(s) (<code>assets</code>) from the Holding Register and …\nMutate the origin to some interior location.\nThe given message cannot be translated into a format that …\nThe given message cannot be translated into a format …\nThe status of a dispatch attempt using <code>Transact</code>.\nContains the error value\nContains the error value\nExecution did not start due to an error. We use …\nType to return in case of an error.\nAn Ethereum network specified by its chain ID.\nMessage could not be sent due to its size exceeding the …\nAttempt to send a message greater than the maximum …\nRecursion stack limit reached\nRemove the asset(s) (<code>want</code>) from the Holding Register and …\nExecutes inner <code>xcm</code> with origin set to the provided …\nType of XCM message executor.\nThe outcome of an XCM instruction.\nThe unambiguous executive body (for Polkadot, this would …\nThrow an error if Holding does not contain at least the …\nEnsure that the Error Register equals some given value and …\nEnsure that the Origin Register equals some given value …\nEnsure that a particular pallet with a particular version …\nEnsure that the Transact Status Register equals some given …\nUsed by <code>ExpectAsset</code>, <code>ExpectError</code> and <code>ExpectOrigin</code> when the …\nThe message was unable to be exported.\nSend a message on to Non-Local Consensus system.\nUsed by <code>Transact</code> when the functor cannot be decoded.\nAn asset transaction (like withdraw or deposit) failed …\nConfigure the fees.\nFees needed to be paid in order to send the message and …\nFees were required which the origin could not pay.\nA given number of members of the body, out of some larger …\nClassification of whether an asset is fungible or not, …\nA fungible asset; we record a number of units, as a <code>u128</code> …\nThe asset is fungible.\nA non-descript index within the context location.\nA nondescript array datum, 32 bytes, acting as a key …\nA global network capable of externalizing its own …\nThe interpreting consensus system.\nThe interpreting consensus system.\nThe given operation would lead to an overflow of the …\nA message to notify about that a previously sent open …\nAllows optional logic execution for the <code>HrmpChannelAccepted</code>…\nA message to notify that the other party in an open …\nAllows optional logic execution for the <code>HrmpChannelClosing</code> …\nA message to notify about a new incoming HRMP channel. …\nAllows optional logic execution for the …\nExecution started, but did not complete successfully due to…\nAn indexed body.\nA compact index. Technically this could be greater than …\nRemove the asset(s) (<code>assets</code>) from holding and send a …\nRemove the asset(s) (<code>assets</code>) from holding and send a …\nInitiates cross-chain transfer as follows:\nCross-Consensus Message: A message from one consensus …\nXCM error and the index of the instruction that caused it.\nThe index of an instruction in an XCM.\nA relative location which is constrained to be an interior …\nThe location parameter is not a valid value for the …\nCombinations of (Asset, Location) pairs which we trust as …\nCombinations of (Asset, Location) pairs which we trust as …\nThe unambiguous judicial body (this doesn’t exist on …\nA single item in a path to describe the relative location …\nNon-parent junctions that can be constructed, up to the …\nThe Kusama canary-net Relay-chain.\nThe unambiguous legislative body (for Polkadot, this could …\nWeight limit imposed of the inner value.\nA relative path between state-bearing consensus systems.\nAn asset cannot be deposited under the ownership of a …\n<code>MultiLocation</code> value too large to descend further.\n<code>MultiLocation</code> value ascend more parents than known …\nLock the locally held asset and prevent further transfer …\nSome other error with locking.\n<code>Enact</code> implementer for <code>prepare_lock</code>. This type may be …\nThe maximum number of assets we target to have in the …\nUsed by <code>Transact</code> to indicate that the given weight limit …\nA given number of members of the body.\nThe method of exporting a message.\nA needed argument is <code>None</code> when it should be <code>Some</code>.\nA named body.\nMore than the given proportion of members of the body.\nThe given pallet’s name is different to that expected.\nOrigin should just be the native dispatch origin …\nA global identifier of a data structure existing within …\nNo deal is possible under the given constraints.\nThe state was not in a condition where the operation was …\nA non-fungible asset. We record the instance identifier in …\nThe asset is not fungible.\nThe message and destination combination was not recognized …\nAn asset cannot be deposited, probably because (too much …\nUsed by <code>BuyExecution</code> when the Holding Register does not …\nAn asset cannot be withdrawn, potentially due to lack of …\nAsset (<code>asset</code>) has been locked on the <code>origin</code> system and may …\nNo response. Serves as a neutral default.\nContains the success value\nContains the success value\nDefine what needs to be done upon receiving a query …\nThe unambiguous child.\nHow to get a call origin from a <code>OriginKind</code> value.\nBasically just the XCM (more general) version of …\nOutcome of an XCM execution.\nAn arithmetic overflow happened.\nAn instanced, indexed pallet that forms a constituent part …\nInformation on all pallets.\nThe provided pallet index was not found.\nThe index, instance name, pallet name and version of some …\nAn indexed parachain belonging to and operated by the …\nA unit struct which can be converted into a <code>Location</code> of …\nA tuple struct which can be converted into a <code>Location</code> of …\nTakes an asset, uses it to pay for execution and puts the …\nA pluralistic body existing within consensus.\nThe Polkadot mainnet Relay-chain.\nThe Polkadot Bulletin chain.\nAn identifier for a query.\nQuery the existence of a particular pallet type.\nRespond with information that the local system is …\nInformation regarding the composition of a query response.\n<code>MultiLocation</code> value failed to be reanchored.\nAsset(s) (<code>assets</code>) have been destroyed on the <code>origin</code> system …\n<code>Enact</code> implementer for <code>prepare_reduce_unlockable</code>. This type …\nRefund any surplus weight previously bought with …\nImmediately report the contents of the Error Register to …\nReport to a given destination the contents of the Holding …\nSend a <code>QueryResponse</code> message containing the value of the …\nSend an <code>UnlockAsset</code> instruction to the <code>locker</code> for the …\nAsset(s) (<code>assets</code>) have been received into the ownership of …\nResponse data to a query.\nWhat to do when a response of a query is found.\nThe outer call dispatch type.\nThe safe call filter for <code>Transact</code>.\nError result value when attempting to send an XCM message.\nResult value when attempting to send an XCM message.\nUtility for sending an XCM message to a given location.\nSet the Appendix Register. This is code that should be …\nSet the Error Handler Register. This is code that should …\nSets the Fees Mode Register.\nSet hints for XCM execution.\nSet the Topic Register.\nOrigin should just be the standard account-based origin …\nAsk the destination system to respond with the most recent …\nHow we handle version subscription requests.\nOrigin should be the super-user. For Cumulus/Frame chains, …\nThe unambiguous technical body (for Polkadot, this would …\nIntermediate value which connects the two phases of the …\nUsed by <code>BuyExecution</code> when the fees declared to purchase …\nToo many assets matched the given asset filter.\nThe means of purchasing weight credit for XCM execution.\nApply the encoded transaction <code>call</code>, whose dispatch-origin …\nFacility for asset transacting.\nTransactional processor for XCM instructions.\nWithdraw asset(s) (<code>assets</code>) from the ownership of <code>origin</code> …\nWithdraw asset(s) (<code>assets</code>) from the ownership of <code>origin</code> …\nDestination is routable, but there is some issue with the …\nDestination is routable, but there is some issue with the …\nUsed by the <code>Trap</code> instruction to force an error …\nAlways throws an error of type <code>Trap</code>.\nThe unambiguous treasury body (for Polkadot, an opinion on …\nThe universal location of the local consensus is improper.\nUndefined - used if the non-fungible asset class has only …\nXCM version not able to be handled.\nThe instruction is intentionally unsupported.\nThe only body in its context.\nThe origin locations and specific universal junctions to …\nThis chain’s Universal Location.\nSet the Origin Register to be some child of the Universal …\nUsed by <code>ClaimAsset</code> when the given claim could not be …\nNo weight limit imposed.\nRemove the lock over <code>asset</code> on this chain and (if nothing …\n<code>Enact</code> implementer for <code>prepare_unlock</code>. This type may be …\nA directive to indicate that the origin expects free …\nDestination is known to be unroutable. This is considered …\nDestination is known to be unroutable.\nCancel the effect of a previous <code>SubscribeVersion</code> …\nOrigin Register does not contain a value value for a …\nOrigin Register does not contain a value value for a …\nAn XCM version.\nThe given pallet’s version has an incompatible version …\nThe body’s declaration, under whatever means it decides.\nThe means of determining an XCM message’s weight.\nAn optional weight limit.\nExecution of the XCM would potentially result in a greater …\nThe weight of an XCM message is not computable ahead of …\nSpecify the filter as the given <code>WildAsset</code> wildcard.\nA wildcard representing a set of assets.\nClassification of whether an asset is fungible or not.\nWithdraw asset(s) (<code>assets</code>) from the ownership of <code>origin</code> …\nA relative path comprising 1 junction.\nA relative path comprising 1 junction.\nA relative path comprising 2 junctions.\nA relative path comprising 2 junctions.\nA relative path comprising 3 junctions.\nA relative path comprising 3 junctions.\nA relative path comprising 4 junctions.\nA relative path comprising 4 junctions.\nA relative path comprising 5 junctions.\nA relative path comprising 5 junctions.\nA relative path comprising 6 junctions.\nA relative path comprising 6 junctions.\nA relative path comprising 7 junctions.\nA relative path comprising 7 junctions.\nA relative path comprising 8 junctions.\nA relative path comprising 8 junctions.\nOrigin should be interpreted as an XCM native origin and …\nContextual data pertaining to a specific list of XCM …\nError codes used in XCM. The first errors codes have …\nHow to emit XCM events.\nA hash type for identifying messages.\nAllows recording the last executed XCM (used by dry-run …\nHow to send an onward XCM message.\nEnsure that <code>check_in</code> will do as expected.\nEnsure that <code>check_in</code> will do as expected.\nEnsure that <code>check_in</code> will do as expected.\nEnsure that <code>check_out</code> will do as expected.\nEnsure that <code>check_out</code> will do as expected.")