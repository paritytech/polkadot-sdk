searchState.loadedDescShard("yet_another_parachain_runtime", 9, "Type alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA Multihash instance that only supports the basic …\nAn account has been added as an Ally and reserved its …\nA new rule has been set.\nAccount does not have voting rights.\nAccount is not an ally.\nItem has not been deemed unscrupulous.\nAccount is not a member.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe runtime call dispatch type.\nSimple index type for proposal counting.\nThe provider of a collective action interface, for example …\nThe provider of the proposal operation.\nAccount did not give a retirement notice required to …\nThe number of blocks a member must wait between giving a …\nRetirement period has not passed.\nA set of members who gave a retirement notice. They can …\nThe IPFS CID of the alliance rule. Fellows can propose a …\nThe overarching event type.\nWhat to do with slashed funds.\nWeights for <code>pallet_alliance</code> using the Substrate node and …\nLength of website URL exceeds <code>MaxWebsiteUrlLength</code>.\nNumber of announcements exceeds <code>MaxAnnouncementsCount</code>.\nNumber of members exceeds <code>MaxMembersCount</code>.\nThe number of unscrupulous items exceeds …\nThe current list of accounts deemed unscrupulous. These …\nThe type of item that may be deemed unscrupulous.\nAccounts or websites have been added into the list of …\nAccounts or websites have been removed from the list of …\nThe current list of websites deemed unscrupulous.\nCID version 0.\nCID version 1.\nThe version of the CID.\nWeight functions needed for <code>pallet_alliance</code>.\nWeight information for extrinsics in this pallet.\nThe account’s identity has no good judgement.\nThe account’s identity does not have display field and …\nStorage: <code>Alliance::Members</code> (r:3 w:2) Proof: …\nAbdicate one’s position as a voting member and just be …\nAbdicate one’s position as a voting member and just be …\nStorage: <code>Alliance::UnscrupulousAccounts</code> (r:1 w:1) Proof: …\nAdd accounts or websites to the list of unscrupulous items.\nAdd accounts or websites to the list of unscrupulous items.\nStorage: <code>Alliance::Announcements</code> (r:1 w:1) Proof: …\nMake an announcement of a new IPFS CID about alliance …\nMake an announcement of a new IPFS CID about alliance …\nClose a vote that is either approved, disapproved, or …\nClose a vote that is either approved, disapproved, or …\nStorage: <code>Alliance::Members</code> (r:1 w:0) Proof: …\nStorage: <code>Alliance::Members</code> (r:1 w:0) Proof: …\nStorage: <code>Alliance::Members</code> (r:1 w:0) Proof: …\nStorage: <code>Alliance::Members</code> (r:1 w:0) Proof: …\nClose a proposal that is either approved, disapproved, or …\nThe code of the Multihash.\nThe codec of CID.\nThe digest.\nStorage: <code>Alliance::Members</code> (r:2 w:2) Proof: …\nDisband the Alliance, remove all active members and …\nDisband the Alliance, remove all active members and …\nStorage: <code>Alliance::Members</code> (r:2 w:2) Proof: …\nElevate an Ally to Fellow.\nElevate an Ally to Fellow.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>Alliance::Members</code> (r:4 w:2) Proof: …\nAs a member, give a retirement notice and start a …\nAs a member, give a retirement notice and start a …\nWhether an account has been deemed “good” by the …\nFunction that returns whether an account has the required …\nThe multihash of CID.\nStorage: <code>Alliance::Members</code> (r:2 w:2) Proof: …\nInitialize the Alliance, onboard fellows and allies.\nInitialize the Alliance, onboard fellows and allies.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a user is a alliance member.\nCheck if an account has a given role.\nStorage: <code>Alliance::Members</code> (r:3 w:1) Proof: …\nSubmit oneself for candidacy. A fixed deposit is reserved.\nSubmit oneself for candidacy. A fixed deposit is reserved.\nStorage: <code>Alliance::Members</code> (r:3 w:1) Proof: …\nKick a member from the Alliance and slash its deposit.\nKick a member from the Alliance and slash its deposit.\nCreate a call with the variant <code>abdicate_fellow_status</code>.\nCreate a call with the variant <code>add_unscrupulous_items</code>.\nCreate a call with the variant <code>announce</code>.\nCreate a call with the variant <code>close</code>.\nCreate a call with the variant <code>disband</code>.\nCreate a call with the variant <code>elevate_ally</code>.\nCreate a call with the variant <code>give_retirement_notice</code>.\nCreate a call with the variant <code>init_members</code>.\nCreate a call with the variant <code>join_alliance</code>.\nCreate a call with the variant <code>kick_member</code>.\nCreate a call with the variant <code>nominate_ally</code>.\nCreate a call with the variant <code>propose</code>.\nCreate a call with the variant <code>remove_announcement</code>.\nCreate a call with the variant <code>remove_unscrupulous_items</code>.\nCreate a call with the variant <code>retire</code>.\nCreate a call with the variant <code>set_rule</code>.\nCreate a call with the variant <code>vote</code>.\nCreates a new CIDv0.\nStorage: <code>Alliance::Members</code> (r:3 w:1) Proof: …\nA Fellow can nominate someone to join the alliance as an …\nA Fellow can nominate someone to join the alliance as an …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturn a proposal of the given hash.\nAdd a new proposal to be voted on.\nAdd a new proposal to be voted on.\nAdd a new proposal. Returns a proposal length and active …\nStorage: <code>Alliance::Members</code> (r:1 w:0) Proof: …\nStorage: <code>Alliance::Announcements</code> (r:1 w:1) Proof: …\nRemove an announcement.\nRemove an announcement.\nStorage: <code>Alliance::UnscrupulousAccounts</code> (r:1 w:1) Proof: …\nDeem some items no longer unscrupulous.\nDeem some items no longer unscrupulous.\nStorage: <code>Alliance::RetiringMembers</code> (r:1 w:1) Proof: …\nAs a member, retire from the Alliance and unreserve the …\nAs a member, retire from the Alliance and unreserve the …\nStorage: <code>Alliance::Rule</code> (r:0 w:1) Proof: <code>Alliance::Rule</code> (…\nSet a new IPFS CID to the alliance rule.\nSet a new IPFS CID to the alliance rule.\nReturns the size of the digest.\nIf the identity provider allows sub-accounts, provide the …\nThe version of CID.\nStorage: <code>Alliance::Members</code> (r:1 w:0) Proof: …\nAdd an aye or nay vote for the sender to the given …\nAdd an aye or nay vote for the sender to the given …\nAdd an aye or nay vote for the sender to the given …\nAutogenerated weights for <code>pallet_alliance</code>\nImplements <code>OnRuntimeUpgrade</code> trait.\nThe in-code storage version.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWrapper for all migrations of this pallet.\nAccount has been deemed unscrupulous by the Alliance and …\nOrigin for admin-level operations, like setting the …\nThe Alliance has been initialized, therefore cannot be …\nAlliance disbanded. Includes number deleted members and …\nThe Alliance has not been initialized yet, therefore …\nThe deposit required for submitting candidacy.\nAn ally has been elevated to Fellow.\nAccount is already an elevated (fellow) member.\nAccount is already a member.\nAccount already gave retirement notice\nItem is already listed as unscrupulous.\nA new announcement has been proposed.\nOrigin for making announcements and adding/removing …\nAn on-chain announcement has been removed.\nThe current IPFS CIDs of any announcements.\nInvalid witness data given.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency used for deposits.\nMaps members to their candidacy deposit.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA Fellow abdicated their voting rights. They are now an …\nFellows must be provided to initialize the Alliance.\nCan be used to configure the genesis state of this pallet.\nThe identity verifier of an Alliance member.\nWhat to do with initial voting members of the Alliance.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nBalance is insufficient for the required deposit.\nThe maximum number of Allies supported by the pallet. Used …\nThe maximum number of announcements.\nThe maximum number of Fellows supported by the pallet. …\nThe maximum number of members per member role.\nMaximum number of proposals allowed to be active in …\nThe maximum number of the unscrupulous items supported by …\nThe maximum length of a website URL.\nA member has been kicked out with its deposit slashed.\nA member has retired with its deposit unreserved.\nA member gave retirement notice and their retirement …\nMaps member type to members of each type.\nSome accounts have been initialized as members …\nWhat to do when a member has been added or removed.\nOrigin that manages entry and forcible discharge from the …\nThe announcement is not found.\nThe proposal hash is not found.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn account has been added as an Ally and reserved its …\nA new rule has been set.\nAccount does not have voting rights.\nAccount is not an ally.\nItem has not been deemed unscrupulous.\nAccount is not a member.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe runtime call dispatch type.\nThe provider of the proposal operation.\nAccount did not give a retirement notice required to …\nThe number of blocks a member must wait between giving a …\nRetirement period has not passed.\nA set of members who gave a retirement notice. They can …\nThe IPFS CID of the alliance rule. Fellows can propose a …\nThe overarching event type.\nWhat to do with slashed funds.\nLength of website URL exceeds <code>MaxWebsiteUrlLength</code>.\nNumber of announcements exceeds <code>MaxAnnouncementsCount</code>.\nNumber of members exceeds <code>MaxMembersCount</code>.\nThe number of unscrupulous items exceeds …\nThe current list of accounts deemed unscrupulous. These …\nAccounts or websites have been added into the list of …\nAccounts or websites have been removed from the list of …\nThe current list of websites deemed unscrupulous.\nWeight information for extrinsics in this pallet.\nThe account’s identity has no good judgement.\nThe account’s identity does not have display field and …\nAbdicate one’s position as a voting member and just be …\nAdd accounts or websites to the list of unscrupulous items.\nMake an announcement of a new IPFS CID about alliance …\nClose a vote that is either approved, disapproved, or …\nDisband the Alliance, remove all active members and …\nElevate an Ally to Fellow.\nAs a member, give a retirement notice and start a …\nInitialize the Alliance, onboard fellows and allies.\nSubmit oneself for candidacy. A fixed deposit is reserved.\nKick a member from the Alliance and slash its deposit.\nA Fellow can nominate someone to join the alliance as an …\nAdd a new proposal to be voted on.\nRemove an announcement.\nDeem some items no longer unscrupulous.\nAs a member, retire from the Alliance and unreserve the …\nSet a new IPFS CID to the alliance rule.\nAdd an aye or nay vote for the sender to the given …\nWeights for <code>pallet_alliance</code> using the Substrate node and …\nWeight functions needed for <code>pallet_alliance</code>.\nRetrieves information about an existing deposit for a …\nPallet’s callable functions.\nConfiguration trait of this pallet.\nRegistry of an asset used as an account deposit for the …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nProvided asset pair is not supported for pool.\nIndicates that a pool has been migrated to the new account …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nIndicates a partial transfer of balance to the new account …\nRetrieves information about an existing deposit for a …\nMeans to reset the team for assets from the …\nThe pool doesn’t exist.\nType previously used to derive the account ID for a pool. …\nOverarching event type.\nWeight functions needed for <code>pallet_asset_conversion_ops</code>.\nWeight information for extrinsics in this pallet.\nPool’s balance cannot be zero.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigrates an existing pool to a new account ID derivation …\nMigrates an existing pool to a new account ID derivation …\nCreate a call with the variant <code>migrate_to_new_account</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_asset_conversion_ops</code>\nPool’s new account ID.\nPool’s ID.\nPool’s prior account ID.\nRetrieves information about an existing deposit for a …\nPallet’s callable functions.\nConfiguration trait of this pallet.\nRegistry of an asset used as an account deposit for the …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nProvided asset pair is not supported for pool.\nIndicates that a pool has been migrated to the new account …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nIndicates a partial transfer of balance to the new account …\nRetrieves information about an existing deposit for a …\nMeans to reset the team for assets from the …\nThe pool doesn’t exist.\nType previously used to derive the account ID for a pool. …\nOverarching event type.\nWeight information for extrinsics in this pallet.\nPool’s balance cannot be zero.\nMigrates an existing pool to a new account ID derivation …\nPool’s new account ID.\nPool’s ID.\nPool’s prior account ID.\nWeights for <code>pallet_asset_conversion_ops</code> using the …\nWeight functions needed for <code>pallet_asset_conversion_ops</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>AssetConversion::Pools</code> (r:1 w:0) Proof: …\nThe initial fee was paid in an asset.\nThe type used to identify the assets used for transaction …\nThe asset ID type that can be used for transaction …\nA swap of the refund in native currency back to asset …\nA transaction fee <code>actual_fee</code>, of which <code>tip</code> was added to …\nThe underlying integer type in which fees are calculated.\nBenchmark helper\nHelper trait to benchmark the <code>ChargeAssetTxPayment</code> …\nContains a variant per dispatchable extrinsic that this …\nRequire payment for transaction inclusion and optionally …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nUsed to pass the initial payment info from pre- to …\nThe type used to store the intermediate values between …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe initial fee was paid in the native currency.\nNo initial fee was paid.\nHandle withdrawing, refunding and depositing of …\nThe actual transaction charging logic that charges the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe info passed between the prepare and post-dispatch …\nThe overarching event type.\nMeans to withdraw, correct and deposit fees in the asset …\nThe info passed between the validate and prepare steps for …\nWeight functions needed for …\nThe weight information of this pallet.\nEnsure payment of the transaction fees can be withdrawn.\nDry run of swap &amp; withdraw the predicted fee from the …\nRefund any overpaid fees and deposit the corrected amount. …\nReturns the <code>AssetId</code> to be used in the liquidity pool by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility constructor. Used only in client/factory code.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nCreate a liquidity pool for a given asset and sufficiently …\nAutogenerated weights for …\nSecure the payment of the transaction fees before the …\nThe asset ID type that can be used for transaction …\nA swap of the refund in native currency back to asset …\nA transaction fee <code>actual_fee</code>, of which <code>tip</code> was added to …\nBenchmark helper\nHelper trait to benchmark the <code>ChargeAssetTxPayment</code> …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe actual transaction charging logic that charges the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe weight information of this pallet.\nReturns the <code>AssetId</code> to be used in the liquidity pool by …\nCreate a liquidity pool for a given asset and sufficiently …\nWeights for <code>pallet_asset_conversion_tx_payment</code> using the …\nWeight functions needed for …\nStorage: <code>Assets::Asset</code> (r:1 w:1) Proof: <code>Assets::Asset</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe given asset ID already has an assigned conversion rate …\nThe type for asset kinds for which the conversion rate to …\nTrait describing the factory function for the <code>AssetKind</code> …\nHelper type for benchmarks.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nMaps an asset to its fixed point representation in the …\nThe origin permissioned to create a conversion rate for an …\nThe currency mechanism for this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nOverflow ocurred when calculating the inverse rate.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe origin permissioned to remove an existing conversion …\nThe runtime event type.\nThe given asset ID is unknown.\nThe origin permissioned to update an existing conversion …\nWeight functions needed for <code>pallet_asset_rate</code>.\nThe Weight information for extrinsics in this pallet.\nInitialize a conversion rate to native balance for the …\nInitialize a conversion rate to native balance for the …\nSet a conversion rate to <code>1</code> for the <code>asset_id</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>create</code>.\nCreate a call with the variant <code>remove</code>.\nCreate a call with the variant <code>update</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRemove an existing conversion rate to native balance for …\nRemove an existing conversion rate to native balance for …\nUpdate the conversion rate to native balance for the given …\nUpdate the conversion rate to native balance for the given …\nAutogenerated weights for <code>pallet_asset_rate</code>\nThe given asset ID already has an assigned conversion rate …\nThe type for asset kinds for which the conversion rate to …\nHelper type for benchmarks.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nMaps an asset to its fixed point representation in the …\nThe origin permissioned to create a conversion rate for an …\nThe currency mechanism for this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nOverflow ocurred when calculating the inverse rate.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe origin permissioned to remove an existing conversion …\nThe runtime event type.\nThe given asset ID is unknown.\nThe origin permissioned to update an existing conversion …\nThe Weight information for extrinsics in this pallet.\nInitialize a conversion rate to native balance for the …\nRemove an existing conversion rate to native balance for …\nUpdate the conversion rate to native balance for the given …\nWeights for <code>pallet_asset_rate</code> using the Substrate node and …\nWeight functions needed for <code>pallet_asset_rate</code>.\nStorage: <code>AssetRate::ConversionRateToNative</code> (r:1 w:1) …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>AssetRate::ConversionRateToNative</code> (r:1 w:1) …\nStorage: <code>AssetRate::ConversionRateToNative</code> (r:1 w:1) …\nIdentifier for each type of asset.\nThe runtime API for the asset rewards pallet.\nRegistry of assets that can be configured to either stake …\nFreezer for the Assets.\nThe type in which the assets are measured.\nHelper for benchmarking.\nThere was an error converting a block number.\nThe block number type for the pallet.\nProvider for the current block number.\nPallet’s callable functions.\nConfiguration trait of this pallet.\nMeans for associating a cost with the on-chain storage of …\nThe origin with permission to create pools.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe expiry block must be in the future.\nThe expiry block can be only extended.\nA reason for the pallet placing a hold on funds.\nA reason for the pallet placing a hold on funds.\nInsufficient funds to create the freeze.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nStores the <code>PoolId</code> to use for the next pool.\nThe pool still has staked tokens or rewards.\nAn operation was attempted with a non-existent asset.\nAn operation was attempted on a non-existent pool.\nAn operation was attempted for a non-existent staker.\nThe staker does not have enough tokens to perform the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s unique identifier, used to derive the pool…\nA pool admin was modified.\nA pool information was cleared after it’s completion.\nThe cost associated with storing pool information on-chain …\nA new reward pool was created.\nCost associated with storing pool information on-chain.\nA pool expiry block was modified by the admin.\nUnique id type for each pool.\nThe state and configuration of an incentive pool.\nConvenience alias for <code>PoolInfo</code>.\nA pool reward rate was modified by the admin.\nThe state of a staker in a pool.\nState of pool stakers.\nState and configuration of each staking pool.\nThe reward rate per block can be only increased.\nAn account harvested some rewards.\nOverarching event type.\nThe overarching freeze reason.\nFunds are staked in the pallet.\nAn account staked some tokens in a pool.\nAn account unstaked some tokens from a pool.\nWeight functions needed for <code>pallet_asset_rewards</code>.\nWeight information for extrinsics in this pallet.\nAsset Rewards pallet benchmarking.\nCleanup a pool.\nCleanup a pool.\nCreate a new reward pool.\nCreate a new reward pool.\nConvenience method to deposit reward tokens into a pool.\nConvenience method to deposit reward tokens into a pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHarvest unclaimed pool rewards.\nHarvest unclaimed pool rewards.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>cleanup_pool</code>.\nCreate a call with the variant <code>create_pool</code>.\nCreate a call with the variant <code>deposit_reward_tokens</code>.\nCreate a call with the variant <code>harvest_rewards</code>.\nCreate a call with the variant <code>set_pool_admin</code>.\nCreate a call with the variant <code>set_pool_expiry_block</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>stake</code>.\nCreate a call with the variant <code>unstake</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nDerive a pool account ID from the pool’s ID.\nGet the cost of creating a pool.\nThe pool creation footprint.\nModify a pool admin.\nModify a pool admin.\nSet when the pool should expire.\nSet when the pool should expire.\nModify a pool reward rate.\nModify a pool reward rate.\nStake additional tokens in a pool.\nStake additional tokens in a pool.\nUnstake tokens from a pool.\nUnstake tokens from a pool.\nComputes update pool and staker reward state.\nComputes update pool reward state.\nThe account allowed to modify the pool.\nThe staked asset amount.\nThe unstaked asset amount.\nThe amount of harvested tokens.\nThe account that signed transaction.\nThe account that signed transaction.\nThe account that created the pool.\nThe block the pool will cease to accumulate rewards.\nThe new admin.\nThe new expiry block.\nThe new reward rate per block.\nThe pool.\nThe pool.\nThe pool.\nThe unique ID for the new pool.\nThe modified pool.\nThe modified pool.\nThe modified pool.\nThe cleared pool.\nThe reward asset.\nThe initial reward rate per block.\nThe staking asset.\nThe account that staked assets.\nThe account that unstaked assets.\nThe staker whos rewards were harvested.\nBenchmark Helper\nReturns the reward asset id.\nReturns the staked asset id.\nIdentifier for each type of asset.\nRegistry of assets that can be configured to either stake …\nFreezer for the Assets.\nThe type in which the assets are measured.\nHelper for benchmarking.\nThere was an error converting a block number.\nProvider for the current block number.\nPallet’s callable functions.\nConfiguration trait of this pallet.\nMeans for associating a cost with the on-chain storage of …\nThe origin with permission to create pools.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe expiry block must be in the future.\nThe expiry block can be only extended.\nA reason for the pallet placing a hold on funds.\nA reason for the pallet placing a hold on funds.\nInsufficient funds to create the freeze.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nStores the <code>PoolId</code> to use for the next pool.\nThe pool still has staked tokens or rewards.\nAn operation was attempted with a non-existent asset.\nAn operation was attempted on a non-existent pool.\nAn operation was attempted for a non-existent staker.\nThe staker does not have enough tokens to perform the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s unique identifier, used to derive the pool…\nA pool admin was modified.\nA pool information was cleared after it’s completion.\nThe cost associated with storing pool information on-chain …\nA new reward pool was created.\nCost associated with storing pool information on-chain.\nA pool expiry block was modified by the admin.\nA pool reward rate was modified by the admin.\nState of pool stakers.\nState and configuration of each staking pool.\nThe reward rate per block can be only increased.\nAn account harvested some rewards.\nOverarching event type.\nThe overarching freeze reason.\nFunds are staked in the pallet.\nAn account staked some tokens in a pool.\nAn account unstaked some tokens from a pool.\nWeight information for extrinsics in this pallet.\nCleanup a pool.\nCreate a new reward pool.\nConvenience method to deposit reward tokens into a pool.\nHarvest unclaimed pool rewards.\nModify a pool admin.\nSet when the pool should expire.\nModify a pool reward rate.\nStake additional tokens in a pool.\nUnstake tokens from a pool.\nThe account allowed to modify the pool.\nThe staked asset amount.\nThe unstaked asset amount.\nThe amount of harvested tokens.\nThe account that signed transaction.\nThe account that signed transaction.\nThe account that created the pool.\nThe block the pool will cease to accumulate rewards.\nThe new admin.\nThe new expiry block.\nThe new reward rate per block.\nThe pool.\nThe pool.\nThe pool.\nThe unique ID for the new pool.\nThe modified pool.\nThe modified pool.\nThe modified pool.\nThe cleared pool.\nThe reward asset.\nThe initial reward rate per block.\nThe staking asset.\nThe account that staked assets.\nThe account that unstaked assets.\nThe staker whos rewards were harvested.\nThe initial fee was paid in an asset.\nThe type used to identify the assets used for transaction …\nA transaction fee <code>actual_fee</code>, of which <code>tip</code> was added to …\nThe underlying integer type in which fees are calculated.\nBenchmark helper\nHelper trait to benchmark the <code>ChargeAssetTxPayment</code> …\nContains a variant per dispatchable extrinsic that this …\nRequire the transactor pay for themselves and maybe …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nThe fungibles instance used to pay for transactions in …\nImplements the asset transaction for a balance to asset …\nAllows specifying what to do with the withdrawn asset fees.\nUsed to pass the initial payment info from pre- to …\nThe type used to store the intermediate values between …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe initial fee was paid in the native currency.\nNo initial fee was paid.\nHandle withdrawing, refunding and depositing of …\nThe actual transaction charging logic that charges the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe info passed between the prepare and post-dispatch …\nThe overarching event type.\nThe info passed between the validate and prepare steps for …\nWeight functions needed for <code>pallet_asset_tx_payment</code>.\nThe weight information of this pallet.\nEnsure payment of the transaction fees can be withdrawn.\nEnsure payment of the transaction fees can be withdrawn.\nAfter the transaction was executed the actual fee can be …\nHand the fee and the tip over to the <code>[HandleCredit]</code> …\nReturns the <code>AssetId</code> to be used in the liquidity pool by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility constructor. Used only in client/factory code.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nImplement to determine what to do with the withdrawn asset …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nCreate a liquidity pool for a given asset and sufficiently …\nAutogenerated weights for <code>pallet_asset_tx_payment</code>\nBefore the transaction is executed the payment of the …\nWithdraw the predicted fee from the transaction origin.\nA transaction fee <code>actual_fee</code>, of which <code>tip</code> was added to …\nBenchmark helper\nHelper trait to benchmark the <code>ChargeAssetTxPayment</code> …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nThe fungibles instance used to pay for transactions in …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe actual transaction charging logic that charges the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe weight information of this pallet.\nReturns the <code>AssetId</code> to be used in the liquidity pool by …\nCreate a liquidity pool for a given asset and sufficiently …\nWeights for <code>pallet_asset_tx_payment</code> using the Substrate …\nWeight functions needed for <code>pallet_asset_tx_payment</code>.\nStorage: <code>TransactionPayment::NextFeeMultiplier</code> (r:1 w:0) …\nStorage: <code>TransactionPayment::NextFeeMultiplier</code> (r:1 w:0) …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA map that stores freezes applied on an account for a …\nA map that stores the current total frozen balance for …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe overarching event type.\nThe overarching freeze reason.\nThe overarching freeze reason.\nNumber of freezes on an account would exceed <code>MaxFreezes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA map that stores freezes applied on an account for a …\nA map that stores the current total frozen balance for …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe overarching event type.\nThe overarching freeze reason.\nThe overarching freeze reason.\nNumber of freezes on an account would exceed <code>MaxFreezes</code>.\n<code>who</code>s balance on hold was burned by <code>amount</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>who</code>s balance on hold was increased by <code>amount</code>.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\n<code>who</code>s balance on hold was decreased by <code>amount</code>.\nThe overarching event type.\nThe overarching event type.\nThe overarching freeze reason.\nThe overarching freeze reason.\nNumber of holds on an account would exceed the count of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\n<code>who</code>s balance on hold was burned by <code>amount</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>who</code>s balance on hold was increased by <code>amount</code>.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\n<code>who</code>s balance on hold was decreased by <code>amount</code>.\nThe overarching event type.\nThe overarching event type.\nThe overarching freeze reason.\nThe overarching freeze reason.\nNumber of holds on an account would exceed the count of …\nMean of extracting the asset id from the precompile …\nThe <code>AssetIdExtractor</code> used by the precompile.\nThe configuration of a pallet-assets precompile.\nAn ERC20 precompile.\nAn <code>AssetIdExtractor</code> that stores the asset id directly …\nA precompile configuration that uses a prefix …\nThe Address matcher used by the precompile.\nExtracts the asset id from the address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSwap has already been claimed.\nSwap already exists.\nA swap action that only allows transferring balances.\nContains a variant per dispatchable extrinsic that this …\nClaim action mismatch.\nConfiguration trait of this pallet.\nDuration has not yet passed for the swap to be cancelled.\nThe <code>Error</code> enum of this pallet.\nEvent of atomic swap pallet.\nHashed proof type.\nSwap proof is invalid.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSwap created.\nSwap does not exist.\nThe <code>Pallet</code> struct, the main type that implements traits …\nPending atomic swap operation.\nStorage type is <code>StorageDoubleMap</code> with key1 type T :: …\nLimit of proof size.\nProof is too large.\nThe overarching event type.\nSource does not match.\nDefinition of a pending atomic swap action. It contains …\nSwap action.\nSwap cancelled.\nSwap claimed. The last parameter indicates whether the …\nAction of this swap.\nCancel the resources reserved in <code>source</code>.\nCancel an atomic swap. Only possible after the originally …\nCancel an atomic swap. Only possible after the originally …\nClaim the reserved resources, with <code>source</code> and <code>target</code>. …\nClaim an atomic swap.\nClaim an atomic swap.\nRegister a new atomic swap, declaring an intention to send …\nRegister a new atomic swap, declaring an intention to send …\nEnd block of the lock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new swap action value of balance.\nCreate a call with the variant <code>cancel_swap</code>.\nCreate a call with the variant <code>claim_swap</code>.\nCreate a call with the variant <code>create_swap</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReserve the resources needed for the swap, from the given …\nSource of the swap.\nWeight for executing the operation.\nSwap has already been claimed.\nSwap already exists.\nContains a variant per dispatchable extrinsic that this …\nClaim action mismatch.\nConfiguration trait of this pallet.\nDuration has not yet passed for the swap to be cancelled.\nThe <code>Error</code> enum of this pallet.\nEvent of atomic swap pallet.\nSwap proof is invalid.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSwap created.\nSwap does not exist.\nThe <code>Pallet</code> struct, the main type that implements traits …\nStorage type is <code>StorageDoubleMap</code> with key1 type T :: …\nLimit of proof size.\nProof is too large.\nThe overarching event type.\nSource does not match.\nSwap action.\nSwap cancelled.\nSwap claimed. The last parameter indicates whether the …\nCancel an atomic swap. Only possible after the originally …\nClaim an atomic swap.\nRegister a new atomic swap, declaring an intention to send …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nKeys of the current authority set.\nThe maximum number of authorities that can be added.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nKeys of the next authority set.\nThe <code>Pallet</code> struct, the main type that implements traits …\nRetrieve authority identifiers of the current and next …\nRetrieve authority identifiers of the current authority …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve authority identifiers of the next authority set …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nKeys of the current authority set.\nThe maximum number of authorities that can be added.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nKeys of the next authority set.\nThe <code>Pallet</code> struct, the main type that implements traits …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nAn event handler for the authorship pallet. There is a …\nAn event handler for authored blocks.\nFind the author of a block.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nFetch the author of the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote that the given account ID is the author of the …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nAn event handler for authored blocks.\nFind the author of a block.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThis field should always be populated during block …\nCurrent epoch authorities.\nA Babe authority identifier. Necessarily equivalent to the …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nRandomness produced semi-freshly with each block, but …\nCurrent slot number.\nA way to check whether a given validator is disabled and …\nA given equivocation report is valid but already …\nTrigger an epoch change, if any should take place.\nBABE requires some logic to be triggered on every block to …\nThe configuration for the current epoch. Should never be …\nThe amount of time, in slots, that each epoch should last. …\nCurrent epoch index.\nThe block numbers when the last and current epoch have …\nBABE equivocation offence report.\nBABE equivocation offence report system.\nThe equivocation handling subsystem, defines methods to …\nThe <code>Error</code> enum of this pallet.\nThe expected average block time at which BABE should be …\nA type signifying to BABE that an external trigger for …\nCan be used to configure the genesis state of this pallet.\nThe slot at which the first epoch actually started. This …\nTemporary value (cleared at block finalization) which is …\nSubmitted configuration is invalid.\nAn equivocation proof provided as part of an equivocation …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nHow late the current block is compared to its parent.\nMax number of authorities allowed\nThe maximum number of nominators for each validator.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNext epoch authorities.\nThe configuration for the next epoch, <code>None</code> if the config …\nNext epoch randomness.\nThe BABE Pallet\nRandomness produced semi-freshly with each block, but …\nPending epoch configuration change that will be applied …\nThe epoch randomness for the <em>current</em> epoch.\nRandomness usable by on-chain code that <strong>does not depend</strong> …\nRandomness usable by consensus protocols that <strong>depend</strong> upon …\nA type signifying to BABE that it should perform epoch …\nRandomness under construction.\nA list of the last 100 skipped epochs and the …\nTWOX-NOTE: <code>SegmentIndex</code> is an increasing integer, so this …\nHelper for weights computations\nPublic function to access author_vrf_randomness storage.\nPublic function to access authorities storage.\nProduces information about the current epoch.\nFinds the start slot of the current epoch.\nPublic function to access current_slot storage.\nDANGEROUS: Enact an epoch change. Should be done on every …\nPublic function to access epoch_config storage.\nPublic function to access epoch_index storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nPublic function to access genesis_slot storage.\nPublic function to access initialized storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic function to access lateness storage.\nCreate a call with the variant <code>plan_config_change</code>.\nCreate a call with the variant <code>report_equivocation</code>.\nCreate a call with the variant <code>report_equivocation_unsigned</code>…\nProduces information about the next epoch (which was …\nReturn the <em>best guess</em> block number, at which the next …\nThe authority that produced the equivocation.\nBlock finalization\nInitialization\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPlan an epoch config change. The epoch config change is …\nPlan an epoch config change. The epoch config change is …\nPublic function to access randomness storage.\nReport authority equivocation/misbehavior. This method …\nReport authority equivocation/misbehavior. This method …\nReport authority equivocation/misbehavior. This method …\nReport authority equivocation/misbehavior. This method …\nThe session index in which the incident happened.\nDetermine whether an epoch change should take place at …\nPublic function to access skipped_epochs storage.\nA babe slot in which this incident happened.\nDetermine the BABE slot duration based on the Timestamp …\nSubmits an extrinsic to report an equivocation. This …\nTrigger an epoch change, if any should take place. This …\nThe size of the validator set at the time of the offence.\nSomething that can return the storage prefix of the <code>Babe</code> …\nA storage migration that adds the current epoch …\nThis field should always be populated during block …\nCurrent epoch authorities.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCurrent slot number.\nA way to check whether a given validator is disabled and …\nA given equivocation report is valid but already …\nBABE requires some logic to be triggered on every block to …\nThe configuration for the current epoch. Should never be …\nThe amount of time, in slots, that each epoch should last. …\nCurrent epoch index.\nThe block numbers when the last and current epoch have …\nThe equivocation handling subsystem, defines methods to …\nThe <code>Error</code> enum of this pallet.\nThe expected average block time at which BABE should be …\nCan be used to configure the genesis state of this pallet.\nThe slot at which the first epoch actually started. This …\nTemporary value (cleared at block finalization) which is …\nSubmitted configuration is invalid.\nAn equivocation proof provided as part of an equivocation …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nHow late the current block is compared to its parent.\nMax number of authorities allowed\nThe maximum number of nominators for each validator.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNext epoch authorities.\nThe configuration for the next epoch, <code>None</code> if the config …\nNext epoch randomness.\nThe BABE Pallet\nPending epoch configuration change that will be applied …\nThe epoch randomness for the <em>current</em> epoch.\nRandomness under construction.\nA list of the last 100 skipped epochs and the …\nTWOX-NOTE: <code>SegmentIndex</code> is an increasing integer, so this …\nHelper for weights computations\nPlan an epoch config change. The epoch config change is …\nReport authority equivocation/misbehavior. This method …\nReport authority equivocation/misbehavior. This method …\nA Bag is a doubly-linked list of ids, where each id is …\nThe list of thresholds separating the various bags.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA duplicate id has been detected.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe <strong>ONLY</strong> entry point of this module. All operations to the …\nA error in the list interface implementation.\nA bag stored in storage.\nA single node, within some bag.\nLock all updates to this pallet.\nThe List is locked, therefore updates cannot happen now.\nCould not update a node, because the pallet is locked.\nMaximum number of accounts that may be re-bagged …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nPointer that remembers the next node that will be …\nA Node is the fundamental element comprising the …\nGiven node id was not found.\nAn Id does not have a greater score than another Id.\nAttempted to place node in front of a node in another bag.\nThe <code>Pallet</code> struct, the main type that implements traits …\nAccounts that failed to be inserted into the bags-list due …\nMoved an account from one bag to another.\nThe overarching event type.\nThe type used to dictate a node position relative to other …\nSomething that provides the scores of ids.\nUpdated the score of some account to the given amount.\nGet the current <code>score</code> of a given account.\nWeight functions needed for <code>pallet_bags_list</code>.\nWeight information for extrinsics in this pallet.\nThe bag this nodes belongs to (public for benchmarks).\nMove an account from one bag to another, depositing an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a node by id.\nGet the score of the given node,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> when this voter is in the wrong bag.\nImplementation of a “bags list”: a semi-sorted list …\nEquivalent to <code>ListBags::get</code>, but public. Useful for tests …\nMigrate the list from one set of thresholds to another.\nThe migrations of this pallet.\nMock runtime for pallet-bags-lists tests.\nCreate a new [<code>#view_function_struct_ident</code>] instance.\nCreate a call with the variant <code>put_in_front_of</code>.\nCreate a call with the variant <code>put_in_front_of_other</code>.\nCreate a call with the variant <code>rebag</code>.\nGiven a certain score, to which bag does it belong to?\nCalled during the idle phase of block execution. …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nMove the caller’s Id directly in front of <code>lighter</code>.\nMove the caller’s Id directly in front of <code>lighter</code>.\nSame as <code>Pallet::put_in_front_of</code>, but it can be called by …\nSame as <code>Pallet::put_in_front_of</code>, but it can be called by …\nDeclare that some <code>dislocated</code> account has, through rewards …\nDeclare that some <code>dislocated</code> account has, through rewards …\nGet the current <code>score</code> of a given account.\nGet the underlying voter (public fo tests).\nIterate over the nodes in this bag (public for tests).\nRegenerate all of the data from the given ids.\nAutogenerated weights for <code>pallet_bags_list</code>\nA Bag is a doubly-linked list of ids, where each id is …\nA duplicate id has been detected.\nThe <strong>ONLY</strong> entry point of this module. All operations to the …\nThe List is locked, therefore updates cannot happen now.\nA Node is the fundamental element comprising the …\nGiven node id was not found.\nAn Id does not have a greater score than another Id.\nAttempted to place node in front of a node in another bag.\nGiven a certain score, to which bag does it belong to?\nA struct that migrates all bags lists to contain a score …\nA struct that does not migration, but only checks that the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll pallets included in the runtime as a nested tuple of …\nAll pallets included in the runtime as a nested tuple of …\nProvides an implementation of <code>PalletInfo</code> to provide …\nThe aggregated runtime call type.\nA reason for placing a freeze on funds.\nA reason for placing a hold on funds.\nAn identifier for each lock placed on funds.\nThe runtime origin type representing the origin of a call.\nA reason for slashing funds.\nAn aggregation of all <code>Task</code> enums across all pallets …\nRuntime query type.\nConvenience function for view functions dispatching and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert to runtime origin with caller being system signed …\nReturns the argument unchanged.\nConvert to runtime origin, using as filter: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptionally convert the <code>DispatchError</code> into the <code>RuntimeError</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMutate the internal value in place.\nMutate the internal value in place.\nMutate the internal value in place.\nCreate with system none origin and …\nKill/reset the value to whatever was set at first.\nKill/reset the value to whatever was set at first.\nKill/reset the value to whatever was set at first.\nCreate with system root origin and …\nSet the internal value.\nSet the internal value.\nSet the internal value.\nCreate with system signed origin and …\nGet current value and replace with initial value of the …\nGet current value and replace with initial value of the …\nGet current value and replace with initial value of the …\nThe list of thresholds separating the various bags.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nA error in the list interface implementation.\nA bag stored in storage.\nA single node, within some bag.\nLock all updates to this pallet.\nCould not update a node, because the pallet is locked.\nMaximum number of accounts that may be re-bagged …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nPointer that remembers the next node that will be …\nThe <code>Pallet</code> struct, the main type that implements traits …\nAccounts that failed to be inserted into the bags-list due …\nMoved an account from one bag to another.\nThe overarching event type.\nThe type used to dictate a node position relative to other …\nSomething that provides the scores of ids.\nUpdated the score of some account to the given amount.\nGet the current <code>score</code> of a given account.\nWeight information for extrinsics in this pallet.\nMove the caller’s Id directly in front of <code>lighter</code>.\nSame as <code>Pallet::put_in_front_of</code>, but it can be called by …\nDeclare that some <code>dislocated</code> account has, through rewards …\nWeights for <code>pallet_bags_list</code> using the Substrate node and …\nWeight functions needed for <code>pallet_bags_list</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>VoterList::CounterForListNodes</code> (r:1 w:1) Proof: …\nStorage: <code>VoterList::Lock</code> (r:1 w:0) Proof: <code>VoterList::Lock</code> (…\nStorage: <code>VoterList::Lock</code> (r:1 w:0) Proof: <code>VoterList::Lock</code> (…\nStorage: <code>VoterList::Lock</code> (r:1 w:0) Proof: <code>VoterList::Lock</code> (…\nHook for checking commitment canonicity.\nThe current authorities set\nAuthority identifier type\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA given equivocation report is valid but already …\nBEEFY equivocation offence report.\nBEEFY equivocation offence report system.\nThe equivocation handling subsystem.\nThe <code>Error</code> enum of this pallet.\nBlock number where BEEFY consensus is enabled/started. By …\nCan be used to configure the genesis state of this pallet.\nSubmitted configuration is invalid.\nA double voting proof provided as part of an equivocation …\nThe session of the equivocation proof is invalid\nThe session of the equivocation proof is not in the …\nA fork voting proof provided as part of an equivocation …\nA future block voting proof provided as part of an …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nThe maximum number of authorities that can be added.\nThe maximum number of nominators for each validator.\nThe maximum number of entries to keep in the set id to …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAuthorities set scheduled to be used with the next session\nA hook to act on the new BEEFY validator set.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA mapping from BEEFY set ID to the index of the <em>most recent</em>…\nA round number and set id which point on the time of an …\nThe current validator set id\nWeights for this pallet.\nInitial set of BEEFY authorities.\nEnsure the correctness of the state of this pallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBlock number where BEEFY consensus should start. Should …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>report_double_voting</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>report_fork_voting</code>.\nCreate a call with the variant <code>report_fork_voting_unsigned</code>.\nCreate a call with the variant <code>report_future_block_voting</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_new_genesis</code>.\nThe authority which produced this equivocation.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nRound number.\nThe session index in which the incident happened.\nBEEFY Set ID.\nReset BEEFY consensus by setting a new BEEFY genesis at …\nReset BEEFY consensus by setting a new BEEFY genesis at …\nSubmits an extrinsic to report a double voting …\nSubmits an extrinsic to report a fork voting equivocation. …\nSubmits an extrinsic to report a future block voting …\nTime slot at which this incident happened.\nReturn the current active BEEFY validator set.\nThe size of the validator set at the time of the offence.\nHook for checking commitment canonicity.\nThe current authorities set\nAuthority identifier type\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA given equivocation report is valid but already …\nThe equivocation handling subsystem.\nThe <code>Error</code> enum of this pallet.\nBlock number where BEEFY consensus is enabled/started. By …\nCan be used to configure the genesis state of this pallet.\nSubmitted configuration is invalid.\nA double voting proof provided as part of an equivocation …\nThe session of the equivocation proof is invalid\nThe session of the equivocation proof is not in the …\nA fork voting proof provided as part of an equivocation …\nA future block voting proof provided as part of an …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nThe maximum number of authorities that can be added.\nThe maximum number of nominators for each validator.\nThe maximum number of entries to keep in the set id to …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAuthorities set scheduled to be used with the next session\nA hook to act on the new BEEFY validator set.\nThe <code>Pallet</code> struct, the main type that implements traits …\nA mapping from BEEFY set ID to the index of the <em>most recent</em>…\nThe current validator set id\nWeights for this pallet.\nInitial set of BEEFY authorities.\nBlock number where BEEFY consensus should start. Should …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport fork voting equivocation. This method will verify …\nReport fork voting equivocation. This method will verify …\nReport future block voting equivocation. This method will …\nReport future block voting equivocation. This method will …\nReset BEEFY consensus by setting a new BEEFY genesis at …\nDetails of current BEEFY authority set.\nConvert BEEFY AuthorityId to a form that would end up in …\nRetrieve arbitrary data that should be added to the mmr …\nConvert BEEFY secp256k1 public keys into Ethereum addresses\nAPI useful for BEEFY light clients.\nDetails of next BEEFY authority set.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA BEEFY consensus digest item with MMR root hash.\nThe type expected for the leaf extra data\nCurrent leaf version.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nBEEFY-MMR pallet.\nWeight functions needed for <code>pallet_beefy_mmr</code>.\nReturn the currently active BEEFY authority set proof.\nReturn the currently active BEEFY authority set proof.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the next/queued BEEFY authority set proof.\nReturn the next/queued BEEFY authority set proof.\nCompute and cache BEEFY authority sets based on updated …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nDetails of current BEEFY authority set.\nConvert BEEFY AuthorityId to a form that would end up in …\nRetrieve arbitrary data that should be added to the mmr …\nDetails of next BEEFY authority set.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe type expected for the leaf extra data\nCurrent leaf version.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nBEEFY-MMR pallet.\nThe bounty is active and waiting to be awarded.\nThe bounty is approved and waiting to become active at …\nThe bounty is approved with curator assigned.\nBounties that have been made.\nA bounty proposal.\nBounty indices that have been approved but not yet funded.\nA bounty is approved.\nA bounty is awarded to a beneficiary.\nA bounty proposal is funded and became active.\nA bounty is cancelled.\nA bounty is claimed by beneficiary.\nNumber of bounty proposals that have been made.\nThe amount held on deposit for placing a bounty proposal.\nThe delay period for which a bounty beneficiary need to …\nThe description of each bounty.\nA bounty expiry is extended.\nAn index of a bounty. Just a <code>u32</code>.\nNew bounty proposal.\nA bounty proposal was rejected; funds were slashed.\nThe status of a bounty proposal.\nThe time limit for a curator to act before a bounty …\nMinimum value for a bounty.\nContains a variant per dispatchable extrinsic that this …\nThe child bounty manager.\nThe child bounty manager.\nConfiguration trait of this pallet.\nA bounty curator is accepted.\nMaximum amount of funds that should be placed in a deposit …\nMinimum amount of funds that should be placed in a deposit …\nThe curator deposit is calculated as a percentage of the …\nA curator has been proposed. Waiting for acceptance from …\nA bounty curator is proposed.\nA bounty curator is unassigned.\nThe amount held on deposit per byte within the tip report …\nA bounty deposit has been poked.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe bounty is funded and waiting for curator assignment.\nThe bounty cannot be closed because it has active child …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nProposer’s balance is too low.\nInvalid bounty fee.\nNo proposal or bounty at that index.\nInvalid bounty value.\nMaximum acceptable reason length.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nUser is not the proposer of the bounty.\nHandler for the unbalanced decrease when slashing for a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe bounty is awarded and waiting to released after a …\nA bounty payout is pending. To cancel the bounty, you must …\nThe bounties cannot be claimed/closed because it’s still …\nThe bounty is proposed and waiting for approval.\nThe reason given is just too big.\nRequire bounty curator.\nThe overarching event type.\nToo many approvals are already queued.\nThe bounty status is unexpected.\nWeight functions needed for <code>pallet_bounties</code>.\nWeight information for extrinsics in this pallet.\nAccept the curator role for a bounty. A deposit will be …\nAccept the curator role for a bounty. A deposit will be …\nThe account ID of the treasury pot.\nApprove a bounty proposal. At a later time, the bounty …\nApprove a bounty proposal. At a later time, the bounty …\nApprove bountry and propose a curator simultaneously. This …\nApprove bountry and propose a curator simultaneously. This …\nAward bounty to a beneficiary account. The beneficiary …\nAward bounty to a beneficiary account. The beneficiary …\nThe account ID of a bounty account\nHook called when a parent bounty is removed.\nCalculate the deposit required for a curator.\nGet the active child bounties for a parent bounty.\nTake total curator fees of children-bounty curators.\nClaim the payout from an awarded bounty after payout delay.\nClaim the payout from an awarded bounty after payout delay.\nCancel a proposed or active bounty. All the funds will be …\nCancel a proposed or active bounty. All the funds will be …\nThe deposit of curator.\nEnsure the correctness of the state of this pallet.\nExtend the expiry time of an active bounty.\nExtend the expiry time of an active bounty.\nThe curator fee. Included in value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGetter for bounty status, to be used for child bounties.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>accept_curator</code>.\nCreate a call with the variant <code>approve_bounty</code>.\nCreate a call with the variant <code>approve_bounty_with_curator</code>.\nCreate a call with the variant <code>award_bounty</code>.\nCreate a call with the variant <code>claim_bounty</code>.\nCreate a call with the variant <code>close_bounty</code>.\nCreate a call with the variant <code>extend_bounty_expiry</code>.\nCreate a call with the variant <code>poke_deposit</code>.\nCreate a call with the variant <code>propose_bounty</code>.\nCreate a call with the variant <code>propose_curator</code>.\nCreate a call with the variant <code>unassign_curator</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPoke the deposit reserved for creating a bounty proposal.\nPoke the deposit reserved for creating a bounty proposal.\nPropose a new bounty.\nPropose a new bounty.\nPropose a curator to a funded bounty.\nPropose a curator to a funded bounty.\nThe account proposing it.\nGet the block number used in the treasury pallet.\nUnassign curator from a bounty.\nUnassign curator from a bounty.\nThe (total) amount that should be paid if the bounty is …\nAutogenerated weights for <code>pallet_bounties</code>\nThe beneficiary of the bounty.\nThe assigned curator of this bounty.\nThe curator of this bounty.\nThe curator of this bounty.\nThe assigned curator of this bounty.\nWhen the bounty can be claimed.\nAn update from the curator is due by this block, else they …\nVersion 4.\nMigrate the storage of the bounties pallet to a new …\nSome checks for after migration. This can be linked to …\nSome checks prior to migration. This can be linked to …\nBounties that have been made.\nBounty indices that have been approved but not yet funded.\nA bounty is approved.\nA bounty is awarded to a beneficiary.\nA bounty proposal is funded and became active.\nA bounty is cancelled.\nA bounty is claimed by beneficiary.\nNumber of bounty proposals that have been made.\nThe amount held on deposit for placing a bounty proposal.\nThe delay period for which a bounty beneficiary need to …\nThe description of each bounty.\nA bounty expiry is extended.\nNew bounty proposal.\nA bounty proposal was rejected; funds were slashed.\nThe time limit for a curator to act before a bounty …\nMinimum value for a bounty.\nContains a variant per dispatchable extrinsic that this …\nThe child bounty manager.\nConfiguration trait of this pallet.\nA bounty curator is accepted.\nMaximum amount of funds that should be placed in a deposit …\nMinimum amount of funds that should be placed in a deposit …\nThe curator deposit is calculated as a percentage of the …\nA bounty curator is proposed.\nA bounty curator is unassigned.\nThe amount held on deposit per byte within the tip report …\nA bounty deposit has been poked.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe bounty cannot be closed because it has active child …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nProposer’s balance is too low.\nInvalid bounty fee.\nNo proposal or bounty at that index.\nInvalid bounty value.\nMaximum acceptable reason length.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nUser is not the proposer of the bounty.\nHandler for the unbalanced decrease when slashing for a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nA bounty payout is pending. To cancel the bounty, you must …\nThe bounties cannot be claimed/closed because it’s still …\nThe reason given is just too big.\nRequire bounty curator.\nThe overarching event type.\nToo many approvals are already queued.\nThe bounty status is unexpected.\nWeight information for extrinsics in this pallet.\nAccept the curator role for a bounty. A deposit will be …\nApprove a bounty proposal. At a later time, the bounty …\nApprove bountry and propose a curator simultaneously. This …\nAward bounty to a beneficiary account. The beneficiary …\nClaim the payout from an awarded bounty after payout delay.\nCancel a proposed or active bounty. All the funds will be …\nExtend the expiry time of an active bounty.\nPoke the deposit reserved for creating a bounty proposal.\nPropose a new bounty.\nPropose a curator to a funded bounty.\nUnassign curator from a bounty.\nWeights for <code>pallet_bounties</code> using the Substrate node and …\nWeight functions needed for <code>pallet_bounties</code>.\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::BountyCount</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::BountyApprovals</code> (r:1 w:1) Proof: …\nStorage: <code>Bounties::Bounties</code> (r:1 w:1) Proof: …\nThe pallet has already been initialized.\nThe submitter wanted free execution, but the difference …\nHash of the best finalized header.\nError generated by the <code>OwnedBridgeModule</code> trait.\nBlock hash of the bridged chain.\nHasher of the bridged chain.\nBlock id of the bridged chain.\nBlock number of the bridged chain.\nBridged chain from the pallet configuration.\nThe chain we are bridging to here.\nHeader of the bridged chain.\nHeader data of the bridged chain that is stored at this …\nContains a variant per dispatchable extrinsic that this …\nTrait representing a call that is a sub type of this pallet…\nConfiguration trait of this pallet.\nThe current GRANDPA Authority set.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe distance between bridged chain headers, that may be …\nThe submitter wanted free execution, but we can’t fit …\nNumber of free header submissions that we may yet accept …\nCan be used to configure the genesis state of this pallet.\nBridge GRANDPA pallet as header chain.\nThe header (and its finality) submission overflows …\nMaximal number of finalized headers to keep in the storage.\nRelevant fields of imported headers.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe authority set from the underlying header chain is …\nThe <code>current_set_id</code> argument of the <code>submit_finality_proof_ex</code>…\nThe given justification is invalid for the given header.\nThe target that will be used when publishing logs related …\nMaximal number of “free” header transactions per block.\nAdapter for using <code>Config::HeadersToKeep</code> as <code>MaxValues</code> bound …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe pallet is not yet initialized.\nThe header being imported is older than the best finalized …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nThe overarching event type.\nA bounded GRANDPA Authority List and ID.\nHelper struct that provides methods for working with the …\nToo many authorities in the set.\nThe scheduled authority set change found in the header is …\nBest finalized chain header has been updated to the header …\nVerified <code>SubmitFinalityProofInfo&lt;N&gt;</code>.\nWeight functions needed for pallet_bridge_grandpa.\nWeights gathered through benchmarking.\nExtended weight info.\nList of GRANDPA authorities for the current round.\nBase call information.\nBenchmarks for the GRANDPA Pallet.\nReturns the hash of the best finalized header.\nCheck that the GRANDPA head provided by the …\nCheck that the: (1) GRANDPA head provided by the …\nValidate Grandpa headers in order to avoid “mining” …\nSet current authorities set and best finalized bridged …\nSet current authorities set and best finalized bridged …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns <code>true</code> if we may fit more free headers into the …\nA difference between bundled bridged header and best …\nOptional module initialization data.\nBootstrap the bridge pallet with an initial header and …\nBootstrap the bridge pallet with an initial header and …\n(Re)initialize bridge with given header for using it in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>force_set_pallet_state</code>.\nCreate a call with the variant <code>initialize</code>.\nCreate a call with the variant <code>set_operating_mode</code>.\nCreate a call with the variant <code>set_owner</code>.\nCreate a call with the variant <code>submit_finality_proof</code>.\nCreate a call with the variant <code>submit_finality_proof_ex</code>.\nHeader number.\nCalled when new free header is imported.\nOptional module owner account.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nMonotonic identifier of the current GRANDPA authority set.\nHalt or resume all pallet operations.\nHalt or resume all pallet operations.\nChange <code>PalletOwner</code>.\nChange <code>PalletOwner</code>.\nHeader state root.\nThis call is deprecated and will be removed around May …\nThis call is deprecated and will be removed around May …\nVerify a target header is finalized according to the given …\nVerify a target header is finalized according to the given …\nExtract finality proof info from a runtime call.\nExtra weight that is added to the <code>submit_finality_proof</code> …\nWeight of message delivery extrinsic.\nGet the GRANDPA justifications accepted in the current …\nTry to create a new bounded GRANDPA Authority Set from …\nReturns number of bytes that may be subtracted from the …\nCheck if the <code>SubmitFinalityProof</code> was successfully executed.\nModule, containing weights for this pallet. Autogenerated …\nWeight-related utilities.\nThe Grandpa info associated to the new best finalized …\nHash of the new best finalized header.\nNumber of the new best finalized header.\nThe pallet has already been initialized.\nThe submitter wanted free execution, but the difference …\nHash of the best finalized header.\nError generated by the <code>OwnedBridgeModule</code> trait.\nThe chain we are bridging to here.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe current GRANDPA Authority set.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe distance between bridged chain headers, that may be …\nThe submitter wanted free execution, but we can’t fit …\nNumber of free header submissions that we may yet accept …\nCan be used to configure the genesis state of this pallet.\nThe header (and its finality) submission overflows …\nMaximal number of finalized headers to keep in the storage.\nRelevant fields of imported headers.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe authority set from the underlying header chain is …\nThe <code>current_set_id</code> argument of the <code>submit_finality_proof_ex</code>…\nThe given justification is invalid for the given header.\nMaximal number of “free” header transactions per block.\nAdapter for using <code>Config::HeadersToKeep</code> as <code>MaxValues</code> bound …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe pallet is not yet initialized.\nThe header being imported is older than the best finalized …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nThe overarching event type.\nToo many authorities in the set.\nThe scheduled authority set change found in the header is …\nBest finalized chain header has been updated to the header …\nWeights gathered through benchmarking.\nSet current authorities set and best finalized bridged …\nOptional module initialization data.\nBootstrap the bridge pallet with an initial header and …\nCalled when new free header is imported.\nOptional module owner account.\nHalt or resume all pallet operations.\nChange <code>PalletOwner</code>.\nThis call is deprecated and will be removed around May …\nVerify a target header is finalized according to the given …\nThe Grandpa info associated to the new best finalized …\nHash of the new best finalized header.\nNumber of the new best finalized header.\nWeights for <code>pallet_bridge_grandpa</code> that are generated using …\nWeight functions needed for pallet_bridge_grandpa.\nStorage: <code>BridgeWestendGrandpa::CurrentAuthoritySet</code> (r:1 …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: BridgeUnknownGrandpa PalletOperatingMode (r:1 w:0)\nExtended weight info.\nExtra weight that is added to the <code>submit_finality_proof</code> …\nWeight of message delivery extrinsic.\nError generated by the <code>OwnedBridgeModule</code> trait.\nBridged chain type.\nShortcut to bridged chain type for Config.\nBridged chain headers provider.\nShortcut to bridged header chain type for Config.\nContains a variant per dispatchable extrinsic that this …\nHelper struct that provides methods for working with a …\nTrait representing a call that is a sub type of …\nInbound lane with given id is closed.\nOutbound lane with given id is closed.\nConfiguration trait of this pallet.\nHandler for relayer payments that happen during message …\nHandler for relayer payments that happen during message …\nSize of the message being delivered in benchmarks.\nNumber of extra bytes (excluding size of storage value …\nThe unrewarded relayers vec contains an empty entry. May …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nBridged chain is trying to confirm more messages than we …\nCan be used to configure the genesis state of this pallet.\nInbound messages lane.\nInbound lane already exists.\nInbound lane storage.\nMap of lane id =&gt; inbound lane data.\nPayload type of inbound messages. This payload is …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe cumulative dispatch weight, passed by relayer is not …\nInvalid messages delivery proof has been submitted.\nInvalid messages has been submitted.\nThe relayer has declared invalid unrewarded relayers state …\nThe target that will be used when publishing logs related …\nMessage dispatcher is inactive at given inbound lane. This …\nLane identifier type.\nLane identifier type.\nLane identifier type.\nShortcut to lane identifier type for Config.\nMessage lanes manager.\nError that is reported by the lanes manager.\nLanes manager errors.\nMessage has been accepted and is waiting to be delivered.\nMessage dispatch handler.\nMessage has been treated as invalid by the pallet logic.\nMessages in the inclusive range have been delivered to the …\nMessages have been received from the bridged chain.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe unrewarded relayers vec contains non-consecutive …\nPallet is not in Normal operating mode.\nDelivery confirmation callback.\nOutbound messages lane.\nOutbound lane already exists.\nOutbound lane storage.\nMap of lane id =&gt; outbound lane data.\nAll queued outbound messages.\nPayload type of outbound messages. This payload is …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nError confirming messages receival.\nResult of messages receival confirmation.\nId of relayer on source chain.\nThe overarching event type.\nRuntime inbound lane storage.\nRuntime outbound lane storage.\nStructure, containing a validated message payload and all …\nInbound lane data wrapper that implements <code>MaxEncodedLen</code>.\nOutbound message data wrapper that implements <code>MaxEncodedLen</code>…\nStored message payload type.\nThis chain type.\nShortcut to this chain type for Config.\nThe transaction brings too many messages.\nThe chain has more messages that need to be confirmed than …\nNo inbound lane with given id.\nNo outbound lane with given id.\nWeight functions needed for pallet_bridge_messages.\nBenchmarks results from runtime we’re plugged into.\nExtended weight info.\nDummy marker.\nGet existing inbound lane, checking that it is in usable …\nGet existing outbound lane, checking that it is in usable …\nGet existing inbound lane without any additional state …\nGet existing outbound lane without any additional state …\nMessages pallet benchmarking.\nCreate a new instance of <code>MessagesCallInfo</code> from a …\nCreate a new instance of <code>MessagesCallInfo</code> from a …\nEnsures that a <code>ReceiveMessagesProof</code> or a …\nConfirm messages delivery.\nCreate new inbound lane in <code>Opened</code> state.\nCreate new outbound lane in <code>Opened</code> state.\nGet lane data from the storage.\nGet lane data from the storage.\nGet this lane data.\nEnsure the correctness of the state of this pallet.\nEnsure the correctness of the state of outbound lanes.\nEnsure that we’re able to receive maximal confirmation …\nEnsure that we’re able to receive maximal (by-size and …\nEnsure that we are able to dispatch maximal size messages.\nEnsure that weights from <code>WeightInfoExt</code> implementation are …\nSize of proof that is already included in the single …\nReturns number of bytes that may be subtracted from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nLane id.\nLane id.\nReturn inbound lane data.\nPrepare data, related to given inbound message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn maximal number of unconfirmed messages in inbound …\nReturn maximal number of unrewarded relayer entries in …\nReturns dispatch weight of message of given size.\nHelpers for generating message storage proofs, that are …\nA module that is responsible for migration of storage.\nCreate new inbound lane backed by given storage.\nCreate new lanes manager.\nCreate new outbound lane backed by given storage.\nCreate a call with the variant …\nCreate a call with the variant <code>receive_messages_proof</code>.\nCreate a call with the variant <code>set_operating_mode</code>.\nCreate a call with the variant <code>set_owner</code>.\nOpened lanes.\nInitial pallet operating mode.\nReturn outbound lane data.\nGet stored data of the outbound message with given nonce.\nInitial pallet owner.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPurge lane data from the storage.\nPurge lane data from the storage.\nPurge lane state from the storage.\nPurge lane state from the storage.\nReturn nonces of all currently queued messages.\nReceive new message.\nReceive messages delivery proof from bridged chain.\nReceive messages delivery proof from bridged chain.\nCreate a new instance of <code>ReceiveMessagesDeliveryProofInfo</code> …\nReturns weight that needs to be accounted when receiving …\nReturns weight overhead of delivery confirmation …\nExtra weight that is added to the …\nReturns weight that needs to be accounted when receiving …\nWeight of confirmation delivery extrinsic.\nReceive messages proof from bridged chain.\nReceive messages proof from bridged chain.\nCreate a new instance of <code>ReceiveMessagesProofInfo</code> from a …\nReturns weight that needs to be accounted when message …\nExtra weight that is added to the <code>receive_messages_proof</code> …\nWeight of message delivery extrinsic.\nReceive state of the corresponding outbound lane.\nRemove outbound message from the storage.\nRemove message from the storage. Doesn’t perform any …\nSave outbound message in the storage.\nSend message over lane.\nUpdate lane data in the storage.\nUpdate lane data in the storage.\nHalt or resume all/some pallet operations.\nHalt or resume all/some pallet operations.\nChange <code>PalletOwner</code>.\nChange <code>PalletOwner</code>.\nSet lane state.\nSet lane state.\nGet lane state.\nGet lane state.\nReturns storage reference.\nReturns weight that needs to be accounted when storage …\nValidate messages in order to avoid “mining” messages …\nReturns true if:\nAutogenerated weights for pallet_bridge_messages\nLane, which has accepted the message.\nLane for which the delivery has been confirmed.\nDelivered messages.\nNonce of accepted message.\nTrait that must be implemented by runtime.\nBenchmark-specific message delivery proof parameters.\nBenchmark-specific message proof parameters.\nPallet we’re benchmarking here.\nLane id to use in benchmarks.\nReturn id of relayer account at the bridged chain.\nCreate given account and give it enough balance for test …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe proof needs to include this inbound lane data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if message has been successfully dispatched …\nReturns true if given relayer has been rewarded for some …\nIf <code>true</code>, the caller expects that the proof will contain …\nId of the lane.\nId of the lane.\nRange of messages to include in the proof.\nIf <code>Some</code>, the proof needs to include this outbound lane …\nPrepare messages delivery proof to receive by the module.\nPrepare messages proof to receive by the module.\nProof size requirements.\nProof size requirements.\nSimple and correct message data encode function.\nSimple and correct outbound lane data encode function.\nDummy message generation function.\nPrepare storage proof of given messages delivery.\nPrepare storage proof of given messages.\nThe in-code storage version.\nThis module contains data structures that are valid for …\nThis migration to <code>1</code> updates the metadata of <code>InboundLanes</code> …\n<code>UncheckedMigrationV0ToV1</code> wrapped in a <code>VersionedMigration</code>, …\nMigrates the pallet storage to v1.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nError generated by the <code>OwnedBridgeModule</code> trait.\nBridged chain type.\nShortcut to bridged chain type for Config.\nBridged chain headers provider.\nShortcut to bridged header chain type for Config.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nHandler for relayer payments that happen during message …\nHandler for relayer payments that happen during message …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nMap of lane id =&gt; inbound lane data.\nPayload type of inbound messages. This payload is …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe cumulative dispatch weight, passed by relayer is not …\nInvalid messages delivery proof has been submitted.\nInvalid messages has been submitted.\nThe relayer has declared invalid unrewarded relayers state …\nLane identifier type.\nShortcut to lane identifier type for Config.\nError that is reported by the lanes manager.\nMessage has been accepted and is waiting to be delivered.\nMessage dispatch handler.\nMessage has been treated as invalid by the pallet logic.\nMessages in the inclusive range have been delivered to the …\nMessages have been received from the bridged chain.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nPallet is not in Normal operating mode.\nDelivery confirmation callback.\nMap of lane id =&gt; outbound lane data.\nAll queued outbound messages.\nPayload type of outbound messages. This payload is …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nError confirming messages receival.\nThe overarching event type.\nThis chain type.\nShortcut to this chain type for Config.\nThe transaction brings too many messages.\nBenchmarks results from runtime we’re plugged into.\nDummy marker.\nOpened lanes.\nInitial pallet operating mode.\nInitial pallet owner.\nReceive messages delivery proof from bridged chain.\nReceive messages proof from bridged chain.\nHalt or resume all/some pallet operations.\nChange <code>PalletOwner</code>.\nLane, which has accepted the message.\nLane for which the delivery has been confirmed.\nDelivered messages.\nNonce of accepted message.\nWeights for <code>pallet_bridge_messages</code> that are generated …\nWeight functions needed for pallet_bridge_messages.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nStorage: BridgeRialtoMessages PalletOperatingMode (r:1 w:0)\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nStorage: BridgeUnknownMessages PalletOperatingMode (r:1 …\nConvenience trait for defining <code>BridgedChain</code> bounds.\nError generated by the <code>OwnedBridgeModule</code> trait.\nType of the bridged relay chain.\nInstance of bridges GRANDPA pallet (within this runtime) …\nContains a variant per dispatchable extrinsic that this …\nTrait representing a call that is a sub type of this pallet…\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nBridge GRANDPA pallet that is used to verify parachain …\nParachain heads storage proof is invalid.\nMaximal number of single parachain heads to keep in the …\nState roots of parachain heads which have been imported …\nThe caller has provided parachain head hash that is not …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe number of stored relay block is different from what …\nThe target that will be used when publishing logs related …\nMaximal size (in bytes) of the SCALE-encoded parachain …\nReturns maximal number of parachains, supported by the …\nReturns total number of all parachains hashes/heads, …\nThe caller has declared that he has provided given …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nRuntime hook for when a parachain head is updated.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nParachain head data builder.\nSingle parachain header chain adapter.\nParachains info.\nName of the original <code>paras</code> pallet in the …\nThe caller has provided parachain head that exceeds the …\nThe caller has provided obsolete parachain head, which is …\nThe overarching event type.\nStored parachain head data of given parachains pallet.\nHelper struct that provides methods for working with the …\nRelay chain block hash is unknown to us.\nThe caller has provided head of parachain that the pallet …\nParachain head has been updated.\nVerified <code>SubmitParachainHeadsInfo</code>.\nWeight functions needed for pallet_bridge_parachains.\nBenchmarks results from runtime we’re plugged into.\nExtended weight info.\nWeight info of the given parachains pallet.\nDummy marker.\nBase call information.\nParachains finality pallet benchmarking.\nGet best finalized head data of the given parachain.\nGet best finalized head hash of the given parachain.\nGet best finalized head id of the given parachain.\nGet stored parachain info.\nCheck if the para head provided by the <code>SubmitParachainHeads</code>…\nCheck that is called from signed extension and takes the …\nValidate parachain heads in order to avoid “mining” …\nStorage proof overhead, that is included in every storage …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nA difference between bundled bridged relay chain header …\n(Re)initialize pallet with given header for using it in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>set_operating_mode</code>.\nCreate a call with the variant <code>set_owner</code>.\nCreate a call with the variant <code>submit_parachain_heads</code>.\nCreate a call with the variant <code>submit_parachain_heads_ex</code>.\nCreate a new instance of <code>SubmitParachainHeadsInfo</code> from a …\nInitial pallet operating mode.\nInitial pallet owner.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nGet parachain head data with given hash.\nReturns weight of single parachain head pruning.\nReturns weight of single parachain head storage update.\nHalt or resume all pallet operations.\nHalt or resume all pallet operations.\nChange <code>PalletOwner</code>.\nChange <code>PalletOwner</code>.\nReturns weight that needs to be accounted when storage …\nSubmit proof of one or several parachain heads.\nSubmit proof of one or several parachain heads.\nSubmit proof of one or several parachain heads.\nSubmit proof of one or several parachain heads.\nCreate a new instance of <code>SubmitParachainHeadsInfo</code> from a …\nExtra weight that is added to the <code>submit_finality_proof</code> …\nWeight of the parachain heads delivery extrinsic.\nCheck if the <code>SubmitParachainHeads</code> was successfully …\nAutogenerated weights for pallet_bridge_parachains\nWeight-related utilities.\nActual parachain head hash.\nIdentifier of the parachain that is not tracked by the …\nIdentifier of the parachain with missing head.\nIdentifier of the parachain with incorrect head hast.\nIdentifier of the parachain with obsolete head.\nIdentifier of the parachain with rejected head.\nIdentifier of the parachain that has been updated.\nSpecified parachain head hash.\nObsolete parachain head hash.\nParachain head hash.\nParachain head hash.\nParachain head size.\nTrait that must be implemented by runtime to benchmark the …\nPallet we’re benchmarking here.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns vector of supported parachains.\nGenerate parachain heads proof and prepare environment for …\nConvenience trait for defining <code>BridgedChain</code> bounds.\nError generated by the <code>OwnedBridgeModule</code> trait.\nType of the bridged relay chain.\nInstance of bridges GRANDPA pallet (within this runtime) …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nBridge GRANDPA pallet that is used to verify parachain …\nParachain heads storage proof is invalid.\nMaximal number of single parachain heads to keep in the …\nState roots of parachain heads which have been imported …\nThe caller has provided parachain head hash that is not …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe number of stored relay block is different from what …\nMaximal size (in bytes) of the SCALE-encoded parachain …\nReturns maximal number of parachains, supported by the …\nReturns total number of all parachains hashes/heads, …\nThe caller has declared that he has provided given …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nRuntime hook for when a parachain head is updated.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nParachain head data builder.\nParachains info.\nName of the original <code>paras</code> pallet in the …\nThe caller has provided parachain head that exceeds the …\nThe caller has provided obsolete parachain head, which is …\nThe overarching event type.\nStored parachain head data of given parachains pallet.\nRelay chain block hash is unknown to us.\nThe caller has provided head of parachain that the pallet …\nParachain head has been updated.\nBenchmarks results from runtime we’re plugged into.\nWeight info of the given parachains pallet.\nDummy marker.\nInitial pallet operating mode.\nInitial pallet owner.\nHalt or resume all pallet operations.\nChange <code>PalletOwner</code>.\nSubmit proof of one or several parachain heads.\nSubmit proof of one or several parachain heads.\nActual parachain head hash.\nIdentifier of the parachain that is not tracked by the …\nIdentifier of the parachain with missing head.\nIdentifier of the parachain with incorrect head hast.\nIdentifier of the parachain with obsolete head.\nIdentifier of the parachain with rejected head.\nIdentifier of the parachain that has been updated.\nSpecified parachain head hash.\nObsolete parachain head hash.\nParachain head hash.\nParachain head hash.\nParachain head size.\nWeights for <code>pallet_bridge_parachains</code> that are generated …\nWeight functions needed for pallet_bridge_parachains.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: BridgeUnknownParachains PalletOperatingMode (r:1 …\nStorage: BridgeUnknownParachains PalletOperatingMode (r:1 …\nStorage: BridgeUnknownParachains PalletOperatingMode (r:1 …\nSize of the regular parachain head.\nNumber of extra bytes (excluding size of storage value …\nExtended weight info.\nStorage proof overhead, that is included in every storage …\nReturns weight of single parachain head pruning.\nReturns weight of single parachain head storage update.\nReturns weight that needs to be accounted when storage …\nExtra weight that is added to the <code>submit_finality_proof</code> …\nWeight of the parachain heads delivery extrinsic.\nType for representing balance of an account used for …\nShortcut to alternative beneficiary type for …\nContains a variant per dispatchable extrinsic that this …\nNew registration lease is less than the previous one.\nConfiguration trait of this pallet.\nAdapter that allows relayers pallet to be used as a …\nRelayer has been <code>deregistered</code>.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nReward payment procedure has failed.\nFailed to reserve enough funds on relayer account.\nFailed to <code>unreserve</code> enough funds on relayer account.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe relayer has tried to register for past block or …\nThe target that will be used when publishing logs related …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNo reward can be claimed by given relayer.\nCannot <code>deregister</code> if not registered.\nThe <code>Pallet</code> struct, the main type that implements traits …\nReward payment procedure that executes a <code>balances::transfer</code>…\nPay rewards scheme.\nRelayers that have reserved some of their balance to get …\nFailed to <code>deregister</code> relayer, because lease is still …\nRelayer registration has been added or updated.\nMap of the relayer =&gt; accumulated reward.\nReward discriminator type. The pallet can collect …\nType of relayer reward balance.\nA trait defining a reward ledger, which tracks rewards …\nReward has been paid to the relayer.\nRelayer reward has been registered and may be claimed …\nThe overarching event type.\nRelayer has been slashed and <code>deregistered</code>.\nStake and slash scheme.\n<code>StakeAndSlash</code> that works with <code>NamedReservableCurrency</code> and …\nWeight functions needed for pallet_bridge_relayers.\nPallet call weights.\nExtended weight info.\nBenchmarks for the relayers Pallet.\nClaim accumulated rewards.\nClaim accumulated rewards.\nClaim accumulated rewards and send them to the alternative …\nClaim accumulated rewards and send them to the alternative …\n<code>Deregister</code> relayer.\n<code>Deregister</code> relayer.\nSigned extension, built around <code>pallet-bridge-relayers</code>. It …\nReturns weight that we need to deduct from the message …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if given relayer registration is active at …\nA module that is responsible for migration of storage.\nCreate a call with the variant <code>claim_rewards</code>.\nCreate a call with the variant <code>claim_rewards_to</code>.\nCreate a call with the variant <code>deregister</code>.\nCreate a call with the variant <code>register</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturns weight, that needs to be added to the pre-dispatch …\nReturns weight, that needs to be added to the pre-dispatch …\nRegister relayer or update its registration.\nRegister relayer or update its registration.\nRegisters a reward for a given relayer.\nRelayers that have reserved some of their balance to get …\nMap of the relayer =&gt; accumulated reward.\nSlash and <code>deregister</code> relayer. This function slashes all …\nAutogenerated weights for pallet_bridge_relayers\nBeneficiary.\nRelayer registration.\nRegistration that was removed.\nRelayer account that can claim reward.\nRelayer account that has been rewarded.\nRelayer account that has been registered.\nRelayer account that has been <code>deregistered</code>.\nRelayer account that has been <code>deregistered</code>.\nReward amount.\nReward amount.\nRelayer can claim this kind of reward.\nRelayer has received reward of this kind.\nTrait that must be implemented by runtime.\nPallet we’re benchmarking here.\n<code>T::Reward</code> to use in benchmarks.\nGive enough balance to given account.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nPrepare environment for paying given reward for serving …\nA signed extension, built around <code>pallet-bridge-relayers</code>.\nWe’ll deal with different bridge items here - messages, …\nDo nothing with relayer account.\nData that is crafted in <code>validate</code>, passed to <code>prepare</code> and …\nThe actions on relayer account that need to be performed …\nReward the relayer.\nSlash the relayer.\nAdapter to be used in signed extension configuration, when …\nTransaction extension that refunds a relayer for …\nAdapter to be used in signed extension configuration, when …\nCompute priority boost for transaction that brings given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.")