searchState.loadedDescShard("yet_another_parachain_runtime", 12, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all of the storage items exist at the same time …\nWhether the phase is emergency or not.\n<code>true</code> if the structure is empty.\nWhether the phase is off or not.\nWhether the phase is signed or not.\nWhether the phase is unsigned or not.\nWhether the phase is unsigned and open or not.\nWhether the phase is unsigned and open or not, with …\nIterate through the set of signed submissions in order of …\nKill all snapshot related storage items at the same time.\nGet the length of submitted solutions.\nFind the maximum <code>len</code> that a solution can have in order to …\nMine a new npos solution, with all the relevant checks to …\nMine a new solution, cache it, and submit it back to the …\nMine a new solution as a call. Performs all checks.\nMine a new npos solution.\nSame as <code>Pallet::mine_solution</code>, but the input snapshot data …\nThe minimum score that each ‘untrusted’ solution must …\nCreate a call with the variant <code>governance_fallback</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_minimum_untrusted_score</code>.\nCreate a call with the variant <code>submit</code>.\nCreate a call with the variant <code>submit_unsigned</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRemove the signed submission with the highest score from …\nConvert a raw solution from …\nPut the signed submissions back into storage.\nCurrent best solution, signed or unsigned, queued to be …\nThe raw solution itself.\nThe raw solution itself.\nAttempt to restore a solution from cache. Otherwise, …\nInternal counter for the number of rounds.\nThe round at which this solution should be submitted.\nThe score of the solution.\nThe <em>claimed</em> score of the solution.\nThe score of the solution.\nSet all snapshot related storage items at the same time.\nSet a solution in the queue, to be handed out to the …\nSet a solution in the queue, to be handed out to the …\nSet a new value for <code>MinimumUntrustedScore</code>.\nSet a new value for <code>MinimumUntrustedScore</code>.\nThe signed phase implementation.\n<code>Self</code> accessor for <code>SignedSubmission&lt;T&gt;</code>.\nSnapshot data of the round.\nThe metadata of the <code>RoundSnapshot</code>\nthe solution itself.\nSomething that can compute the weight of a solution.\nThe weight of the given raw solution.\nSubmit a solution for the signed phase.\nSubmit a solution for the signed phase.\nSubmit a solution for the unsigned phase.\nSubmit a solution for the unsigned phase.\nThe final supports of the solution.\nThe final supports of the solution.\nAll of the targets.\nThe length of targets.\nGreedily reduce the size of the solution to fit into the …\nGreedily reduce the size of the solution to fit into the …\nThe unsigned phase, and its miner.\nDo the basics checks that MUST happen during the …\nAll of the voters.\nThe length of voters.\nAutogenerated weights for …\nWho submitted this solution.\nWho submitted this solution.\nGenerate a btree-map cache of the voters and their indices.\nCreate a function to get the stake of a voter.\nCreate a function that can map a target index (…\nCreate a function that returns the index of a target in …\nCreate a function that can map a voter index (…\nCreate a function that returns the index of a voter in the …\nCreate a function that returns the index of a voter in the …\nSame as <code>voter_index_fn</code>, but the returning index is …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe configuration of benchmarking.\nThe minimum amount of improvement to the solution score …\nSome bound not met\nContains a variant per dispatchable extrinsic that this …\nThe call is not allowed at this point.\nConfiguration trait of this pallet.\nCurrency type.\nCurrent phase.\nSomething that will provide the election data.\nDesired number of targets to elect for this round.\nThe maximum number of electing voters and electable …\nAn election failed.\nThe election has been finalized, with the given …\nError of the pallet that can be returned in response to …\nSomething that can predict the fee of a call. Used to …\nThe <code>Event</code> enum of this pallet\nConfiguration for the fallback.\nThe fallback failed\nOrigin that can control this pallet. Note that any action …\nConfiguration of the governance-only fallback.\n<code>Self::insert_submission</code> returned an invalid index.\nMaximum number of voters that can support a winner in an …\nMaximum number of winners that an election supports.\nConfigurations of the embedded miner.\nThe priority of the unsigned transaction submitted in the …\nThe minimum score that each ‘untrusted’ solution must …\nSnapshot metadata should exist but didn’t.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nOCW submitted solution for wrong round\nThe repeat threshold of the offchain worker.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere was a phase transition in a given round.\nSubmission was prepared for a different round.\nSubmission was too early.\nSubmission was too weak, score-wise.\nWrong number of winners presented.\nCurrent best solution, signed or unsigned, queued to be …\nHandler for the rewards.\nAn account has been rewarded for their signed submission …\nInternal counter for the number of rounds.\nThe origin failed to pay the deposit.\nSomething that calculates the signed deposit base based on …\nPer-byte deposit for a signed solution.\nPer-weight deposit for a signed solution.\nWitness data to dispatchable is invalid.\nThe maximum amount of unchecked solutions to refund the …\nMaximum number of signed submissions that can be queued.\nMaximum weight of a signed solution.\nDuration of the signed phase.\nThe queue was full, and the solution was not better than …\nBase reward for a signed solution\nA sorted, bounded vector of <code>(score, block_number, index)</code>, …\nThe next index to be assigned to an incoming signed …\nUnchecked, signed solutions.\nThe signed submission consumes too much weight\nHandler for the slashed deposits.\nAn account has been slashed for submitting an invalid …\nSnapshot data of the round.\nThe metadata of the <code>RoundSnapshot</code>\nA solution was stored with the given compute.\nOCW election solution miner algorithm implementation.\nSubmitted solution has too many winners\nDuration of the unsigned phase.\nThe weight of the pallet.\nTrigger the governance fallback.\nSet a solution in the queue, to be handed out to the …\nSet a new value for <code>MinimumUntrustedScore</code>.\nSubmit a solution for the signed phase.\nSubmit a solution for the unsigned phase.\nType that can be used to calculate the deposit base for …\nOutcome of <code>SignedSubmissions::insert</code>.\nThe submission was inserted successfully without ejecting …\nThe submission was inserted successfully. As the queue was …\nThe submission was not inserted because the queue was full …\nA raw, unchecked signed submission.\nMask type which pretends to be a set of …\nAlways sorted vector of a score, submitted at the given …\nThe deposit reserved for storing this solution.\nThe deposit reserved for storing this solution.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe raw solution itself.\nThe raw solution itself.\nWho submitted this solution.\nWho submitted this solution.\nThe account id type.\nThe relative distribution of a voter’s stake among the …\nFailed to store a solution.\nThe solution generated from the miner is not feasible.\nThe <code>IndexAssignment</code> type specialized for a particular …\nSomething went wrong fetching the lock.\nThe maximum number of backers per winner in the last …\nMaximum length of the solution that the miner is allowed …\nMaximum number of votes per voter in the snapshots.\nMaximum weight of the solution that the miner is allowed …\nThe maximum number of winners that can be elected in the …\nA base miner, suitable to be used for both signed and …\nConfigurations for a miner that comes with this pallet.\nError type for operations related to the OCW npos solution …\nSame as <code>VoterOf</code>, but parameterized by the <code>MinerConfig</code>.\nThere are no more voters to remove to trim the solution.\nCannot restore a solution that was not stored.\nAn internal error in the NPoS elections crate.\nSubmitting a transaction to the pool failed.\nThe pre-dispatch checks failed for the mined solution.\nSnapshot data was unavailable unexpectedly.\nThe solution that the miner is mining.\nCached solution is not a <code>submit_unsigned</code> call.\nAn error from the solver.\nError type of the pallet’s <code>crate::Config::Solver</code>.\nDesired targets are mire than the maximum allowed winners.\nReports the trimming result of a mined solution.\nA voter’s fundamental data: their ID, their stake, and …\nThe distribution of the voter’s stake.\nThe distribution of the voter’s stake among winning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSomething that can compute the weight of a solution.\nVoter’s identifier.\nIndex of the voter among the voters list.\nWeights for <code>pallet_election_provider_multi_phase</code> using the …\nWeight functions needed for …\nStorage: <code>ElectionProviderMultiPhase::SnapshotMetadata</code> (r:0 …\nStorage: …\nStorage: <code>ElectionProviderMultiPhase::DesiredTargets</code> (r:1 …\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>ElectionProviderMultiPhase::CurrentPhase</code> (r:1 w:0)\nStorage: <code>ElectionProviderMultiPhase::Round</code> (r:1 w:0) …\nStorage: <code>ElectionProviderMultiPhase::Round</code> (r:1 w:0) …\nStorage: <code>ElectionProviderMultiPhase::CurrentPhase</code> (r:1 w:0)\nStorage: <code>ElectionProviderMultiPhase::CurrentPhase</code> (r:1 w:0)\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nElection provider support pallet benchmarking. This is …\nCalls <code>U::from(self)</code>.\nContains a variant per dispatchable extrinsic that this …\nHow much should be locked up in order to submit one’s …\nA candidate is renouncing, while the given total number of …\nA candidate was slashed by amount due to failing to obtain …\nThe present candidate list. A current member or runner-up …\nWhat to do when the members change.\nConfiguration trait of this pallet.\nThe currency that people are electing with.\nConvert a balance into a number used for election …\nNumber of members to elect.\nNumber of runners_up to keep.\nDuplicated candidate submission.\nInternal error happened while trying to perform election.\nThe total number of vote rounds that have happened, …\nNo (or not enough) candidates existed for this round. This …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nWhat to do with genesis members\nCandidate does not have enough funds.\nThe renouncing origin presented a wrong <code>Renouncing</code> …\nPrediction regarding replacement after member removal is …\nThe provided count of number of votes is incorrect.\nThe provided count of number of candidates is incorrect.\nHandler for the unbalanced reduction when a member has …\nHandler for the unbalanced reduction when a candidate has …\nCannot vote with stake less than minimum balance.\nThe maximum number of candidates in a phragmen election.\nThe maximum number of voters to allow in a phragmen …\nMaximum numbers of votes per voter.\nCannot vote more than maximum allowed.\nA member is renouncing.\nA member has been removed. This should always be followed …\nMember cannot re-submit candidacy.\nThe current elected members.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nMust be a voter.\nA new term with new_members. This indicates that enough …\nMust vote for at least one candidate.\nNot a member.\nThe <code>Pallet</code> struct, the main type that implements traits …\nIdentifier for the elections-phragmen pallet’s lock\nSomeone has renounced their candidacy.\nAn indication that the renouncing account currently has …\nA runner-up is renouncing.\nRunner cannot re-submit candidacy.\nThe current reserved runners-up.\nA holder of a seat as either a member or a runner-up.\nA seat holder was slashed by amount by being forcefully …\nHow long each seat is kept. This defines the next block …\nToo many candidates have been created.\nCannot vote more than candidates.\nVoter can not pay voting bond.\nCannot vote when no candidates or members exist.\nAn active voter.\nVotes and locked stake of a particular voter.\nBase deposit associated with voting.\nThe amount of bond that need to be locked for each vote …\nWeight functions needed for <code>pallet_elections_phragmen</code>.\nWeight information for extrinsics in this pallet.\nClean all voters who are defunct (i.e. they do not serve …\nClean all voters who are defunct (i.e. they do not serve …\nThe amount of deposit reserved for this vote.\nThe amount of deposit held on-chain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementation uses a parameter type so calling is …\nAll migrations. All migrations of this pallet.\nCreate a call with the variant <code>clean_defunct_voters</code>.\nCreate a call with the variant <code>remove_member</code>.\nCreate a call with the variant <code>remove_voter</code>.\nCreate a call with the variant <code>renounce_candidacy</code>.\nCreate a call with the variant <code>submit_candidacy</code>.\nCreate a call with the variant <code>vote</code>.\nWhat to do at the end of each block.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRemove a particular member from the set. This is effective …\nRemove a particular member from the set. This is effective …\nRemove <code>origin</code> as a voter.\nRemove <code>origin</code> as a voter.\nRenounce one’s intention to be a candidate for the next …\nRenounce one’s intention to be a candidate for the next …\nThe amount of stake placed on this vote.\nThe total backing stake.\nSubmit oneself for candidacy. A fixed amount of deposit is …\nSubmit oneself for candidacy. A fixed amount of deposit is …\nVote for a set of candidates for the upcoming round of …\nVote for a set of candidates for the upcoming round of …\nThe members being backed.\nAutogenerated weights for <code>pallet_elections_phragmen</code>\nThe holder.\nMigration to unreserve all pallet funds. A migration that …\nVersion 3. Migrations to version [<code>3.0.0</code>], as denoted by …\nVersion 4. Migrations to version [<code>4.0.0</code>], as denoted by …\nVersion 5.\nThe account ID used in the runtime.\nThe currency type used in the runtime.\nThe DB weight as configured in the runtime to calculate …\nThe maximum number of votes per voter as configured …\nIdentifier for the elections-phragmen pallet’s lock, as …\nThe name of the pallet as previously configured in …\nA migration that unreserves all deposit and unlocks all …\nThe configuration for <code>UnlockAndUnreserveAllFunds</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nExecutes the migration.\nPerforms post-upgrade sanity checks:\nCollects pre-migration data useful for validating the …\nSystem config account id\nElections-phragmen currency balance.\nTrait to implement to give information about types used …\nApply all of the migrations from 2 to 3.\nMigrate all candidates to recorded deposit.\nMigrate all members to recorded deposit.\nMigrate all runners-up to recorded deposit.\nMigrate from the old legacy voting bond (fixed) to the new …\nThe old prefix.\nMigrate the entire storage of this pallet to a new prefix.\nSome checks for after migration. This can be linked to …\nSome checks prior to migration. This can be linked to …\nMigrate the locks and vote stake on accounts (as specified …\nSome checks for after migration. This can be linked to …\nGiven the list of voters to migrate return a function that …\nContains a variant per dispatchable extrinsic that this …\nHow much should be locked up in order to submit one’s …\nA candidate was slashed by amount due to failing to obtain …\nThe present candidate list. A current member or runner-up …\nWhat to do when the members change.\nConfiguration trait of this pallet.\nThe currency that people are electing with.\nConvert a balance into a number used for election …\nNumber of members to elect.\nNumber of runners_up to keep.\nDuplicated candidate submission.\nInternal error happened while trying to perform election.\nThe total number of vote rounds that have happened, …\nNo (or not enough) candidates existed for this round. This …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nWhat to do with genesis members\nCandidate does not have enough funds.\nThe renouncing origin presented a wrong <code>Renouncing</code> …\nPrediction regarding replacement after member removal is …\nThe provided count of number of votes is incorrect.\nThe provided count of number of candidates is incorrect.\nHandler for the unbalanced reduction when a member has …\nHandler for the unbalanced reduction when a candidate has …\nCannot vote with stake less than minimum balance.\nThe maximum number of candidates in a phragmen election.\nThe maximum number of voters to allow in a phragmen …\nMaximum numbers of votes per voter.\nCannot vote more than maximum allowed.\nA member has been removed. This should always be followed …\nMember cannot re-submit candidacy.\nThe current elected members.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nMust be a voter.\nA new term with new_members. This indicates that enough …\nMust vote for at least one candidate.\nNot a member.\nThe <code>Pallet</code> struct, the main type that implements traits …\nIdentifier for the elections-phragmen pallet’s lock\nSomeone has renounced their candidacy.\nRunner cannot re-submit candidacy.\nThe current reserved runners-up.\nA seat holder was slashed by amount by being forcefully …\nHow long each seat is kept. This defines the next block …\nToo many candidates have been created.\nCannot vote more than candidates.\nVoter can not pay voting bond.\nCannot vote when no candidates or members exist.\nVotes and locked stake of a particular voter.\nBase deposit associated with voting.\nThe amount of bond that need to be locked for each vote …\nWeight information for extrinsics in this pallet.\nClean all voters who are defunct (i.e. they do not serve …\nRemove a particular member from the set. This is effective …\nRemove <code>origin</code> as a voter.\nRenounce one’s intention to be a candidate for the next …\nSubmit oneself for candidacy. A fixed amount of deposit is …\nVote for a set of candidates for the upcoming round of …\nWeights for <code>pallet_elections_phragmen</code> using the Substrate …\nWeight functions needed for <code>pallet_elections_phragmen</code>.\nStorage: <code>Elections::Voting</code> (r:129 w:128) Proof: …\nStorage: <code>Elections::Candidates</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Elections::Members</code> (r:1 w:1) Proof: …\nStorage: <code>Benchmark::Override</code> (r:0 w:0) Proof: …\nStorage: <code>Elections::Voting</code> (r:1 w:1) Proof: …\nStorage: <code>Elections::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Elections::Members</code> (r:1 w:1) Proof: …\nStorage: <code>Elections::RunnersUp</code> (r:1 w:1) Proof: …\nStorage: <code>Elections::Candidates</code> (r:1 w:1) Proof: …\nStorage: <code>Elections::Candidates</code> (r:1 w:0) Proof: …\nStorage: <code>Elections::Candidates</code> (r:1 w:0) Proof: …\nStorage: <code>Elections::Candidates</code> (r:1 w:0) Proof: …\nThe provided un-staker is already in Head, and cannot …\nThe bonded account has already been queued.\nA batch was partially checked for the given eras, but the …\nA batch of a given size was terminated.\nBatch size.\nContains a variant per dispatchable extrinsic that this …\nThe call is not allowed at this point because the pallet …\nConfiguration trait of this pallet.\nThe origin that can control this pallet, in other words …\nThe currency used for deposits.\nDeposit to take for unstaking, to make sure we’re able …\nNumber of eras to check per block.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe current “head of the queue” being unstaked.\nAn internal error happened. Operations will be paused now.\nThe logging target of this pallet.\nMaximum value for <code>ErasToCheckPerBlock</code>, checked in …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe provided Controller account was not found.\nThe bonded account has active unlocking chunks.\nThe provided un-staker is not in the <code>Queue</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe map of all accounts wishing to be unstaked.\nThe overarching event type.\nA staker was slashed for requesting fast-unstake whilst …\nThe access to staking functionality.\nA staker was unstaked.\nWeight functions needed for <code>pallet_fast_unstake</code>.\nThe weight information of this pallet.\nControl the operation of this pallet.\nControl the operation of this pallet.\nDeregister oneself from the fast-unstake.\nDeregister oneself from the fast-unstake.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>control</code>.\nCreate a call with the variant <code>deregister</code>.\nCreate a call with the variant <code>register_fast_unstake</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRegister oneself for fast-unstake.\nRegister oneself for fast-unstake.\nTypes used in the Fast Unstake pallet.\nAutogenerated weights for <code>pallet_fast_unstake</code>\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe provided un-staker is already in Head, and cannot …\nThe bonded account has already been queued.\nA batch was partially checked for the given eras, but the …\nA batch of a given size was terminated.\nBatch size.\nContains a variant per dispatchable extrinsic that this …\nThe call is not allowed at this point because the pallet …\nConfiguration trait of this pallet.\nThe origin that can control this pallet, in other words …\nThe currency used for deposits.\nDeposit to take for unstaking, to make sure we’re able …\nNumber of eras to check per block.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe current “head of the queue” being unstaked.\nAn internal error happened. Operations will be paused now.\nMaximum value for <code>ErasToCheckPerBlock</code>, checked in …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe provided Controller account was not found.\nThe bonded account has active unlocking chunks.\nThe provided un-staker is not in the <code>Queue</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe map of all accounts wishing to be unstaked.\nThe overarching event type.\nA staker was slashed for requesting fast-unstake whilst …\nThe access to staking functionality.\nA staker was unstaked.\nWeight functions needed for <code>pallet_fast_unstake</code>.\nThe weight information of this pallet.\nControl the operation of this pallet.\nDeregister oneself from the fast-unstake.\nRegister oneself for fast-unstake.\nMaximum number of eras that we might check for a single …\nAn unstake request.\nThe list of eras for which they have been checked.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis list of stashes are being processed in this request, …\nWeights for <code>pallet_fast_unstake</code> using the Substrate node …\nWeight functions needed for <code>pallet_fast_unstake</code>.\nStorage: <code>FastUnstake::ErasToCheckPerBlock</code> (r:0 w:1) Proof: …\nStorage: <code>FastUnstake::ErasToCheckPerBlock</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>FastUnstake::ErasToCheckPerBlock</code> (r:1 w:0) Proof: …\nStorage: <code>FastUnstake::ErasToCheckPerBlock</code> (r:1 w:0) Proof: …\nStorage: <code>FastUnstake::ErasToCheckPerBlock</code> (r:1 w:0) Proof: …\nThe admin origin that can set computational limits and …\nThe pallet was already initialized.\nThe block length limit has been updated.\nContains a variant per dispatchable extrinsic that this …\nThe computation limit has been updated.\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe limit was over <code>crate::RESOURCE_HARD_LIMIT</code>.\nMax number of entries for the <code>TrashData</code> map.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet has been (re)initialized.\nHard limit for any other resource limit (in units).\nThe overarching event type.\nThe storage limit has been updated.\nThe size of each value in the <code>TrashData</code> storage in bytes.\nWeight functions needed for <code>pallet_glutton</code>.\nWeight information for this pallet.\nThe required configuration field.\nIncrease the block size by including the specified garbage …\nIncrease the block size by including the specified garbage …\nThe block length limit.\nThe compute limit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInitialize the pallet. Should be called once, if no …\nInitialize the pallet. Should be called once, if no …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>bloat</code>.\nCreate a call with the variant <code>initialize_pallet</code>.\nCreate a call with the variant <code>set_block_length</code>.\nCreate a call with the variant <code>set_compute</code>.\nCreate a call with the variant <code>set_storage</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSet how much of the block length should be filled with …\nSet how much of the block length should be filled with …\nSet how much of the remaining <code>ref_time</code> weight should be …\nSet how much of the remaining <code>ref_time</code> weight should be …\nSet how much of the remaining <code>proof_size</code> weight should be …\nSet how much of the remaining <code>proof_size</code> weight should be …\nThe storage limit.\nThe amount of trash data for wasting proof size.\nAutogenerated weights for <code>pallet_glutton</code>\nThe block length limit.\nThe computation limit.\nWhether the pallet has been re-initialized.\nThe storage limit.\nThe admin origin that can set computational limits and …\nThe pallet was already initialized.\nThe block length limit has been updated.\nContains a variant per dispatchable extrinsic that this …\nThe computation limit has been updated.\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe limit was over <code>crate::RESOURCE_HARD_LIMIT</code>.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet has been (re)initialized.\nThe overarching event type.\nThe storage limit has been updated.\nWeight information for this pallet.\nThe required configuration field.\nIncrease the block size by including the specified garbage …\nThe block length limit.\nThe compute limit.\nInitialize the pallet. Should be called once, if no …\nSet how much of the block length should be filled with …\nSet how much of the remaining <code>ref_time</code> weight should be …\nSet how much of the remaining <code>proof_size</code> weight should be …\nThe storage limit.\nThe amount of trash data for wasting proof size.\nThe block length limit.\nThe computation limit.\nWhether the pallet has been re-initialized.\nThe storage limit.\nWeights for <code>pallet_glutton</code> using the Substrate node and …\nWeight functions needed for <code>pallet_glutton</code>.\nStorage: <code>Glutton::Storage</code> (r:1 w:0) Proof: <code>Glutton::Storage</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>Glutton::TrashDataCount</code> (r:1 w:1) Proof: …\nStorage: <code>Glutton::TrashDataCount</code> (r:1 w:1) Proof: …\nCalls <code>U::from(self)</code>.\nStorage: <code>Glutton::Storage</code> (r:1 w:0) Proof: <code>Glutton::Storage</code>…\nStorage: <code>Glutton::Storage</code> (r:1 w:0) Proof: <code>Glutton::Storage</code>…\nStorage: <code>Glutton::Compute</code> (r:0 w:1) Proof: <code>Glutton::Compute</code>…\nStorage: <code>Glutton::Storage</code> (r:0 w:1) Proof: <code>Glutton::Storage</code>…\nStorage: <code>Glutton::TrashData</code> (r:5000 w:0) Proof: …\nThe range of component <code>i</code> is <code>[0, 100000]</code>.\nThe current list of authorities.\nIdentity of a Grandpa authority.\nA list of Grandpa authorities with associated weights.\nThe weight of an authority.\nBounded version of <code>AuthorityList</code>, <code>Limit</code> being the bound\nContains a variant per dispatchable extrinsic that this …\nAttempt to signal GRANDPA change with one already pending.\nConfiguration trait of this pallet.\nThe number of changes (both in terms of keys and …\nA given equivocation report is valid but already …\nGRANDPA equivocation offence report.\nGRANDPA equivocation offence report system.\nThe equivocation handling subsystem, defines methods to …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nAn equivocation proof provided as part of an equivocation …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nThe current authority set is live, and GRANDPA is enabled.\nMax Authorities in use\nThe maximum number of nominators for each validator.\nThe maximum number of entries to keep in the set id to …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNew authority set has been applied.\nnext block number where we can force a change.\nThe <code>Pallet</code> struct, the main type that implements traits …\nAttempt to signal GRANDPA pause when the authority set isn…\nCurrent authority set has been paused.\nThe current GRANDPA authority set is paused.\nPending change: (signaled at, scheduled change).\nThere is a pending pause event which will be enacted at …\nThere is a pending resume event which will be enacted at …\nAttempt to signal GRANDPA resume when the authority set isn…\nCurrent authority set has been resumed.\nThe event type of this module.\nA mapping from grandpa set ID to the index of the <em>most </em>…\n<code>true</code> if we are currently stalled.\nState of the current authority set.\nA stored pending change. <code>Limit</code> is the bound for …\nCurrent state of the GRANDPA authority set. State …\nA round number and set id which point on the time of an …\nCannot signal forced change so soon after last.\nWeights for this pallet.\nThe number of changes (both in terms of keys and …\nThe delay in blocks until it will be applied.\nIf defined it means the change was forced and the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the current set of authorities, along with their …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>note_stalled</code>.\nCreate a call with the variant <code>report_equivocation</code>.\nCreate a call with the variant <code>report_equivocation_unsigned</code>…\nThe next authority set, weakly bounded in size by <code>Limit</code>.\nnext block number where we can force a change.\nNote that the current authority set of the GRANDPA …\nNote that the current authority set of the GRANDPA …\nThe authority which produced this equivocation.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPending change: (signaled at, scheduled change).\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nRound number.\nSchedule a change in the authorities.\nSchedule GRANDPA to pause starting in the given number of …\nSchedule a resume of GRANDPA after pausing.\nThe block number this was scheduled at.\nA mapping from grandpa set ID to the index of the <em>most </em>…\nThe session index in which the incident happened.\nGrandpa Set ID.\n<code>true</code> if we are currently stalled.\nState of the current authority set.\nSubmits an extrinsic to report an equivocation. This …\nTime slot at which this incident happened.\nThe size of the validator set at the time of the offence.\nNumber of blocks after which the change will be enacted.\nNumber of blocks after which the change will be enacted.\nBlock at which the intention to pause was scheduled.\nBlock at which the intention to resume was scheduled.\nIdentity of a Grandpa authority.\nThe index of an authority.\nA list of Grandpa authorities with associated weights.\nThe grandpa crypto scheme defined via the keypair type.\nSignature for a Grandpa authority.\nThe weight of an authority.\nThe log target to be used by client code.\nA catch up message for this chain’s block type.\nA commit message for this chain’s block type.\nA compact commit message for this chain’s block type.\nAn consensus log item for GRANDPA.\nWrapper object for GRANDPA equivocation proofs, useful for …\nProof of voter misbehavior on a given set id. …\nForce an authority set change.\nThe <code>ConsensusEngineId</code> of GRANDPA.\nAPIs for integrating the GRANDPA finality gadget into …\nA GRANDPA justification for block finality, it includes a …\nInvalid signature.\nKey type for GRANDPA module.\nA GRANDPA message for a substrate chain.\nNote that the authority with given index is disabled until …\nAn opaque type used to represent the key ownership proof …\nValid signature, but the message was signed in the …\nA signal to pause the current authority set after the …\nA precommit message for this chain’s block type.\nA precommit message.\nProof of equivocation at precommit stage.\nA prevote message for this chain’s block type.\nA prevote message.\nProof of equivocation at prevote stage.\nA primary propose message for this chain’s block type.\nA primary proposal message.\nThe log target to be used by runtime code.\nA signal to resume the current authority set after the …\nThe round indicator.\nA scheduled change of authority set.\nSchedule an authority set change.\nThe monotonic identifier of a GRANDPA set of authorities.\nResult of checking a message signature.\nA signed message.\nValid signature.\nAuthentication data for the commit.\nThe base hash. See struct docs.\nThe base number. See struct docs.\nVerifies the equivocation proof by making sure that both …\nCheck a message signature by encoding the message as a …\nCheck a message signature by encoding the message as a …\nGet current GRANDPA authority set id.\nGet current GRANDPA authority set id.\nThe number of blocks to delay.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a proof of key ownership for the given authority …\nGenerates a proof of key ownership for the given authority …\nGet the current GRANDPA authorities and weights. This …\nGet the current GRANDPA authorities and weights. This …\nThe Id of the signer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the signature is valid.\nEncode round message localized to a given round and set id.\nEncode round message localized to a given round and set id …\nThe internal message which has been signed.\nCreate a new <code>EquivocationProof</code> for the given set id and …\nThe new authorities after the change, along with their …\nReturns the authority id of the equivocator.\nReturns the authority id of the equivocator.\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nPrevotes for target block or any block after it that …\nReturns the round number at which the equivocation …\nReturns the round number when the equivocation happened.\nRound number.\nReturns the set id at which the equivocation occurred.\nLocalizes the message to the given set and round and signs …\nThe signature on the message.\nSubmits an unsigned extrinsic to report an equivocation. …\nSubmits an unsigned extrinsic to report an equivocation. …\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s number\nThe target block’s number.\nThe target block’s number\nThe target block’s number.\nThe target block’s number.\nTry to cast the log entry as a contained signal.\nTry to cast the log entry as a contained forced signal.\nTry to cast the log entry as a contained pause signal.\nTry to cast the log entry as a contained resume signal.\nThis migration will clean up all stale set id -&gt; session …\nMigrate the storage from V4 to V5.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nVersion 4.\nThe old prefix.\nMigrate the entire storage of this pallet to a new prefix.\nSome checks for after migration. This can be linked to …\nSome checks prior to migration. This can be linked to …\nThe current list of authorities.\nContains a variant per dispatchable extrinsic that this …\nAttempt to signal GRANDPA change with one already pending.\nConfiguration trait of this pallet.\nThe number of changes (both in terms of keys and …\nA given equivocation report is valid but already …\nThe equivocation handling subsystem, defines methods to …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nAn equivocation proof provided as part of an equivocation …\nA key ownership proof provided as part of an equivocation …\nThe proof of key ownership, used for validating …\nMax Authorities in use\nThe maximum number of nominators for each validator.\nThe maximum number of entries to keep in the set id to …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNew authority set has been applied.\nnext block number where we can force a change.\nThe <code>Pallet</code> struct, the main type that implements traits …\nAttempt to signal GRANDPA pause when the authority set isn…\nCurrent authority set has been paused.\nPending change: (signaled at, scheduled change).\nAttempt to signal GRANDPA resume when the authority set isn…\nCurrent authority set has been resumed.\nThe event type of this module.\nA mapping from grandpa set ID to the index of the <em>most </em>…\n<code>true</code> if we are currently stalled.\nState of the current authority set.\nCannot signal forced change so soon after last.\nWeights for this pallet.\nNote that the current authority set of the GRANDPA …\nReport voter equivocation/misbehavior. This method will …\nReport voter equivocation/misbehavior. This method will …\nAccount ID is already named.\nThe username cannot be unbound because it is already …\nA username authority was added.\nA map of the accounts who are authorized to grant …\nA username authority was removed.\nThe amount held on deposit for a registered identity.\nA set of helper functions for benchmarking. The default …\nOnly the Blake2 hash of the data is stored. The preimage …\nThe amount held on deposit per encoded byte for a …\nIdentity pallet declaration.\nConfiguration trait of this pallet.\nThe currency trait.\nA dangling username (as in, a username corresponding to an …\nEither underlying data blob if it is at most 32 bytes, or …\nEmpty index.\nThe data is erroneous. This may be indicative of malicious …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nFee is changed.\nNo judgement is yet in place, but a deposit is reserved as …\nType capable of holding information on which identity …\nThe origin which may forcibly set or remove a name. Root …\nA name was cleared, and the given balance returned.\nStructure holding information about an identity.\nInformation concerning the identity of the controller of …\nA name was removed and the given balance slashed.\nInformation that is pertinent to identify the entity …\nA name was set or reset (which will remove all judgements).\nThe action cannot be performed because of insufficient …\nThe index is invalid.\nInvalid judgement.\nThe signature on a username was not valid.\nThe provided suffix is too long.\nThe target is invalid.\nThe username does not meet the requirements.\nAn attestation of a registrar over how accurate some …\nThe provided judgement was for a different identity.\nJudgement given.\nA judgement was given by a registrar.\nError that occurs when there is an issue paying for …\nA judgement was asked from a registrar.\nA judgement request was retracted.\nOnly the Keccak-256 hash of the data is stored. The …\nThe target is known directly by the registrar and the …\nThe data is imprecise or of sufficiently low-quality to be …\nMaximum number of registrars allowed in the system. Needed …\nThe maximum number of sub-accounts allowed per identified …\nThe maximum length of a suffix.\nThe maximum length of a username, including its suffix and …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe authority cannot allocate any more usernames.\nNo identity found.\nThe requested username does not exist.\nNo data here.\nThe username cannot be forcefully removed because it can …\nAccount isn’t found.\nAccount isn’t named.\nSub-account isn’t owned by sender.\nSender is not a sub-account.\nThe username cannot be removed because it is not unbinding.\nThe sender does not have permission to issue a username.\nSignature type for pre-authorizing usernames off-chain.\nThe data was once good but is currently out of date. There …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe number of blocks within which a username grant must be …\nUsernames that an authority has granted, but that the …\nA queued username passed its expiration without being …\nA username was set as a primary and can be looked up from …\nThe data is stored directly.\nThe data appears to be reasonably acceptable in terms of …\nA registrar was added.\nAn identifier for a single name registrar/identity …\nInformation concerning a registrar.\nThe origin which may add or remove registrars. Root can …\nThe set of registrars. Not expected to get very big as can …\nInformation on an identity along with judgements from …\nSetting this username requires a signature, but none was …\nThe overarching event type.\nOnly the SHA2-256 hash of the data is stored. The preimage …\nOnly the SHA3-256 hash of the data is stored. The preimage …\nPublic key that corresponds to an on-chain <code>Self::AccountId</code>.\nWhat to do with slashed funds.\nSticky judgement.\nThe amount held on deposit for a registered subaccount. …\nAn account’s sub-identities were set (in bulk).\nA sub-identity was added to an identity and the deposit …\nA sub-identity was removed from an identity and the …\nA given sub-account’s associated name was changed by its …\nA sub-identity was cleared, and the given deposit …\nAlternative “sub” identities of this account.\nThe super-identity of an alternative “sub” identity …\nThe username cannot be removed because it’s still in the …\nMaximum amount of registrars reached. Cannot add any more.\nToo many subs-accounts.\nUsernames for which the authority that granted them has …\nThe default value; no opinion is held.\nThe origin which may add or remove username authorities. …\nThe amount held on deposit per registered username. This …\nThe number of blocks that must pass to enable the …\nReverse lookup from <code>username</code> to the <code>AccountId</code> that has …\nA username has been killed.\nIdentifies the primary username of an account.\nA username was queued, but <code>who</code> must accept it prior to …\nA username has been removed.\nA username was set for <code>who</code>.\nThe username is already taken.\nA username has been unbound.\nWeight functions needed for <code>pallet_identity</code>.\nWeight information for extrinsics in this pallet.\nAccept a given username that an <code>authority</code> granted. The …\nAccept a given username that an <code>authority</code> granted. The …\nThe account of the registrar.\nAdd a registrar to the system.\nAdd a registrar to the system.\nAdd the given account to the sender’s subs.\nAdd the given account to the sender’s subs.\nAdd an <code>AccountId</code> with permission to grant usernames with a …\nAdd an <code>AccountId</code> with permission to grant usernames with a …\nThe identity information representation for all identity …\nCancel a previous request.\nCancel a previous request.\nClear an account’s identity info and all sub-accounts …\nClear an account’s identity info and all sub-accounts …\nCreate a basic instance of the identity information.\nAmount held on deposit for this information.\nAmount required to be given to the registrar for them to …\nRelevant fields for this registrar. Registrar judgements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if an identity registered information for some given …\nCheck if the account has corresponding identity …\nInformation on the identity.\nA username has met all conditions. Insert the relevant …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJudgements from the registrars on this identity. Stored …\nRemove an account’s identity and sub-account information …\nRemove an account’s identity and sub-account information …\nCall with ForceOrigin privileges which deletes a username …\nCall with ForceOrigin privileges which deletes a username …\nStorage migrations for the Identity pallet.\nCreate a call with the variant <code>accept_username</code>.\nCreate a call with the variant <code>add_registrar</code>.\nCreate a call with the variant <code>add_sub</code>.\nCreate a call with the variant <code>add_username_authority</code>.\nCreate a call with the variant <code>cancel_request</code>.\nCreate a call with the variant <code>clear_identity</code>.\nCreate a call with the variant <code>kill_identity</code>.\nCreate a call with the variant <code>kill_username</code>.\nCreate a call with the variant <code>provide_judgement</code>.\nCreate a call with the variant <code>quit_sub</code>.\nCreate a call with the variant <code>remove_expired_approval</code>.\nCreate a call with the variant <code>remove_sub</code>.\nCreate a call with the variant <code>remove_username</code>.\nCreate a call with the variant <code>remove_username_authority</code>.\nCreate a call with the variant <code>rename_sub</code>.\nCreate a call with the variant <code>request_judgement</code>.\nCreate a call with the variant <code>set_account_id</code>.\nCreate a call with the variant <code>set_fee</code>.\nCreate a call with the variant <code>set_fields</code>.\nCreate a call with the variant <code>set_identity</code>.\nCreate a call with the variant <code>set_primary_username</code>.\nCreate a call with the variant <code>set_subs</code>.\nCreate a call with the variant <code>set_username_for</code>.\nCreate a call with the variant <code>unbind_username</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nUpdate the deposits held by <code>target</code> for its identity info.\nProvide a judgement for an account’s identity.\nProvide a judgement for an account’s identity.\nA username was granted by an authority, but must be …\nRemove the sender as a sub-account.\nRemove the sender as a sub-account.\nReap an identity, clearing associated storage items and …\nRemove an expired username approval. The username was …\nRemove an expired username approval. The username was …\nRemove the given account from the sender’s subs.\nRemove the given account from the sender’s subs.\nPermanently delete a username which has been unbinding for …\nPermanently delete a username which has been unbinding for …\nRemove <code>authority</code> from the username authorities.\nRemove <code>authority</code> from the username authorities.\nAlter the associated name of the given sub-account.\nAlter the associated name of the given sub-account.\nRequest a judgement from a registrar.\nRequest a judgement from a registrar.\nChange the account associated with a registrar.\nChange the account associated with a registrar.\nSet the fee required for a judgement to be requested from …\nSet the fee required for a judgement to be requested from …\nSet the field information for a registrar.\nSet the field information for a registrar.\nSet an account’s identity information and reserve the …\nSet an account’s identity information and reserve the …\nSet an identity with zero deposit. Used for benchmarking …\nSet a given username as the primary. The username should …\nSet a given username as the primary. The username should …\nSet the sub-accounts of the sender.\nSet the sub-accounts of the sender.\nSet subs with zero deposit and default name. Only used for …\nSet the username for <code>who</code>. Must be called by a username …\nSet the username for <code>who</code>. Must be called by a username …\nGet the subs of an account.\nStart the process of removing a username by placing it in …\nStart the process of removing a username by placing it in …\nValidate a signature. Supports signatures on raw <code>data</code> or …\nAutogenerated weights for <code>pallet_identity</code>\nThe fields that we use to identify the owner of an account …\nInformation concerning the identity of the controller of …\nAdditional fields of the identity that are not catered for …\nA reasonable display name for the controller of the …\nThe email address of the controller of the account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nA graphic image representing the controller of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe full legal name in the local jurisdiction of the …\nThe PGP/GPG public key of the controller of the account.\nThe Riot/Matrix handle held by the controller of the …\nThe Twitter identity. The leading <code>@</code> character may be …\nA representative website held by the controller of the …\nMigration to add usernames to Identity info.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nProgressive states of a migration. The migration starts …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccount ID is already named.\nThe username cannot be unbound because it is already …\nA username authority was added.\nA map of the accounts who are authorized to grant …\nA username authority was removed.\nThe amount held on deposit for a registered identity.\nA set of helper functions for benchmarking. The default …\nThe amount held on deposit per encoded byte for a …\nIdentity pallet declaration.\nConfiguration trait of this pallet.\nThe currency trait.\nA dangling username (as in, a username corresponding to an …\nEmpty index.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nFee is changed.\nThe origin which may forcibly set or remove a name. Root …\nA name was cleared, and the given balance returned.\nStructure holding information about an identity.\nA name was removed and the given balance slashed.\nInformation that is pertinent to identify the entity …\nA name was set or reset (which will remove all judgements).\nThe action cannot be performed because of insufficient …\nThe index is invalid.\nInvalid judgement.\nThe signature on a username was not valid.\nThe provided suffix is too long.\nThe target is invalid.\nThe username does not meet the requirements.\nThe provided judgement was for a different identity.\nJudgement given.\nA judgement was given by a registrar.\nError that occurs when there is an issue paying for …\nA judgement was asked from a registrar.\nA judgement request was retracted.\nMaximum number of registrars allowed in the system. Needed …\nThe maximum number of sub-accounts allowed per identified …\nThe maximum length of a suffix.\nThe maximum length of a username, including its suffix and …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe authority cannot allocate any more usernames.\nNo identity found.\nThe requested username does not exist.\nThe username cannot be forcefully removed because it can …\nAccount isn’t found.\nAccount isn’t named.\nSub-account isn’t owned by sender.\nSender is not a sub-account.\nThe username cannot be removed because it is not unbinding.\nThe sender does not have permission to issue a username.\nSignature type for pre-authorizing usernames off-chain.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe number of blocks within which a username grant must be …\nUsernames that an authority has granted, but that the …\nA queued username passed its expiration without being …\nA username was set as a primary and can be looked up from …\nA registrar was added.\nThe origin which may add or remove registrars. Root can …\nThe set of registrars. Not expected to get very big as can …\nSetting this username requires a signature, but none was …\nThe overarching event type.\nPublic key that corresponds to an on-chain <code>Self::AccountId</code>.\nWhat to do with slashed funds.\nSticky judgement.\nThe amount held on deposit for a registered subaccount. …\nAn account’s sub-identities were set (in bulk).\nA sub-identity was added to an identity and the deposit …\nA sub-identity was removed from an identity and the …\nA given sub-account’s associated name was changed by its …\nA sub-identity was cleared, and the given deposit …\nAlternative “sub” identities of this account.\nThe super-identity of an alternative “sub” identity …\nThe username cannot be removed because it’s still in the …\nMaximum amount of registrars reached. Cannot add any more.\nToo many subs-accounts.\nUsernames for which the authority that granted them has …\nThe origin which may add or remove username authorities. …\nThe amount held on deposit per registered username. This …\nThe number of blocks that must pass to enable the …\nReverse lookup from <code>username</code> to the <code>AccountId</code> that has …\nA username has been killed.\nIdentifies the primary username of an account.\nA username was queued, but <code>who</code> must accept it prior to …\nA username has been removed.\nA username was set for <code>who</code>.\nThe username is already taken.\nA username has been unbound.\nWeight information for extrinsics in this pallet.\nAccept a given username that an <code>authority</code> granted. The …\nAdd a registrar to the system.\nAdd the given account to the sender’s subs.\nAdd an <code>AccountId</code> with permission to grant usernames with a …\nCancel a previous request.\nClear an account’s identity info and all sub-accounts …\nRemove an account’s identity and sub-account information …\nCall with ForceOrigin privileges which deletes a username …\nProvide a judgement for an account’s identity.\nRemove the sender as a sub-account.\nRemove an expired username approval. The username was …\nRemove the given account from the sender’s subs.\nPermanently delete a username which has been unbinding for …\nRemove <code>authority</code> from the username authorities.\nAlter the associated name of the given sub-account.\nRequest a judgement from a registrar.\nChange the account associated with a registrar.\nSet the fee required for a judgement to be requested from …\nSet the field information for a registrar.\nSet an account’s identity information and reserve the …\nSet a given username as the primary. The username should …\nSet the sub-accounts of the sender.\nSet the username for <code>who</code>. Must be called by a username …\nStart the process of removing a username by placing it in …\nWeights for <code>pallet_identity</code> using the Substrate node and …\nWeight functions needed for <code>pallet_identity</code>.\nStorage: <code>Identity::PendingUsernames</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::Registrars</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::AuthorityOf</code> (r:0 w:1) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::SubsOf</code> (r:1 w:1) Proof: <code>Identity::SubsOf</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Identity::SubsOf</code> (r:1 w:1) Proof: <code>Identity::SubsOf</code>…\nStorage: <code>Identity::UsernameInfoOf</code> (r:1 w:1) Proof: …\nStorage: UNKNOWN KEY …\nStorage: <code>Identity::AuthorityOf</code> (r:2 w:0) Proof: …\nStorage: <code>Identity::UsernameInfoOf</code> (r:2 w:0) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:2 w:1) Proof: …\nStorage: <code>Identity::PendingUsernames</code> (r:2 w:1) Proof: …\nStorage: UNKNOWN KEY …\nStorage: <code>Identity::Registrars</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::SuperOf</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::PendingUsernames</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::UnbindingUsernames</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::AuthorityOf</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::Registrars</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::Registrars</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::Registrars</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::Registrars</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::UsernameInfoOf</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::IdentityOf</code> (r:1 w:0) Proof: …\nStorage: <code>Identity::AuthorityOf</code> (r:1 w:1) Proof: …\nStorage: <code>Identity::UsernameInfoOf</code> (r:1 w:0) Proof: …\nAt the end of the session, no offence was committed.\nFor each session index, we keep a mapping of <code>ValidatorId&lt;T&gt;</code>…\nThe identifier type for an authority.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nDuplicated heartbeat.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nHeartbeat which is sent/received.\nThe block number after which it’s ok to send heartbeats …\nA new heartbeat was received from <code>AuthorityId</code>.\nA tuple of (ValidatorId, Identification) where …\nNon existent public key.\nThe current set of keys that may issue a heartbeat.\nThe maximum number of keys that can be added.\nThe maximum number of peers to be stored in …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA trait that allows us to estimate the current session …\nThe <code>Pallet</code> struct, the main type that implements traits …\nFor each session index, we keep a mapping of <code>SessionIndex</code> …\nA type that gives us the ability to submit …\nThe overarching event type.\nAt the end of the session, at least one validator was …\nAn offence that is filed if a validator didn’t send a …\nA configuration for base priority of unsigned transactions.\nA type for representing the validator id in a session.\nA type for retrieving the validators supposed to be online …\nWeight functions needed for <code>pallet_im_online</code>.\nWeight information for extrinsics in this pallet.\nAn index of the authority on the list of validators.\nBlock number at the time heartbeat is created..\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nComplexity:\nComplexity:\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if a heartbeat has been received for the …\nStorage migrations for the im-online pallet.\nCreate a call with the variant <code>heartbeat</code>.\nAuthorities that were unresponsive during the current era.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturns <code>true</code> if a heartbeat has been received for the …\nIndex of the current session.\nThe current session index in which we report the …\nThe size of the validator set in current session/era.\nThe length of session validator set\nAutogenerated weights for <code>pallet_im_online</code>\nAn i’m online identifier using ed25519 as its crypto.\nAn i’m online keypair using ed25519 as its crypto.\nAn i’m online signature using ed25519 as its crypto.\nClears the pallet’s offchain storage.\nSimple migration that replaces <code>ReceivedHeartbeats</code> values …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nAt the end of the session, no offence was committed.\nFor each session index, we keep a mapping of <code>ValidatorId&lt;T&gt;</code>…\nThe identifier type for an authority.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nDuplicated heartbeat.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe block number after which it’s ok to send heartbeats …\nA new heartbeat was received from <code>AuthorityId</code>.\nNon existent public key.\nThe current set of keys that may issue a heartbeat.\nThe maximum number of keys that can be added.\nThe maximum number of peers to be stored in …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA trait that allows us to estimate the current session …\nThe <code>Pallet</code> struct, the main type that implements traits …\nFor each session index, we keep a mapping of <code>SessionIndex</code> …\nA type that gives us the ability to submit …\nThe overarching event type.\nAt the end of the session, at least one validator was …\nA configuration for base priority of unsigned transactions.\nA type for retrieving the validators supposed to be online …\nWeight information for extrinsics in this pallet.\nComplexity:\nAn i’m online identifier using sr25519 as its crypto.\nAn i’m online keypair using sr25519 as its crypto.\nAn i’m online signature using sr25519 as its crypto.\nWeights for <code>pallet_im_online</code> using the Substrate node and …\nWeight functions needed for <code>pallet_im_online</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Session::Validators</code> (r:1 w:0) Proof: …\nType used for storing an account’s index; implies the …\nThe lookup from index to account.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency trait.\nThe deposit needed for reserving an index.\nA deposit to reserve an index has been poked/reconsidered.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe index was not available.\nA account index was assigned.\nA account index has been freed up (unassigned).\nA account index has been frozen to its current account ID.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe index was not already assigned.\nThe index is assigned to another account.\nThe source and destination accounts are identical.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe index is permanent and may not be freed/changed.\nThe overarching event type.\nWeight functions needed for <code>pallet_indices</code>.\nWeight information for extrinsics in this pallet.\nAssign an previously unassigned index.\nAssign an previously unassigned index.\nForce an index to an account. This doesn’t require a …\nForce an index to an account. This doesn’t require a …\nFree up an index owned by the sender.\nFree up an index owned by the sender.\nFreeze an index so it will always point to the sender …\nFreeze an index so it will always point to the sender …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLookup an address to get an Id, if there’s one there.\nLookup an T::AccountIndex to get an Id, if there’s one …\nCreate a call with the variant <code>claim</code>.\nCreate a call with the variant <code>force_transfer</code>.\nCreate a call with the variant <code>free</code>.\nCreate a call with the variant <code>freeze</code>.\nCreate a call with the variant <code>poke_deposit</code>.\nCreate a call with the variant <code>transfer</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPoke the deposit reserved for an index.\nPoke the deposit reserved for an index.\nAssign an index already owned by the sender to another …\nAssign an index already owned by the sender to another …\nAutogenerated weights for <code>pallet_indices</code>\nType used for storing an account’s index; implies the …\nThe lookup from index to account.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency trait.\nThe deposit needed for reserving an index.\nA deposit to reserve an index has been poked/reconsidered.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe index was not available.\nA account index was assigned.\nA account index has been freed up (unassigned).\nA account index has been frozen to its current account ID.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe index was not already assigned.\nThe index is assigned to another account.\nThe source and destination accounts are identical.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe index is permanent and may not be freed/changed.\nThe overarching event type.\nWeight information for extrinsics in this pallet.\nAssign an previously unassigned index.\nForce an index to an account. This doesn’t require a …\nFree up an index owned by the sender.\nFreeze an index so it will always point to the sender …\nPoke the deposit reserved for an index.\nAssign an index already owned by the sender to another …\nWeights for <code>pallet_indices</code> using the Substrate node and …\nWeight functions needed for <code>pallet_indices</code>.\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>Indices::Accounts</code> (r:1 w:1) Proof: …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nSeries of block headers from the last 81 blocks that acts …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThis randomness uses a low-influence function, drawing …\nGets the random material storage value\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nSeries of block headers from the last 81 blocks that acts …\nA lottery has already ended.\nYou are already participating in the lottery with this …\nContains a variant per dispatchable extrinsic that this …\nA new set of calls have been set!\nConfiguration trait of this pallet.\nThe currency trait.\nFailed to encode calls\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA lottery is already in progress.\nThe call is not valid for an open lottery.\nA lottery has been started!\nThe manager origin.\nThe max number of calls available in a single lottery.\nNumber of time we should try to generate a random number …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA lottery has not been configured.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe Lottery’s pallet id\nSomething that provides randomness in the runtime.\nA dispatchable call.\nThe overarching event type.\nA ticket has been bought!\nToo many calls for a single lottery.\nUsed to determine if a call would be valid for purchasing …\nWeight functions needed for <code>pallet_lottery</code>.\nWeight information for extrinsics in this pallet.\nA winner has been chosen!\nThe account ID of the lottery pot.\nBuy a ticket to enter the lottery.\nBuy a ticket to enter the lottery.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>buy_ticket</code>.\nCreate a call with the variant <code>set_calls</code>.\nCreate a call with the variant <code>start_lottery</code>.\nCreate a call with the variant <code>stop_repeat</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nSet calls in storage which can be used to purchase a …\nSet calls in storage which can be used to purchase a …\nStart a lottery using the provided configuration.\nStart a lottery using the provided configuration.\nIf a lottery is repeating, you can use this to stop the …\nIf a lottery is repeating, you can use this to stop the …\nAutogenerated weights for <code>pallet_lottery</code>\nA lottery has already ended.\nYou are already participating in the lottery with this …\nContains a variant per dispatchable extrinsic that this …\nA new set of calls have been set!\nConfiguration trait of this pallet.\nThe currency trait.\nFailed to encode calls\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA lottery is already in progress.\nThe call is not valid for an open lottery.\nA lottery has been started!\nThe manager origin.\nThe max number of calls available in a single lottery.\nNumber of time we should try to generate a random number …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA lottery has not been configured.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe Lottery’s pallet id\nSomething that provides randomness in the runtime.\nA dispatchable call.\nThe overarching event type.\nA ticket has been bought!\nToo many calls for a single lottery.\nUsed to determine if a call would be valid for purchasing …\nWeight information for extrinsics in this pallet.\nA winner has been chosen!\nBuy a ticket to enter the lottery.\nSet calls in storage which can be used to purchase a …\nStart a lottery using the provided configuration.\nIf a lottery is repeating, you can use this to stop the …\nWeights for <code>pallet_lottery</code> using the Substrate node and …\nWeight functions needed for <code>pallet_lottery</code>.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>RandomnessCollectiveFlip::RandomMaterial</code> (r:1 w:0)\nStorage: <code>RandomnessCollectiveFlip::RandomMaterial</code> (r:1 w:0)\nStorage: <code>Lottery::CallIndices</code> (r:0 w:1) Proof: …\nStorage: <code>Lottery::Lottery</code> (r:1 w:1) Proof: <code>Lottery::Lottery</code>…\nStorage: <code>Lottery::Lottery</code> (r:1 w:1) Proof: <code>Lottery::Lottery</code>…\nRequired origin for adding a member (though can always be …\nAlready a member.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nPhantom member, never used.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nOne of the members’ keys changed.\nThe maximum number of members that this membership can …\nThe given member was added; see the transaction for who.\nThe given member was removed; see the transaction for who.\nThe current membership, stored as an ordered Vec.\nThe membership was reset; see the transaction for who the …\nTwo members were swapped; see the transaction for who.\nThe receiver of the signal for when the membership has …\nThe receiver of the signal for when the membership has …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot a member.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current prime member, if one exists.\nRequired origin for setting or resetting the prime member.\nRequired origin for removing a member (though can always …\nRequired origin for resetting membership.\nThe overarching event type.\nRequired origin for adding and removing a member in a …\nToo many members.\nWeight functions needed for <code>pallet_membership</code>.\nWeight information for extrinsics in this pallet.\nAdd a member <code>who</code> to the set.\nAdd a member <code>who</code> to the set.\nMembership pallet benchmarking.\nSwap out the sending member for some other key <code>new</code>.\nSwap out the sending member for some other key <code>new</code>.\nRemove the prime member if it exists.\nRemove the prime member if it exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementation uses a parameter type so calling is …\nThe current membership, stored as an ordered <code>Vec</code>.\nCreate a call with the variant <code>add_member</code>.\nCreate a call with the variant <code>change_key</code>.\nCreate a call with the variant <code>clear_prime</code>.\nCreate a call with the variant <code>remove_member</code>.\nCreate a call with the variant <code>reset_members</code>.\nCreate a call with the variant <code>set_prime</code>.\nCreate a call with the variant <code>swap_member</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe current prime member, if one exists.\nRemove a member <code>who</code> from the set.\nRemove a member <code>who</code> from the set.\nChange the membership to a new set, disregarding the …\nChange the membership to a new set, disregarding the …\nSet the prime member. Must be a current member.\nSet the prime member. Must be a current member.\nSwap out one member <code>remove</code> for another <code>add</code>.\nSwap out one member <code>remove</code> for another <code>add</code>.\nAutogenerated weights for <code>pallet_membership</code>\nVersion 4.\nMigrate the entire storage of this pallet to a new prefix.\nSome checks for after migration. This can be linked to …\nSome checks prior to migration. This can be linked to …\nRequired origin for adding a member (though can always be …\nAlready a member.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nPhantom member, never used.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nOne of the members’ keys changed.\nThe maximum number of members that this membership can …\nThe given member was added; see the transaction for who.\nThe given member was removed; see the transaction for who.\nThe current membership, stored as an ordered Vec.\nThe membership was reset; see the transaction for who the …\nTwo members were swapped; see the transaction for who.\nThe receiver of the signal for when the membership has …\nThe receiver of the signal for when the membership has …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNot a member.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current prime member, if one exists.\nRequired origin for setting or resetting the prime member.\nRequired origin for removing a member (though can always …\nRequired origin for resetting membership.\nThe overarching event type.\nRequired origin for adding and removing a member in a …\nToo many members.\nWeight information for extrinsics in this pallet.\nAdd a member <code>who</code> to the set.\nSwap out the sending member for some other key <code>new</code>.\nRemove the prime member if it exists.\nRemove a member <code>who</code> from the set.\nChange the membership to a new set, disregarding the …\nSet the prime member. Must be a current member.\nSwap out one member <code>remove</code> for another <code>add</code>.\nWeights for <code>pallet_membership</code> using the Substrate node and …\nWeight functions needed for <code>pallet_membership</code>.\nStorage: <code>TechnicalMembership::Members</code> (r:1 w:1) Proof: …\nStorage: <code>TechnicalMembership::Members</code> (r:1 w:1) Proof: …\nStorage: <code>TechnicalMembership::Prime</code> (r:0 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>TechnicalMembership::Members</code> (r:1 w:1) Proof: …\nStorage: <code>TechnicalMembership::Members</code> (r:1 w:1) Proof: …\nStorage: <code>TechnicalMembership::Members</code> (r:1 w:0) Proof: …\nStorage: <code>TechnicalMembership::Members</code> (r:1 w:1) Proof: …\nThe meta transactions’s birth block is ancient.\nInvalid proof (e.g. signature).\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA meta transaction has been dispatched.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nTransaction extension/s for meta transactions.\nThe meta transaction is not yet valid (e.g. nonce too …\nThe meta transaction is invalid.\nMeta Transaction type.\nThe <code>MetaTx</code> for the given config.\nThis type serves as a marker extension to differentiate …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe meta transaction is outdated (e.g. nonce too low).\nThe transaction extension did not authorize any origin.\nWeight functions needed for <code>pallet_meta_tx</code>.\nWeight information for calls in this pallet.\nA weightless extension to facilitate the bare dispatch …\nDispatch a given meta transaction.\nDispatch a given meta transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new <code>TransactionExtension</code> with implicit meta tx …\nCreate a new meta transaction.\nCreate a call with the variant <code>dispatch</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_meta_tx</code>\nThe meta transactions’s birth block is ancient.\nInvalid proof (e.g. signature).\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA meta transaction has been dispatched.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nTransaction extension/s for meta transactions.\nThe meta transaction is not yet valid (e.g. nonce too …\nThe meta transaction is invalid.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nThe meta transaction is outdated (e.g. nonce too low).\nThe transaction extension did not authorize any origin.\nWeight information for calls in this pallet.\nDispatch a given meta transaction.\nWeights for <code>pallet_meta_tx</code> using the Substrate node and …\nWeight functions needed for <code>pallet_meta_tx</code>.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nPoints to the currently active migration and its inner …\nPoints to the currently active migration and its inner …\nPoints to the currently active migration and its inner …\nConvenience alias for <code>ActiveCursor</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currently active migration to run and its cursor.\nThe maximal length of an encoded cursor.\nThe maximal length of an encoded cursor.\nConvenience alias for <code>MigrationCursor</code>.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nHandler for failed migrations.\nHandler for failed migrations.\nSet of all successfully executed migrations.\nHow to clear the records of historic migrations.\nThe set of historical migrations has been cleared.\nThe maximal length of an encoded identifier.\nThe maximal length of an encoded identifier.\nConvenience alias for the identifier of a migration.\nThe maximum weight to spend each block to execute …\nThe maximum weight to spend each block to execute …\nA migration progressed.\nA Migration completed.\nPoints to the next migration to execute.\nA Migration failed.\nA migration was skipped since it was already executed in …\nNotifications for status updates of a runtime upgrade.\nNotifications for status updates of a runtime upgrade.\nMocked migrations for benchmarking only.\nTrait for a tuple of No-OP migrations with one element.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe operation cannot complete since some MBMs are ongoing.\nThe <code>Pallet</code> struct, the main type that implements traits …\nConvenience alias for the raw inner cursor of a migration.\nThe overarching event type of the runtime.\nThe overarching event type of the runtime.\nClear exactly these entries.\nMigration got stuck and cannot proceed. This is bad.\nMigration got stuck and cannot proceed. This is bad.\nThe current runtime upgrade completed.\nRuntime upgrade failed.\nA Runtime upgrade started.\nWeight functions needed for <code>pallet_migrations</code>.\nWeight information for the calls and functions of this …\nWeight information for the calls and functions of this …\nClear up to this many entries\nTry to return self as an <code>ActiveCursor</code>.\nClears the <code>Historic</code> set.\nClears the <code>Historic</code> set.\nThe maximal weight of calling the private …\nForces the onboarding of the migrations.\nForces the onboarding of the migrations.\nAllows root to set an active cursor to forcefully …\nAllows root to set an active cursor to forcefully …\nAllows root to set a cursor to forcefully start, stop or …\nAllows root to set a cursor to forcefully start, stop or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe index of the migration in the MBM tuple.\nThe index of the migration in the MBM tuple.\nThe cursor of the migration that is referenced by <code>index</code>.\nThe cursor of the migration that is referenced by <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximal number of entries that this will remove.\nGeneric multi block migrations not specific to any pallet.\nTest helpers for internal and external usage.\nCreate a call with the variant <code>clear_historic</code>.\nCreate a call with the variant <code>force_onboard_mbms</code>.\nCreate a call with the variant <code>force_set_active_cursor</code>.\nCreate a call with the variant <code>force_set_cursor</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe migration should fail after <code>n</code> steps.\nThe migration should succeed after <code>n</code> steps.\nThe block number that the migration started at.\nThe block number that the migration started at.\nAutogenerated weights for <code>pallet_migrations</code>\nThe index of the skipped migration within the …\nThe index of the migration within the <code>Config::Migrations</code> …\nThe index of the migration within the <code>Config::Migrations</code> …\nThe index of the migration within the <code>Config::Migrations</code> …\nThe number of migrations that this upgrade contains.\nShould be passed to <code>clear_historic</code> in a successive call.\nThe number of blocks that this migration took so far.\nThe number of blocks that this migration took so far.\nThe number of blocks that this migration took so far.\nHow many should be cleared in this call at most.\nThe cursor that was emitted from any previous …\nRemove all of a pallet’s state and re-initializes it to …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nFail after its number of steps elapsed.\nCause an <code>SteppedMigrationError::InsufficientWeight</code> error …\nOpaque identifier of a migration.\nHow a mocked migration should behave.\nAllows to set the migrations to run at runtime instead of …\nPostUpgrade should fail.\nPreUpgrade should fail.\nSucceed after its number of steps elapsed.\nNever terminate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a migration identifier with a specific <code>kind</code> and …\nSet the migrations to run.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currently active migration to run and its cursor.\nThe maximal length of an encoded cursor.\nThe maximal length of an encoded cursor.\nBased on <code>Config</code>. Auto-generated by …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nHandler for failed migrations.\nHandler for failed migrations.\nSet of all successfully executed migrations.\nThe set of historical migrations has been cleared.\nThe maximal length of an encoded identifier.\nThe maximal length of an encoded identifier.\nThe maximum weight to spend each block to execute …\nThe maximum weight to spend each block to execute …\nA migration progressed.\nA Migration completed.\nA Migration failed.\nA migration was skipped since it was already executed in …\nNotifications for status updates of a runtime upgrade.\nNotifications for status updates of a runtime upgrade.\nMocked migrations for benchmarking only.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe operation cannot complete since some MBMs are ongoing.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type of the runtime.\nThe overarching event type of the runtime.\nThe current runtime upgrade completed.\nRuntime upgrade failed.\nA Runtime upgrade started.\nWeight information for the calls and functions of this …\nWeight information for the calls and functions of this …\nClears the <code>Historic</code> set.\nDefault implementations of <code>DefaultConfig</code>, which can be …\nForces the onboarding of the migrations.\nAllows root to set an active cursor to forcefully …\nAllows root to set a cursor to forcefully start, stop or …\nThe index of the skipped migration within the …\nThe index of the migration within the <code>Config::Migrations</code> …\nThe index of the migration within the <code>Config::Migrations</code> …\nThe index of the migration within the <code>Config::Migrations</code> …\nThe number of migrations that this upgrade contains.\nShould be passed to <code>clear_historic</code> in a successive call.\nThe number of blocks that this migration took so far.\nThe number of blocks that this migration took so far.\nThe number of blocks that this migration took so far.\nProvides a viable default config that can be used with …\nMaximal weight per block that can be spent on migrations …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_migrations</code> using the Substrate node and …\nWeight functions needed for <code>pallet_migrations</code>.\nStorage: <code>MultiBlockMigrations::Historic</code> (r:256 w:256) …\nStorage: UNKNOWN KEY <code>0x583359fe0e84d953a9dd84e8addb08a5</code> …\nStorage: UNKNOWN KEY <code>0x583359fe0e84d953a9dd84e8addb08a5</code> …\nStorage: UNKNOWN KEY <code>0x583359fe0e84d953a9dd84e8addb08a5</code> …\nStorage: UNKNOWN KEY <code>0x583359fe0e84d953a9dd84e8addb08a5</code> …\nStorage: UNKNOWN KEY <code>0x583359fe0e84d953a9dd84e8addb08a5</code> …\nStorage: <code>MultiBlockMigrations::Cursor</code> (r:1 w:0) Proof: …\nStorage: <code>MultiBlockMigrations::Cursor</code> (r:0 w:1) Proof: …\nStorage: <code>MultiBlockMigrations::Cursor</code> (r:0 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>MultiBlockMigrations::Cursor</code> (r:1 w:1) Proof: …\nStorage: <code>MultiBlockMigrations::Cursor</code> (r:1 w:0) Proof: …\nStorage: <code>Skipped::Metadata</code> (r:0 w:0) Proof: …\nIndex of an authority in the authority list for a session.\nLike <code>Mixnode</code>, but encoded size is bounded.\n<code>BoundedMixnode</code> type for the given configuration.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nThe maximum number of authorities per session.\nThe maximum size of one of a mixnode’s external …\nThe maximum number of external addresses for a mixnode.\nMinimum number of mixnodes. If there are fewer than this …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSession progress/length estimation. Used to determine when …\nLength of the first phase of each session (<code>CoverToCurrent</code>…\nLength of the third phase of each session (<code>CoverToPrev</code>), …\nThe number of “slack” blocks at the end of each …\nThe number of “slack” blocks at the start of each …\nLength of the second phase of each session (…\nThe <code>Pallet</code> struct, the main type that implements traits …\nA mixnode registration. A registration transaction is …\n<code>Registration</code> type for the given configuration.\nPriority of unsigned transactions used to register …\nThe index in the next session’s authority list of the …\nThe index in the next session’s authority list of the …\nBlock number at the time of creation. When a registration …\nBlock number at the time of creation. When a registration …\nReturns the mixnode set for the current session.\nExternal addresses for the mixnode, in multiaddr format, …\nExternal addresses for the mixnode, in multiaddr format, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey-exchange public key for the mixnode.\nKey-exchange public key for the mixnode.\nTry to register a mixnode for the next session.\nMixnode information to register for the following session.\nMixnode information to register for the following session.\nThe mixnode set for the very first session.\nCreate a call with the variant <code>register</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nlibp2p peer ID of the mixnode.\nlibp2p peer ID of the mixnode.\nReturns the mixnode set for the previous session.\nRegister a mixnode for the following session.\nRegister a mixnode for the following session.\nThe session during which this registration should be …\nThe session during which this registration should be …\nReturns the index and phase of the current session.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCan be used to configure the genesis state of this pallet.\nThe maximum number of authorities per session.\nThe maximum size of one of a mixnode’s external …\nThe maximum number of external addresses for a mixnode.\nMinimum number of mixnodes. If there are fewer than this …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSession progress/length estimation. Used to determine when …\nLength of the first phase of each session (<code>CoverToCurrent</code>…\nLength of the third phase of each session (<code>CoverToPrev</code>), …\nThe number of “slack” blocks at the end of each …\nThe number of “slack” blocks at the start of each …\nLength of the second phase of each session (…\nThe <code>Pallet</code> struct, the main type that implements traits …\nPriority of unsigned transactions used to register …\nThe mixnode set for the very first session.\nRegister a mixnode for the following session.\nAn MMR ancestry proof for a prior mmr root.\nThis trait decoples dependencies on pallets needed for …\nBenchmarking setup helper trait.\nBlock hash provider for a given block number.\nBlock hash provider for a given block number.\nContains a variant per dispatchable extrinsic that this …\nError committing changes.\nConfiguration trait of this pallet.\nDefault implementation of BlockHashProvider using …\nMerkle Mountain Range operation error.\nA full leaf content stored in the offchain-db.\nError during proof generation.\nError getting the new root.\nA hasher type for MMR.\nPrefix for elements stored in the Off-chain DB via …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nThe provided best know block number is invalid.\nCannot find the requested leaf index\nError during translation of a block number into a leaf …\nA type that should end up in the leaf of MMR.\nData stored in the leaf nodes.\nA provider of the MMR’s leaf data.\nA type to describe leaf position in the MMR.\nLeaf not found in the storage.\nAn MMR proof data for a group of leaves.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA type to describe node position in the MMR (node index).\nHashes of the nodes in the MMR.\nMMR nodes &amp; size -related utilities.\nCurrent size of the MMR (number of leaves).\nNew MMR root notification hook.\nA hook to act on the new MMR root.\nThe <code>Pallet</code> struct, the main type that implements traits …\nMmr Pallet not included in runtime\nThe most common use case for MMRs is to store historical …\nError while pushing new node.\nLatest MMR Root hash.\nHelper flag used in the runtime benchmarks for the initial …\nProof verification error.\nWeights for this pallet.\nConvert a block number into a leaf index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate an MMR proof for the given <code>block_numbers</code>. If …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProof elements (hashes of siblings of inner nodes on the …\nProof elements (positions and hashes of siblings of inner …\nNumber of leaves in MMR, when the proof was generated.\nNumber of leaves in MMR, when the proof was generated.\nThe method to return leaf data that should be placed in …\nCalculate <code>LeafIndex</code> for the leaf that added <code>node_index</code> to …\nTranslate a <code>LeafIndex</code> to its <em>leaf</em> <code>NodeIndex</code>.\nThe indices of the leaves the proof is for.\nConsume given error <code>e</code> with <code>self</code> and generate a native log …\nConsume given error <code>e</code> with <code>self</code> and generate a native log …\nAn auto-generated getter for <code>NumberOfLeaves</code>.\nAn auto-generated getter for <code>Nodes</code>.\nReturn the on-chain MMR root hash.\nCreate new instance of MMR nodes utilities for given …\nBuild canonical offchain key for node <code>pos</code> in MMR.\nBuild offchain key from <code>parent_hash</code> of block that …\nReturn the number of leaves in the MMR.\nCalculate number of peaks in the MMR.\nFunction called by the pallet in case new MMR root has …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nNumber of leaves in the ancestor’s MMR.\nPeaks of the ancestor’s mmr\nStarting from any leaf index, get the sequence of …\nCalculate the total size of MMR (number of nodes).\nEncode the leaf either in its full or compact form.\nStateless ancestry proof verification.\nVerify MMR proof for given <code>leaves</code>.\nStateless MMR proof verification for batch of leaves.\nBenchmarking setup helper trait.\nBlock hash provider for a given block number.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA hasher type for MMR.\nPrefix for elements stored in the Off-chain DB via …\n<code>Instance1</code> to be used for instantiable pallets defined with …\nData stored in the leaf nodes.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nHashes of the nodes in the MMR.\nCurrent size of the MMR (number of leaves).\nA hook to act on the new MMR root.\nThe <code>Pallet</code> struct, the main type that implements traits …\nLatest MMR Root hash.\nHelper flag used in the runtime benchmarks for the initial …\nWeights for this pallet.\nAn MMR ancestry proof for a prior mmr root.\nError committing changes.\nA composition of multiple leaf elements with compact form …\nArbitrary data in its full form.\nAn element representing either full data or its hash.\nA type-safe wrapper for the concrete leaf type.\nMerkle Mountain Range operation error.\nA full leaf content stored in the offchain-db.\nError during proof generation.\nError getting the new root.\nA hash of some data.\nPrefix for elements stored in the Off-chain DB via …\nThe provided best know block number is invalid.\nCannot find the requested leaf index\nError during translation of a block number into a leaf …\nA type that should end up in the leaf of MMR.\nA provider of the MMR’s leaf data.\nA type to describe leaf position in the MMR.\nLeaf not found in the storage.\nAn MMR proof data for a group of leaves.\nAPI to interact with MMR pallet.\nA type to describe node position in the MMR (node index).\nNew MMR root notification hook.\nA helper type to allow using arbitrary SCALE-encoded leaf …\nMmr Pallet not included in runtime\nError while pushing new node.\nProof verification error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>OpaqueLeaf</code> given raw bytes of compact-encoded …\nConvert a concrete MMR leaf into an opaque type.\nConvert a concrete leaf into encodable opaque version.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGiven an opaque leaf, make it encodable.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieve a hash of this item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to convert into a OpaqueLeaf.\nProof elements (hashes of siblings of inner nodes on the …\nProof elements (positions and hashes of siblings of inner …\nNumber of leaves in MMR, when the proof was generated.\nNumber of leaves in MMR, when the proof was generated.\nThe method to return leaf data that should be placed in …\nThe indices of the leaves the proof is for.\nCreate a new Compact wrapper for a tuple.\nFunction called by the pallet in case new MMR root has …\nNumber of leaves in the ancestor’s MMR.\nPeaks of the ancestor’s mmr\nAttempt to decode the leaf into expected concrete type.\nInternal tuple representation.\nEncode the leaf either in its full or compact form.\nMerkle Mountain Range utilities.\nMMR nodes &amp; size -related utilities.\nConvert a block number into a leaf index.\nGet the first block with MMR.\nCall is already approved by this signatory.\nThe data to be stored is already stored.\nQuery the current block number.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency mechanism.\nThe base amount of currency needed to reserve for creating …\nThe amount of currency needed per unit threshold when …\nThe deposit for a multisig operation has been …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe log target of this pallet.\nThe maximum amount of signatories allowed in the multisig.\nThe maximum weight information provided was too low.\nThreshold must be 2 or greater.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAn open multisig operation.\nA multisig operation has been approved by someone.\nA multisig operation has been cancelled.\nA multisig operation has been executed.\nThe set of open multisig operations.\nA new multisig operation has begun.\nCall doesn’t need any (more) approvals.\nNo timepoint was given, yet the multisig operation is …\nMultisig operation not found in storage.\nOnly the account that originally created the multisig is …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching call type.\nThe overarching event type.\nThe sender was contained in the other signatories; it …\nThe signatories were provided out of order; they should be …\nA global extrinsic index, formed as the extrinsic index …\nThere are too few signatories in the list.\nThere are too many signatories in the list.\nA timepoint was given, yet no multisig operation is …\nWeight functions needed for <code>pallet_multisig</code>.\nWeight information for extrinsics in this pallet.\nA different timepoint was given to the multisig operation …\nThe approvals achieved so far, including the depositor. …\nRegister approval for a dispatch to be made from a …\nRegister approval for a dispatch to be made from a …\nRegister approval for a dispatch to be made from a …\nRegister approval for a dispatch to be made from a …\nImmediately dispatch a multi-signature call using a single …\nImmediately dispatch a multi-signature call using a single …\nCancel a pre-existing, on-going multisig transaction. Any …\nCancel a pre-existing, on-going multisig transaction. Any …\nCalculate the deposit for a multisig operation.\nThe amount held in reserve of the <code>depositor</code>, to be …\nThe account who opened it (i.e. the first to approve it).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe height of the chain at the point in time.\nThe index of the extrinsic at the point in time.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive a multi-account ID from the sorted list of accounts …\nCreate a call with the variant <code>approve_as_multi</code>.\nCreate a call with the variant <code>as_multi</code>.\nCreate a call with the variant <code>as_multi_threshold_1</code>.\nCreate a call with the variant <code>cancel_as_multi</code>.\nCreate a call with the variant <code>poke_deposit</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nPoke the deposit reserved for an existing multisig …\nPoke the deposit reserved for an existing multisig …\nThe current <code>Timepoint</code>.\nAutogenerated weights for <code>pallet_multisig</code>\nThe extrinsic when the multisig operation was opened.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCall is already approved by this signatory.\nThe data to be stored is already stored.\nQuery the current block number.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency mechanism.\nThe base amount of currency needed to reserve for creating …\nThe amount of currency needed per unit threshold when …\nThe deposit for a multisig operation has been …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe maximum amount of signatories allowed in the multisig.\nThe maximum weight information provided was too low.\nThreshold must be 2 or greater.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nA multisig operation has been approved by someone.\nA multisig operation has been cancelled.\nA multisig operation has been executed.\nThe set of open multisig operations.\nA new multisig operation has begun.\nCall doesn’t need any (more) approvals.\nNo timepoint was given, yet the multisig operation is …\nMultisig operation not found in storage.\nOnly the account that originally created the multisig is …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching call type.\nThe overarching event type.\nThe sender was contained in the other signatories; it …\nThe signatories were provided out of order; they should be …\nThere are too few signatories in the list.\nThere are too many signatories in the list.\nA timepoint was given, yet no multisig operation is …\nWeight information for extrinsics in this pallet.\nA different timepoint was given to the multisig operation …\nRegister approval for a dispatch to be made from a …\nRegister approval for a dispatch to be made from a …\nImmediately dispatch a multi-signature call using a single …\nCancel a pre-existing, on-going multisig transaction. Any …\nPoke the deposit reserved for an existing multisig …\nWeights for <code>pallet_multisig</code> using the Substrate node and …\nWeight functions needed for <code>pallet_multisig</code>.\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Multisig::Multisigs</code> (r:1 w:1) Proof: …\nThe type used to describe the amount of fractions …\nThe type used to identify the assets created during …\nRegistry for the minted assets.\nBenchmark Helper\nA set of helper functions for benchmarking.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency mechanism, used for paying for deposits.\nThe deposit paid by the user locking an NFT. The deposit …\nStores the details of a fractionalized item.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nReserved for a fractionalized NFT.\nA reason for the pallet placing a hold on funds.\nAsset ID does not correspond to locked NFT.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe newly created asset’s name.\nThe newly created asset’s symbol.\nIdentifier for the collection of NFT.\nAn NFT was successfully fractionalized.\nThe type used to identify an NFT within a collection.\nNFT doesn’t exist.\nNFT has not yet been fractionalised.\nKeeps track of the corresponding NFT ID, asset ID and …\nAn NFT was successfully returned back.\nRegistry for minted NFTs.\nThe signing account has no permission to do the operation.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s id, used for deriving its sovereign account …\nThe overarching event type.\nOverarching hold reason.\nThe maximum length of a name or symbol stored on-chain.\nWeight functions needed for <code>pallet_nft_fractionalization</code>.\nWeight information for extrinsics in this pallet.\nReturns an asset id from a given integer.\nMinted asset.\nAccount that fractionalized an item.\nReturns a collection id from a given integer.\nReserved deposit for creating a new asset.\nLock the NFT and mint a new fungible asset.\nLock the NFT and mint a new fungible asset.\nNumber of fractions minted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>fractionalize</code>.\nCreate a call with the variant <code>unify</code>.\nReturns an nft id from a given integer.\nKeeps track of the corresponding NFT ID, asset ID and …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nBurn the total issuance of the fungible asset and return …\nBurn the total issuance of the fungible asset and return …\nAutogenerated weights for <code>pallet_nft_fractionalization</code>\nThe type used to describe the amount of fractions …\nThe type used to identify the assets created during …\nRegistry for the minted assets.\nA set of helper functions for benchmarking.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe currency mechanism, used for paying for deposits.\nThe deposit paid by the user locking an NFT. The deposit …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nReserved for a fractionalized NFT.\nA reason for the pallet placing a hold on funds.\nAsset ID does not correspond to locked NFT.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe newly created asset’s name.\nThe newly created asset’s symbol.\nIdentifier for the collection of NFT.\nAn NFT was successfully fractionalized.\nThe type used to identify an NFT within a collection.\nNFT doesn’t exist.\nNFT has not yet been fractionalised.\nKeeps track of the corresponding NFT ID, asset ID and …\nAn NFT was successfully returned back.\nRegistry for minted NFTs.\nThe signing account has no permission to do the operation.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s id, used for deriving its sovereign account …\nThe overarching event type.\nOverarching hold reason.\nThe maximum length of a name or symbol stored on-chain.\nWeight information for extrinsics in this pallet.\nLock the NFT and mint a new fungible asset.\nBurn the total issuance of the fungible asset and return …\nWeights for <code>pallet_nft_fractionalization</code> using the …\nWeight functions needed for <code>pallet_nft_fractionalization</code>.\nStorage: <code>Nfts::Item</code> (r:1 w:0) Proof: <code>Nfts::Item</code> (<code>max_values</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>NftFractionalization::NftToAsset</code> (r:1 w:1) Proof: …\nThe items held by any given account; set out this way so …\nAn attribute was set by pre-approved account.\nCan thaw items, force transfers and burn items from any …\nAll approvals of an item got cancelled.\nThe provided Item was already used for claiming.\nThe item ID has already been used for an item.\nAn approval for a <code>delegate</code> account to transfer the <code>item</code> of …\nThe approval had a deadline that expired, so the approval …\nAllow/disallow transfer approvals.\nThe maximum approvals an item could have.\nA type alias for keeping track of approvals used by a …\nAttributes of a collection.\nAttribute metadata has been cleared for a <code>collection</code> or …\nInformation about the reserved attribute deposit.\nThe basic amount of funds that must be reserved when …\nA type that holds the deposit amount for an item’s …\nAttribute namespaces for non-fungible tokens.\nThe provided attribute can’t be found.\nNew attribute metadata has been set for a <code>collection</code> or …\nAllow/disallow setting attributes.\nThe witness data given does not match the current state of …\nA type alias for an accounts balance.\nThe provided bid is too low.")