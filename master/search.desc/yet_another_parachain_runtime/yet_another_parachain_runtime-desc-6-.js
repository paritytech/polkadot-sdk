searchState.loadedDescShard("yet_another_parachain_runtime", 6, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this span is enabled for the per-layer …\nReturns a reference to the span’s <code>Metadata</code>.\nReturns a static reference to the span’s metadata.\nReturns the span’s name,\nReturns a reference to the ID\nReturns a <code>SpanRef</code> describing this span’s parent, or <code>None</code> …\nRegisters a <code>Filter</code> for per-layer filtering with this …\nRemove a type from this <code>Extensions</code>.\nReplaces an existing <code>T</code> into this extensions.\nReturns an iterator over all parents of this span, …\nReturns a <code>SpanRef</code> for the span with the given <code>Id</code>, if it …\nReturns the <code>SpanData</code> for a given <code>Id</code>, if it exists.\nIndicates that an error occurred when reloading a layer.\nAllows reloading the state of an associated <code>Layer</code>.\nWraps a <code>Layer</code> or <code>Filter</code>, allowing it to be reloaded …\nReturns a clone of the layer or filter’s current value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns a <code>Handle</code> that can be used to reload the wrapped …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this error occurred because the <code>Subscriber</code> …\nReturns <code>true</code> if this error occurred because the layer was …\nInvokes a closure with a mutable reference to the current …\nWraps the given <code>Layer</code> or <code>Filter</code>, returning a <code>reload::Layer</code> …\nReplace the current <code>Layer</code> or <code>Filter</code> with the provided …\nInvokes a closure with a borrowed reference to the current …\nExtension trait adding utility methods for subscriber …\nError returned by <code>try_init</code> if a global default subscriber …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nProof of Possession is the same as Signature for sr25519\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nVRF pre-output.\nVRF proof.\nTrait implemented by callsites.\n<code>Dispatch</code> trace data to a <code>Subscriber</code>.\n<code>Event</code>s represent single points in time where something …\nIdentifies a span within the context of a subscriber.\nAttaches spans to a <code>std::future::Future</code>.\nDescribes the level of verbosity of a span or event.\nMetadata describing a span or event.\nA handle representing a span, with the capability to enter …\nTrait representing the functions required to collect trace …\nA field value of an erased type.\nCallsites represent the source locations from which spans …\nReturns an opaque <code>Identifier</code> that uniquely identifies the …\nConstructs a new <code>Span</code> as child of the given parent span, …\nConstructs a new <code>Event</code> with the specified metadata and set …\nNotifies the subscriber that a span ID has been cloned.\nNotifies the subscriber that a span ID has been cloned.\nReturns a handle to the span considered by the <code>Subscriber</code> …\nReturns a type representing this subscriber’s view of …\nReturns a type representing this subscriber’s view of …\nConstructs an event at the debug level.\nConstructs a span at the debug level.\nReturns the current default dispatcher\nConstructs a new <code>Event</code> with the specified metadata and set …\nDispatches trace events to <code>Subscriber</code>s.\nIf <code>self</code> is the same type as the provided <code>TypeId</code>, returns …\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to this <code>[</code>Subscriber…\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …\nCreates a <code>WeakDispatch</code> from this <code>Dispatch</code>.\n<strong>This method is deprecated.</strong>\nNotifies the subscriber that a span ID has been dropped.\nReturns true if a span or event with the specified metadata…\nReturns true if a span with the specified metadata would be\nChecks whether a span or event is enabled based on the …\nRecords that a span has been entered.\nEnters this span, returning a guard that will exit the …\nRecords that a span has been can_enter.\nEnters this span, consuming it and returning a guard that …\nConstructs an event at the error level.\nConstructs a span at the error level.\nEvents represent single points in time during the …\nRecords that an <code>Event</code> has occurred.\nRecords that an <code>Event</code> has occurred.\nConstructs a new <code>Event</code>.\nDetermine if an <code>Event</code> should be recorded.\nTests whether an event with the specified level and target …\nRecords that a span has been exited.\nRecords that a span has been exited.\n<code>Span</code> and <code>Event</code> key-value data.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the names of the fields on the described span or …\nReturns an iterator over the set of values on this <code>Event</code>.\nReturns the name of the source code file where the span …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nInstruments this type with the current <code>Span</code>, returning an …\nExecutes the given function in the context of this span.\nConstructs an event at the info level.\nConstructs a span at the info level.\nAttach a span to a <code>std::future::Future</code>.\nInstruments this type with the provided <code>Span</code>, returning an …\nInstruments a function to create and enter a <code>tracing</code> span …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …\nReturns true if the new event’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if the callsite kind is <code>Event</code>.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new event should be a root.\nReturn true if the callsite kind is <code>Span</code>.\nReturns the level of verbosity of the described span or …\nTrace verbosity level filtering.\nReturns the line number in the source code file where the …\nReturns the highest verbosity level that this <code>Subscriber</code> …\nMetadata describing trace data.\nReturns the metadata associated with the callsite.\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns metadata describing this <code>Event</code>.\nStatically constructs new span metadata.\nReturns the path to the Rust module where the span …\nReturns the name of the span.\nConstructs a new <code>Span</code> with the given metadata and set of …\nConstruct new metadata for a span or event, with a name, …\nReturns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.\nReturns a new <code>Event</code> in the current span, with the …\nReturns a new <code>Event</code> as a child of the specified span, with …\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nVisit the construction of a new span, returning a new span …\nRecord the construction of a new span, returning a new ID …\nConstructs a new span that is <em>completely disabled</em>.\nReturns a new <code>Dispatch</code> that discards events and spans.\nInvoked when this subscriber becomes a <code>Dispatch</code>.\nReturns this span, if it was enabled by the current …\nReturns the new event’s explicitly-specified parent, if …\nVisits this value with the given <code>Visitor</code>.\nRecord a set of values on a span.\nRecords that the field described by <code>field</code> has the value …\nRecord a set of values on a span.\nVisits all the fields on this <code>Event</code> with the specified …\nRecords all the fields in the provided <code>ValueSet</code>.\nAdds an indication that <code>span</code> follows from the span with …\nAdds an indication that <code>span</code> follows from the span with …\nRegisters a new callsite with this subscriber, returning …\nRegisters a new callsite with this subscriber, returning …\nSets the <code>Interest</code> for this callsite.\nSpans represent periods of time in which a program was …\nConstructs a new span.\nTests whether a span with the specified level and target …\nCollects and records trace data.\nReturns a string describing the part of the system where …\nConstructs an event at the trace level.\nConstructs a span at the trace level.\nNotifies the subscriber that a span ID has been dropped, …\nNotifies the subscriber that a span ID has been dropped, …\nConstructs an event at the warn level.\nConstructs a span at the warn level.\nInvokes a function with a reference to this span’s ID …\nTrait implemented by callsites.\nA default <code>Callsite</code> implementation.\nUniquely identifies a <code>Callsite</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the callsite’s cached <code>Interest</code>, or registers it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata associated with the callsite.\nReturns a new <code>DefaultCallsite</code> with the specified <code>Metadata</code>.\nClear and reregister interest on every <code>Callsite</code>\nRegister a new <code>Callsite</code> with the global registry.\nRegisters this callsite with the global callsite registry.\nSets the <code>Interest</code> for this callsite.\nA guard that resets the current default dispatcher to the …\n<code>Dispatch</code> trace data to a <code>Subscriber</code>.\nReturned if setting the global dispatcher fails.\n<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nExecutes a closure with a reference to this thread’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the dispatch as the default dispatch for the duration …\nSets this dispatch as the global default for the duration …\nAttempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.\nSets this dispatch as the default for the duration of a …\n<code>Event</code>s represent single points in time where something …\nTrait implemented to allow a type to be used as a field …\nA <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.\nA <code>Value</code> which serializes using <code>fmt::Display</code>.\nAn empty field.\nAn opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…\nDescribes the fields present on a span.\nAn iterator over a set of fields.\nA field value of an erased type.\nA set of fields and values for a span.\nVisits typed values.\nAttempts to convert <code>&amp;self</code> into a <code>Field</code> with the specified …\nReturns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>\nReturns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>\nReturns <code>true</code> if <code>self</code> contains the given <code>field</code>.\nWraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be\nWraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …\nReturns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not this <code>FieldSet</code> has fields.\nReturns true if this <code>ValueSet</code> contains <em>no</em> values.\nReturns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.\nReturns the number of fields in this <code>FieldSet</code>.\nReturns the number of fields in this <code>ValueSet</code> that would …\nReturns a string representing the name of the field.\nConstructs a new <code>FieldSet</code> with the given array of field …\nVisits this value with the given <code>Visitor</code>.\nVisits all the fields in this <code>ValueSet</code> with the provided …\nVisit a boolean value.\nVisit a boolean value.\nVisit a value implementing <code>fmt::Debug</code>.\nRecords a type implementing <code>Error</code>.\nRecords a type implementing <code>Error</code>.\nVisit a double-precision floating point value.\nVisit a double-precision floating point value.\nVisit a signed 128-bit integer value.\nVisit a signed 128-bit integer value.\nVisit a signed 64-bit integer value.\nVisit a signed 64-bit integer value.\nVisit a string value.\nVisit a string value.\nVisit an unsigned 128-bit integer value.\nVisit an unsigned 128-bit integer value.\nVisit an unsigned 64-bit integer value.\nVisit an unsigned 64-bit integer value.\nAttaches spans to a <code>std::future::Future</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> …\nExtension trait allowing futures to be instrumented with a …\nBorrows the <code>Dispatch</code> that is entered when this type is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInstruments this type with the current <code>Span</code>, returning an …\nBorrows the wrapped type.\nBorrows the wrapped type.\nMutably borrows the wrapped type.\nMutably borrows the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nInstruments this type with the provided <code>Span</code>, returning an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nBorrows the <code>Span</code> that this type is instrumented by.\nMutably borrows the <code>Span</code> that this type is instrumented by.\nAttaches the current default <code>Subscriber</code> to this type, …\nAttaches the provided <code>Subscriber</code> to this type, returning a …\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nA filter comparable to a verbosity <code>Level</code>.\nThe “off” level.\nIndicates that a string could not be parsed to a valid …\nThe statically configured maximum trace level.\nThe “trace” level.\nThe “warn” level.\nReturns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>LevelFilter</code> that enables spans and events with …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the most verbose <code>Level</code> that this filter accepts, …\n<code>Event</code> callsite\n<code>enabled!</code> callsite. <code>Subscriber</code>s can assume this <code>Kind</code> means …\nIndicates whether the callsite is a span or event.\nDescribes the level of verbosity of a span or event.\nA filter comparable to a verbosity <code>Level</code>.\nMetadata describing a span or event.\nReturned if parsing a <code>Level</code> fails.\nIndicates that a string could not be parsed to a valid …\n<code>Span</code> callsite\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSets that this <code>Kind</code> is a hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the callsite kind is <code>Event</code>\nReturn true if the callsite kind is <code>Hint</code>\nReturn true if the callsite kind is <code>Span</code>\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nExits this span, returning the underlying <code>Span</code>.\nReturns the set of all fields defined by this span’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns this span’s <code>Id</code>, if it is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the new span’s parent should be …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns a reference to the new span’s metadata.\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nReturns <code>Attributes</code> describing a new span at the root of …\nReturns the new span’s explicitly-specified parent, if …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nReturns a reference to a <code>ValueSet</code> containing any values …\nA guard that resets the current default dispatcher to the …\nIndicates a <code>Subscriber</code>’s interest in a particular …\nA no-op <code>Subscriber</code>.\nReturned if setting the global dispatcher fails.\nTrait representing the functions required to collect trace …\nReturns an <code>Interest</code> indicating the subscriber is always …\nNotifies the subscriber that a span ID has been cloned.\nReturns a type representing this subscriber’s view of …\nIf <code>self</code> is the same type as the provided <code>TypeId</code>, returns …\n<strong>This method is deprecated.</strong>\nReturns true if a span or event with the specified metadata…\nRecords that a span has been entered.\nRecords that an <code>Event</code> has occurred.\nDetermine if an <code>Event</code> should be recorded.\nRecords that a span has been exited.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the subscriber is always interested in …\nReturns <code>true</code> if the subscriber is never interested in …\nReturns <code>true</code> if the subscriber is sometimes interested in …\nReturns the highest verbosity level that this <code>Subscriber</code> …\nReturns an <code>Interest</code> indicating that the subscriber is …\nReturns a new <code>NoSubscriber</code>.\nVisit the construction of a new span, returning a new span …\nInvoked when this subscriber becomes a <code>Dispatch</code>.\nRecord a set of values on a span.\nAdds an indication that <code>span</code> follows from the span with …\nRegisters a new callsite with this subscriber, returning …\nSets the <code>Subscriber</code> as the default for the current thread …\nSets this subscriber as the global default for the …\nReturns an <code>Interest</code> indicating the subscriber is sometimes …\nNotifies the subscriber that a span ID has been dropped, …\nSets this <code>Subscriber</code> as the default for the current thread …\nBuilds a <code>pallet_xcm::send</code> call to authorize an upgrade at …\nEncodes a runtime call and returns its H256 hash\nWraps a runtime call in a whitelist preimage call and …\nHelper method to get the fee asset used in multiple assets …\nHelper method to find all <code>Event::Processed</code> IDs from the …\nHelper method to find the ID of the first <code>Event::Processed</code> …\nHelper method to find the message ID of the first …\nHelper method to get the non-fee asset used in multiple …\nHelper method to build a XCM with a <code>Transact</code> instruction …\nHelper method to build a XCM with a <code>Transact</code> instruction …\nA 32-byte identifier for an account of a specific network …\nAn 8-byte index for an account of a specific network that …\nA 20-byte identifier for an account of a specific network …\nThe unambiguous administration body (for Polkadot, an …\nAggregate message origin for the <code>MessageQueue</code> pallet.\nAlter the current Origin to another given origin.\nAll assets in Holding.\nAll assets in Holding, up to <code>u32</code> individual assets …\nAll assets in Holding of a given fungibility and ID.\nAll assets in Holding of a given fungibility and ID up to …\nA unit struct which can be converted into a <code>Location</code> of …\nA unit struct which can be converted into a <code>Location</code> of …\nA 16-byte fixed-length datum.\nA 32-byte fixed-length datum.\nA 4-byte fixed-length datum.\nAn 8-byte fixed-length datum.\nEither an amount of a single fungible asset, or a single …\nSet asset claimer for all the trapped assets during the …\n<code>Asset</code> collection, defined either by a number of <code>Assets</code> or …\nLocation to identify an asset.\nA general identifier for an instance of a non-fungible …\nThe given asset is not handled.\nA <code>Vec</code> of <code>Asset</code>s.\nSome assets.\nNo less than the given proportion of members of the body.\nThe message data format is unknown (e.g. unrecognised …\nThe Origin Register does not contain a valid value for …\nThe XCM did not pass the barrier condition for execution.\nThe Bitcoin network, including hard-forks supported by …\nThe Bitcoin network, including hard-forks supported by …\nAn identifier of a pluralistic body.\nA part of a pluralistic body.\nReduce Holding by up to the given assets.\nPay for the execution of some XCM <code>xcm</code> and <code>orders</code> with up …\nNetwork defined by the first 32-bytes of the hash and …\nNetwork specified by the first 32 bytes of its genesis …\nCreate some assets which are being held on behalf of the …\nClear the Error Register.\nClear the origin.\nClear the Topic Register.\nSet the Transact Status Register to its default, cleared, …\nExecution completed successfully; given weight was used.\nEncoded <code>Vec&lt;u8&gt;</code> messages, all concatenated.\nDouble encoded <code>VersionedXcm</code> messages, all concatenated.\nEncoded <code>VersionedXcm</code> messages, all concatenated.\nThe message data is bad (e.g. decoding returns an error).\nThe unambiguous defense body (for Polkadot, an opinion on …\nSpecify the filter as being everything contained by the …\nRemove the asset(s) (<code>assets</code>) from the Holding Register and …\nRemove the asset(s) (<code>assets</code>) from the Holding Register and …\nMutate the origin to some interior location.\nThe given message cannot be translated into a format that …\nThe given message cannot be translated into a format …\nThe status of a dispatch attempt using <code>Transact</code>.\nSomething that should be called when a downward message is …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nCan enqueue messages for multiple origins.\nContains the error value\nContains the error value\nExecution did not start due to an error. We use …\nType to return in case of an error.\nAn Ethereum network specified by its chain ID.\nMessage could not be sent due to its size exceeding the …\nAttempt to send a message greater than the maximum …\nRecursion stack limit reached\nRemove the asset(s) (<code>want</code>) from the Holding Register and …\nExecutes inner <code>xcm</code> with origin set to the provided …\nType of XCM message executor.\nThe outcome of an XCM instruction.\nThe unambiguous executive body (for Polkadot, this would …\nThrow an error if Holding does not contain at least the …\nEnsure that the Error Register equals some given value and …\nEnsure that the Origin Register equals some given value …\nEnsure that a particular pallet with a particular version …\nEnsure that the Transact Status Register equals some given …\nUsed by <code>ExpectAsset</code>, <code>ExpectError</code> and <code>ExpectOrigin</code> when the …\nThe message was unable to be exported.\nSend a message on to Non-Local Consensus system.\nUsed by <code>Transact</code> when the functor cannot be decoded.\nAn asset transaction (like withdraw or deposit) failed …\nFees needed to be paid in order to send the message and …\nFees were required which the origin could not pay.\nA given number of members of the body, out of some larger …\nClassification of whether an asset is fungible or not, …\nA fungible asset; we record a number of units, as a <code>u128</code> …\nThe asset is fungible.\nA non-descript index within the context location.\nA nondescript array datum, 32 bytes, acting as a key …\nA trait for querying a single value from a type.\nA global network capable of externalizing its own …\nThe interpreting consensus system.\nThe interpreting consensus system.\nThe given operation would lead to an overflow of the …\nA message to notify about that a previously sent open …\nA message to notify that the other party in an open …\nA message to notify about a new incoming HRMP channel. …\nExecution started, but did not complete successfully due to…\nAn indexed body.\nA compact index. Technically this could be greater than …\nRemove the asset(s) (<code>assets</code>) from holding and send a …\nRemove the asset(s) (<code>assets</code>) from holding and send a …\nInitiates cross-chain transfer as follows:\nCross-Consensus Message: A message from one consensus …\nXCM error and the index of the instruction that caused it.\nThe index of an instruction in an XCM.\nA relative location which is constrained to be an interior …\nThe location parameter is not a valid value for the …\nThe unambiguous judicial body (this doesn’t exist on …\nA single item in a path to describe the relative location …\nNon-parent junctions that can be constructed, up to the …\nThe Kusama canary-net Relay-chain.\nThe unambiguous legislative body (for Polkadot, this could …\nWeight limit imposed of the inner value.\nA relative path between state-bearing consensus systems.\nAn asset cannot be deposited under the ownership of a …\n<code>MultiLocation</code> value too large to descend further.\n<code>MultiLocation</code> value ascend more parents than known …\nLock the locally held asset and prevent further transfer …\nSome other error with locking.\nThe maximal length any enqueued message may have.\nUsed by <code>Transact</code> to indicate that the given weight limit …\nA given number of members of the body.\nA needed argument is <code>None</code> when it should be <code>Some</code>.\nA named body.\nMore than the given proportion of members of the body.\nThe given pallet’s name is different to that expected.\nOrigin should just be the native dispatch origin …\nA global identifier of a data structure existing within …\nNo deal is possible under the given constraints.\nThe state was not in a condition where the operation was …\nA non-fungible asset. We record the instance identifier in …\nThe asset is not fungible.\nThe message and destination combination was not recognized …\nAn asset cannot be deposited, probably because (too much …\nUsed by <code>BuyExecution</code> when the Holding Register does not …\nAn asset cannot be withdrawn, potentially due to lack of …\nAsset (<code>asset</code>) has been locked on the <code>origin</code> system and may …\nNo response. Serves as a neutral default.\nContains the success value\nContains the success value\nThe unambiguous child.\nThe transport from where a message originates.\nBasically just the XCM (more general) version of …\nOutcome of an XCM execution.\nAn arithmetic overflow happened.\nMessage processing was not attempted because it was not …\nAddresses a specific overweight message.\nAn instanced, indexed pallet that forms a constituent part …\nThe provided pallet index was not found.\nThe index, instance name, pallet name and version of some …\nThe message originated from this parachain.\nUnique identifier of a parachain.\nAn indexed parachain belonging to and operated by the …\nA unit struct which can be converted into a <code>Location</code> of …\nA tuple struct which can be converted into a <code>Location</code> of …\nTakes an asset, uses it to pay for execution and puts the …\nZero-sized type used to mark things that “act like” …\nA pluralistic body existing within consensus.\nThe Polkadot mainnet Relay-chain.\nThe Polkadot Bulletin chain.\nCan process messages from a specific origin.\nErrors that can happen when attempting to process a …\nA message processor that delegates execution to an …\nAn identifier for a query.\nQuery the existence of a particular pallet type.\nRespond with information that the local system is …\nInformation regarding the composition of a query response.\n<code>MultiLocation</code> value failed to be reanchored.\nAsset(s) (<code>assets</code>) have been destroyed on the <code>origin</code> system …\nA mutable memory location with dynamically checked borrow …\nRefund any surplus weight previously bought with …\nThe block number type used by Polkadot. 32-bits will allow …\nImmediately report the contents of the Error Register to …\nReport to a given destination the contents of the Holding …\nSend a <code>QueryResponse</code> message containing the value of the …\nSend an <code>UnlockAsset</code> instruction to the <code>locker</code> for the …\nAsset(s) (<code>assets</code>) have been received into the ownership of …\nResponse data to a query.\nError result value when attempting to send an XCM message.\nResult value when attempting to send an XCM message.\nUtility for sending an XCM message to a given location.\nCan service queues and execute overweight messages.\nSet the Appendix Register. This is code that should be …\nSet the Error Handler Register. This is code that should …\nSets the Fees Mode Register.\nSet hints for XCM execution.\nSet the Topic Register.\nOne or more channel control signals; these should be …\nOrigin should just be the standard account-based origin …\nThe message could not be processed for reaching the stack …\nAsk the destination system to respond with the most recent …\nOrigin should be the super-user. For Cumulus/Frame chains, …\nThe unambiguous technical body (for Polkadot, this would …\nType alias for Externalities implementation used in tests.\nIntermediate value which connects the two phases of the …\nUsed by <code>BuyExecution</code> when the fees declared to purchase …\nToo many assets matched the given asset filter.\nApply the encoded transaction <code>call</code>, whose dispatch-origin …\nWithdraw asset(s) (<code>assets</code>) from the ownership of <code>origin</code> …\nWithdraw asset(s) (<code>assets</code>) from the ownership of <code>origin</code> …\nDestination is routable, but there is some issue with the …\nDestination is routable, but there is some issue with the …\nUsed by the <code>Trap</code> instruction to force an error …\nAlways throws an error of type <code>Trap</code>.\nThe unambiguous treasury body (for Polkadot, an opinion on …\nInbound upward message.\nIdentifies a UMP queue inside the <code>MessageQueue</code> pallet.\nThe universal location of the local consensus is improper.\nUndefined - used if the non-fungible asset class has only …\nXCM version not able to be handled.\nThe instruction is intentionally unsupported.\nThe only body in its context.\nSet the Origin Register to be some child of the Universal …\nUsed by <code>ClaimAsset</code> when the given claim could not be …\nNo weight limit imposed.\nRemove the lock over <code>asset</code> on this chain and (if nothing …\nA directive to indicate that the origin expects free …\nDestination is known to be unroutable. This is considered …\nDestination is known to be unroutable.\nCancel the effect of a previous <code>SubscribeVersion</code> …\nThe message format is unsupported (e.g. old XCM version).\nOrigin Register does not contain a value value for a …\nOrigin Register does not contain a value value for a …\nA double-ended queue implemented with a growable ring …\nAn XCM version.\nThe given pallet’s version has an incompatible version …\nA single XCM message, together with its version code.\nThe body’s declaration, under whatever means it decides.\nAn optional weight limit.\nExecution of the XCM would potentially result in a greater …\nMeters consumed weight and a hard limit for the maximal …\nThe weight of an XCM message is not computable ahead of …\nSpecify the filter as the given <code>WildAsset</code> wildcard.\nA wildcard representing a set of assets.\nClassification of whether an asset is fungible or not.\nWithdraw asset(s) (<code>assets</code>) from the ownership of <code>origin</code> …\nA relative path comprising 1 junction.\nA relative path comprising 1 junction.\nA relative path comprising 2 junctions.\nA relative path comprising 2 junctions.\nA relative path comprising 3 junctions.\nA relative path comprising 3 junctions.\nA relative path comprising 4 junctions.\nA relative path comprising 4 junctions.\nA relative path comprising 5 junctions.\nA relative path comprising 5 junctions.\nA relative path comprising 6 junctions.\nA relative path comprising 6 junctions.\nA relative path comprising 7 junctions.\nA relative path comprising 7 junctions.\nA relative path comprising 8 junctions.\nA relative path comprising 8 junctions.\nOrigin should be interpreted as an XCM native origin and …\nContextual data pertaining to a specific list of XCM …\nError codes used in XCM. The first errors codes have …\nThe XCM executor.\nA hash type for identifying messages.\nThe aggregate XCMP message format.\nSomething that should be called for each batch of messages …\nThe queue wants to give up its current processing slot.\nImplements the <code>TestExt</code> trait for a specified struct.\nStorage backend.\nConduct a 256-bit Blake2 hash.\nDeduct some <code>fees</code> to the sovereign account of the given …\nDeclares a test network that consists of a relay chain and …\nThe macro is implementing the <code>XcmMessageHandlerT</code> and …\nThe macro is implementing upward message passing(UMP) for …\nActually carry out the delivery operation for a previously …\nThe destination to which the query response message should …\nProcess all messages in the message buses\nEncodes the provided XCM message based on the <code>message_kind</code>.\nEnqueue a single <code>message</code> from a specific <code>origin</code>.\nEnqueue multiple <code>messages</code> from a specific <code>origin</code>.\nThe XCM error itself.\nExecute some code in the context of the test …\nExecute code in the context of the test externalities, …\nExtensions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe fungibility of the asset, which contains either the …\nReturn the current value.\nHandle some incoming DMP messages (note these are …\nHandle some incoming XCMP messages (note these are the big …\nThe overall asset identity (aka <em>class</em>, in the case of a …\nThe index of the intruction that caused the error.\nThe interior (i.e. non-parent) junctions that this <code>Location</code>…\nCalls <code>U::from(self)</code>.\nThe <code>max_weight</code> field of the <code>QueryResponse</code> message.\nThe identity of the XCM; this may be a hash of its …\nImplementation of a simple message queue. Used for sending …\nInitialize the test environment.\nThe current value of the Origin register of the <code>XCVM</code>.\nThe number of parent junctions at the beginning of this …\nIf it fails, returns the index of the problematic …\nProcess the given message, using no more than the …\nThe <code>query_id</code> field of the <code>QueryResponse</code> message.\nMutate <code>self</code> so that it represents the same location from …\nConsume <code>self</code> and return a new value representing the same …\nResets the state of the test environment.\nConvenience function for using a <code>SendXcm</code> implementation. …\nService all message queues in some fair manner.\nState version to use during tests.\nAny remaining unprocessed messages should happen only …\nThe current value of the Topic register of the <code>XCVM</code>.\nCheck whether the given <code>_message</code> is deliverable to the …\nConvenience function for using a <code>SendXcm</code> implementation. …\nThe EIP-155 chain ID.\nA test utility for tracking XCM topic IDs.\nAsserts that the given topic ID has been recorded for the …\nAsserts that the given topic ID has been recorded on all …\nAsserts that exactly one topic ID is recorded on the given …\nAsserts that exactly one unique topic ID is present across …\nDerives a topic ID for an XCM in tests.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInserts a topic ID with the given chain name in the captor.\nInserts all topic IDs associated with the given chain name.\nInserts a topic ID for a given chain and then asserts …\nCalls <code>U::from(self)</code>.\nInitialises a new, empty topic ID tracker.\nBad XCM format used.\nBad XCM version used.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nDownward message executed with the given outcome.\nSome XCM failed.\nDownward message is invalid XCM.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nStorage type is <code>StorageValue</code> with value type <code>ParaId</code>.\nA queue of received DMP messages\nSome XCM was executed OK.\nDownward message is unsupported version of XCM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nBad XCM format used.\nBad XCM version used.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nDownward message executed with the given outcome.\nSome XCM failed.\nDownward message is invalid XCM.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nStorage type is <code>StorageValue</code> with value type <code>ParaId</code>.\nA queue of received DMP messages\nSome XCM was executed OK.\nDownward message is unsupported version of XCM.\n@dev Interface of the ERC-20 standard as defined in the …\n@dev Emitted when the allowance of a <code>spender</code> for an <code>owner</code> …\nContainer for all the <code>IERC20</code> function calls.\nContainer for all the <code>IERC20</code> events.\nAll the selectors of this enum.\nAll the selectors of this enum.\n@dev Emitted when <code>value</code> tokens are moved from one account (…\n@dev Returns the remaining number of tokens that <code>spender</code> …\n@dev Returns the remaining number of tokens that <code>spender</code> …\n@dev Sets a <code>value</code> amount of tokens as the allowance of …\n@dev Sets a <code>value</code> amount of tokens as the allowance of …\n@dev Returns the value of tokens owned by <code>account</code>. …\n@dev Returns the value of tokens owned by <code>account</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n@dev Returns the value of tokens in existence. Function …\n@dev Returns the value of tokens in existence. Container …\n@dev Moves a <code>value</code> amount of tokens from the caller’s …\n@dev Moves a <code>value</code> amount of tokens from <code>from</code> to <code>to</code> using …\n@dev Moves a <code>value</code> amount of tokens from <code>from</code> to <code>to</code> using …\n@dev Moves a <code>value</code> amount of tokens from the caller’s …\nThe tree has changed, optionally return the value …\nError thrown by user when checking for node ancestry.\nAdding duplicate node to tree.\nError occurred when iterating with the tree.\nFiltering action.\nResult of finalizing a node (that could be a part of the …\nA tree data structure that stores several nodes across …\nMaintain the node.\nMaintain the node and its subtree.\nRemove the node and its subtree.\nImported or finalized node that is an ancestor of …\nThe tree has not changed.\nFinalizing descendent of tree node without finalizing …\nRemove from the tree some nodes (and their subtrees) using …\nFinalize a node in the tree. This method will make sure …\nFinalize a root in the tree and return it, return <code>None</code> in …\nFinalize a node in the tree and all its ancestors. The …\nFinalize a root in the tree by either finalizing the node …\nChecks if any node in the tree is finalized by either …\nSame as <code>find_node_where</code>, but returns indices.\nFind a node in the tree that is the deepest ancestor of …\nSame as <code>find_node_where</code>, but returns mutable reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nImport a new node into the tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates the nodes in the tree in pre-order.\nMap fork tree into values of new types.\nCreate a new empty tree instance.\nPrune the tree, removing all non-canonical nodes.\nRebalance the tree.\nIterates over the existing roots in the tree.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nA set of benchmarks which can establish a global baseline …\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nGet the benchmark metadata available for this runtime.\nGet the benchmark metadata available for this runtime.\nGet the benchmark metadata available for this runtime.\nGet the benchmark metadata available for this runtime.\nGet the benchmarks available for this pallet. Generally …\nConstruct pallet benchmarks for weighing dispatchables.\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nDispatch the given benchmark.\nDispatch the given benchmark.\nDispatch the given benchmark.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nNumber of times to repeat benchmark within the Wasm …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nStart the benchmark.\nStart the benchmark.\nStart the benchmark.\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nSame as <code>instance</code> but passing a closure to run before the …\nSame as <code>instance</code> but passing a closure to run before the …\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nSame as <code>instance</code> but passing a no-op recording for unit …\nSame as <code>instance</code> but passing a no-op recording for unit …\nSame as <code>instance</code> but passing a no-op recording for unit …\nMacros for benchmarking a FRAME runtime.\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nGet the benchmark metadata available for this runtime.\nGet the benchmarks available for this pallet. Generally …\nConstruct pallet benchmarks for weighing dispatchables.\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nNumber of times to repeat benchmark within the Wasm …\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nContains macros, structs, and traits associated with v2 of …\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUsed by the new benchmarking code to specify that a …\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nTrait that must be implemented by all structs that can be …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nAsserts that the type implements <em>all</em> of the given traits.\nAsserts that <em>all</em> types in a list are equal to each other.\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nAn attribute macro used to declare a benchmark within a …\nGet the benchmark metadata available for this runtime.\nGet the benchmarks available for this pallet. Generally …\nAn attribute macro that can be attached to a (non-empty) …\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nAn attribute macro used to specify that a block should be …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nRepresents the (inclusive) ending number of this <code>ParamRange</code>…\nAn attribute macro used to specify the extrinsic call …\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nAn attribute macro that can be attached to a (non-empty) …\nNumber of times to repeat benchmark within the Wasm …\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nRepresents the (inclusive) starting number of this …\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nThe base path that is used for everything that needs to be …\nThe root <code>benchmarking</code> command.\nBenchmark the execution time of historic blocks.\nRemark builder that can be used to build simple extrinsics …\nUsed by the benchmark to build signed extrinsics.\nBenchmark the execution time of different extrinsics.\nHelper to manage <code>ExtrinsicBuilder</code> instances.\nCommand to benchmark the hardware.\nTypical block type using <code>OpaqueExtrinsic</code>.\nBenchmark the execution overhead per-block and …\nBenchmark the extrinsic weight of FRAME Pallets.\nThe hardware requirements as measured on reference …\nBenchmark the storage speed of a chain snapshot.\nAdjust the PoV estimation by adding additional trie layers …\nRun benchmarks for all pallets and extrinsics.\nDo not return an error if any check fails.\nDo not fail if there are unknown but also unused host …\nBuilds an extrinsic.\nReturns the configuration directory inside this base path.\nLimit the memory the database cache can use.\nThe PoV estimation mode of a benchmark if no <code>pov_mode</code> …\nTime limit for each disk benchmark.\nEnable the Trie cache.\nComma separated list of <code>pallet::extrinsic</code> combinations …\nComma separated list of pallets that should be excluded …\nDEPRECATED: This argument has no effect.\nSelect how many repetitions of this benchmark should run …\nDisplay and run extra benchmarks that would otherwise not …\nName of the extrinsic this builder is for.\nSelect an extrinsic inside the pallet to benchmark, or <code>*</code> …\nThe accompanying extrinsics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreate a base path from values describing the project.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHow to construct the genesis state.\nThe preset that we expect to find in the GenesisBuilder …\nTime limit for the hash function benchmark.\nThe block header.\nAdd a header file to your outputted benchmarks.\nSet the heap pages while running benchmarks. If not set, …\nIndicates highest values for each of the component ranges.\nIgnore the error when PoV modes reference unknown storage …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite the raw results in JSON format into the given file.\nA path to a <code>.json</code> file with existing benchmark results …\nPrint the raw results in JSON format.\nList and print available benchmarks in a csv-friendly …\nIndicates lowest values for each of the component ranges.\nTime limit for the memory benchmark.\nName of this builder in CSV format: <code>pallet, extrinsic</code>.\nConstructs a new remark builder.\nCreate a <code>BasePath</code> instance based on an existing path on …\nInitializes a new remark builder from a client.\nCreate a <code>BasePath</code> instance using a temporary directory …\nDon’t include csv header when listing benchmarks.\nDon’t print the median-slopes linear regression analysis.\nDon’t print the min-squares linear regression analysis.\nIf enabled, the storage info is not displayed in the …\nDisable verification logic when running benchmarks.\nOutput the benchmarks to a Rust file at the given path.\nWhich analysis function to use when outputting benchmarks:\nWhich analysis function to use when analyzing measured …\nName of the pallet this builder is for.\nSelect a FRAME Pallets to benchmark, or <code>*</code> for all (in …\nRetrieve the base path.\nSelect how many repetitions of this benchmark should run …\nBenchmark the execution time of historic blocks and …\nBenchmark the execution time of a specific type of …\nExecute the benchmark and print the results.\nMeasure the per-block and per-extrinsic execution overhead.\nCalls into the Read and Write benchmarking functions. …\nRun the overhead benchmark with the default extrinsic …\nRun the benchmark overhead command.\nRun the benchmark overhead command.\nRuns the pallet benchmarking command.\nOptional runtime blob to use instead of the one from the …\nSet the runtime log level.\nSelect how many samples we should take across the variable …\nPath to Handlebars template file used for outputting …\nSet a fault tolerance for passing a requirement.\nReturns a builder for a pallet and extrinsic name.\nAllow overwriting a single file with multiple results.\nTime limit for the verification benchmark.\nMethod for executing Wasm runtime code.\nThe WASM instantiation method to use.\nThe assumed default maximum size of any <code>StorageMap</code>.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>emit_event</code>.\nCreate a call with the variant <code>noop</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Event</code> enum of this pallet\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nGenerates a struct to store the election result in a …\nThe accuracy of this type.\nThe account identifier type.\nThe account ID identifier;\nThe account identifier type of this solver.\nThe weight/accuracy type of each vote.\nThe accuracy of this solver. This will affect the accuracy …\nAn error occurred in some arithmetic operation.\nA voter’s stake assignment among a set of targets, …\nUtility struct to group parameters for the balancing …\nThe block number type.\nThe block number type.\nA bounded vector of supports. Bounded equivalent to …\nA bounded vector of <code>BoundedSupport</code>.\nSame as <code>BoundedSupports</code> but parameterized by an …\nA bounded vector.\nSome bounds were exceeded when converting election types.\nThe data provider of the election.\nData bounds for election data.\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> for struct and enum.\nMarker trait used for identifying types that call the …\nDerive <code>parity_scale_codec::DecodeWithMemTracking</code> for …\nderive <code>Default</code> but do no bound any generic. Docs are at …\nA duplicate target was detected.\nA duplicate voter was detected.\nSomething that can provide the data to an <code>ElectionProvider</code>.\nSomething that can compute the result of an election and …\nFinal result of the election.\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nThe errors that might occur in this crate and …\nThe error type returned by the provider;\nThe list’s error type.\nThe error type of this implementation.\nA type in which performing operations on vote weights are …\nA trait for querying a single value from a type.\nan aggregator trait for a generic type of a voter/target …\nThe <code>IndexAssignment</code> type is an intermediate between the …\nA type alias for <code>IndexAssignment</code> made from <code>NposSolution</code>.\nThe data type used to build this per-thingy.\nA (almost) marker trait that signifies an election …\nThe data provided to create support map was invalid.\nThe maximum number of votes that are allowed.\nThe maximum number of backers that a single page may have …\nSame as <code>Self::MaxBackersPerWinner</code>, but across all pages.\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nMaximum number of votes per voter that this data provider …\nThe maximum number of winners per page in results returned …\nAn election provider that does nothing whatsoever.\nAn opaque index-based, NPoS solution type.\nSomething that can compute the result to an NPoS solution.\nA page index for the multi-block elections pagination.\nThe number of pages that this election provider supports.\nSomething that implements a fixed point ration with an …\nAggregator trait for a PerThing that can be multiplied by …\nA wrapper for <code>sp_npos_elections::phragmms()</code> that …\nA quick and dirty solver, that produces a valid but …\nThe type used by the list to compare nodes for ordering.\nSomething that can provide the <code>Score</code> of an account. …\nA wrapper for <code>sp_npos_elections::seq_phragmen</code> that …\nOne of the index functions returned none.\nOne of the page indices was invalid.\nThe solution type has a voter who’s number of targets is …\nWhile going from solution indices to ratio, the weight of …\nA utility trait for something to implement …\nA structure to demonstrate the election result from the …\nA target-major representation of the the election outcome.\nThe target type. Needs to be an index (convert to usize).\nThe number of voters is bigger than the <code>MaxVoters</code> bound.\nTry and build yourself from another <code>BoundedSupports</code> with a …\nHelper trait for conversion of a vector of unbounded …\nA data type larger than <code>Self::Inner</code>, used to avoid …\nA type which is used in the API of this crate as a numeric …\nA voter, at the level of abstraction of this crate.\nThe voter type. Needs to be an index (convert to usize).\nSame as <code>Voter</code>, but parameterized by an <code>ElectionDataProvider</code>…\nWeight functions needed for …\nUtility function only to be used in benchmarking …\nUtility function only to be used in benchmarking …\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nSignal the election provider that we are about to call …\nIndividual assignments. for each tuple, the first elements …\nGet the average edge count.\nGet the average edge count.\nGet the average edge count.\nGet the bound of the type in <code>usize</code>.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nTypes and helpers to define and handle election bounds.\nClear all voters and targets.\nExactly the same semantics as <code>Vec::clear</code>.\nReturn true if the list already contains <code>id</code>.\nMake this solution corrupt. This should set the index of a …\nThe current count of ids in the list.\nReturns true if <code>given_count</code> exhausts <code>self.count</code>.\nTypes that are used by the data provider trait.\nAttempt to deserialise the value from input.\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nConsume self and return the number of parts per thing.\nThe number of targets to elect.\nchecked call to <code>Self::DataProvider::desired_targets()</code> …\nThe distribution of the voter’s stake among winning …\nThe distribution of the voter’s stake.\nThe distribution of the voter’s stake among winning …\nExact same semantics as <code>Vec::drain</code>.\nReturn the duration of your election.\nReturn the duration of your election, including the export.\nGet the total count of edges.\nElect a new set of winners.\nReturns the possible targets for the election associated …\nA state-less version of <code>Self::electable_targets</code>.\nAll the voters that participate in the election associated …\nA state-less version of <code>Self::electing_voters</code>.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to an owned vector.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nCalculates the encoded size.\nReturns true if <code>given_size</code> or <code>given_count</code> exhausts …\nInstruct the data provider to fetch a page of the solution.\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild self from a list of assignments.\nConverts a fraction into <code>Self</code>.\nSame as <code>Self::from_float</code>.\nSame as <code>Self::from_float</code>.\nSame as <code>Self::from_float</code>.\nSame as <code>Self::from_float</code>.\nSame as <code>Self::from_float</code>.\nSame as <code>Self::from_float</code>.\nSame as <code>Self::from_float</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nBuild this type from a percent. Equivalent to …\nBuild this type from a percent. Equivalent to …\nBuild this type from a percent. Equivalent to …\nBuild this type from a percent. Equivalent to …\nBuild this type from a percent. Equivalent to …\nBuild this type from a percent. Equivalent to …\nBuild this type from a percent. Equivalent to …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nSame as <code>Self::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a struct to store the election result in a …\nReturn the current value.\nExactly the same semantics as <code>slice::get_mut</code>.\nGet the score of <code>id</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert self into a <code>Vec&lt;Assignment&lt;A, Self::Accuracy&gt;&gt;</code>\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nConvert from a ratio assignment into one with absolute …\nReturns true if this collection is full.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is one.\nReturn <code>true</code> if this is nothing.\nReturn <code>true</code> if this is nothing.\nReturn <code>true</code> if this is nothing.\nReturn <code>true</code> if this is nothing.\nReturn <code>true</code> if this is nothing.\nReturn <code>true</code> if this is nothing.\nReturn <code>true</code> if this is nothing.\nAn iterator over the list, which can have <code>take</code> called on …\nReturns an iterator over the list, starting right after …\nExactly the same semantics as <code>slice::iter_mut</code>.\nExactly the same semantics as <code>slice::last_mut</code>.\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nLock the list.\nThe index of the <em>least</em> significant page that this election …\nReturns an instance of <code>Self</code> that is constructed by capping …\nUpper bound, in bytes, of the maximum encoded size of this …\nThe index of the <em>most</em> significant page that this election …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds the result up to a whole …\nMultiplication that always rounds down to a whole number. …\nMultiplication that always rounds down to a whole number. …\nMultiplication that always rounds down to a whole number. …\nMultiplication that always rounds down to a whole number. …\nMultiplication that always rounds down to a whole number. …\nMultiplication that always rounds down to a whole number. …\nMultiplication that always rounds down to a whole number. …\nCreate <code>Self</code> with no items.\nProvide a best effort prediction about when the next …\nSame as <code>on_update</code>, but incorporate some decreased score.\nSame as <code>on_update</code>, but incorporate some increased score.\nHook for inserting a new id.\nHook for removing am id from the list.\nHook for updating a single id.\nAn implementation of <code>ElectionProvider</code> that uses an …\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nExactly the same semantics as <code>Vec::pop</code>.\nUtility function only to be used in benchmarking …\nA typical range for this list.\nExactly the same semantics as <code>Vec::remove</code>.\nRemove a certain voter.\nRemove the least staked voter.\nExactly the same semantics as <code>Vec::retain</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nGet the current <code>Score</code> of <code>who</code>, <code>None</code> if <code>who</code> is not present.\nCompute the score of this solution type.\nCompute the score of this solution type.\nCompute the score of this solution type.\nIf <code>who</code> changes by the returned amount they are guaranteed …\nForce set the desired targets in the snapshot.\nFor tests, benchmarks and fuzzing, set the <code>score</code>.\nReturns true if <code>given_size</code> exhausts <code>self.size</code>.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nEnsures the given encode-able slice meets both the length …\nMove the position of an item from one location to another …\nSolve an NPoS solution with the given <code>voters</code>, <code>targets</code>, and …\nSort self by the means of the given function.\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nTry and construct a <code>BoundedSupport</code> from an unbounded …\nTry and construct a <code>BoundedSupports</code> from an unbounded …\nReturn the product of multiplication of this value by …\nReturn the product of multiplication of this value by …\nReturn the product of multiplication of this value by …\nReturn the product of multiplication of this value by …\nReturn the product of multiplication of this value by …\nReturn the product of multiplication of this value by …\nReturn the product of multiplication of this value by …\nSignal that the election should start\nIndicate whether this election provider is currently …\nExactly the same semantics as <code>slice::swap_remove</code>.\nTotal support.\nTotal support.\nTraits for the election operations.\nExactly the same semantics as <code>Vec::truncate</code>.\nConsume and truncate the vector <code>v</code> in order to create a new …\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next lower value to <code>self</code> or an error with the …\nReturn the next lower value to <code>self</code> or an error with the …\nConsumes self and mutates self via the given <code>mutate</code> …\nTry and normalize this assignment.\nReturn the next higher value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nReturn the next higher value to <code>self</code> or an error with the …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as [<code>Vec::rotate_left</code>], but …\nExactly the same semantics as [<code>Vec::rotate_right</code>], but …\nCheck internal state of the list. Only meant for debugging.\nGet the number of unique targets in the whole struct.\nUnlock the list. This will nullify the effects of …\nRemove all items from the list.\nRegenerate this list from scratch. Returns the count of …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nGet the length of all the voters that this type is …\nSupport from voters.\nSupport from voters.\nMeasure the weight used in the calculation of the solver.\nAutogenerated weights for …\nIndex of the voter among the voters list.\nVoter’s identifier.\nIndex of the voter among the voters list.\nJust winners zipped with their approval stake. Note that …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nEquivalent to <code>Self::from_parts(0)</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nEquivalent to <code>Self::from_parts(0)</code>.\nCount type for data provider bounds.\nData bounds for election data.\nThe voter and target bounds of an election.\nUtility builder for <code>ElectionBounds</code>.\nSize type for data provider bounds.\nReturns an instance of <code>ElectionBounds</code> from the current …\nReturns an error if the provided <code>count</code> and <code>size</code> do not fit …\nReturns an error if the provided <code>count</code> and <code>size</code> do not fit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the targets bounds.\nSets the targets count bounds.\nCaps the number of the target bounds in self to <code>voters</code> …\nSets the targets size bounds.\nSet the voters bounds.\nSets the voters count bounds.\nCaps the number of the voters bounds in self to <code>voters</code> …\nSets the voters size bounds.\nContains the error value\nContains the success value\nAlias for the result type of the election data provider.\nElections bounds, to use when calling into …\nConfiguration trait for an onchain election execution.\nErrors from the data provider.\nSomething that provides the data for election.\nErrors of the on-chain election.\nResults failed to meet the bounds.\nMaximum number of backers allowed per target.\nMaximum number of winners in an election.\nAn internal error in the NPoS elections crate.\nA simple on-chain implementation of the election provider …\n<code>NposSolver</code> that should be used, an example would be …\nWhether to try and sort or not.\nNeeded for weight registration.\nWeight information for extrinsics in this pallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe weight/accuracy type of each vote.\nThe maximum number of votes that are allowed.\nAn opaque index-based, NPoS solution type.\nThe target type. Needs to be an index (convert to usize).\nThe voter type. Needs to be an index (convert to usize).\nGet the average edge count.\nMake this solution corrupt. This should set the index of a …\nGet the total count of edges.\nBuild self from a list of assignments.\nConvert self into a <code>Vec&lt;Assignment&lt;A, Self::Accuracy&gt;&gt;</code>\nRemove a certain voter.\nRemove the least staked voter.\nCompute the score of this solution type.\nSort self by the means of the given function.\nGet the number of unique targets in the whole struct.\nGet the length of all the voters that this type is …\nWeights for pallet_election_provider_support_benchmarking …\nWeight functions needed for …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMain entry point for certain runtime actions as e.g. …\nExtension trait for <code>OnInitialize</code>.\nApply extrinsic outside of the block execution function.\nActually execute all transitions for <code>block</code>.\nExecute all <code>OnRuntimeUpgrade</code> of this runtime, and return …\nFinalize the block - it is up the caller to ensure that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nLogic that runs directly after inherent application.\nStart the execution of a particular block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart an offchain worker and generate extrinsics.\nThe actual logic that calls <code>on_initialize</code> and registers …\nExecute given block, but don’t as strict is the normal …\nExecute all Migrations of this runtime.\nCheck a given signed transaction for validity. This doesn…\nExtension for optionally verifying the metadata hash.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates new <code>TransactionExtension</code> to check metadata hash.\nCreate an instance that uses the given <code>metadata_hash</code>.\nBuilder for remote-externalities.\nThe execution mode.\nOffline. Uses a state snapshot file and needs not any …\nConfiguration of the offline execution.\nPrefer using a snapshot file if it exists, else use a …\nOnline. Potentially writes to a snapshot file.\nConfiguration of the online execution.\nUse HTTP connection.\nAn externalities that acts exactly the same as …\nConfiguration of the state snapshot.\nDescription of the transport protocol (for online …\nUse the <code>URI</code> to open a new WebSocket connection.\nThe block hash at which to get the runtime state. Will be …\nBlacklist this hashed key from the final externalities. …\nLookout for child-keys, and scrape them as well if set to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage entry keys to be injected into the externalities. …\nStorage entry key prefixes to be injected into the …\nThe block header which we created this externality env.\nInject a manual list of key and values to the storage.\nThe inner externalities.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure a state snapshot to be used.\nCreate a new builder.\nThe state version to use.\nThe pallets to scrape. These values are hashed and added …\nThe path to the snapshot file.\nThe configuration of the state snapshot file to use. It …\nAn optional state snapshot file to WRITE to, not for …\nTransport config.\nHash storage keys with blake2 128\nHash storage keys with <code>concat(blake2_128(key), key)</code>\nHash storage keys with blake2 256\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nSerializable version of pallet dispatchable.\nDerive [<code>Clone</code>] but do not bound any generic.\nConsensus engine unique ID.\nDerive [<code>Debug</code>] but do not bound any generics.\nderive <code>Default</code> but do no bound any generic. Docs are at …\nA <strong>data structure</strong> that can be deserialized from any data …\nDeriveEq but do no bound any generic.\nThe type that iterates over all <code>(key1, key2)</code>.\nStore the key directly.\nA strongly-typed double map in storage whose secondary …\nA strongly-typed map in storage whose keys and values can …\nA strongly-typed map with arbitrary number of keys in …\nThe type that iterates over all <code>(key, value)</code>.\nThe type that iterates over all <code>(key1, key2, value)</code>.\nThe type that iterates over all …\nThe type that iterates over all <code>key</code>s.\nThe type that iterates over all …\nA unified log target for support operations.\nMaximum nesting level for extrinsics.\nThe number of bytes of the module-specific <code>error</code> field …\nA type that cannot be instantiated.\nDerive [<code>Ord</code>] but do no bound any generic. Docs are at …\nA pallet identifier. These are per pallet and should be …\nA type that can be used as a parameter in a dispatchable …\nDerive [<code>PartialEq</code>] but do not bound any generic.\nThe type that iterates over all <code>key2</code>.\nDerive [<code>PartialOrd</code>] but do not bound any generic. Docs are …\nThe type that iterates over all <code>(key2, value)</code>.\nTrait for things which can be printed from the runtime.\nThe type that get/take return.\nThe type that get/take return.\nThe type that get/take returns.\nThe type that get/take returns.\nHasher to use to hash keys to insert to storage.\nDerive [<code>Debug</code>], if <code>std</code> is enabled it uses …\nA <strong>data structure</strong> that can be serialized into any data …\nAn implementation of a map with a two keys.\nHasher to use to hash keys to insert to storage.\nA strongly-typed map in storage.\nAn implementation of a map with an arbitrary number of …\nAsserts that no storage changes took place between con- …\nTrait for maps that store all its value after a unique …\nA trait for working with macro-generated storage values …\nHash storage keys with twox 128\nHash storage keys with twox 256\nHash storage keys with <code>concat(twox64(key), key)</code>\nA weakly bounded vector.\nInternal macro used by <code>frame_support</code> to create …\nInternal macro use by frame_support to generate dummy part …\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAssert an expression returns an error specified.\nAssert an expression returns an error specified.\nAssert an expression returns error with the given weight.\nAssert that the maximum encoding size does not exceed the …\nEvaluate an expression, assert it returns an expected <code>Err</code> …\nPanic if an expression doesn’t evaluate to <code>Ok</code>.\nEvaluate any expression and assert that runtime storage …\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nCreates a JSON patch for given <code>struct_type</code>, supporting …\nClears the map, removing all elements.\nClears the set, removing all elements.\nAttempt to remove all items from the map.\nRemove all values under the first key <code>k1</code> in the overlay …\nAttempt to remove items from the map matching a <code>partial_key</code>…\nConstruct a runtime, with the given name and the given …\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes any value under the first key <code>k1</code> (explicitly) exist …\nDoes any value under a <code>partial_key</code> prefix (explicitly) …\nMacro used internally in FRAME to generate the crate …\nUtilities for dealing with crypto primitives. Sometimes we …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nGeneric function to mark an execution path as ONLY …\nTrigger a defensive failure if a condition is not met.\nThis attribute can be used to derive a full implementation …\nDeserialize this value from the given Serde deserializer.\nDispatch system. Contains a macro for defining runtime …\nProvides functions to interact with the dispatch context.\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map with first key <code>k1</code> and …\nRemove all elements from the map with prefix key <code>kp</code> and …\nExperimental macros for defining dynamic params that can …\nEvaluate <code>$x:expr</code> and if not true return <code>Err($y:expr)</code>.\nDoes the value (explicitly) exist in storage?\nReturn Err of the expression: <code>return Err($expression);</code>.\nFinal full prefix that prefixes all keys.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>StorageNoopGuard</code> with a custom error message.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHelper for generating the <code>RuntimeGenesisConfig</code> instance …\nHelper for implementing GenesisBuilder runtime API Helper …\nLoad the value from the provided storage instance.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the …\nLoad the value associated with the given key from the map.\nReturn a mutable reference to the value corresponding to …\nExactly the same semantics as <code>slice::get_mut</code>.\nGet the storage key.\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nDo something hypothetically by rolling back any changes …\nAssert something to be <em>hypothetically</em> <code>Ok</code>, without actually …\nSimple macro to explicitly implement EnsureOriginWithArg …\nPuts the <code>impl_for_tuples</code> attribute above the given code.\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given key from the …\nSome instance placeholder to be used in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeMap</code>.\nConsume self, and return the inner <code>BTreeSet</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturns true if this map is full.\nReturns true if this set is full.\nReturns true if this collection is full.\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all keys in the map in lexicographical order of …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map in lexicographical …\nEnumerate all keys in the map in lexicographical order of …\nEnumerate all keys in the map after a specified …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map after a specified …\nEnumerate all keys in the map after <code>starting_raw_key</code> in …\nGets a mutable iterator over the entries of the map, …\nEnumerate all elements in the map with first key <code>k1</code> in …\nEnumerate all elements in the map with prefix key <code>kp</code> in …\nEnumerate all elements in the map with first key <code>k1</code> after …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nIterate over values that share the first key.\nIterate over values that share the partial prefix key.\nIter over all value of the storage.\nClear the storage value.\nConsume the map, applying <code>f</code> to each of it’s values and …\nMacro that inserts some tokens after the first match of …\nCreate a type which implements the <code>Contains</code> trait for a …\nCreate a type which implements the <code>Contains</code> trait for a …\nThe max length of the final hash, for the given key type.\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from a <code>blake2_256</code> …\nMigrate an item with the given <code>key1</code> and <code>key2</code> from defunct …\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nMutate the value\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value under a key.\nMutate the value. Deletes the item if mutated to a <code>None</code>.\nMutate the value under a key.\nMutate the value under the given keys. Deletes the item if …\nMutate the value under a key.\nMutate the value under a key if the value already exists. …\nCreate a new <code>BoundedBTreeMap</code>.\nCreate a new <code>BoundedBTreeSet</code>.\nAlias to <code>default()</code>.\nMacro for easily creating a new implementation of both the …\nDocumentation for this macro can be found at …\nContains macro stubs for all of the <code>pallet::</code> macros\nPallet prefix. Used for generating final key.\nPrelude to be used alongside pallet macro, for ease of use.\nCreate new implementations of the <code>Get</code> trait.\nPrint something that implements <code>Printable</code> from the runtime.\nPrint the object.\nStore a value under this key into the provided storage …\nAttach this attribute to an impl statement that you want …\nRemove the value under a key.\nRemove the value under the given keys.\nRemove the value under a key.\nRemove a key from the map, returning the value at the key …\nRemove an item from the set, returning whether it was …\nExactly the same semantics as <code>Vec::remove</code>.\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove a key from the map, returning the value at the key …\nRemove all values under the first key <code>k1</code> in the overlay …\nRemove all values starting with <code>partial_key</code> in the overlay …\nDocumentation for this macro can be found at …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nSplit the hash part out of the input.\nConstruct a runtime, with the given name and the given …\nPrint out a formatted message.\nSerialize this value into the given Serde serializer.\nStore a value under this key into the provided storage …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nSets a custom error message for a <code>StorageNoopGuard</code>.\nDocumentation for this macro can be found at …\nStorage prefix. Used for generating final key.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nSwap the values of two keys.\nExactly the same semantics as <code>Vec::swap_remove</code>.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nRemoves and returns the value in the set, if any, that is …\nPrelude to be used for pallet testing, for ease of use.\nExecute the annotated function in a new storage …\nTranslate a value from some previous type (<code>O</code>) to the …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the next entry following <code>previous_key</code> by a …\nTranslate the values of all elements by a function <code>f</code>, in …\nTry to get the underlying value from the provided storage …\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the double map.\nTry to get the value for the given key from the map.\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nExactly the same semantics as <code>BTreeSet::insert</code>, but …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsume the map, applying <code>f</code> to each of it’s values as …\nMutate the value if closure returns <code>Ok</code>\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the item, only if an <code>Ok</code> value is returned.\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nMutate the value if closure returns <code>Ok</code>. Deletes the item …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nTraits for querying pallet view functions.\nRe-exports <code>sp-weights</code> public API, and contains benchmarked …\nSimple ECDSA secp256k1 API.\nExtension trait for <code>Public</code> to be used from inside the …\nReturns Ethereum address calculated from this ECDSA public …\nIt is signed by nobody, the extrinsic is authorized by the …\nSerializable version of pallet dispatchable.\nMeans to checks if the dispatchable is feeless.\nMeans of classifying a dispatchable function.\nA generalized group of dispatch types.\nThe error type contained in a <code>DispatchResultWithPostInfo</code>.\nA bundle of static information collected from the …\nUn-augmented version of <code>DispatchResultWithPostInfo</code> that …\nThe return type of a <code>Dispatchable</code> in frame. When returned …\nContains the error value\nContains the error value\nA <code>Dispatchable</code> function (aka transaction) that can carry …\nThe iterator type.\nA mandatory dispatch. These kinds of dispatch are always …\nTransactor will NOT pay related fees.\nIt is signed by nobody, can be either:\nA normal dispatch.\nContains the success value\nContains the success value\nA trait that represents one or many values of given type.\nAn operational dispatch.\nThe Origin type of the runtime.\nA type that can be used as a parameter in a dispatchable …\nExplicit enum to denote if a transaction pays fee or not.\nIndicates if dispatch function should pay fees or not.\nA struct holding value for each <code>DispatchClass</code>.\nWeight information that is only available post dispatch. …\nOrigin for the System pallet.\nThe system itself ordained this dispatch to happen: this …\nIt is signed by some public key and we provide the …\nMeans of weighing some particular kind of data (<code>T</code>).\nAllows easy conversion from <code>DispatchError</code> to …\nTransactor will pay related fees.\nIncrease the weight of the given class. Saturates at the …\nActual weight consumed by a call or <code>None</code> which stands for …\nAdd some weight to the given class. Saturates at the …\nCalculate how much weight was actually spent by the …\nCalculate how much (if any) weight was not used by the …\nWeight of this transaction’s call.\nTry to increase the weight of the given class. Saturates …\nClass of this transaction.\nClassify the dispatch function based on input data <code>target</code> …\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nWeight of this transaction’s extension.\nExtract the actual pays_fee from a dispatch result if any …\nExtract the actual weight from a dispatch result if any or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet current value for given class.\nReturn a <code>DispatchInfo</code>, containing relevant information of …\nGet a mutable reference to current value of given class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this item into an iterator.\nChecks if the dispatchable satisfies the feeless condition …\nCreate new <code>PerDispatchClass</code> with the same value for every …\nDetermine if user should actually pay fees at the end of …\nDoes this transaction pay fees.\nWhether this transaction should pay fees when all is said …\nAdditional information about the <code>Dispatchable</code> which is …\nReduce the weight of the given class. Saturates at the …\nSet the value of given class.\nReturns the total weight consumed by all extrinsics in the …\nWeigh the data <code>T</code> given by <code>target</code>. When implementing this …\nCall this on your modules custom errors type in order to …\nAbstraction over some optional value <code>T</code> that is stored in …\nClear the internal value.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the value as reference.\nGet the value as mutable reference.\nCalls <code>U::from(self)</code>.\nReturns a mutable reference to the value.\nRun the given closure <code>run</code> in a dispatch context.\nSet to the given value.\nRuns the given <code>callback</code> in the dispatch context and gives …\nDefine a module inside a <code>dynamic_params</code> module that …\nMark a module that contains dynamic parameters.\nAn error type that indicates that the origin is invalid.\nAn error that indicates that a lookup failed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe field was fully initialized (e.g., using <code>new()</code> or …\nThis struct provides information about how the struct …\nRepresents the initialization method of a field within a …\nThe field was partially initialized (e.g., specific fields …\nInjects a prefix to the field name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates new full field instiance.\nReturns a name of the field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new partial field instiance.\nRecursively removes keys from provided <code>json_value</code> object, …\nBuild <code>GenesisConfig</code> from a JSON blob not using any …\nGet the default <code>GenesisConfig</code> as a JSON blob if <code>name</code> is …\nThe call type of the pallet.\nThe result of checking inherents.\nThe error returned by <code>check_inherent</code>.\nThe inherent identifier used by this inherent.\nInherent data to include in a block.\nAn identifier for an inherent.\nDid we encounter a fatal error while checking an inherent?\nAuxiliary to make any given error resolve to …\nA pallet that provides or verifies an inherent extrinsic …\nCheck whether the given inherent is valid. Checking the …\nCheck whether the given inherent is valid. Checking the …\nCheck whether the given inherent is valid. Checking the …\nCheck whether the given inherent is valid. Checking the …\nCheck whether the given inherent is valid. Checking the …\nCheck whether the given inherent is valid. Checking the …\nCreate an inherent out of the given <code>InherentData</code>.\nIs this a fatal error?\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet an error out of the result.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an iterator over all contained errors.\nIs this a fatal error?\nReturn whether the call is an inherent call.\nDetermines whether this inherent is required in this block.\nDetermines whether this inherent is required in this block.\nDetermines whether this inherent is required in this block.\nDetermines whether this inherent is required in this block.\nDetermines whether this inherent is required in this block.\nDetermines whether this inherent is required in this block.\nCreate a new instance.\nIs this result ok?\nPut an error into the result.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nCan be applied to any item. Doing so will make the tokens …\nCreates an attribute proc macro that is an alias for …\nLike <code>#[export_tokens]</code> but does not emit the tokens of the …\n“Forwards” the tokens of the specified exported item …\nAllows you to import the tokens of an external item marked …\nCan be attached to an attribute proc macro function, …\nAn attribute macro that can be attached to a proc macro …\nContains the internal code behind the <code>macro_magic</code> macros …\nDeprecated: No-op\nDeprecated: No-op\nTo be used in tandem with <code>#[import_tokens_attr]</code>\nUsed to parse args passed to the inner pro macro …\nCorresponds with <code>#[proc_macro_attribute]</code>\nCorresponds with <code>#[proc_macro_derive]</code>\nShould be implemented by structs that will be passed to …\nUsed to parse args that were passed to …\nUsed to parse args that were passed to …\nUsed to parse args that were passed to …\nUsed to parse the args for the <code>import_tokens_internal</code> …\nUsed to parse the args for the <code>import_tokens_inner_internal</code>…\nConstant used to load the configured location for …\nCorresponds with <code>#[proc_macro]</code>\nGenerically parses a proc macro definition with support …\nDelineates the different types of proc macro\nSpecifies the <code>Ident</code> for the <code>attr</code> parameter of this proc …\nwhen <code>#[with_custom_parsing(..)]</code> is used, the variable …\nInternal implementation of <code>export_tokens_alias!</code>. Allows …\nThe internal code behind the <code>#[export_tokens]</code> attribute …\nProduces the full path for the auto-generated …\nResolves to the path of the <code>#[export_tokens]</code> macro for the …\nOptional extra data. This is how …\nOptional extra data. This is how …\n“Flattens” an <code>Ident</code> by converting it to snake case.\nReturns the path of the foreign item whose tokens will be …\nUsed by <code>forward_tokens_internal</code>.\nThe internal implementation for the <code>forward_tokens</code> macro.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>ProcMacro</code> from anything compatible with …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInternal implementation for the <code>#[import_tokens_attr]</code> …\nThe internal implementation for the <code>import_tokens_inner</code> …\nThe internal implementation for the <code>import_tokens</code> macro.\nInternal implementation for the <code>#[import_tokens_proc]</code> …\nContains the <code>Item</code> that is being imported (i.e. the item …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")