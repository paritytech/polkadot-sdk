searchState.loadedDescShard("yet_another_parachain_runtime", 20, "Networking backend used for P2P communication.\nNetwork layer configuration.\nNetwork configuration.\nCreate new <code>FullNetworkConfiguration</code>.\nCreate new <code>NotificationHandshake</code> from an object that …\nGet next event from the <code>Notifications</code> event stream.\nThe node key configuration, which determines the node’s …\nName of the node. Sent over the wire for debugging …\nWhether nodes that aren’t in <code>SetConfig::reserved_nodes</code> …\nNotification metrics.\nGet reference to installed notification protocols.\nCreate new (protocol, notification) handle pair.\nInstruct <code>Notifications</code> to open a new substream for <code>peer</code>.\nNumber of outgoing substreams related to this set that we…\nGet candidates with highest reputations for initiating …\nAttempt to parse the peer mode from a string.\nSplits a Multiaddress into a Multiaddress and PeerId.\nParses a string address and splits it into Multiaddress …\nRequest sent by the remote. Will always be smaller than …\nWho sent the request.\nIts identity.\nGet peer reputation.\nGet peer role, if available.\nGet handle to <code>PeerStore</code>.\nChannel to send back the response.\nGet protocol name of the <code>NotificationService</code>.\nLegacy name of the protocol to use on the wire. Should be …\nGet protocol name.\nMultiaddresses to advertise. Detected automatically if …\nRegister a protocol handle to disconnect peers whose …\nReport peer disconnection for reputation adjustment.\nAdjust peer reputation.\nReputation changes accrued while handling the request. To …\nDuration after which emitted requests are considered timed …\nList of reserved node addresses.\nThe payload of the response.\nAssigned role for our node (full, light, …).\nStart running <code>PeerStore</code> event loop.\nVerify addresses are consistent with enabled transports.\nCheck for duplicate bootnodes.\nSend asynchronous <code>notification</code> to <code>peer</code>, allowing sender to …\nSend synchronous <code>notification</code> to <code>peer</code>.\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nGet access to the <code>SetConfig</code> of the notification protocol.\nSet handshake for the notification protocol replacing the …\nSet peer role.\nInitial syncing mode.\nTake <code>PeerStore</code>.\nConfiguration for the transport layer.\nNon-blocking variant of <code>set_handshake()</code> that attempts to …\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nIf true, allow connecting to private IPv4/IPv6 addresses …\nIf true, the network will use mDNS to discover other …\nError when decoding <code>ed25519</code>-related types.\nAn Ed25519 keypair.\nAn Ed25519 public key.\nAn Ed25519 secret key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate a new random Ed25519 keypair.\nGenerate a new Ed25519 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nConvert the keypair into a byte array by concatenating the …\nConvert the public key to a byte array in compressed form, …\nConvert public key to <code>PeerId</code>.\nTry to parse a keypair from the binary format produced by …\nTry to parse a public key from a byte array containing the …\nTry to parse an Ed25519 secret key from a byte slice …\nVerify the Ed25519 signature on a message using the public …\nRequest a candidate and attestations.\nRecipient is a validator, we address it via this …\nRequest full available data from a node.\nResponse got canceled by networking.\nRequest an availability chunk from a node.\nFetch a collation from a collator which previously …\nFetch a collation from a collator which previously …\nRequests for notifying about an ongoing dispute.\nContains the error value\nResponse could not be decoded.\nSome error in substrate/libp2p happened.\nContains the success value\nA request to be sent to the network bridge, including a …\nResponses received for an <code>OutgoingRequest</code>.\nRecipient is a regular peer and we know its peer id.\nFetch a PoV from a validator which previously sent out a …\nPotential recipients of an outgoing request.\nAny error that can occur when sending a request.\nAll requests that can be sent to the network bridge via …\nUsed by the network to send us a response to a request.\nOptional fallback request and protocol.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWhether the error represents some kind of timeout …\nThe actual request to send over the wire.\nIntended recipient of this request.\nSender which is used by networking to get us back a …\nThe requested data.\nRequest the entire available data for a candidate.\nReceive a requested available data.\nThe requested chunk data.\nRequest an availability chunk.\nReceive a requested erasure chunk.\nSkimmed down variant of <code>ErasureChunk</code>.\nDeliver requested collation.\nRequest the advertised collation at that relay-parent.\nResponses as sent by collators.\nDeliver requested collation along with parent head data.\nRecipient successfully processed the dispute request.\nA dispute request.\nPossible responses to a <code>DisputeRequest</code>.\nNode was not in possession of the requested chunk.\nNode was not in possession of the requested data.\nPoV was not found in store.\nDeliver requested PoV.\nRequest the advertised collation at that relay-parent.\nResponses to <code>PoVFetchingRequest</code>.\nHash of candidate we want a chunk for.\nCandidate we want a PoV for.\nThe candidate hash to get the available data for.\nThe erasure-encoded chunk of data belonging to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe validator index we are requesting from. This must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>ParaId</code> of the collation.\nProof for this chunk’s branch in the Merkle tree.\nRe-build an <code>ErasureChunk</code> from response and request.\nRelay parent we want a collation for.\nThe head data of the candidate’s parent. This is needed …\nCandidate’s proof of validity.\nThe receipt of the candidate.\nRequest a candidate with statements.\nResponse to an <code>AttestedCandidateRequest</code>.\nThe requested chunk data.\nRequest an availability chunk.\nReceive a requested erasure chunk.\nDeliver requested collation.\nRequest the advertised collation at that relay-parent.\nResponses as sent by collators.\nDeliver requested collation along with parent head data.\nNode was not in possession of the requested chunk.\nHash of the candidate we want to request.\nCandidate hash.\nHash of candidate we want a chunk for.\nThe candidate receipt, with commitments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe validator index we are requesting from. This may not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStatement filter with ‘OR’ semantics, indicating which …\nThe <code>ParaId</code> of the collation.\nThe <code>PersistedValidationData</code> corresponding to the candidate.\nRelay parent collation is built on top of.\nAll known statements about the candidate, in compact form, …\nThe head data of the candidate’s parent. This is needed …\nCandidate’s proof of validity.\nThe receipt of the candidate.\nAdvertise a collation to a validator. Can only be sent …\nAll network messages on the collation peer-set.\nA collation sent to a validator was seconded.\nCollator protocol messages\nNetwork messages used by the collator protocol subsystem\nDeclare the intent to advertise collations under a …\nGet the payload that should be signed and included in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvertise a collation to a validator. Can only be sent …\nAll network messages on the collation peer-set.\nA collation sent to a validator was seconded.\nCollator protocol messages\nNetwork messages used by the collator protocol subsystem\nDeclare the intent to advertise collations under a …\nGet the payload that should be signed and included in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCandidate hash.\nParachain head data hash before candidate execution.\nHash of the relay parent advertised collation is based on.\nApproval distribution messages\nNetwork messages used by the approval distribution …\nApprovals for candidates in some recent, unfinalized block.\nAssignments for candidates in recent, unfinalized blocks. …\nAn acknowledgement of a backed candidate being known.\nA notification of a backed candidate being known by the …\nA manifest of a known backed candidate, along with a …\nA notification of a backed candidate being known by the …\nA signed availability bitfield for a given relay-parent …\nBitfield distribution messages\nNetwork messages used by the bitfield distribution …\nDummy network message type, so we will receive …\nA notification of a signed statement in compact form, for …\nStatement distribution messages\nNetwork messages used by the statement distribution …\nBitfields indicating the statements that are known or …\nAll network messages on the validation peer-set.\nDetermine the number of backing validators in the …\nCreate a new blank filter with the given group size.\nThe hash of the candidate.\nThe hash of the candidate.\nGet the payload that should be signed and included in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new full filter with the given group size.\nThe group index backing the candidate at the relay-parent.\nWhether the filter has a specific expected length, …\nWhether the statement filter has at least one seconded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMask out <code>Seconded</code> statements in <code>self</code> according to the …\nMask out <code>Valid</code> statements in <code>self</code> according to the provided\nThe para ID of the candidate. It is illegal for this to be …\nThe head-data corresponding to the candidate.\nThe relay-parent of the candidate.\nSeconded statements. ‘1’ is known or undesired.\nA statement filter which indicates which validators in the …\nA statement filter which indicates which validators in the …\nValid statements. ‘1’ is known or undesired.\nThe choice here is fairly arbitrary. But any dispute that …\nThe dispute is active and unconcluded.\nThis is the data we keep available for each candidate …\nTypes of allowed slots.\nBABE epoch information\nConfiguration data used by the BABE consensus engine that …\nRandomness type required by BABE operations.\nInvalid relay chain parent.\nValidation function returned invalid data.\nBad collator signature.\nParachain block data.\nThe cumulative weight of a block in a fork-choice rule.\nThe statements concerned different candidates.\nTracked votes on candidates, for the purposes of dispute …\nValidation code hash does not match.\nCode size is over the limit.\nThe output of a collator.\nConfiguration for the collation generator\nResult of the <code>CollatorFn</code> invocation.\nSignal that is being returned when a collation was …\nCollation function.\nValidation has generated different candidate commitments.\nThe given <code>PoV</code> is already compressed.\nThe dispute has been concluded against the candidate since …\nThe dispute has been concluded in favor of the candidate …\nDispute has been confirmed (more than <code>byzantine_threshold</code> …\nHow many blocks after finalization an information about …\nIt would be nice to draw this from the chain state, but we …\nA dispute initiating/participating message that have been …\nThings that can go wrong when constructing a <code>DisputeMessage</code>…\nThe status of dispute.\nA chunk of erasure-encoded block data.\nFailed to execute <code>validate_block</code>. This includes function …\nCandidate is invalid.\nCandidate invalidity details\nProvided receipt had different hash than the <code>CandidateHash</code> …\nAny invalid vote (currently only explicit).\nThe invalid statement validator key did not correspond to …\nValidation outputs check doesn’t pass.\nThe candidate receipt contains an invalid session index.\nInvalid statement should have <code>InvalidDisputeStatementKind</code>.\nProvided index could not be found in <code>SessionInfo</code>.\nThe candidate receipt invalid UMP signals.\nThe valid statement validator key did not correspond to …\nLinked to <code>MAX_FINALITY_LAG</code> in relay chain selection, …\nA type that represents a maybe compressed <code>PoV</code>.\nThis error signifies that the Proof length exceeds the trie…\nPossible errors when converting from <code>Vec&lt;Vec&lt;u8&gt;&gt;</code> into …\nThis error signifies that a Proof node exceeds the 16-ary …\nThe current node version, which takes the basic SemVer …\nThe bomb limit for decompressing PoV blobs.\nPara head hash does not match.\nValidation input is over the limit.\nA Proof-of-Validity\nPoV does not decompress correctly.\nPOV hash does not match.\nAllow primary and secondary plain slots.\nAllow primary and secondary VRF slots.\nOnly allow primary slots.\nThis is a convenience type to allow the Erasure chunk …\nA raw <code>PoV</code>, aka not compressed.\nA statement that a validator seconds a candidate.\nA statement that a validator seconds a candidate.\nThe statements concerned different sessions.\nType of a session window size.\nA checked dispute statement from an associated validator.\nA statement, the corresponding signature, and the index of …\nA statement, the corresponding signature, and the index of …\nA statement, where the candidate receipt is included in …\nA statement, exactly the same as <code>Statement</code> but where …\nParameters for <code>CollationGenerationMessage::SubmitCollation</code>.\nExecution timeout.\nTimestamp based on the 1 Jan 1970 UNIX base, which is …\nA <code>DisputeMessage</code> where signatures of statements have not …\nVariant of <code>SignedFullStatement</code> where the signature has not …\nThe bomb limit for decompressing code blobs.\nA statement that a validator has deemed a candidate valid.\nA statement that a validator has deemed a candidate valid.\nCandidate is valid. The validation process yields these …\nAny valid vote (backing, approval, explicit).\nValid statement should have <code>ValidDisputeStatementKind</code>.\nProvided index could not be found in <code>SessionInfo</code>.\nResult of the validation of the candidate.\nInitialize the status to the active state.\nWhether this chain should run with secondary slots, which …\nTypes relevant for approval.\nThe authorities and their weights.\nThe block witness data.\nA constant value that is used in the threshold calculation …\nAccess the underlying candidate hash.\nGet the candidate hash referenced by this statement.\nGet the candidate hash referenced by this statement.\nRead only access to the candidate receipt.\nThe candidate being disputed.\nThe receipt of the candidate itself.\nThe erasure-encoded chunk of data belonging to the …\nThe collation that was build.\nThe collation itself (PoV and commitments)\nCollation function. See <code>CollatorFn</code> for more details.\nTransition the status to a new status after observing the …\nTransition the status to a new status after observing the …\nYields the timestamp this dispute concluded at, if any.\nConfiguration of the epoch.\nMove status to confirmed status, if not yet …\nThe core index on which the resulting candidate should be …\nReturns true if the dispute has concluded for longer than …\nDisputes related types.\nDrop the <code>PersistedValidationData</code> from the statement.\nDrop the <code>PersistedValidationData</code> from the statement in a …\nConstruct an invalid dummy proof\nThe duration of this epoch.\nThe epoch index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a unchecked backing statement to a …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBuild a <code>SignedDisputeMessage</code> and check what can be checked.\nGet the value as <code>SessionIndex</code> for doing comparisons with …\nConcluded invalid?\nConcluded valid?\nGet the blake2-256 hash of the PoV.\nThe head-data produced as a result of execution.\nThe horizontal messages sent by the parachain.\nThe mark which specifies the block number up to which all …\nThe index of this erasure-encoded chunk of data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a compressed <code>PoV</code>.\nConvert into the inner values.\nConsume self to return the signature.\nVotes of invalidity, sorted by validator index.\nRead only access to the invalid vote.\nThe invalid vote data that makes up this dispute.\nCheck whether the dispute is not a spam dispute.\nWhether the disputed candidate is possibly invalid.\nWhether plain secondary slots are allowed.\nWhether VRF secondary slots are allowed.\nThis function allows to convert back to the standard …\nCollator’s authentication key, so it can sign things.\nKind of dispute statement.\nKind of dispute statement.\nCompress a PoV, unless it exceeds the <code>POV_BOMB_LIMIT</code>.\nCreate a new <code>SignedDisputeStatement</code>, which is only …\nCreate a new checked <code>SessionWindowSize</code> which cannot be 0.\nCreate a new <code>SignedDisputeStatement</code> from information that …\nNew validation code.\nThe parachain that this collator collates for\nThe parent block’s head-data.\nThe Proof-of-Validation of the candidate.\nThe number of messages processed from the DMQ.\nConvert bounded Vec Proof to regular <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>\nProof for this chunk’s branch in the Merkle tree.\nProof to verify the state transition of the parachain.\nRandomness for this epoch.\nThe hash of the relay chain block that was used as context …\nThe relay-parent the collation is built against.\nAn optional result sender that should be informed about a …\nAn optional result sender that should be informed about a …\nRead only access to the <code>SessionIndex</code>.\nAccess the underlying session index.\nThe session the candidate appears in.\nSign this statement with the given keystore and key. Pass …\nThe validator signature, that can be verified when …\nThe validator signature, that can be verified when …\nConverts the statement to a compact signed statement by …\nThe starting slot of the epoch.\nAccess the underlying dispute statement\nThe statement about seconding the collation.\nAdd the <code>PersistedValidationData</code> to the statement, if …\nTransform this statement into its compact version, which …\nTransform this statement into its compact version, which …\nTry to recover the two signed dispute votes from an …\nMessages destined to be interpreted by the Relay chain …\nVotes of validity, sorted by validator index.\nRead only access to the valid vote.\nThe valid vote that makes this dispute request valid.\nThe hash of the validation code the collation was created …\nThe persisted validation data needed for approval checks.\nThe voting validator index.\nThe voting validator index.\nAccess the underlying validator public key.\nAccess the underlying validator signature.\nGet the set of all validators who have votes in the set, …\nCriteria for assignment. Assignment criteria VRF …\nTime utilities for approval voting. Time utilities for …\nA list of primitives introduced in v1.\nA list of primitives introduced by v2.\nA trait for producing and checking assignments.\nInformation about the world assignments are being produced …\nCore index is out of bounds.\nInvalid arguments\nAssignment invalid.\nInvalid assignment key.\nFailure conditions when checking an assignment cert.\nNode is in backing group.\nAssignment vrf check resulted in 0 assigned cores.\nDetails pertaining to our assignment on a block.\nSample index is out of bounds.\nDelay core index mismatch.\nDelay output mismatch.\nModulo core index mismatch.\nModulo output mismatch.\nThe validator index is out of bounds.\nThe assignment public keys for validators.\nCheck the assignment cert for the given relay VRF story …\nCompute the assignments for the given relay VRF story.\nThe number of availability cores used by the protocol …\nThe number of delay tranches in total.\nThe number of samples we do of <code>relay_vrf_modulo</code>.\nThe groups of validators assigned to each core.\nThe zeroth delay tranche width.\nA clock which allows querying of the current tick as well …\nExtension methods for clocks.\nA list of delayed futures that gets triggered when the …\nA clock which uses the actual underlying system clock.\nThe duration of a single tick in milliseconds.\nHow far in the future a tick can be accepted.\nA base unit of time, starting from the Unix epoch, split …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStarts a single timer per block hash\nassumes <code>slot_duration_millis</code> evenly divided by tick …\nYields the current tick.\nYields the current tick.\nConverts a tick to the slot number.\nReturns the current tranche.\nConverts a tranche from a slot to the tick number.\nYields a future which concludes when the given tick is …\nYields a future which concludes when the given tick is …\nA static context used for transcripts indicating assigned …\nErrors that can occur during the approvals protocol.\nA certification of assignment.\nDifferent kinds of input data or criteria that can prove a …\nMetadata about a block which is now live in the approval …\nA static context associated with producing randomness for …\nValidators assigning to check a particular candidate are …\nAn assignment criterion which refers to the candidate …\nA signed approval vote which references the candidate …\nA static context used for all relay-vrf-modulo VRFs.\nA static context used for all relay-vrf-modulo VRFs.\nA static context used to compute the Relay VRF story based …\nRandomness type required by BABE operations.\nAn assignment story based on the VRF that authorized the …\nAn assignment story based on the VRF that authorized the …\nrandom bytes derived from the VRF submitted within the …\nUnit type wrapper that represents a slot.\nA static context associated with producing randomness for …\nAn unsafe VRF pre-output. Provide BABE Epoch info to …\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF signature data\nTranscript ready to be used for VRF related operations.\nExtract the slot number and relay VRF from a header.\nA block hash where the candidate appears.\nA block hash where the candidate appears.\nThe index of the candidate in the list of candidates fully …\nThe candidates included by the block. Note that these are …\nThe cert itself.\nCompute the randomness associated with this VRF output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe hash of the block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe criterion which is claimed to be met by this cert.\nThe number of the block.\nThe hash of the parent block.\nVRF pre-output.\nVRF proof.\nThe session of the block.\nThe signature by the validator.\nGet the slot.\nThe consensus slot of the block.\nThe validator index.\nThe validator index.\nThe VRF signature showing the criterion is met.\nThe vrf story.\nThe core index chosen in this cert.\nThe sample number used in this cert.\nA static context associated with producing randomness for …\nErrors that can occur when trying to convert to/from …\nHelper trait to convert primitives to <code>BitIndex</code>.\nCertificate is changed compared to <code>AssignmentCertKind</code>:\nA certification of assignment.\nErrors that can occur when trying to convert to/from …\nA bit index in <code>Bitfield</code>.\nA read-only bitvec wrapper\nErrors that can occur when creating and manipulating …\nA static context associated with producing randomness for …\nA <code>read-only</code>, <code>non-zero</code> bitfield. Each 1 bit identifies a …\nAssignment certificate is not supported in v1.\nA bitfield of core assignments.\nAn assignment criterion which refers to the candidate …\nA signed approval vote which references the candidate …\nMore than one candidate was signed.\nAll bits are zero.\nA static context used for all relay-vrf-modulo VRFs for v2 …\nRandomness type required by BABE operations.\nAn assignment story based on the VRF that authorized the …\nDeprecated assignment. Soon to be removed. An assignment …\nMultiple assignment stories based on the VRF that …\nUnit type wrapper that represents a slot.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the index of the corresponding bit in <code>Bitfield</code>.\nReturns the bit value at specified <code>index</code>. If <code>index</code> is …\nA block hash where the candidate appears.\nA block hash where the candidate appears.\nThe index of the candidate in the list of candidates fully …\nThe cert itself.\nReturns the number of 1 bits.\nReturns the index of the first 1 bit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner bitfield and consumes <code>self</code>.\nReturns an iterator over inner bits.\nThe criterion which is claimed to be met by this cert.\nReturns number of bits.\nVRF pre-output.\nVRF proof.\nThe signature by the validator.\nThe validator index.\nThe validator index.\nThe VRF showing the criterion is met.\nA bitfield representing the core indices claimed by this …\nThe core index chosen in this cert.\nThe sample number used in this cert.\nThe choice here is fairly arbitrary. But any dispute that …\nThe dispute is active and unconcluded.\nThe statements concerned different candidates.\nTracked votes on candidates, for the purposes of dispute …\nThe dispute has been concluded against the candidate since …\nThe dispute has been concluded in favor of the candidate …\nDispute has been confirmed (more than <code>byzantine_threshold</code> …\nA dispute initiating/participating message that have been …\nThings that can go wrong when constructing a <code>DisputeMessage</code>…\nThe status of dispute.\nProvided receipt had different hash than the <code>CandidateHash</code> …\nAny invalid vote (currently only explicit).\nThe invalid statement validator key did not correspond to …\nInvalid statement should have <code>InvalidDisputeStatementKind</code>.\nProvided index could not be found in <code>SessionInfo</code>.\nThe valid statement validator key did not correspond to …\nType alias for retrieving invalid votes from <code>CandidateVotes</code>\nEncountered a keystore error while signing\nCould not generate signing payload\nThe statements concerned different sessions.\nA checked dispute statement from an associated validator.\nErrors encountered while signing a dispute statement\nTimestamp based on the 1 Jan 1970 UNIX base, which is …\nA <code>DisputeMessage</code> where signatures of statements have not …\nValid candidate votes.\nAny valid vote (backing, approval, explicit).\nValid statement should have <code>ValidDisputeStatementKind</code>.\nProvided index could not be found in <code>SessionInfo</code>.\nType alias for retrieving valid votes from <code>CandidateVotes</code>\nThe candidate being disputed.\nThe receipt of the candidate itself.\nReturns true if the dispute has concluded for longer than …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInsert a vote, replacing any already existing vote.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVotes of invalidity, sorted by validator index.\nThe invalid vote data that makes up this dispute.\nGet all the validator indices we have votes for.\nKind of dispute statement.\nKind of dispute statement.\nCreate new empty <code>ValidCandidateVotes</code>\nGet read only direct access to underlying map.\nRetain any votes that match the given criteria.\nThe session the candidate appears in.\nThe validator signature, that can be verified when …\nThe validator signature, that can be verified when …\nVotes of validity, sorted by validator index.\nThe valid vote that makes this dispute request valid.\nThe voting validator index.\nThe voting validator index.\nActivated leaf.\nSubsystems should adjust their jobs to start and stop work …\nChanges in the set of active leaves: the parachain heads …\nGenerated message type wrapper over all possible messages …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA abstracting trait for usage with subsystems.\nBinds a generated type covering all declared outgoing …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA block was finalized with i.e. babe or another consensus …\n<code>Subsystem</code> is informed of a finalized block by its block …\nA new block was imported.\nAn event telling the <code>Overseer</code> on the particular block that …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nOffers header utilities.\nAccumulative trait for a particular subsystem wrapper.\nA description of an error causing the chain API request to …\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nCollection of channels to the individual subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nSome other <code>Subsystem</code>’s message.\nConclude the work of the <code>Overseer</code> and all <code>Subsystem</code>s.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA dummy subsystem that implements <code>Subsystem</code> for all types …\nContains the error value\nThe error type.\nAn event from outside the overseer scope, such as the …\nThe runtime API cannot be executed due to a runtime error.\nSome request from outer world.\nA request from the outer world.\nAn error that may happen during Availability Recovery …\nDefer initialization to a point where the <code>handle</code> is …\nSpecialized message type originating from the overseer.\nPer origin (or subsystem) annotations to wrap an error.\nPer origin (or subsystem) annotations to wrap an error.\nGenerated by the <code>#[overseer(..)]</code> proc-macro\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA handle used to communicate with the <code>Overseer</code>.\nWhether a header supports parachain consensus or not.\nHigh priority.\nHigh priority.\nType for the initialized field of the orchestra builder\nType used to represent a builder where all fields are …\nAn error that may happen during Availability Recovery …\nA helper trait to map a subsystem to smth. else.\nThe message type of this context. Subsystems launched with …\nA wrapping type for messages.\nSubsystem- or job-specific Prometheus metrics.\nCreate a stream of ticks with a defined cycle duration.\nType marker for the uninitialized field of the orchestra …\nMessage as sent to a subsystem.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nNormal priority.\nNormal priority.\nThe runtime API request in question cannot be executed …\nContains the success value\nA subsystem that the orchestrator orchestrates.\nThe overarching messages <code>enum</code> for this particular …\nThe associated <em>outgoing</em> messages for a subsystem that …\nThe output type of the mapping.\nThe orchestra.\nBuilder pattern to create compile time safe construction …\nExternal connector.\nAn error type that describes faults that may happen\nHandle for an orchestra.\nA shareable metrics type for usage with the overseer.\nConnector to send messages towards all subsystems, while …\nSignals sent by an overseer to a subsystem.\nA context type that is given to the <code>Subsystem</code> upon …\nDescribes the priority of the message.\nPriority of messages sending to the individual subsystems. …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAn error that may happen during Availability Recovery …\nAccumulative trait for a particular subsystem wrapper.\nA description of an error causing the runtime API request …\nA abstracting trait for usage with subsystems.\nExposes all runtime calls that are used by the runtime API …\nThe sender type as provided by <code>sender()</code> and underlying.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSignal from the <code>Orchestra</code>.\nAnd the same for signals.\nWatermark to track the received signals.\nSame as <code>SpawnJob</code> but for blocking tasks to be executed on a\nGlue to connect <code>trait orchestra::Spawner</code> and <code>SpawnNamed</code> …\nA message that wraps something the <code>Subsystem</code> is desiring to\nSpawned subsystem.\nA spawner\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nStop the overseer on i.e. a UNIX signal.\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nAn error type that describes faults that may happen\nIncoming messages from both the bounded and unbounded …\nSpecialized subsystem instance type of subsystems …\nSet of readouts of the <code>Meter</code>s of a subsystem.\nCollection of meters related to a subsystem.\nA <code>Result</code> type that wraps <code>SubsystemError</code>.\nSender end of a channel to interface with a subsystem.\nTask kind to launch.\nExtends <code>Future</code> to allow time-limited futures.\nA type of messages that are sent from a <code>Subsystem</code> to the …\nA bounded channel error when trying to send a message …\nKeeps the state of a specific block pinned in memory while …\nDirectly initialize the subsystem with the given subsystem …\nWait for the activation of a particular hash and be …\nNew relay chain block of interest.\nSpecify the baggage in the builder when it has been …\nSpecify the baggage in the builder when it was not …\nA user specified addendum field.\nSpecify the baggage in the builder when it was not …\nSpecify the baggage in the builder when it has been …\nA user specified addendum field.\nParachain host API version\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nApproval voting configuration parameters\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nObtain access to the orchestra handle.\nObtain access to the orchestra handle.\nReturns the persisted validation data for the given <code>ParaId</code> …\nReturns candidate’s acceptance limitations for …\nRetrieve authority identifiers of the current and next …\nYields information on all availability cores as relevant …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nGet the constraints on the actions that can be taken by a …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nBroadcast a signal to all subsystems.\nComplete the construction and create the orchestra type.\nComplete the construction and create the orchestra type …\nCreate a new orchestra utilizing the builder.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nGet a vector of events concerning candidates that occurred …\nGet the receipt of a candidate pending availability. This …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nGet the receipts of all candidates pending availability …\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nChecks if the given validation outputs pass the acceptance …\nFetch the <code>ClaimQueue</code> from scheduler pallet\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nReturns information regarding the current epoch.\nRelay chain block hashes no longer of interest.\nGets the disabled validators at a specific block height\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nReturns all onchain disputes.\nGet all the pending inbound messages in the downward …\nEquality for <code>ActiveLeavesUpdate</code> doesn’t imply bitwise …\nError types for the subsystem requests.\nGlues together the <code>Overseer</code> and <code>BlockchainEvents</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe task of the subsystem being spawned.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nObtain a clone of the handle.\nGet block hash by number. Returns <code>None</code> if the header is …\nHash of the block.\nThe block hash.\nReturn true if the given header supports parachain …\nGet block header. Returns <code>None</code> if block is not found.\nGet the contents of all channels addressed to the given …\nIncrease the number of signals by one.\nGet blockchain info.\nThe instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value.\nReturns <code>true</code> if we could not send to channel as it was …\nIs this update empty and doesn’t contain any information?\nReturns <code>true</code> if we could not send to channel as it was full\nReturns a merkle proof of a validator session key in a …\nSpawn a task, it depends on the implementer if this is …\nLoad the current value of received signals.\nConsumes a <code>T</code> per subsystem, and maps it to <code>Self::Output</code>.\nExtract information from each subsystem.\nThe message to be sent/consumed.\nSet the interconnecting message channel capacities. This …\nRe-export of all messages type, including the wrapper type.\nAll meters of the particular subsystem instance.\nSpecify the baggage in the builder when it was not …\nSpecify the baggage in the builder when it has been …\nA user specified addendum field.\nGet the minimum number of backing votes.\nName of the subsystem instance.\nName of the subsystem being spawned.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nGet the node features.\nGet block number by hash. Returns <code>None</code> if the header is …\nBlock’s number.\nThe block number.\nScrape dispute relevant from on-chain, backing votes and …\nReturns the state of parachain backing for a given para. …\nFetch the list of all parachain IDs registered in the …\nHash of the parent block.\nYields the persisted validation data for the given <code>ParaId</code> …\nThe priority level.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nReturns code hashes of PVFs that require pre-checking by …\nRead the values of all subsystem <code>Meter</code>s.\nReceive a signal or a message.\nReceive a signal.\nConvenience method to register metrics in the optional …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nReplace a subsystem by another implementation for the …\nRoute a particular message with normal priority to a …\nRoute a particular message with the specified priority to …\nRun the <code>Overseer</code>.\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nFetch the scheduling lookahead value\nSend a message via a bounded channel.\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a message with normal priority to the wrapped …\nSend a direct message with defined priority to some other …\nSend a message with specified priority to the wrapped …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend a signal to the wrapped subsystem.\nSend a message to another subsystem via an unbounded …\nSend a message onto the unbounded queue of some other …\nSend a message using the unbounded connection.\nSend a message using the unbounded connection.\nObtain the sender.\nGet the execution environment parameter set by parent …\nReturns the session index expected at a child of the block.\nGet the session info for the given session, if stored.\nSet the interconnecting signal channel capacity. This will …\nThe number of signals already received. Required to assure …\nSignal level at the point of reception.\nSpawn task of kind <code>self</code> using spawner <code>S</code>.\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nSpawn the metrics metronome task.\nGet access to internal task spawner.\nThe <code>spawner</code> to use for spawning tasks.\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nCreate a <code>ActiveLeavesUpdate</code> with a single activated hash\nSpecify the subsystem in the builder directly\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSpecify the the initialization function for a subsystem\nCreate a <code>ActiveLeavesUpdate</code> with a single deactivated hash\nSubmits a PVF pre-checking statement into the transaction …\nSubmits an unsigned extrinsic to slash validators who lost …\nSpecify the baggage in the builder when it was not …\nSpecify the baggage in the builder when it has been …\nA user specified addendum field.\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nTransform the inner value.\nTry to asynchronously receive a message.\nTry to register metrics in the Prometheus registry.\nTry to send a message via a bounded channel.\nTries to send a direct message to some other <code>Subsystem</code>, …\nTries to send a direct message with defined priority to …\nTries to send a signal to the wrapped subsystem without …\nTransform the inner value, fail-able version.\nSend sink for <code>Message</code>s to be sent to a subsystem.\nSend sink for <code>Signal</code>s to be sent to a subsystem.\nReturns a list of validators that lost a past session …\nA handle to unpin the block on drop.\nA handle to unpin the block on drop.\nFetch the validation code used by a para, making the given …\nFetch the maximum uncompressed code size.\nGet the validation code from its hash.\nFetch the hash of the validation code used by a para, …\nReturns the validator groups and rotation info localized …\nGet the current validators.\nSend the given signal, a termination signal, to all …\nCreate a new connector with non-default event channel …\nAdds a <code>str</code> as <code>origin</code> to the given error <code>err</code>.\nThe actual message.\nThe originating subsystem name.\nThe priority of the message.\nThe relay parent for which activation to wait for.\nResponse channel to await on.\nContained message\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nThe runtime API being called\nThe runtime API being called\nThe wrapped error. Marked as source for tracking the error …\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nName of the task to spawn which be shown in jaeger and …\nName of the task to spawn which be shown in jaeger and …\nThe future to execute.\nThe future to execute.\nSubsystem of the task to spawn which be shown in jaeger …\nSubsystem of the task to spawn which be shown in jaeger …\nA description of an error causing the chain API request to …\nContains the error value\nThe runtime API cannot be executed due to a runtime error.\nAn error that may happen during Availability Recovery …\nPer origin (or subsystem) annotations to wrap an error.\nGenerated by the <code>#[overseer(..)]</code> proc-macro\nAn error that may happen during Availability Recovery …\nThe runtime API request in question cannot be executed …\nContains the success value\nAn error that may happen during Availability Recovery …\nA description of an error causing the runtime API request …\nAn error type that describes faults that may happen\nEase the use of subsystem errors.\nThe runtime API being called\nThe runtime API being called\nThe wrapped error. Marked as source for tracking the error …\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\n<code>approval_voting_params</code>\nMinimum version to enable asynchronous backing: …\nThe vote was accepted and should be propagated onwards.\nThe vote was accepted and should be propagated onwards.\nThe vote was valid but duplicate and should not be …\nFetch a list of all active disputes that the coordinator …\nExtends the known validators set with new peers we already …\nGenerated message type wrapper over all possible messages …\nA collection of ancestor candidates of a parachain.\nRequest the <code>k</code> ancestor block hashes of a block with the …\nFor approval requests\nThe error result type of …\nThe result type of <code>ApprovalVotingMessage::ImportApproval</code> …\nGets mapped into …\nApproval checking lag update measured in blocks.\nMessage to the Approval Distribution subsystem.\nMessage to the Approval Voting subsystem.\nMessage to the approval voting parallel subsystem running …\nApproval voting params <code>V10</code>\nSignal to the chain selection subsystem that a specific …\nGets mapped into <code>ApprovalVotingMessage::ApprovedAncestor</code>\nReturns the highest possible ancestor hash of the provided …\nThe error result type of …\nThe result type of <code>ApprovalVotingMessage::ImportAssignment</code> …\nGet the persisted validation data for a particular para …\nGet candidate’s acceptance limitations for asynchronous …\nGet the next, current and some previous authority …\nGet information on all availability cores.\nAvailability Distribution Message.\nAvailability Recovery Message.\nAvailability store subsystem message.\nThe candidate received enough validity votes from the …\nFor backing requests. With relay parent hash\nGet the backing constraints for a particular parachain. <code>V12</code>\nFor backing requests from system parachains. With relay …\nThe vote was bad and should be ignored, reporting the peer …\nThe vote was bad and should be ignored, reporting the peer …\nDelayed report for other actions.\nRequest the best leaf containing the given block in its …\nThis bitfield indicates the availability of various …\nBitfield distribution message.\nA dummy implementation to satisfy the current internal …\nDescribes a relay-chain block by the para-chain candidates …\nRequest the block header by hash. Returns <code>None</code> if a block …\nRequest the block number by hash. Returns <code>None</code> if a block …\nGet the cumulative weight of the given block, by hash. If …\n<code>candidates_pending_availability</code>\n<code>ClaimQueue</code>\n<code>backing_constraints</code>\nRequest the subsystem to check whether it’s allowed to …\nA request to the candidate backing subsystem to check …\nInform the Prospective Parachains Subsystem that a …\nMessages received by the Candidate Backing subsystem.\nGet all events concerning candidates (backing, inclusion, …\nGet the candidate pending availability for a particular …\nMessages received by the Validation subsystem.\nGet the candidates pending availability for a particular …\nChain API request subsystem message.\nA response channel for the result of a chain API request.\nChain selection subsystem messages\nSends back <code>true</code> if the validation outputs pass all …\nA checked indirect assignment, the crypto for the cert has …\nA checked indirect signed approval vote.\nFetch the <code>ClaimQueue</code> from scheduler pallet <code>V11</code>\nSignal to the collator protocol that it should connect to …\nMessage to the Collation Generation subsystem.\nMessages received by the Collator Protocol subsystem.\nA complete candidate.\nAlternative to <code>ConnectToValidators</code> in case you already …\nConnect to peers who represent the given <code>validator_ids</code>.\nGet information about the BABE epoch the block was …\n<code>DisabledValidators</code>\nRuntime version requirements for each message <code>Disputes</code>\nDetermine the highest undisputed block within the given …\nReturns all disabled validators at a given block height.\nDisconnect peers from the given peer-set without affecting …\nFor dispute requests\nDisputes trigger a broad dispute resolution process.\nMessages received by the dispute coordinator subsystem.\nMessages going to the dispute distribution subsystem.\nReturns all on-chain disputes at given block number. …\nGets mapped into …\nDistribute an approval vote for the local validator. The …\nGets mapped into …\nDistribute an assignment cert from the local validator. …\nDistribute a bitfield via gossip to other validators.\nProvide a collation to distribute to validators with an …\nGet all the pending inbound messages in the downward …\n<code>ExecutorParams</code>\nThis variant is used when the PVF cannot be compiled but …\nGet all disputes in relation to a relay parent.\nInstruct availability distribution to fetch a remote PoV.\nRequest the finalized block hash by number. Returns <code>None</code> …\nRequest the last finalized block number. This request …\nGets mapped into …\nGet all approval signatures for all chains a candidate …\nGets mapped into …\nRetrieve all available approval signatures for a candidate …\nRequests a set of backable candidates attested by the …\nTry getting N backable candidate hashes along with their …\nGet the hypothetical or actual membership of candidates …\nGet the minimum accepted relay-parent number for each para …\nGet the validation data of some prospective candidate. The …\nMessage to the Gossip Support subsystem.\nResponse type to <code>ApprovalVotingMessage::ApprovedAncestor</code>.\nA hypothetical candidate to be evaluated for …\nIndicates the relay-parents whose fragment chain a …\nRequest specifying which candidates are either already …\nWhen sending a request, what to do on a disconnected …\nJust fail if the destination is not yet connected.\nImport an approval vote into approval-voting database\nImport an assignment into the approval-voting database.\nImport statements by validators about a candidate.\nThe result of <code>DisputeCoordinatorMessage::ImportStatements</code>.\nGet the contents of all channels addressed to the given …\nAn incomplete candidate.\nInitialize the collation generation subsystem.\nInform the Prospective Parachains Subsystem of a new …\nRequest introduction of a seconded candidate into the …\nThe PVF could not be compiled. This variant is used when …\nWe recommended a particular candidate to be seconded, but …\nImport was invalid (candidate was not available)  and the …\nSign and issue local dispute votes. A value of <code>true</code> …\n<code>KeyOwnershipProof</code>\nReturns a merkle proof of a validator session key. <code>V5</code>\nRequest the leaves in descending order by score.\n<code>MinimumBackingVotes</code>\nGet the minimum required backing votes.\nMisbehavior reports are self-contained proofs of validator …\n<code>Node features</code>\nEvents from network.\nMessages received from other subsystems.\nMessages received from other subsystems by the network …\nGet a network bridge update.\nEvent from the network bridge.\nEvent from the network bridge.\nAn update from the network bridge, gets mapped into …\nAn update from the network bridge.\nDummy constructor, so we can receive networking events.\nGets mapped into <code>ApprovalDistributionMessage::NewBlocks</code>\nNotify the <code>ApprovalDistribution</code> subsystem about new blocks …\nOur neighbors in the new gossip topology for the session. …\nInform the distribution subsystems about the new gossip …\nGet the node features.\nParent head-data hash.\nOur view has changed.\n<code>ParaIds</code>\nGet the backing state of the given para.\nGet the paraids at the relay parent. <code>V14</code>\nThe parent head-data hash with optional data itself.\nA peer has connected.\nA peer has disconnected.\nPeer has sent a message.\nPeer’s <code>View</code> has changed.\nGet the persisted validation data for a particular para, …\nTry to compile the given validation code and send back the …\nThe outcome of the candidate-validation’s PVF pre-check …\nMessages sent to the Prospective Parachains subsystem.\nA request for the persisted validation data stored in the …\nThis data becomes intrinsics or extrinsics which should be …\nThis data should become part of a relay chain block\nInherent data returned by the provisioner\nMessage to the Provisioner.\nA dummy implementation to satisfy the current internal …\nExtends primitives::PvfExecKind, which is a runtime …\nReturns code hashes of PVFs that require pre-checking by …\nQuery all chunks that we have for the given candidate hash.\nQuery a <code>AvailableData</code> from the AV store.\nGet candidate votes for a candidate.\nQuery an <code>ErasureChunk</code> from the AV store by the candidate …\nQuery whether an <code>ErasureChunk</code> exists within the AV Store.\nGet the size of an <code>ErasureChunk</code> from the AV store by the …\nQuery whether a <code>AvailableData</code> exists within the AV Store.\nFetch a list of all recent disputes the coordinator is …\nRecover available data from validators on the network.\nReinitialize the collation generation subsystem, …\nReport a peer for their actions.\nType of peer reporting\nMake a request of the runtime API against the post-state …\nThis message allows external subsystems to request the set …\nThe passed blocks must be marked as reverted, and their …\nA message to the Runtime API subsystem.\nA request to the Runtime API subsystem.\nA sender for the result of a runtime API request.\n<code>SchedulingLookahead</code>\n<code>SubmitReportDisputeLost</code>\nGet the lookahead from the scheduler params. <code>V12</code>\nNote that the Candidate Backing subsystem should second …\nThe candidate we recommended to be seconded was validated …\nSend a message to one or more peers on the collation …\nSend a batch of collation messages.\nTell dispute distribution to distribute an explicit …\nSend requests via substrate request/response. Second …\nSend a message to one or more peers on the validation …\nSend a batch of validation messages.\nGet the execution environment parameter set by session …\nGet the session index that a child of the block will have.\nGet the session info for the given session, if stored.\nWe have originated a signed statement in the context of …\nSingle peer report about malicious actions which should be …\nNote a validator’s statement about a particular …\nStatement distribution message.\nComputes and checks the erasure root of <code>AvailableData</code> …\nThe error result type of a …\nStore an <code>ErasureChunk</code> in the AV store.\nSubmit a collation to the subsystem. This will package it …\nSubmits a PVF pre-checking statement into the transaction …\nSubmits an unsigned extrinsic to slash validator who lost …\nThe vote was valid but too far in the future to accept …\nTry to connect to the peer.\n<code>UnappliedSlashes</code>\nReturns a list of validators that lost a past session …\nThe authority discovery session key has been rotated.\nInform the distribution subsystems about …\n<code>ValidationCodeBombLimit</code>\nThe PVF has been compiled successfully within the given …\nImport was valid and can be confirmed to peer.\nValidate a candidate with provided, exhaustive parameters …\nGet the validation code for a para, taking the given …\nGet the maximum uncompressed code size. <code>V12</code>\nGet validation code by its hash, either past, current or …\nGet the validation code used by the specified para, taking …\nBlanket error for validation failing for internal reasons.\nGet the validator groups and group rotation info.\nGet the current validator set.\nGet the version of the runtime API, if any.\nParent head-data along with its hash.\nConverts priority level to &amp;str\nReturns the indirect assignment.\nBacked candidates.\nSigned bitfields.\nThe relay-chain block hash.\nGet the <code>CandidateHash</code> of the hypothetical candidate.\nHash of the candidate.\nReturns the candidate bitfield claimed by the assignment.\nGet the <code>ParaId</code> of the hypothetical candidate.\nThe para-id of the candidate.\nPara id of the candidate.\nThe candidate receipt itself.\nThe relay-parent of the candidate.\nThe relay-parent of the candidate.\nThe set of para-chain candidates.\nCandidates, in arbitrary order, which should be checked for\nGet the candidate commitments, if the candidate is …\nBlock descriptions in the direct path between the …\nDispute statement sets.\nFocus an overarching network-bridge event into some more …\nEither a specific fragment chain to check, otherwise all.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a checked assignment from an assignment that was …\nBuilds a checked vote from a vote that was checked to be …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the hash of the parent head-data.\nThe block hash of the highest viable ancestor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNetwork events as transmitted to other subsystems, wrapped …\nThe block number of the highest viable ancestor.\nGet the output head data hash, if the candidate is …\nThe para-id of the candidate.\nThe parent head-data.\nGet parent head data hash of the hypothetical candidate.\nParent head data hash.\nGet the persisted validation data, if the candidate is …\nThe persisted validation data of the candidate.\nGet candidate’s relay parent.\nThe session index of this block.\nReturns the tranche this assignment is claimed at.\nGet the validation code hash, if the candidate is complete.\nCandidate hash to fetch the PoV for.\nValidator to fetch the PoV from.\nThe id of the parachain that produced this PoV. This field …\nExpected hash of the PoV, a PoV not matching this hash …\nThe relay parent giving the necessary context.\nSender for getting back the result of this fetch.\nThe <code>AvailableData</code> itself.\nA hash of the candidate this chunk belongs to.\nA hash of the candidate this <code>available_data</code> belongs to.\nThe chunk itself.\nCore index where the candidate was backed.\nErasure root we expect to get after chunking.\nThe number of validators in the session.\nNode features at the candidate relay parent. Used for …\nSending side of the channel to send result to.\nSending side of the channel to send result to.\nValidator index. May not be equal to the chunk index.\nThe candidate receipt\nExecution kind, used for timeouts and retries …\nSession’s executor parameters\nThe proof-of-validity\nRelay-parent\nThe sending side of the response channel\nThe sending side of the response channel\nValidation code\nValidation code hash\nPersisted validation data\nThe hash of the block in question.\nThe number of ancestors to request.\nThe response channel.\nThe receipt of the candidate.\nThe core index where the candidate should be backed.\nThis parent head-data is needed for elastic scaling.\nThe hash of the parent head-data. Here to avoid computing …\nProof of validity.\nThe result sender should be informed when at least one …\nThe lowest possible block to vote on.\nDescriptions of all the blocks counting upwards from the …\nThe candidate receipt itself.\nInform the requester once we finished importing (if a …\nThe session the candidate appears in.\nStatements, with signatures checked, by validators …\nThe block to vote on, might be base in case there is no …\nThe hash of the candidate.\nThe claimed hash of the candidate.\nThe claimed para-ID of the candidate.\nThe claimed relay parent of the candidate.\nThe claimed head-data hash of the candidate.\nThe persisted validation data of the candidate.\nThe receipt of the candidate.\nThe updated authority discovery keys of the peer.\nThe canonical shuffling of validators for the session.\nOur validator index in the session, if any.\nThe <code>PeerId</code> of the peer that updated its …\nThe session info this gossip topology is concerned with.\nThe reverse mapping of <code>canonical_shuffling</code>: from validator …\nSends back the number of <code>AuthorityDiscoveryId</code>s which …\nThe underlying protocol to use for this request.\nThe peer set we want the connection on.\nThe peer set we want the connection on.\nEach entry corresponds to the addresses of an already …\nEach entry corresponds to the addresses of an already …\nIds of the validators to connect to.\nParent head-data hash.\nThis will be provided for collations with elastic scaling …\nEvents from network.\nA struct indicating new gossip topology.\nOur neighbors in the new gossip topology for the session. …\nOur view has changed.\nA peer has connected.\nA peer has disconnected.\nIdentifier of a peer of the network.\nPeer has sent a message.\nPeer’s <code>View</code> has changed.\nDescription of a reputation adjustment for a node.\nThe authority discovery session key has been rotated.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe local validator index, if any.\nReason for reputation change.\nThe session index this topology corresponds to.\nThe topology itself.\nReputation delta.\nActivated leaf.\nSubsystems should adjust their jobs to start and stop work …\nChanges in the set of active leaves: the parachain heads …\nGenerated message type wrapper over all possible messages …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA abstracting trait for usage with subsystems.\nBinds a generated type covering all declared outgoing …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA block was finalized with i.e. babe or another consensus …\n<code>Subsystem</code> is informed of a finalized block by its block …\nA new block was imported.\nAn event telling the <code>Overseer</code> on the particular block that …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nOffers header utilities.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nCollection of channels to the individual subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nSome other <code>Subsystem</code>’s message.\nConclude the work of the <code>Overseer</code> and all <code>Subsystem</code>s.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA dummy subsystem that implements <code>Subsystem</code> for all types …\nContains the error value\nThe error type.\nAn event from outside the overseer scope, such as the …\nSome request from outer world.\nA request from the outer world.\nDefer initialization to a point where the <code>handle</code> is …\nA message type that a subsystem receives from an orchestra.\nPer origin (or subsystem) annotations to wrap an error.\nPer origin (or subsystem) annotations to wrap an error.\nGenerated by the <code>#[overseer(..)]</code> proc-macro\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nA handle used to communicate with the <code>Overseer</code>.\nWhether a header supports parachain consensus or not.\nHigh priority.\nHigh priority.\nType for the initialized field of the orchestra builder\nType used to represent a builder where all fields are …\nA helper trait to map a subsystem to smth. else.\nThe message type of this context. Subsystems launched with …\nA wrapping type for messages.\nSubsystem- or job-specific Prometheus metrics.\nCreate a stream of ticks with a defined cycle duration.\nType marker for the uninitialized field of the orchestra …\nMessage as sent to a subsystem.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nNormal priority.\nNormal priority.\nContains the success value\nA subsystem that the orchestrator orchestrates.\nThe overarching messages <code>enum</code> for this particular …\nThe associated <em>outgoing</em> messages for a subsystem that …\nThe output type of the mapping.\nThe orchestra.\nBuilder pattern to create compile time safe construction …\nExternal connector.\nAn error type that describes faults that may happen\nHandle for an orchestra.\nA shareable metrics type for usage with the overseer.\nConnector to send messages towards all subsystems, while …\nSignals sent by an overseer to a subsystem.\nA context type that is given to the <code>Subsystem</code> upon …\nDescribes the priority of the message.\nPriority of messages sending to the individual subsystems. …\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nExposes all runtime calls that are used by the runtime API …\nThe sender type as provided by <code>sender()</code> and underlying.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSender.\nSignal from the <code>Orchestra</code>.\nAnd the same for signals.\nWatermark to track the received signals.\nSame as <code>SpawnJob</code> but for blocking tasks to be executed on a\nGlue to connect <code>trait orchestra::Spawner</code> and <code>SpawnNamed</code> …\nA message that wraps something the <code>Subsystem</code> is desiring to\nA spawner\nAccumulative trait for a particular subsystem wrapper.\nA abstracting trait for usage with subsystems.\nStop the overseer on i.e. a UNIX signal.\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nAn error type that describes faults that may happen\nIncoming messages from both the bounded and unbounded …\nA running instance of some <code>Subsystem</code>.\nSet of readouts of the <code>Meter</code>s of a subsystem.\nCollection of meters related to a subsystem.\nEase the use of subsystem errors.\nSender end of a channel to interface with a subsystem.\nTask kind to launch.\nExtends <code>Future</code> to allow time-limited futures.\nA type of messages that are sent from a <code>Subsystem</code> to the …\nA bounded channel error when trying to send a message …\nKeeps the state of a specific block pinned in memory while …\nDirectly initialize the subsystem with the given subsystem …\nWait for the activation of a particular hash and be …\nNew relay chain block of interest.\nA user specified addendum field.\nA user specified addendum field.\nParachain host API version\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nApproval voting configuration parameters\nUnbounded channel sender, connected to a subsystem.\nReturns the persisted validation data for the given <code>ParaId</code> …\nReturns candidate’s acceptance limitations for …\nRetrieve authority identifiers of the current and next …\nYields information on all availability cores as relevant …\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nGet the constraints on the actions that can be taken by a …\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nGet a vector of events concerning candidates that occurred …\nGet the receipt of a candidate pending availability. This …\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nGet the receipts of all candidates pending availability …\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nChecks if the given validation outputs pass the acceptance …\nFetch the <code>ClaimQueue</code> from scheduler pallet\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nReturns information regarding the current epoch.\nRelay chain block hashes no longer of interest.\nGets the disabled validators at a specific block height\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nReturns all onchain disputes.\nGet all the pending inbound messages in the downward …\nA dummy subsystem, mostly useful for placeholders and …\nGlues together the <code>Overseer</code> and <code>BlockchainEvents</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nGet block hash by number. Returns <code>None</code> if the header is …\nHash of the block.\nThe block hash.\nReturn true if the given header supports parachain …\nGet block header. Returns <code>None</code> if block is not found.\nGet the contents of all channels addressed to the given …\nGet blockchain info.\nThe instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a merkle proof of a validator session key in a …\nSpawn a task, it depends on the implementer if this is …\nConsumes a <code>T</code> per subsystem, and maps it to <code>Self::Output</code>.\nThe message to be sent/consumed.\nThe exclusive home of all generated dummy messages (if any …\nAll meters of the particular subsystem instance.\nPrometheus metrics related to the overseer and its …\nA user specified addendum field.\nGet the minimum number of backing votes.\nName of the subsystem instance.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nGet the node features.\nGet block number by hash. Returns <code>None</code> if the header is …\nBlock’s number.\nThe block number.\nScrape dispute relevant from on-chain, backing votes and …\nReturns the state of parachain backing for a given para. …\nFetch the list of all parachain IDs registered in the …\nHash of the parent block.\nYields the persisted validation data for the given <code>ParaId</code> …\nThe priority level.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nReturns code hashes of PVFs that require pre-checking by …\nReceive a signal or a message.\nReceive a signal.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nFetch the scheduling lookahead value\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message with defined priority to some other …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend a message onto the unbounded queue of some other …\nSend a message using the unbounded connection.\nObtain the sender.\nGet the execution environment parameter set by parent …\nReturns the session index expected at a child of the block.\nGet the session info for the given session, if stored.\nThe number of signals already received. Required to assure …\nSignal level at the point of reception.\nSpawn task of kind <code>self</code> using spawner <code>S</code>.\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nSpawn the metrics metronome task.\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nBounded channel sender, connected to a subsystem.\nUnbounded channel sender, connected to a subsystem.\nSubmits a PVF pre-checking statement into the transaction …\nSubmits an unsigned extrinsic to slash validators who lost …\nA user specified addendum field.\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nTry to asynchronously receive a message.\nTry to register metrics in the Prometheus registry.\nTries to send a direct message to some other <code>Subsystem</code>, …\nTries to send a direct message with defined priority to …\nSend sink for <code>Message</code>s to be sent to a subsystem.\nSend sink for <code>Signal</code>s to be sent to a subsystem.\nReturns a list of validators that lost a past session …\nA handle to unpin the block on drop.\nA handle to unpin the block on drop.\nFetch the validation code used by a para, making the given …\nFetch the maximum uncompressed code size.\nGet the validation code from its hash.\nFetch the hash of the validation code used by a para, …\nReturns the validator groups and rotation info localized …\nGet the current validators.\nThe actual message.\nThe originating subsystem name.\nThe priority of the message.\nThe relay parent for which activation to wait for.\nResponse channel to await on.\nContained message\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nName of the task to spawn which be shown in jaeger and …\nName of the task to spawn which be shown in jaeger and …\nThe future to execute.\nThe future to execute.\nSubsystem of the task to spawn which be shown in jaeger …\nSubsystem of the task to spawn which be shown in jaeger …\nA dummy subsystem that implements <code>Subsystem</code> for all types …\nCreate an overseer with all subsystem being <code>Sub</code>.\nCreate an overseer with all subsystem being <code>Sub</code>.\nA trait to support the origin annotation such that errors …\nAn owned dynamically typed <code>Future</code> for use in cases where …\nSome other <code>Subsystem</code>’s message.\nThe context of an asynchronous task.\nA future representing the notification that an elapsed …\nA <code>Duration</code> type to represent a span of time, typically …\nContains the error value\nThe error type.\nA message type that a subsystem receives from an orchestra.\nPer origin (or subsystem) annotations to wrap an error.\nFuture for the <code>fuse</code> method.\nA future represents an asynchronous computation obtained …\nAn extension trait for <code>Future</code>s that provides a variety of …\nA set of futures which may complete in any order.\nHigh priority.\nHigh priority.\nPoll the first stream.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nA helper trait to map a subsystem to smth. else.\nThe message type of this context. Subsystems launched with …\nA wrapping type for messages.\nThe duration of one nanosecond.\nNormal priority.\nNormal priority.\nContains the success value\nAn error type that describes faults that may happen\nAlias for a result with error type <code>OrchestraError</code>.\nThe overarching messages <code>enum</code> for this particular …\nThe output type of the mapping.\nThe type of value produced on completion.\nRepresents that a value is not ready yet.\nA pointer which pins its pointee in place.\nIndicates whether a value is available or if the current …\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nDescribes the priority of the message.\nPriority of messages sending to the individual subsystems. …\nRepresents that a value is immediately ready.\nPoll the second stream.\nThe duration of one second.\nThe sender type as provided by <code>sender()</code> and underlying.\nSignal from the <code>Orchestra</code>.\nAnd the same for signals.\nWatermark to track the received signals.\nSame as <code>SpawnJob</code> but for blocking tasks to be executed on a\nA message that wraps something the <code>Subsystem</code> is desiring to\nAn asynchronous subsystem task..\nA spawner\nAn extension trait for <code>Stream</code>s that provides a variety of …\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nIncoming messages from both the bounded and unbounded …\nA running instance of some <code>Subsystem</code>.\nSet of readouts of the <code>Meter</code>s of a subsystem.\nCollection of meters related to a subsystem.\nSender end of a channel to interface with a subsystem.\nA future that wraps another future with a <code>Delay</code> allowing …\nExtends <code>Future</code> to allow time-limited futures.\nA type of messages that are sent from a <code>Subsystem</code> to the …\nA bounded channel error when trying to send a message …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nGets <code>Pin&lt;&amp;mut T&gt;</code> to the underlying pinned value from this …\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nGets a mutable reference to the pinned value this <code>Pin&lt;Ptr&gt;</code> …\nReturns the total number of nanoseconds contained by this …\nGets a shared reference to the pinned value this <code>Pin</code> …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nAn adaptor for chunking up items of the stream inside a …\nClears the set, removing all futures.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nThe internal duration between this point and another.\nSCALE encode this type to bytes, possibly with the help of …\nCreates a stream which gives the current iteration count …\nReturns a reference to the extension data for the current …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nReturns the argument unchanged.\nMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreates a new <code>Duration</code> from the specified number of …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Context</code> from a <code>&amp;Waker</code>.\nCreates a new <code>Duration</code> from the specified number of weeks.\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nThe task of the subsystem being spawned.\nGets a mutable reference to the data inside of this <code>Pin</code>.\nGets a shared reference out of a pin.\nGets a mutable reference to the data inside of this <code>Pin</code>.\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this stream into a future of …\nUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying pointer.\nUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying <code>Ptr</code>.\nConverts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same …\nConvert this future into a single element stream.\nReturns <code>true</code> if the set contains no futures.\nReturns <code>true</code> if the poll is a <code>Pending</code> value.\nReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.\nReturns true if this <code>Duration</code> spans no time.\nReturns an iterator that allows inspecting each future in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows inspecting each future in …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns the number of futures contained in the set.\nReturns a reference to the <code>LocalWaker</code> for the current task.\nCreate a packet from its parts.\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …\nMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMap this future’s output to a different type, returning …\nMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …\nConsumes a <code>T</code> per subsystem, and maps it to <code>Self::Output</code>.\nConstructs a new pin by mapping the interior value.\nConstructs a new pin by mapping the interior value.\nThe message to be sent/consumed.\nAll meters of the particular subsystem instance.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nName of the subsystem being spawned.\nName of the subsystem instance.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreates a new future which will fire at <code>dur</code> time into the …\nConstructs a new, empty <code>FuturesUnordered</code>.\nConstructs a new <code>Pin&lt;Ptr&gt;</code> around a pointer to some data of …\nCreates a new <code>Duration</code> from the specified number of whole …\nConstructs a new <code>Pin&lt;Ptr&gt;</code> around a reference to some data …\nCreates a future that resolves to the next item in the …\nEvaluates and consumes the future, returning the resulting …\nCreates a new stream which exposes a <code>peek</code> method.\nAttempts to resolve the future to a final value, …\nA macro which returns the result of polling a future once …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nThe priority level.\nPush a future into the set.\nAn adaptor for chunking up ready items of the stream …\nReceive a signal or a message.\nReceive a signal.\nTurn this future into a future that yields <code>()</code> on …\nResets this timeout to an new timeout which will fire at …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nThe internal duration between this point and another.\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nPolls multiple futures and streams simultaneously, …\nA functor to specify strategy of the channels selection in …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message with defined priority to some other …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend a message onto the unbounded queue of some other …\nSend a message using the unbounded connection.\nObtain the sender.\nAssigns a new value to the memory location pointed to by …\nCreate a cloneable handle to this future where all handles …\nThe number of signals already received. Required to assure …\nSignal level at the point of reception.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nGets a pinning mutable reference from a static mutable …\nGets a pinning reference from a <code>&amp;&#39;static</code> reference.\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nCreates a new <code>Fuse</code>-wrapped future which is already …\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nToggle the value and return the old one.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nTry to asynchronously receive a message.\nTries to send a direct message to some other <code>Subsystem</code>, …\nTries to send a direct message with defined priority to …\nSend sink for <code>Message</code>s to be sent to a subsystem.\nSend sink for <code>Signal</code>s to be sent to a subsystem.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nConverts a stream of pairs into a future, which resolves …\nReturns a reference to the <code>Waker</code> for the current task.\nAnnotate the error with a origin <code>str</code>.\nAn adapter for zipping two streams together.\nContained message\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nName of the task to spawn which be shown in jaeger and …\nName of the task to spawn which be shown in jaeger and …\nThe future to execute.\nThe future to execute.\nSubsystem of the task to spawn which be shown in jaeger …\nSubsystem of the task to spawn which be shown in jaeger …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe type of value produced by the sink when an error …\nThe type of failures yielded by this future\nThe type of failures yielded by this future\nA future represents an asynchronous computation obtained …\nAn extension trait for <code>Future</code>s that provides a variety of …\nValues yielded by the stream.\nThe type of successful values yielded by this future\nThe type of successful values yielded by this future\nThe type of value produced on completion.\nA <code>Sink</code> is a value into which other values can be sent, …\nAn extension trait for <code>Sink</code>s that provides a variety of …\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecutes another future after this one resolves …\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAdds a fixed-size buffer to the current sink.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nCreates an adaptor which will chain this stream with …")