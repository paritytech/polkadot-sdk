searchState.loadedDescShard("sc_network_gossip", 0, "Polite gossiping.\nRequested broadcast.\nMessage should be ignored.\nA gossip message validator that discards all messages.\nRequested broadcast to all peers.\nWraps around an implementation of the <code>Network</code> trait and …\nThe reason for sending out the message.\nAbstraction over a network.\nPeriodic rebroadcast of all messages to all peers.\nMessage should be processed, but not propagated.\nMessage should be stored and propagated under given topic.\nAbstraction over the syncing subsystem.\nTopic stream message with sender.\nMessage validation result.\nValidates consensus messages.\nValidation context. Allows reacting to incoming messages …\nNotify everyone we’re connected to that we have the …\nBroadcast a message to all peers that have not received it …\nBroadcast all messages with given topic to peers that do …\nBroadcast all messages with given topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMulticast a message to all peers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage data.\nProduce a closure for filtering egress messages.\nProduce a closure for filtering egress messages.\nProduce a closure for validating messages on a given topic.\nProduce a closure for validating messages on a given topic.\nGet data of valid, incoming messages for a topic (but …\nCreate a new instance.\nNew peer is connected.\nNew peer is connected.\nNew connection is dropped.\nNew connection is dropped.\nRegisters a message without propagating it to any peers. …\nSend addressed message to a peer.\nSend addressed message to the given peers. The message is …\nSend all messages with given topic to a peer.\nSend all messages with given topic to a peer.\nSender if available.\nConsume <code>GossipEngine</code> and return the notification service.\nValidate consensus message.")