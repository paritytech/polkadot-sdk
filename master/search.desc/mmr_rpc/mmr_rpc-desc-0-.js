searchState.loadedDescShard("mmr_rpc", 0, "Node-specific RPC methods for interaction with Merkle …\nRetrieved MMR leaves and their proof.\nMMR RPC methods.\nClient implementation for the <code>MmrApi</code> RPC API.\nServer trait implementation for the <code>MmrApi</code> RPC API.\nAPI to interact with MMR pallet.\nBlock hash the proof was generated for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate an MMR proof for the given <code>block_numbers</code>.\nGenerate an MMR proof for the given <code>block_numbers</code>.\nGenerate MMR proof for a series of block numbers. If …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nSCALE-encoded vector of <code>LeafData</code>.\nReturn the number of MMR blocks in the chain.\nGet the MMR root hash for the current best block.\nGet the MMR root hash for the current best block.\nReturn the on-chain MMR root hash.\nCreate new <code>Mmr</code> with the given reference to the client.\nCreate new <code>LeavesProof</code> from a given vector of <code>Leaf</code> and a …\nSCALE-encoded proof data. See sp_mmr_primitives::LeafProof.\nVerify an MMR <code>proof</code>.\nVerify an MMR <code>proof</code>.\nVerify MMR proof against on-chain MMR for a batch of …\nVerify an MMR <code>proof</code> statelessly given an <code>mmr_root</code>.\nVerify an MMR <code>proof</code> statelessly given an <code>mmr_root</code>.\nVerify MMR proof against given root hash for a batch of …")