searchState.loadedDescShard("pallet_asset_conversion", 0, "Substrate Asset Conversion pallet\n<code>PoolId</code> to <code>AccountId</code> conversion.\n<code>PoolId</code> to <code>AccountId</code> conversion without an addition …\nPool locator where the <code>PoolId</code> is a tuple of <code>AssetKind</code>s …\nThis runtime api allows people to query the size of the …\nKind of assets that are going to be swapped.\nKind of assets that are going to be swapped.\nType representing the kind of assets for which the price …\nMeasure units of the asset classes for swapping.\nMeasure units of the asset classes for swapping.\nMeasurement units of the asset classes for pricing.\nBenchmark Helper\nPool locator that chains the <code>First</code> and <code>Second</code> …\nCredit implying a negative imbalance in the system that …\nCredit of Config::Assets.\nFactory for creating a valid asset pairs with …\nStores the lp_token asset id a particular pool has been …\nProvides means to resolve the <code>PoolId</code> and <code>AccountId</code> from a …\nTrait providing methods to quote swap prices between asset …\nTrait for providing methods to swap between the various …\nTrait providing methods to swap between the various asset …\nPool locator that mandates the inclusion of the specified …\nRetrieves the account address associated with a valid …\nReturns a valid assets pair for the pool creation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the size of the liquidity pool for the given asset …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLiquidity pool asset\nReturns the upper limit on the length of the swap path.\nReturns the upper limit on the length of the swap path.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nRetrieves the account address associated with a given …\nRetrieves the account address associated with a given …\nIdentifies the <code>PoolId</code> for a given pair of assets.\nQuotes the amount of <code>asset2</code> resulting from swapping the …\nProvides a quote for <code>Pallet::swap_exact_tokens_for_tokens</code>.\nQuotes the amount of <code>asset1</code> required to obtain the exact …\nProvides a quote for <code>Pallet::swap_tokens_for_exact_tokens</code>.\nEnable/disable the given code depending on …\nSwap exactly <code>amount_in</code> of asset <code>path[0]</code> for asset …\nSwap exactly <code>credit_in</code> of asset <code>path[0]</code> for asset …\nTake the <code>path[0]</code> asset and swap some amount for <code>amount_out</code> …\nSwaps a portion of <code>credit_in</code> of <code>path[0]</code> asset to obtain …\nAutogenerated weights for <code>pallet_asset_conversion</code>\nProvided amount should be greater than or equal to the …\nDesired amount can’t be equal to the pool reserve.\nProvided amount should be greater than or equal to the …\nType of asset class, sourced from <code>Config::Assets</code>, utilized …\nThe minimal amount requirement for the first token in the …\nThe minimal amount requirement for the first token in the …\nThe minimal amount requirement for the second token in the …\nThe minimal amount requirement for the second token in the …\nRegistry of assets utilized for providing liquidity to …\nThe type in which the assets for swapping are measured.\nThe destination account cannot exist with the swapped …\nThe benchmarks need a way to create asset ids from u32s.\nPallet’s callable functions.\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA type used for calculations concerning the <code>Balance</code> type …\nIt was not possible to get or increment the Id of the pool.\nInsufficient liquidity minted.\nProvided asset pair is not supported for pool.\nThe provided path must consists of 2 assets at least.\nA % the liquidity providers will take of every swap. …\nA successful call of the <code>AddLiquidity</code> extrinsic will …\nA successful call of the <code>RemoveLiquidity</code> extrinsic will …\nA fee to withdraw the liquidity.\nThe max number of hops in a swap.\nThe minimum LP token amount that could be minted. …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nStores the <code>PoolAssetId</code> that is going to be used for the …\nThe provided path must consists of unique assets.\nOptimal calculated amount is less than desired.\nAn overflow happened.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s id, used for deriving its sovereign account …\nAsset class for the lp tokens from <code>Self::PoolAssets</code>.\nRegistry for the lp tokens. Ideally only this pallet …\nA successful call of the <code>CreatePool</code> extrinsic will create …\nPool already exists.\nLiquidity pool identifier.\nProvides means to resolve the <code>Config::PoolId</code> and it’s …\nThe pool doesn’t exist.\nA one-time fee to setup the pool.\nAsset class from <code>Config::Assets</code> used to pay the …\nHandler for the <code>Config::PoolSetupFee</code>.\nMap from <code>PoolAssetId</code> to <code>PoolInfo</code>. This establishes whether …\nProvided maximum amount is not sufficient for swap.\nCalculated amount out is less than provided minimum amount.\nReserve needs to always be greater than or equal to the …\nOverarching event type.\nAssets have been converted from one to another.\nAssets have been converted from one to another. Both …\nPool has been touched in order to fulfill operational …\nWeight information for extrinsics in this pallet.\nDesired amount can’t be zero.\nAmount can’t be zero.\nRequested liquidity can’t be zero.\nProvide liquidity into the pool of <code>asset1</code> and <code>asset2</code>. …\nProvide liquidity into the pool of <code>asset1</code> and <code>asset2</code>. …\nCreates an empty liquidity pool and an associated new …\nCreates an empty liquidity pool and an associated new …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalculates amount in.\nCalculates amount out.\nReturns the next pool asset id for benchmark purposes only.\nReturns the balance of each asset in the pool. The tuple …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>add_liquidity</code>.\nCreate a call with the variant <code>create_pool</code>.\nCreate a call with the variant <code>remove_liquidity</code>.\nCreate a call with the variant <code>swap_exact_tokens_for_tokens</code>…\nCreate a call with the variant <code>swap_tokens_for_exact_tokens</code>…\nCreate a call with the variant <code>touch</code>.\nCalculates the optimal amount from the reserves.\nUsed by the RPC service to provide current prices.\nUsed by the RPC service to provide current prices.\nAllows you to remove liquidity by providing the …\nAllows you to remove liquidity by providing the …\nAuto-generated docs-only module listing all (public and …\nSwap the exact amount of <code>asset1</code> into <code>asset2</code>. <code>amount_out_min</code>…\nSwap the exact amount of <code>asset1</code> into <code>asset2</code>. <code>amount_out_min</code>…\nSwap any amount of <code>asset1</code> to get the exact amount of <code>asset2</code>…\nSwap any amount of <code>asset1</code> to get the exact amount of <code>asset2</code>…\nTouch an existing pool to fulfill prerequisites before …\nTouch an existing pool to fulfill prerequisites before …\nThe amount of the first asset that was removed from the …\nThe amount of the first asset that was added to the pool.\nThe amount of the second asset that was removed from the …\nThe amount of the second asset that was added to the pool.\nThe amount of the first asset that was swapped.\nThe amount of the first asset that was swapped.\nThe amount of the second asset that was received.\nThe amount of the second asset that was received.\nThe account that created the pool.\nThe id of the liquidity tokens that will be minted when …\nThe id of the lp token that was minted.\nThe id of the lp token that was burned.\nThe amount of lp tokens that were burned of that id.\nThe amount of lp tokens that were minted of that id.\nThe account that the liquidity tokens were minted to.\nThe route of asset IDs with amounts that the swap went …\nThe route of asset IDs with amounts that the swap went …\nThe account ID of the pool.\nThe pool id associated with the pool. Note that the order …\nThe pool id of the pool that the liquidity was added to.\nThe pool id that the liquidity was removed from.\nThe ID of the pool.\nThe account that the assets were transferred to.\nThe account that the liquidity was taken from.\nThe account that the liquidity tokens were burned from.\nWhich account was the instigator of the swap.\nThe account initiating the touch.\nThe account that the assets were transferred to.\nLiquidity withdrawal fee (%).\nProvide liquidity into the pool of <code>asset1</code> and <code>asset2</code>. …\nCreates an empty liquidity pool and an associated new …\nAllows you to remove liquidity by providing the …\nSwap the exact amount of <code>asset1</code> into <code>asset2</code>. <code>amount_out_min</code>…\nSwap any amount of <code>asset1</code> to get the exact amount of <code>asset2</code>…\nTouch an existing pool to fulfill prerequisites before …\nStores the <code>PoolAssetId</code> that is going to be used for the …\nMap from <code>PoolAssetId</code> to <code>PoolInfo</code>. This establishes whether …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_asset_conversion</code> using the Substrate …\nWeight functions needed for <code>pallet_asset_conversion</code>.\nStorage: <code>AssetConversion::Pools</code> (r:1 w:0) Proof: …\nStorage: <code>AssetConversion::Pools</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>AssetConversion::Pools</code> (r:1 w:0) Proof: …\nStorage: <code>Assets::Asset</code> (r:4 w:4) Proof: <code>Assets::Asset</code> (…\nStorage: <code>Assets::Asset</code> (r:4 w:4) Proof: <code>Assets::Asset</code> (…\nStorage: <code>AssetConversion::Pools</code> (r:1 w:0) Proof: …")