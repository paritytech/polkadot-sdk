searchState.loadedDescShard("sp_keyring", 0, "Support code for the runtime. A set of test accounts.\nRepresents an error that occurs when parsing a string into …\nTest account crypto for bandersnatch. A set of well-known …\nTest account crypto for ed25519. Support code for the …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTest account crypto for sr25519. Support code for the …\nSet of test accounts.\nAn iterator over the variants of Keyring\nVRFs backed by Bandersnatch, an elliptic curve built over …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nCreate a crypto <code>Pair</code> from a numeric value.\nIdentifier used to match public keys against …\nThe byte length of serialized pre-output.\nThe byte length of serialized public key.\nBandersnatch secret key.\nBandersnatch public key.\nThe byte length of secret key seed.\nThe byte length of serialized signature.\nBandersnatch Schnorr signature.\nDerive a child key from a series of given (hard) junctions.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material.\nDefault implementation for non-aggregatable signatures.\nCalls <code>U::from(self)</code>.\nGenerate VRF output bytes for the given <code>input</code>.\nBandersnatch Ring-VRF types and operations.\nProduce a ring-vrf signature.\nGet the key seed.\nReturn a vector filled with the seed.\nDefault implementation for non-aggregatable signatures.\nBandersnatch VRF types and operations.\n<code>RingVrfSignature</code> serialized size.\n<code>RingVerifierKey</code> serialized size.\nContext used to construct ring prover and verifier.\nRing verifier key\nRing VRF signature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the keyset max size.\nBuild an dummy instance for testing purposes.\nVRF pre-output.\nRing signature.\nGet ring prover for the key at index <code>public_idx</code> in the …\nVerify a ring-vrf signature.\nGet ring verifier for the <code>public_keys</code> set.\nBuild <code>RingVerifierKey</code> for lazy <code>RingVerifier</code> construction.\nConstructs a <code>RingVerifier</code> from a <code>VerifierKey</code> without a …\n<code>VrfSignature</code> serialized size.\nVRF input to construct a <code>VrfPreOutput</code> instance and …\nVRF pre-output derived from <code>VrfInput</code> using a <code>VrfSecret</code>.\nData to be signed via one of the two provided vrf flavors.\nVRF signature.\nAdditional data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate VRF output bytes.\nConstruct a new VRF input.\nConstruct a new data to be signed.\nVRF pre-output.\nVRF proof.\nVRF input.\nSet of test accounts.\nAn iterator over the variants of Keyring\nSimple Ed25519 API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nAn identifier used to match public keys against ed25519 …\nThe byte length of public key\nA key pair.\nA public key.\nThe byte length of signature\nA signature.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nDefault implementation for non-aggregatable signatures.\nCalls <code>U::from(self)</code>.\nGet the public key.\nGet the seed for this key.\nSign a message.\nReturn a vec filled with raw data.\nVerify a signature on a message.\nDefault implementation for non-aggregatable signatures.\nSet of test accounts.\nAn iterator over the variants of Keyring\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all test accounts.\nCreate a crypto <code>Pair</code> from a numeric value.\nGet account id of a <code>numeric</code> account.\nSimple sr25519 (Schnorr-Ristretto) API.\nAn identifier used to match public keys against sr25519 …\nThe byte length of public key\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nThe byte length of signature\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nDefault implementation for non-aggregatable signatures.\nCalls <code>U::from(self)</code>.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nDefault implementation for non-aggregatable signatures.\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF pre-output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF pre-output.\nVRF proof.\nAdd some extra data to be signed.")