searchState.loadedDescShard("pallet_staking_async", 0, "Staking Async Pallet\nPay into a specified account.\nThe active era information, it holds index and start.\nInformation regarding the active era (era in used in …\nThe origin which can manage less critical staking …\nA utility struct that provides a way to check if a given …\nStash is already bonded.\nRewards for this era have already been claimed for this …\nThe stake of this account is already migrated to <code>Fungible</code> …\nController is already paired.\nInternal state has become somehow corrupted and the …\nA nomination target was supplied that was blocked or …\nThe balance type of this pallet.\nMap from all locked “stash” accounts to the controller …\nAn account has bonded this amount. [stash, amount]\nA mapping from still-bonded eras to the first session …\nCustom bound for <code>BondedEras</code> which is equal to …\nNumber of eras that staked funds must remain bonded for.\nNumber of eras that staked funds must remain bonded for.\nSome bound is not met.\nA bounded wrapper for <code>sp_staking::ExposurePage</code>.\nAlias for a bounded set of exposures behind a validator, …\nContains a variant per dispatchable extrinsic that this …\nThe amount of currency given to reporters of a slash event …\nThe slash has been cancelled and cannot be applied.\nCancelled slashes by era and validator with maximum slash …\nThe user has enough bond and thus cannot be chilled …\nStash could not be reaped as other pallet might depend on …\nCannot reset a ledger.\nThe threshold for when users can start calling <code>chill_other</code> …\nAn account has stopped participating as either a validator …\nHistory of claimed paged rewards by era and validator.\nPruning ClaimedRewards storage\nCommission is too low. Must be at least <code>MinCommission</code>.\nConfiguration trait of this pallet.\nPossible operations on the configuration values of this …\nAll the stakers in the system have been consumed since the …\nReport of a controller batch deprecation.\nUsed when attempting to use deprecated controller account …\nThe staking balance.\nJust the <code>Currency::Balance</code> type; we have this item to …\nJust the <code>Currency::Balance</code> type; we have this item to …\nStaking balance migrated from locks to holds, with any …\nConvert a balance into a number used for election …\nConvert a balance into a number used for election …\nThe current planned era index.\nBased on <code>Config</code>. Auto-generated by …\nDuplicate index.\nA bounded list of the “electable” stashes that …\nSomething that provides the election functionality.\nTargets cannot be empty.\nEmitted when calculated era duration exceeds the …\nThe era is not eligible for pruning.\nEra not yet started.\nThe era payout has been set; the first balance is the …\nHandler for determining how much of a balance should be …\nThe payout for validators and the system for the current …\nAn old era with the given index was pruned.\nTracks the current step of era pruning process for each …\nReward points of an era. Used to split era total payout …\nRewards for the last <code>Config::HistoryDepth</code> eras. If reward …\nPruning ErasRewardPoints storage\nSummary of validator exposure at a given era.\nPruning ErasStakersOverview storage\nPaginated exposure of a validator at given era.\nPruning ErasStakersPaged storage\nThe total amount staked for the last <code>Config::HistoryDepth</code> …\nPruning ErasTotalStake storage\nExposure of validator at era with the preferences of …\nPruning ErasValidatorPrefs storage\nThe total validator era payout for the last …\nPruning ErasValidatorReward storage\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nSomething that listens to staking updates and performs …\nSomething that listens to staking updates and performs …\nA snapshot of the stake backing a single validator in the …\nFilter some accounts from participating in staking.\nFilter some accounts from participating in staking.\nA nomination quota that allows up to MAX nominations for …\nForce a new era at the end of all sessions indefinitely.\nMode of era forcing.\nForce a new era, then reset to <code>NotForcing</code> as soon as it is …\nAvoid a new era indefinitely.\nMode of era-forcing.\nAttempting to target a stash that still has funds.\nCan be used to configure the genesis state of this pallet.\nNumber of eras to keep in history.\nNumber of eras to keep in history.\nA reason for placing a hold on funds.\nChilling.\nIncorrect previous history depth input provided.\nThe amount of exposure for an era that an individual …\nCannot bond, nominate or validate with value less than the …\nInvalid era to reward.\nInvalid number of nominations.\nNo nominators exist on this page.\nSlash record not found.\nAny validators that may never be slashed or forcibly …\nA nominator has been kicked from a validator.\nMap from all (unlocked) “controller” accounts to the …\nThe maximum amount of controller accounts that can be …\nThe maximum amount of controller accounts that can be …\nMaximum allowed era duration in milliseconds.\nMaximum allowed era duration in milliseconds.\nThe maximum size of each <code>T::ExposurePage</code>.\nThe maximum size of each <code>T::ExposurePage</code>.\nMaximum number of invulnerable validators.\nMaximum number of invulnerable validators.\nStrict maximum number of nominations that caps the …\nMaximum number of nominations per nominator.\nThe maximum nominator count before we stop allowing new …\nMaximum number of storage items that can be pruned in a …\nMaximum number of storage items that can be pruned in a …\nMaximum staked rewards, i.e. the percentage of the era …\nThe maximum number of <code>unlocking</code> chunks a <code>StakingLedger</code> can …\nThe maximum number of <code>unlocking</code> chunks a <code>StakingLedger</code> can …\nThe absolute maximum of winner validators this pallet …\nThe absolute maximum of winner validators this pallet …\nThe maximum validator count before we stop allowing new …\nAlias for the maximum number of winners (aka. active …\nAlias for the maximum number of winners per page, as …\nThe minimum amount of commission that validators can set.\nThe minimum active bond to become and maintain the role of …\nThe minimum active bond to become and maintain the role of …\nThe minimum active nominator stake of the last successful …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nKeeps track of an ongoing multi-page election solution …\nCan not schedule more unlock chunks.\nCan not rebond without unlocking chunks.\nA record of the nominations made by a specific account.\nSomething that defines the maximum number of nominations …\nSomething that defines the maximum number of nominations …\nSomething that defines the maximum number of nominations …\nDeclaring desire to nominate, delegate, or generally …\nThe map from nominator stash key to their nomination …\nReceive no reward.\nDon’t change.\nNot a controller account.\nNot enough funds available to withdraw.\nNot forcing anything - just let whatever happen.\nNot a stash account.\nStores reported offences in a queue until they are …\nTracks the eras that contain offences in <code>OffenceQueue</code>, …\nAn offence for the given validator, for the given …\nAn offence was reported that was too old to be processed, …\nThe old trait for staking balance. Deprecated and only …\nAn old slashing report from a prior era was discarded …\nPaged snapshot is in progress, the <code>AccountId</code> was the last …\nA page from a multi-page election was fetched. A number of …\nFacade struct to encapsulate <code>PagedExposureMetadata</code> and a …\nThe <code>Pallet</code> struct, the main type that implements traits …\nWhere the reward payment should be made. Keyed by stash.\nA Page of stakers rewards are getting paid. <code>next</code> is <code>None</code> …\nNumber of sessions before the end of an era when the …\nNumber of sessions before the end of an era when the …\nA smart type to determine the <code>Config::PlanningEraOffset</code>, …\nTracks the currently processed offence record from the …\nRepresents the current step in the era pruning process\nInterface to talk to the RC-Client pallet, possibly …\nRemove from storage.\nAccount is restricted from participation in staking. This …\nHandler for the unbalanced increment when rewarding a …\nHandler for the unbalanced increment when rewarding a …\nA destination account for payment.\nProvided reward destination is not allowed.\nCounter for the number of “reward” points earned by a …\nTokens have been minted and are unused for …\nTokens have been minted and are unused for …\nThe nominator has been rewarded by this amount to this …\nOverarching hold reason.\nOverarching hold reason.\nSession change has been triggered.\nNumber of sessions per era, as per the preferences of the …\nNumber of sessions per era, as per the preferences of the …\nSet the given value.\nHandler for the unbalanced reduction when slashing a …\nHandler for the unbalanced reduction when slashing a …\nAn unapplied slash has been cancelled.\nAn offence has been processed and the corresponding slash …\nNumber of eras that slashes are deferred by, after …\nNumber of eras that slashes are deferred by, after …\nThe percentage of the slash that is distributed to …\nA staker (validator or nominator) has been slashed by the …\nStatus of a paged snapshot progress.\nTargets size limit reached.\nVoters size limit reached.\nPay into the stash account, increasing the amount at stake …\nA subsequent event of <code>Withdrawn</code>, indicating that <code>stash</code> was …\nRepresentation of the status of a staker.\nFunds on stake by a nominator or a validator.\nPay into the stash account, not increasing the amount at …\nWIP: This is a noop as of now, the actual business logic …\nThere are too many nominators in the system. Governance …\nToo many nomination targets supplied.\nThere are too many validator candidates in the system. …\nA pending slash record. The value of the slash has been …\nAll unapplied slashes that are queued for later.\nUnapplied slashes in the recently concluded era is …\nAn account has unbonded this amount.\nSomething occurred that should never happen under normal …\nRepresents unexpected or invariant-breaking conditions …\nReceived a validator activation event that is not …\nA simple voter list implementation that does not require …\nA simple sorted list implementation that does not require …\nDeclaring desire in validate, i.e author blocks.\nThe ideal number of active validators.\nPreference of what happens regarding validation.\nA validator has set their preferences.\nAll slashing events on validators, mapped by era to the …\nThe map from (wannabe) validator stash key to the …\nOperation not allowed for virtual stakers.\nStakers whose funds are managed by other pallets.\nSomething that provides a best-effort sorted list of …\nVoter snapshot progress status.\nWaiting for a new snapshot to be requested.\nWeight information for extrinsics in this pallet.\nWeight information for extrinsics in this pallet.\nAn account has called <code>withdraw_unbonded</code> and removed …\ninitial active era, corresponding session index and start …\nReturns the current nominations quota for nominators.\nManually and permissionlessly applies a deferred slash for …\nManually and permissionlessly applies a deferred slash for …\nApply previously-unapplied slashes on the beginning of a …\nContains all the interactions with <code>Config::Currency</code> to …\nStaking pallet benchmarking.\nWhether or not this validator is accepting more …\nTake the origin account as a stash and lock up <code>value</code> of …\nTake the origin account as a stash and lock up <code>value</code> of …\nAdd some extra amount that have appeared in the stash …\nAdd some extra amount that have appeared in the stash …\nFetches the controller bonded to a stash account, if any.\nCancels scheduled slashes for a given era before they are …\nCancels scheduled slashes for a given era before they are …\nDeclare no desire to either validate or nominate.\nDeclare no desire to either validate or nominate.\nDeclare a <code>controller</code> to stop participating as either a …\nDeclare a <code>controller</code> to stop participating as either a …\nReward that validator takes up-front; only the rest is …\nDefault implementations of <code>DefaultConfig</code>, which can be …\nChecks if the given account ID corresponds to a staker.\nReturns the voter’s nomination quota based on its …\nUpdates a batch of controller accounts to their …\nUpdates a batch of controller accounts to their …\nCreate the given number of validators and nominators.\nAuto-generated docs-only module listing all defined …\nThis function will add a nominator to the <code>Nominators</code> …\nThis function will add a validator to the <code>Validators</code> …\nThis function will remove a nominator from the <code>Nominators</code> …\nThis function will remove a validator from the <code>Validators</code> …\nA static size tracker for the election snapshot data.\nDetermine the payout for this era.\nReturns full exposure of a validator for a given era.\nForce a validator to have at least the minimum commission. …\nForce a validator to have at least the minimum commission. …\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of sessions …\nForce there to be a new era at the end of sessions …\nForce there to be no new eras indefinitely.\nForce there to be no new eras indefinitely.\nForce a current staker to become completely unstaked, …\nForce a current staker to become completely unstaked, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance of <code>PagedExposure</code> from legacy clipped …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet all the targets associated are eligible for the npos …\nReturns the voter’s nomination quota within reasonable …\nIncrements the ideal number of validators up to maximum of …\nIncrements the ideal number of validators up to maximum of …\nIndex of era.\nThe reward points earned by a given validator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an <code>Exposure</code> into <code>PagedExposureMetadata</code> and …\nWhether <code>who</code> is a virtual staker whose funds are managed by …\nReturns iterator over voter list, which can have <code>take</code> …\nRemove the given nominations from the calling validator.\nRemove the given nominations from the calling validator.\nA Ledger implementation for stakers.\nFetches the ledger associated with a controller or stash …\nMigrates permissionlessly a stash from locks to holds.\nMigrates permissionlessly a stash from locks to holds.\nOnly meant to be used in tests.\nCreate a call with the variant <code>apply_slash</code>.\nCreate a call with the variant <code>bond</code>.\nCreate a call with the variant <code>bond_extra</code>.\nCreate a call with the variant <code>cancel_deferred_slash</code>.\nCreate a call with the variant <code>chill</code>.\nCreate a call with the variant <code>chill_other</code>.\nCreate a call with the variant <code>deprecate_controller_batch</code>.\nCreate a call with the variant <code>force_apply_min_commission</code>.\nCreate a call with the variant <code>force_new_era</code>.\nCreate a call with the variant <code>force_new_era_always</code>.\nCreate a call with the variant <code>force_no_eras</code>.\nCreate a call with the variant <code>force_unstake</code>.\nCreate a call with the variant <code>increase_validator_count</code>.\nCreate a call with the variant <code>kick</code>.\nCreate a call with the variant <code>migrate_currency</code>.\nCreate a call with the variant <code>nominate</code>.\nCreate a call with the variant <code>payout_stakers</code>.\nCreate a call with the variant <code>payout_stakers_by_page</code>.\nCreate a call with the variant <code>prune_era_step</code>.\nCreate a call with the variant <code>reap_stash</code>.\nCreate a call with the variant <code>rebond</code>.\nCreate a call with the variant <code>restore_ledger</code>.\nCreate a call with the variant <code>scale_validator_count</code>.\nCreate a call with the variant <code>set_controller</code>.\nCreate a call with the variant <code>set_invulnerables</code>.\nCreate a call with the variant <code>set_min_commission</code>.\nCreate a call with the variant <code>set_payee</code>.\nCreate a call with the variant <code>set_staking_configs</code>.\nCreate a call with the variant <code>set_validator_count</code>.\nCreate a call with the variant <code>unbond</code>.\nCreate a call with the variant <code>update_payee</code>.\nCreate a call with the variant <code>validate</code>.\nCreate a call with the variant <code>withdraw_unbonded</code>.\nDeclare the desire to nominate <code>targets</code> for the origin …\nDeclare the desire to nominate <code>targets</code> for the origin …\nAccepts offences only if they are from era …\nWhen we receive a session report from the relay chain, it …\nReturns the portions of nominators stashes that are …\nThe portions of nominators stashes that are exposed.\nAll other slashed stakers and amounts.\nReturns validator’s own stake that is exposed\nThe validator’s own stash that is exposed.\nThe validator’s own slash.\nReturns total exposure of this validator for the current …\nThe amount of payout.\nPay out next page of the stakers behind a validator for …\nPay out next page of the stakers behind a validator for …\nPay out a page of the stakers behind a validator for the …\nPay out a page of the stakers behind a validator for the …\nPerform one step of era pruning to prevent PoV size …\nPerform one step of era pruning to prevent PoV size …\nRemove all data structures concerning a staker/stash once …\nRemove all data structures concerning a staker/stash once …\nRebond a portion of the stash scheduled to be unlocked.\nRebond a portion of the stash scheduled to be unlocked.\nReporters of the offence; bounty payout recipients.\nRestores the state of a ledger which is in an inconsistent …\nRestores the state of a ledger which is in an inconsistent …\nScale up the ideal number of validators by a factor up to …\nScale up the ideal number of validators by a factor up to …\nManages all era rotation logic based on session increments.\n(Re-)sets the controller of a stash to the stash itself. …\n(Re-)sets the controller of a stash to the stash itself. …\nSet the validators who cannot be slashed (if any).\nSet the validators who cannot be slashed (if any).\nSets the minimum amount of commission that each validators …\nSets the minimum amount of commission that each validators …\n(Re-)set the payment target for a controller.\n(Re-)set the payment target for a controller.\nUpdate the various staking configurations .\nUpdate the various staking configurations .\nSets the ideal number of validators.\nSets the ideal number of validators.\nThe total balance that can be slashed from a stash account …\nInternal impl of <code>Self::slashable_balance_of</code> that returns …\nA slashing implementation for NPoS systems.\nSplits self into two instances of exposures.\nMoment of start expressed as millisecond from <code>$UNIX_EPOCH</code>.\nAuto-generated docs-only module listing all (public and …\nThe era the nominations were submitted.\nWhether the nominations have been suppressed. This can …\nThe targets of nomination.\nTesting utils for staking. Provides some common functions …\nReturns total exposure of this validator across pages\nThe total balance backing this validator.\nTotal number of points. Equals the sum of reward points …\nSchedule a portion of the stash to be unlocked ready for …\nSchedule a portion of the stash to be unlocked ready for …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nDeclare the desire to validate for the origin controller.\nDeclare the desire to validate for the origin controller.\nThe stash ID of the offending validator.\nAmount of funds exposed.\nVirtually bonds <code>keyless_who</code> to <code>payee</code> with <code>value</code>.\nSame as <code>weight_of_fn</code>, but made for one time use.\nReturns a closure around <code>slashable_balance_of_vote_weight</code> …\nAutogenerated weights for <code>pallet_staking_async</code>\nThe stash account of the nominator in question.\nRemove any stake that has been fully unbonded and is ready …\nRemove any stake that has been fully unbonded and is ready …\nBurn the amount from the total issuance.\nDeposit newly issued or slashed <code>value</code> into <code>who</code>.\nExistential deposit for the chain.\nBalance of who that can be staked additionally.\nIssue <code>value</code> increasing total issuance.\nRelease all staked amount to <code>who</code>.\nMint <code>value</code> and create account for <code>who</code> if it does not exist.\nMint <code>value</code> into an existing account <code>who</code>.\nSet balance that can be staked for <code>who</code>.\nSlash the value from <code>who</code>.\nStakeable balance of <code>who</code>.\nBalance of <code>who</code> that is currently at stake.\nTotal balance of <code>who</code>. Includes both free and staked.\nTotal issuance of the chain.\nUpdate <code>amount</code> at stake for <code>who</code>.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUsed by the new benchmarking code to specify that a …\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline is allowed to fail here, and we …\nTrait that must be implemented by all structs that can be …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nAsserts that the type implements <em>all</em> of the given traits.\nAsserts that <em>all</em> types in a list are equal to each other.\nA set of benchmarks which can establish a global baseline …\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nAn attribute macro used to declare a benchmark within a …\nGet the benchmark metadata available for this runtime.\nGet the benchmarks available for this pallet. Generally …\nAn attribute macro that can be attached to a (non-empty) …\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nAn attribute macro used to specify that a block should be …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nRepresents the (inclusive) ending number of this <code>ParamRange</code>…\nAn attribute macro used to specify the extrinsic call …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThis creates a test suite which runs the module’s …\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nAn attribute macro that can be attached to a (non-empty) …\nNumber of times to repeat benchmark within the Wasm …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nRepresents the (inclusive) starting number of this …\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nMacros for benchmarking a FRAME runtime.\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nThis caller account is automatically whitelisted for DB …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nGet the benchmark metadata available for this runtime.\nGet the benchmarks available for this pallet. Generally …\nConstruct pallet benchmarks for weighing dispatchables.\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nNumber of times to repeat benchmark within the Wasm …\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nContains macros, structs, and traits associated with v2 of …\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nRuntime api for benchmarking a FRAME runtime.\nThe results of a single of benchmark.\nThe results of a single of benchmark, where time and db …\nConfiguration used to setup and run runtime benchmarks.\nPossible errors returned from the benchmarking pipeline.\nA list of benchmarks available for a particular pallet and …\nAn alphabet of possible parameters to use for benchmarking.\nRecords the time and proof size of a single benchmark …\nResult from running benchmarks on a FRAME pallet. Contains …\nThe pallet benchmarking trait.\nThe required setup for creating a benchmark.\nUsed by the new benchmarking code to specify that a …\nUse the maximum values among all other analysis functions …\nUse median slopes for analyzing the benchmarking results.\nUse minimum squares regression for analyzing the …\nThe benchmarking pipeline is allowed to fail here, and we …\nTrait that must be implemented by all structs that can be …\nThe recording trait used to mark the start and end of a …\nThe benchmarking pipeline is allowed to fail here, and we …\nThe benchmarking pipeline should stop and return the inner …\nNo weight can be determined; set the weight of this call …\nGrab an account, seeded by a name and index.\nThis macro adds pallet benchmarks to a <code>Vec&lt;BenchmarkBatch&gt;</code> …\nAsserts that the type implements <em>all</em> of the given traits.\nAsserts that <em>all</em> types in a list are equal to each other.\nThe extrinsic (or benchmark name) of this benchmark.\nThe extrinsic (or benchmark name) of this benchmark.\nThe encoded name of the benchmark/extrinsic to run.\nAn attribute macro used to declare a benchmark within a …\nGet the benchmark metadata available for this runtime.\nGet the benchmarks available for this pallet. Generally …\nAn attribute macro that can be attached to a (non-empty) …\nSame as <code>benchmarks</code> but for instantiable module.\nSame as <code>benchmarks</code> but for instantiable pallet declared …\nAn attribute macro used to specify that a block should be …\nReturn the components and their ranges which should be …\nGet the number of nanoseconds passed since the UNIX epoch\nThe db tracking results from this benchmark.\nDefines pallet configs that <code>add_benchmarks</code> and …\nDispatch the given benchmark.\nRepresents the (inclusive) ending number of this <code>ParamRange</code>…\nAn attribute macro used to specify the extrinsic call …\nThis creates a test suite which runs the module’s …\nSet up the storage, and prepare a closure to run the …\nThe instance of this pallet being benchmarked.\nThe instance of this pallet being benchmarked.\nThe encoded name of the pallet instance to benchmark.\nAn attribute macro that can be attached to a (non-empty) …\nNumber of times to repeat benchmark within the Wasm …\nThis macro allows users to easily generate a list of …\nThe pallet containing this benchmark.\nThe pallet containing this benchmark.\nThe encoded name of the pallet to benchmark.\nThe results from this benchmark.\nRun the benchmarks for this pallet.\nThe selected component values to use when running the …\nshow error message and debugging info for the case of an …\nRepresents the (inclusive) starting number of this …\nStart the benchmark.\nSame as <code>instance</code> but passing a closure to run before the …\nThe extrinsic timing results from this benchmark.\nSame as <code>instance</code> but passing a no-op recording for unit …\nValidates the passed <code>pov_mode</code>s.\nEnable an extra benchmark iteration which runs the …\nWhitelist the given account.\nThis caller account is automatically whitelisted for DB …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nReturns the value of this parameter type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManually and permissionlessly applies a deferred slash for …\nTake the origin account as a stash and lock up <code>value</code> of …\nAdd some extra amount that have appeared in the stash …\nCancels scheduled slashes for a given era before they are …\nDeclare no desire to either validate or nominate.\nDeclare a <code>controller</code> to stop participating as either a …\nUpdates a batch of controller accounts to their …\nForce a validator to have at least the minimum commission. …\nForce there to be a new era at the end of the next …\nForce there to be a new era at the end of sessions …\nForce there to be no new eras indefinitely.\nForce a current staker to become completely unstaked, …\nIncrements the ideal number of validators up to maximum of …\nRemove the given nominations from the calling validator.\nMigrates permissionlessly a stash from locks to holds.\nDeclare the desire to nominate <code>targets</code> for the origin …\nPay out next page of the stakers behind a validator for …\nPay out a page of the stakers behind a validator for the …\nPerform one step of era pruning to prevent PoV size …\nRemove all data structures concerning a staker/stash once …\nRebond a portion of the stash scheduled to be unlocked.\nRestores the state of a ledger which is in an inconsistent …\nScale up the ideal number of validators by a factor up to …\n(Re-)sets the controller of a stash to the stash itself. …\nSet the validators who cannot be slashed (if any).\nSets the minimum amount of commission that each validators …\n(Re-)set the payment target for a controller.\nUpdate the various staking configurations .\nSets the ideal number of validators.\nSchedule a portion of the stash to be unlocked ready for …\nMigrates an account’s <code>RewardDestination::Controller</code> to …\nDeclare the desire to validate for the origin controller.\nRemove any stake that has been fully unbonded and is ready …\nKeeps track of the SCALE encoded byte length of the …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTries to register a new target.\nTries to register a new voter.\nThe ledger of a (bonded) stash.\nJust a Balance/BlockNumber tuple to encode when a chunk of …\nThe total amount of the stash’s balance that will be at …\nReturns the controller account of a staking ledger.\nThe controller associated with this ledger’s stash.\nEra number at which point it’ll be unlocked.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new instance of a staking ledger.\nSlash the staker for a given amount of balance.\nThe stash account whose balance is actually locked and at …\nThe total amount of the stash’s balance that we are …\nAny balance that is becoming free, which may eventually be …\nAmount of funds to be unlocked.\nA handler for all era-based storage items.\nManages session rotation logic.\nThe session index of the current active era.\nThe session index of a given era.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNext era that is planned to be started.\nLatest era that was planned.\nStore exposure for elected validators at start of an era.\nRepresents an offence record within the staking system, …\nThe specific page of the validator’s exposure currently …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe previous slash fraction of the validator’s stake …\nEra at which the offence was reported.\nThe account ID of the entity that reported the offence.\nThe fraction of the validator’s stake to be slashed for …\nThe active era information, it holds index and start.\nMap from all locked “stash” accounts to the controller …\nA mapping from still-bonded eras to the first session …\nThe amount of currency given to reporters of a slash event …\nCancelled slashes by era and validator with maximum slash …\nThe threshold for when users can start calling <code>chill_other</code> …\nHistory of claimed paged rewards by era and validator.\nThe current planned era index.\nA bounded list of the “electable” stashes that …\nTracks the current step of era pruning process for each …\nRewards for the last <code>Config::HistoryDepth</code> eras. If reward …\nSummary of validator exposure at a given era.\nPaginated exposure of a validator at given era.\nThe total amount staked for the last <code>Config::HistoryDepth</code> …\nExposure of validator at era with the preferences of …\nThe total validator era payout for the last …\nMode of era forcing.\nAny validators that may never be slashed or forcibly …\nMap from all (unlocked) “controller” accounts to the …\nThe maximum nominator count before we stop allowing new …\nMaximum staked rewards, i.e. the percentage of the era …\nThe maximum validator count before we stop allowing new …\nThe minimum amount of commission that validators can set.\nThe minimum active bond to become and maintain the role of …\nThe minimum active bond to become and maintain the role of …\nThe minimum active nominator stake of the last successful …\nKeeps track of an ongoing multi-page election solution …\nThe map from nominator stash key to their nomination …\nStores reported offences in a queue until they are …\nTracks the eras that contain offences in <code>OffenceQueue</code>, …\nWhere the reward payment should be made. Keyed by stash.\nTracks the currently processed offence record from the …\nThe percentage of the slash that is distributed to …\nAll unapplied slashes that are queued for later.\nThe ideal number of active validators.\nAll slashing events on validators, mapped by era to the …\nThe map from (wannabe) validator stash key to the …\nStakers whose funds are managed by other pallets.\nVoter snapshot progress status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function removes all validators and nominators from …\nGrab a funded user.\nGrab a funded user with max Balance.\nCreate a stash and controller pair, where payouts go to a …\nCreate a stash and controller pair.\nCreate a stash and controller pair with fixed balance.\nCreate a unique stash and controller pair.\ncreate <code>max</code> validators.\nThis function generates validators and nominators who are …\ncreate <code>max</code> validators, with a seed to help unintentional …\nget the current era.\nSet active era to the given era index.\nWeights for <code>pallet_staking_async</code> using the Substrate node …\nWeight functions needed for <code>pallet_staking_async</code>.\nStorage: <code>Staking::ActiveEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::CancelledSlashes</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Ledger</code> (r:1502 w:1502) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ForceEra</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::VirtualStakers</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::ErasStakersOverview</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ProcessingOffence</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ActiveEra</code> (r:1 w:0) Proof: …\nStorage: <code>Staking::ActiveEra</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::VirtualStakers</code> (r:1 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>System::Account</code> (r:1 w:0) Proof: <code>System::Account</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:1) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Invulnerables</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::MinCommission</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::ValidatorCount</code> (r:0 w:1) Proof: …\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:0) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…\nStorage: <code>Staking::Ledger</code> (r:1 w:1) Proof: <code>Staking::Ledger</code> (…")