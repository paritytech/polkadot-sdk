searchState.loadedDescShard("pallet_example_kitchensink", 0, "Kitchensink Example Pallet\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_example_kitchensink</code>\nIn all of these examples, we chose a syntax where the …\nLastly, all storage items, as you saw, had to be generic …\nA storage map. This creates a mapping from keys of type <code>u32</code>…\nThe call declaration. This states the entry points that we …\nConfiguration trait of this pallet.\nThis is a normal Rust type, nothing specific to FRAME here.\nThe error enum. Must always be generic over <code>&lt;T&gt;</code>, which is …\nThe event type. This exactly like a normal Rust enum.\nAnd this\nA storage value. We mark this as unbounded, alter its …\nStorage type is <code>StorageValue</code> with value type <code>u32</code>.\nThe genesis config type. This allows the pallet to define …\nAllows you to define an enum on the pallet which will then …\nThis is a FRAME-specific item. It will be placed in the …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nIt is signed by nobody, can be either:\nAllows you to define some origin for the pallet.\nThe pallet struct. There’s nothing special to FRAME …\nSame as <code>StorageDoubleMap</code>, but with arbitrary number of …\nConceptually same as <code>StorageMap&lt;&gt;</code> where the key is a tuple …\nThe system itself ordained this dispatch to happen: this …\nThe overarching runtime event type.\nIt is signed by some public key and we provide the …\nAnother variant.\nA simple struct-style variant. Note that we use <code>AccountId</code> …\nA simple tuple style variant.\nType representing the weight of this pallet\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>set_foo</code>.\nMarks this call as feeless if <code>new_foo</code> is zero.\nMarks this call as feeless if <code>new_foo</code> is zero.\nSimilarly, let the runtime decide this.\nAuto-generated docs-only module listing all (public and …\nMarks this call as feeless if <code>new_foo</code> is zero.\nIn all of these examples, we chose a syntax where the …\nLastly, all storage items, as you saw, had to be generic …\nA storage map. This creates a mapping from keys of type <code>u32</code>…\nA storage value. We mark this as unbounded, alter its …\nWarning: Doc-Only\nSame as <code>StorageDoubleMap</code>, but with arbitrary number of …\nConceptually same as <code>StorageMap&lt;&gt;</code> where the key is a tuple …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeight functions for <code>pallet_example_kitchensink</code>.\nWeight functions needed for pallet_template.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: Kitchensink OtherFoo (r:0 w:1) Proof Skipped: …")