searchState.loadedDescShard("bp_beefy", 0, "Primitives that are used to interact with BEEFY bridge …\nA way to identify a BEEFY validator.\nA way to convert validator id to its raw representation in …\nThe <code>ConsensusEngineId</code> of BEEFY.\nTrait representing BEEFY authority id, including custom …\nBEEFY validator id used by given Substrate chain.\nA way to convert a validator id to its raw representation …\nDetails of a BEEFY authority set.\nBEEFY authority set, containing both validator identifiers …\nBEEFY validator set, containing both validator identifiers …\nHash algorithm, used to compute the digest of the BEEFY …\nConvert BEEFY secp256k1 public keys into Ethereum addresses\nThe type expected for the MMR leaf extra data.\nThe type of the MMR leaf extra data used by the given …\nActual type of leafs in the BEEFY MMR.\nA BEEFY payload type allowing for future extensibility of …\nSigned BEEFY commitment used by given Substrate chain.\nBEEFY validator signature used by given Substrate chain.\nSubstrate-based chain with BEEFY &amp;&amp; MMR pallets deployed.\nA commitment signed by GRANDPA validators as part of BEEFY …\nThe hashing algorithm used to compute the digest of the …\nArbitrary data in its full form.\nIdentity of a BEEFY authority using ECDSA as its crypto.\nSignature for a BEEFY authority using ECDSA as its crypto.\nA hash of some data.\nBasic data, stored by the pallet for every imported …\nData required for initializing the BEEFY pallet.\nA <code>Payload</code> identifier for Merkle Mountain Range root hash.\nAn element representing either full data or its hash.\nThe output type of the hashing algorithm used to build the …\nHash type, used in MMR construction by given Substrate …\nThe hashing algorithm used to build the MMR.\nHash algorithm used in Beefy MMR construction by given …\nAn MMR leaf versioning scheme.\nAn MMR proof data for a group of leaves.\nBEEFY MMR proof type used by the given Substrate chain.\nA commitment with matching GRANDPA validators’ …\nA set of BEEFY authorities, a.k.a. validators.\nA typedef for validator set id.\nBEEFY authority set that will be finalizing descendants of …\nA merkle root of the next BEEFY authority set.\nNumber of the best block, finalized by BEEFY.\nFinalized block number this commitment is for.\nThe commitment signatures are collected for.\nThe commitment signatures are collected for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstruct a new payload given an initial value\nReturns all decoded payload values under given <code>id</code>.\nReturns all the raw payloads under given <code>id</code>.\nReturns a decoded payload value under given <code>id</code>.\nReturns a raw payload under given <code>id</code>.\nRetrieve a hash of this item.\nReturn the validator set id.\nId of the set.\nId of the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProof elements (hashes of siblings of inner nodes on the …\nProof elements (hashes of siblings of inner nodes on the …\nCommitment(s) to BEEFY AuthorityIds.\nCommitment(s) to BEEFY AuthorityIds.\nNumber of leaves in MMR, when the proof was generated.\nNumber of leaves in MMR, when the proof was generated.\nArbitrary extra leaf data to be used by downstream pallets …\nThe indices of the leaves the proof is for.\nThe indices of the leaves the proof is for.\nReturn the number of validators in the set.\nNumber of validators in the set.\nNumber of validators in the set.\nConstruct a root hash of a Binary Merkle Tree created from …\nMMR root at the imported block.\nCreate new version object from <code>major</code> and <code>minor</code> components.\nReturn a validator set with the given validators and set …\nPallet operating mode.\nCurrent block parent number and hash.\nBlock number and hash of the finalized block parent.\nA collection of payloads to be signed, see <code>Payload</code> for …\nPush a <code>Vec&lt;u8&gt;</code> with a given id into the payload vec. This …\nReturn the number of collected signatures.\nGRANDPA validators’ signatures for the commitment.\nGRANDPA validators’ signatures for the commitment.\nSplit the version into <code>major</code> and <code>minor</code> sub-components.\nBEEFY validator set supposed to sign this commitment.\nReturn a reference to the vec of validators.\nVerify a signature.\nStateless MMR proof verification for batch of leaves.\nVerify all the commitment signatures against the validator …\nVersion of the leaf format.")