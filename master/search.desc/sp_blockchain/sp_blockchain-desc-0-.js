searchState.loadedDescShard("sp_blockchain", 0, "Substrate blockchain traits and primitives.\nError when the runtime failed to apply an extrinsic.\nBlockchain database backend. Does not perform any …\nRepresents the block gap resulted by warp sync or fast …\nRepresents the type of block gaps that may result from …\nBlock status.\nCached header metadata. Used to efficiently traverse the …\nResult of  <code>Backend::displaced_leaves_after_finalizing</code>.\nContains the error value\nSubstrate Client error\nError used in case the header metadata is not found.\nHandles stale forks.\nHash and number of a block.\nBlockchain database header backend. Does not perform any …\nHandles header metadata: hash, number, parent hash, etc.\nCaches header metadata in an in-memory LRU cache.\nAlready in the blockchain.\nBlockchain info\nThe block body is missing, as a result of fast sync.\nBoth the header and body are missing, as a result of warp …\nContains the success value\nClient Result type alias\nA error used by various storage subsystems.\nA tree-route from one block to another in the chain.\nNot in the queue or the blockchain.\nThe transaction cannot be included into the current block.\nBest block hash.\nBest block number.\nMissing blocks after warp sync or fast sync.\nConvert an arbitrary block ID into a block hash.\nConvert an arbitrary block ID into a block hash.\nConvert an arbitrary block ID into a block hash.\nConvert an arbitrary block ID into a block hash.\nGet block body. Returns <code>None</code> if block is not found.\nReturn hashes of all blocks that are children of the block …\nGet the common ancestor block. This might be one of the …\nA list of hashes displaced blocks from all displaced …\nA list of hashes and block numbers of displaced leaves.\nReturns all leaves that will be displaced after the block …\nReturns all leaves that will be displaced after the block …\nGet a slice of enacted blocks (descendants of the common …\nThe ending block number of the gap (inclusive).\nReturns block hashes for provided fork heads. It skips the …\nReturns block hashes for provided fork heads. It skips the …\nConvert an arbitrary block ID into a block hash. Returns …\nConvert an arbitrary block ID into a block hash. Returns …\nConvert an arbitrary block ID into a block number. Returns …\nConvert an arbitrary block ID into a block number. Returns …\nGet block header. Returns <code>UnknownBlock</code> error if block is …\nGet block header. Returns <code>UnknownBlock</code> error if block is …\nThe head of the finalized chain.\nLast finalized block number.\nLast finalized state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChain a blockchain error.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nChain a state error.\nConstruct from a state db error.\nThe type of gap.\nGenesis block hash.\nCheck if indexed transaction exists.\nCheck if indexed transaction exists.\nGet block hash by number. Returns <code>None</code> if the header is …\nThe hash of the block.\nHash of the header.\nReturns a collection of hashes for the displaced leaves.\nGet block header. Returns <code>None</code> if block is not found.\nGet single indexed transaction by content hash. Note that …\nGet blockchain info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into all retracted blocks in reverse order …\nGet block justifications. Returns <code>None</code> if no justification …\nReturns the last block.\nGet last finalized block hash.\nReturns hashes of all blocks that are leaves of the block …\nGet the most recent block hash of the longest chain that …\nGet the most recent block hash of the longest chain that …\nGet the lowest common ancestor between two blocks in the …\nCreates a new LRU header metadata cache with <code>capacity</code>.\nCreates a new <code>TreeRoute</code>.\nGet block number by hash. Returns <code>None</code> if the header is …\nThe number of the block.\nBlock number.\nNumber of concurrent leave forks.\nHash of parent header.\nGet a slice of all retracted blocks in reverse order …\nThe starting block number of the gap (inclusive).\nBlock state root.\nGet block status.\nCompute a tree-route between two blocks. See tree-route …")