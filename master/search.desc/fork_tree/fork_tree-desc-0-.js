searchState.loadedDescShard("fork_tree", 0, "Utility library for managing tree-like ordered data with …\nThe tree has changed, optionally return the value …\nError thrown by user when checking for node ancestry.\nAdding duplicate node to tree.\nError occurred when iterating with the tree.\nFiltering action.\nResult of finalizing a node (that could be a part of the …\nA tree data structure that stores several nodes across …\nMaintain the node.\nMaintain the node and its subtree.\nRemove the node and its subtree.\nImported or finalized node that is an ancestor of …\nThe tree has not changed.\nFinalizing descendent of tree node without finalizing …\nRemove from the tree some nodes (and their subtrees) using …\nFinalize a node in the tree. This method will make sure …\nFinalize a root in the tree and return it, return <code>None</code> in …\nFinalize a node in the tree and all its ancestors. The …\nFinalize a root in the tree by either finalizing the node …\nChecks if any node in the tree is finalized by either …\nSame as <code>find_node_where</code>, but returns indices.\nFind a node in the tree that is the deepest ancestor of …\nSame as <code>find_node_where</code>, but returns mutable reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport a new node into the tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates the nodes in the tree in pre-order.\nMap fork tree into values of new types.\nCreate a new empty tree instance.\nPrune the tree, removing all non-canonical nodes.\nRebalance the tree.\nIterates over the existing roots in the tree.")