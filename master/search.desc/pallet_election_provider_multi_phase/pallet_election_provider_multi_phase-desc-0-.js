searchState.loadedDescShard("pallet_election_provider_multi_phase", 0, "Multi phase, offchain election provider pallet.\nRange of active voters.\nConfiguration for the benchmarks of the pallet.\nConversion into bounded types failed.\nRange of desired targets.\nAn error happened in the data provider.\nThe type of <code>Computation</code> that provided this election data.\nInternal errors of the pallet.\nThe emergency phase. This is enabled upon a failing call …\nElection was computed with emergency status.\nElection was computed using the fallback\nAn error nested in the fallback.\nThe fallback election type.\nAn error happened in the feasibility check sub-system.\nErrors that can happen in the feasibility check.\nThe provided round is incorrect.\nThe given score was invalid.\nA vote is invalid.\nA voter is invalid.\nMaximum number of targets expected. This is used only for …\nMaximum number of voters expected. This is used only for …\nAn error in the miner (offchain) sub-system.\nNo solution has been queued.\nInternal error from the election crate.\nNothing, the election is not happening.\nElection was computed on-chain.\nCurrent phase of the pallet.\nA raw, unchecked solution.\nA checked solution, ready to be enacted.\nA snapshot of all the data that is needed for en entire …\nMaximum number of voters expected. This is used only for …\nSigned phase is open.\nElection was computed with a signed submission.\nThe snapshot is not available.\nThis wrapper is created for handling the synchronization …\nThe accuracy of the election, when submitted from …\nThe solution type used by this crate.\nEncodes the length of a solution or a snapshot.\nThe target index. Derived from <code>SolutionOf</code>.\nThe voter index. Derived from <code>SolutionOf</code>.\nRange of targets.\nData Provider returned too many desired targets\nUnsigned phase. First element is whether it is active or …\nElection was computed with an unsigned submission.\nComparison against <code>MinimumUntrustedScore</code> failed.\nRange of voters.\nWrong number of winners presented.\nHow this election was computed.\nconvert a DispatchError to a custom InvalidTransaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome helper functions/macros for this crate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all of the storage items exist at the same time …\nWhether the phase is emergency or not.\nWhether the phase is off or not.\nWhether the phase is signed or not.\nWhether the phase is unsigned or not.\nWhether the phase is unsigned and open or not.\nWhether the phase is unsigned and open or not, with …\nKill all snapshot related storage items at the same time.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe round at which this solution should be submitted.\nThe <em>claimed</em> score of the solution.\nThe score of the solution.\nSet all snapshot related storage items at the same time.\nThe signed phase implementation.\nthe solution itself.\nThe final supports of the solution.\nAll of the targets.\nThe length of targets.\nThe unsigned phase, and its miner.\nAll of the voters.\nThe length of voters.\nAutogenerated weights for …\nGenerate a btree-map cache of the voters and their indices.\nCreate a function to get the stake of a voter.\nCreate a function that can map a target index (…\nCreate a function that returns the index of a target in …\nCreate a function that can map a voter index (…\nCreate a function that returns the index of a voter in the …\nCreate a function that returns the index of a voter in the …\nSame as <code>voter_index_fn</code>, but the returning index is …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe configuration of benchmarking.\nThe minimum amount of improvement to the solution score …\nSome bound not met\nContains a variant per dispatchable extrinsic that this …\nThe call is not allowed at this point.\nConfiguration trait of this pallet.\nCurrency type.\nCurrent phase.\nSomething that will provide the election data.\nDesired number of targets to elect for this round.\nThe maximum number of electing voters and electable …\nAn election failed.\nThe election has been finalized, with the given …\nError of the pallet that can be returned in response to …\nSomething that can predict the fee of a call. Used to …\nThe <code>Event</code> enum of this pallet\nConfiguration for the fallback.\nThe fallback failed\nOrigin that can control this pallet. Note that any action …\nConfiguration of the governance-only fallback.\n<code>Self::insert_submission</code> returned an invalid index.\nThe maximum number of winners that can be elected by this …\nConfigurations of the embedded miner.\nThe priority of the unsigned transaction submitted in the …\nThe minimum score that each ‘untrusted’ solution must …\nSnapshot metadata should exist but didn’t.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nOCW submitted solution for wrong round\nThe repeat threshold of the offchain worker.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThere was a phase transition in a given round.\nSubmission was prepared for a different round.\nSubmission was too early.\nSubmission was too weak, score-wise.\nWrong number of winners presented.\nCurrent best solution, signed or unsigned, queued to be …\nHandler for the rewards.\nAn account has been rewarded for their signed submission …\nInternal counter for the number of rounds.\nThe origin failed to pay the deposit.\nSomething that calculates the signed deposit base based on …\nPer-byte deposit for a signed solution.\nPer-weight deposit for a signed solution.\nWitness data to dispatchable is invalid.\nThe maximum amount of unchecked solutions to refund the …\nMaximum number of signed submissions that can be queued.\nMaximum weight of a signed solution.\nDuration of the signed phase.\nThe queue was full, and the solution was not better than …\nBase reward for a signed solution\nA sorted, bounded vector of <code>(score, block_number, index)</code>, …\nThe next index to be assigned to an incoming signed …\nUnchecked, signed solutions.\nThe signed submission consumes too much weight\nHandler for the slashed deposits.\nAn account has been slashed for submitting an invalid …\nSnapshot data of the round.\nThe metadata of the <code>RoundSnapshot</code>\nA solution was stored with the given compute.\nOCW election solution miner algorithm implementation.\nSubmitted solution has too many winners\nDuration of the unsigned phase.\nThe weight of the pallet.\nCreates the snapshot. Writes new data to:\nCurrent phase.\nCollect a sufficient deposit to store this solution.\nDesired number of targets to elect for this round.\nAuto-generated docs-only module listing all defined …\nChecks if an execution of the offchain worker is permitted …\nChecks the feasibility of a solution.\nFinish the signed phase. Process the signed submissions …\nHelper function for the case where a solution is accepted …\nHelper function for the case where a solution is accepted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nTrigger the governance fallback.\nTrigger the governance fallback.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMine a new npos solution, with all the relevant checks to …\nMine a new solution, cache it, and submit it back to the …\nMine a new solution as a call. Performs all checks.\nMine a new npos solution.\nThe minimum score that each ‘untrusted’ solution must …\nCreate a call with the variant <code>governance_fallback</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>set_minimum_untrusted_score</code>.\nCreate a call with the variant <code>submit</code>.\nCreate a call with the variant <code>submit_unsigned</code>.\nCurrent best solution, signed or unsigned, queued to be …\nAttempt to restore a solution from cache. Otherwise, …\nInternal counter for the number of rounds.\nSet a solution in the queue, to be handed out to the …\nSet a solution in the queue, to be handed out to the …\nSet a new value for <code>MinimumUntrustedScore</code>.\nSet a new value for <code>MinimumUntrustedScore</code>.\n<code>Self</code> accessor for <code>SignedSubmission&lt;T&gt;</code>.\nSnapshot data of the round.\nThe metadata of the <code>RoundSnapshot</code>\nThe weight of the given raw solution.\nAuto-generated docs-only module listing all (public and …\nSubmit a solution for the signed phase.\nSubmit a solution for the signed phase.\nSubmit a solution for the unsigned phase.\nSubmit a solution for the unsigned phase.\nDo the basics checks that MUST happen during the …\nTrigger the governance fallback.\nSet a solution in the queue, to be handed out to the …\nSet a new value for <code>MinimumUntrustedScore</code>.\nSubmit a solution for the signed phase.\nSubmit a solution for the unsigned phase.\nCurrent phase.\nDesired number of targets to elect for this round.\nThe minimum score that each ‘untrusted’ solution must …\nCurrent best solution, signed or unsigned, queued to be …\nInternal counter for the number of rounds.\nA sorted, bounded vector of <code>(score, block_number, index)</code>, …\nThe next index to be assigned to an incoming signed …\nUnchecked, signed solutions.\nSnapshot data of the round.\nThe metadata of the <code>RoundSnapshot</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType that can be used to calculate the deposit base for …\nOutcome of <code>SignedSubmissions::insert</code>.\nThe submission was inserted successfully without ejecting …\nThe submission was inserted successfully. As the queue was …\nThe submission was not inserted because the queue was full …\nA raw, unchecked signed submission.\nMask type which pretends to be a set of …\nAlways sorted vector of a score, submitted at the given …\nDecode the length of the signed submissions without …\nThe deposit reserved for storing this solution.\nThe deposit reserved for storing this solution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the signed submissions from storage.\nInsert a new signed submission into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if the structure is empty.\nIterate through the set of signed submissions in order of …\nGet the length of submitted solutions.\nRemove the signed submission with the highest score from …\nPut the signed submissions back into storage.\nThe raw solution itself.\nThe raw solution itself.\nWho submitted this solution.\nWho submitted this solution.\nThe account id type.\nThe relative distribution of a voter’s stake among the …\nFailed to store a solution.\nThe solution generated from the miner is not feasible.\nThe <code>IndexAssignment</code> type specialized for a particular …\nSomething went wrong fetching the lock.\nMaximum length of the solution that the miner is allowed …\nMaximum number of votes per voter in the snapshots.\nMaximum weight of the solution that the miner is allowed …\nThe maximum number of winners that can be elected.\nA base miner, suitable to be used for both signed and …\nConfigurations for a miner that comes with this pallet.\nError type for operations related to the OCW npos solution …\nSame as <code>VoterOf</code>, but parameterized by the <code>MinerConfig</code>.\nThere are no more voters to remove to trim the solution.\nCannot restore a solution that was not stored.\nAn internal error in the NPoS elections crate.\nSubmitting a transaction to the pool failed.\nThe pre-dispatch checks failed for the mined solution.\nSnapshot data was unavailable unexpectedly.\nThe solution that the miner is mining.\nCached solution is not a <code>submit_unsigned</code> call.\nAn error from the solver.\nError type of the pallet’s <code>crate::Config::Solver</code>.\nReports the trimming result of a mined solution\nA voter’s fundamental data: their ID, their stake, and …\nThe distribution of the voter’s stake.\nThe distribution of the voter’s stake among winning …\nChecks the feasibility of a solution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind the maximum <code>len</code> that a solution can have in order to …\nSame as <code>Pallet::mine_solution</code>, but the input snapshot data …\nConvert a raw solution from …\nSomething that can compute the weight of a solution.\nGreedily reduce the size of the solution to fit into the …\nGreedily reduce the size of the solution to fit into the …\nVoter’s identifier.\nIndex of the voter among the voters list.\nWeights for <code>pallet_election_provider_multi_phase</code> using the …\nWeight functions needed for …\nStorage: <code>ElectionProviderMultiPhase::SnapshotMetadata</code> (r:0 …\nStorage: …\nStorage: <code>ElectionProviderMultiPhase::DesiredTargets</code> (r:1 …\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nStorage: <code>System::Account</code> (r:1 w:1) Proof: <code>System::Account</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Staking::CurrentEra</code> (r:1 w:0) Proof: …\nStorage: <code>ElectionProviderMultiPhase::Round</code> (r:1 w:0) …\nStorage: <code>ElectionProviderMultiPhase::Round</code> (r:1 w:0) …\nStorage: <code>ElectionProviderMultiPhase::CurrentPhase</code> (r:1 w:0)\nStorage: <code>ElectionProviderMultiPhase::CurrentPhase</code> (r:1 w:0)")