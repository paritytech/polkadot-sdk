searchState.loadedDescShard("bp_messages", 0, "Primitives of messages module.\nGeneric info about a messages delivery/confirmation proof.\nBasic operating mode (Normal/Halted)\nA minimized version of <code>pallet-bridge-messages::Call</code> that …\nSubstrate-based chain with messaging support.\nLane is closed and all attempts to send/receive messages …\nDelivered messages with their dispatch result.\nMessage has been received and dispatched. Note that we don…\nThe message proof is empty.\nHard limit on message size that can be sent over the …\nBridge lane identifier.\nError returned by the bridged header chain.\nInbound lane data.\nError returned while reading/decoding inbound lane data …\nInbound message details, returned by runtime APIs.\nThe declared message weight is incorrect.\nMessage has invalid nonce and lane has rejected to accept …\nTrait representing a generic <code>LaneId</code> type.\nLane state.\nBridge lane identifier (legacy).\nThe maximal weight in all dimensions.\nMaximal number of unconfirmed messages in a single …\nMaximal number of unrewarded relayers in a single …\nMessage as it is stored in the storage.\nMessage key (unique message identifier) as it is stored in …\nMessage nonce. Valid messages will never have 0 nonce.\nOpaque message payload. We only decode this payload when …\nError returned while reading/decoding message data from …\nThe message is too large.\nInfo about a <code>ReceiveMessagesProof</code> or a …\nDeclared messages count doesn’t match actual value.\nMessages pallet operating mode.\nLane is opened and messages may be sent/received over it.\nCustom error\nOutbound lane data.\nError returned while reading/decoding outbound lane data …\nOutbound message details, returned by runtime APIs.\nMessages delivery confirmation call info.\nInfo about a <code>ReceiveMessagesDeliveryProof</code> call which tries …\nMessages delivery call info.\nInfo about a <code>ReceiveMessagesProof</code> call which tries to …\nReceived messages with their dispatch result.\nResult of single message receival.\nThe pallet is not accepting outbound messages. Inbound …\nStorage proof related error.\nThere are too many unconfirmed messages at the lane.\nThere are too many unrewarded relayer entries at the lane.\nUnrewarded relayer entry stored in the inbound lane data.\nOccupation state of the unrewarded relayers vector.\nGist of <code>InboundLaneData::relayers</code> field used by runtime …\nError that happens during message verification.\nName of the bridge messages pallet (used in …\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if <code>bundled_range</code> continues the …\nBase messages proof info\nNonce of the first message that has been delivered …\nNonce of the best message, stored by this chain before the …\nReturns range of messages, bundled with the call.\nNonces of messages, included in the call.\nCalculate the number of messages that the relayers have …\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nChecked <code>Weight</code> scalar division. Computes …\nCalculates how many <code>other</code> fit into <code>self</code>.\nChecked <code>Weight</code> scalar multiplication. Computes …\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nReturns true if delivered messages contain message with …\nMessage dispatch weight.\nComputed message dispatch weight.\nConstant version of Div with u64.\nReturns approximate size of the struct, given a number of …\nReturns the approximate size of the struct as u32, given a …\nNonce of the last message that has been delivered …\nThe number of messages that we are ready to accept.\nThe number of remaining unoccupied entries for new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nCreate lane identifier from given hash.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAccess the inner lane representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if lane state allows sending/receiving …\nReturns true if:\nReturns true if outbound lane is ready to accept …\nVerify that the relayers state corresponds with the …\nMessage key.\nId of the lane which is receiving messages.\nReturns lane, used by the call.\nMessage lane, used by the call.\nID of the message lane.\nNonce of the last message that a) has been delivered to …\nNonce of the last message that has been delivered to this …\nNonce of the latest message that has been delivered to the …\nNonce of the latest message, generated by us.\nNonce of the latest message, received by bridged chain.\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nReturn maximal dispatch weight of the message we’re able …\nReturn maximal size of the message the chain with …\nReturn maximal size of the message we’re able to receive.\nMessages range, delivered by this relayer.\nNumber of messages in the oldest entry of …\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nConstant version of Mul with u64.\nCreates new <code>ReceivedMessages</code> structure from given results.\nCreate new <code>DeliveredMessages</code> struct that confirms delivery …\nMessage nonce.\nNonce assigned to the message.\nNote new dispatched message.\nNonce of the oldest message that we haven’t yet pruned. …\nReturns default inbound lane data with opened state.\nReturns default outbound lane data with opened state.\nMessage payload.\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nPush <code>result</code> of the <code>message</code> delivery onto <code>receive_results</code> …\nReturn nonces of all currently queued messages (i.e. …\n…\n<code>pallet-bridge-messages::Call::receive_messages_proof</code>\nResult of messages which we tried to dispatch\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\nIdentifier of the relayer.\nIdentifiers of relayers and messages that they have …\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nSaturating <code>Weight</code> scalar division. Computes …\nSaturating <code>Weight</code> scalar multiplication. Computes …\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nSize of the encoded message.\nPrimitives of messages module, that are used on the source …\nInbound lane state.\nLane state.\nStorage keys of bridge messages pallet.\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nPrimitives of messages module, that are used on the target …\nReturn total count of delivered messages.\nTotal number of messages in the relayers vector.\nReturns the total number of messages in the <code>relayers</code> …\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nCreates a new <code>LaneId</code> type (if supported).\nCreate lane identifier from two locations.\nCreate lane identifier from two locations.\nNumber of entries in the <code>InboundLaneData::relayers</code> set.\nState of unrewarded relayers vector.\nReturn a <code>Weight</code> where all fields are zero.\nTotal dispatch weight of messages in the proof.\nA number of messages in the proof.\nMessages proof.\nMessages delivery proof.\nAccount id of relayer at the <strong>bridged</strong> chain.\n“Digest” of unrewarded relayers state at the bridged …\nManages payments that are happening at the source chain …\nError type.\nError type.\nStructure that may be used in place …\nMessages delivery proof from the bridged chain.\nMessages bridge API to be used from other pallets.\nCallback that is called at the source chain (bridge hub) …\nNumber of messages, delivered by relayers.\nIntermediary structure returned by <code>validate_message()</code>.\nSend message artifacts.\nHash of the bridge header the proof is for.\nNumber of enqueued messages at the lane, after the message …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLane id of which messages were delivered and the proof is …\nNonce of the message.\nNew messages delivery has been confirmed.\nPay rewards for delivering messages to the given relayers.\nSend message over the bridge.\nStorage trie proof generated for <code>Self::bridged_header_hash</code>.\nCheck if the message can be sent over the bridge.\nName of the <code>InboundLanes</code> storage map.\nName of the <code>OPERATING_MODE_VALUE_NAME</code> storage value.\nName of the <code>OutboundLanes</code> storage map.\nName of the <code>OutboundMessages</code> storage map.\nStorage key of the inbound message lane state in the …\nStorage key of the outbound message in the runtime storage.\nStorage key of the <code>PalletOperatingMode</code> value in the …\nStorage key of the outbound message lane state in the …\nManages payments that are happening at the target chain …\nFine-grained result of single message dispatch (for better …\nMessage with decoded dispatch payload.\nMessage data with decoded dispatch payload.\nDecoded message payload type. Valid message may contain …\nError type.\nStructure that may be used in place of  <code>MessageDispatch</code> on …\nMessages proof from bridged chain.\nLane identifier type.\nCalled when inbound message is received.\nProved messages from single lane of the source chain.\nProved messages from the source chain.\nHash of the finalized bridged header the proof is for.\nMessage data with decoded dispatch payload.\nCalled when inbound message is received.\nEstimate dispatch weight.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if dispatcher is ready to accept additional …\nMessage key.\nMessages in this proof are sent over this lane.\nOptional outbound lane state.\nMessages sent through this lane.\nNonce of the last message being delivered.\nNonce of the first message being delivered.\nPay rewards for delivering messages to the given relayer.\nResult of dispatch payload decoding.\nA storage trie proof of messages being delivered.")