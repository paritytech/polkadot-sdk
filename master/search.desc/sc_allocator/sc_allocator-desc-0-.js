searchState.loadedDescShard("sc_allocator", 0, "Collection of allocator implementations.\nMemory allocation stats gathered during the lifetime of …\nAllocator run out of space.\nThe error type used by the allocators.\nAn implementation of freeing bump allocator.\nGrants access to the memory for the allocator.\nThe client passed a memory instance which is smaller than …\nSome other error occurred.\nSomeone tried to allocate more memory than the allowed …\nThe amount of address space (in bytes) used by the …\nGets requested number of bytes to allocate and returns a …\nThe current number of bytes allocated.\nThe peak number of bytes ever allocated.\nThe sum of every allocation ever made.\nDeallocates the space which was allocated for a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGrow the memory by <code>additional</code> pages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the maximum number of pages this memory is allowed …\nCreates a new allocation heap which follows a freeing-bump …\nReturns the current number of pages this memory has …\nReturns the allocation stats for this allocator.\nRun the given closure <code>run</code> and grant it read access to the …\nRun the given closure <code>run</code> and grant it write access to the …")