searchState.loadedDescShard("pallet_utility", 0, "Utility Pallet\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_utility</code>\nBatch of dispatches completed fully with no error.\nBatch of dispatches completed but has errors.\nBatch of dispatches did not complete fully. Index of first …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nA call was dispatched.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA single item within a Batch of dispatches has completed …\nA single item within a Batch of dispatches has completed …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe caller origin, overarching type of all pallets origins.\nThe overarching call type.\nThe overarching event type.\nToo many calls batched.\nWeight information for extrinsics in this pallet.\nSend a call through an indexed pseudonym of the sender.\nSend a call through an indexed pseudonym of the sender.\nSend a batch of dispatch calls.\nSend a batch of dispatch calls.\nSend a batch of dispatch calls and atomically execute them.\nSend a batch of dispatch calls and atomically execute them.\nDerive a derivative account ID from the owner account and …\nDispatches a function call with a provided origin.\nDispatches a function call with a provided origin.\nAuto-generated docs-only module listing all defined …\nSend a batch of dispatch calls. Unlike <code>batch</code>, it allows …\nSend a batch of dispatch calls. Unlike <code>batch</code>, it allows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>as_derivative</code>.\nCreate a call with the variant <code>batch</code>.\nCreate a call with the variant <code>batch_all</code>.\nCreate a call with the variant <code>dispatch_as</code>.\nCreate a call with the variant <code>force_batch</code>.\nCreate a call with the variant <code>with_weight</code>.\nAuto-generated docs-only module listing all (public and …\nDispatch a function call with a specified weight.\nDispatch a function call with a specified weight.\nSend a call through an indexed pseudonym of the sender.\nSend a batch of dispatch calls.\nSend a batch of dispatch calls and atomically execute them.\nDispatches a function call with a provided origin.\nSend a batch of dispatch calls. Unlike <code>batch</code>, it allows …\nDispatch a function call with a specified weight.\nWeights for <code>pallet_utility</code> using the Substrate node and …\nWeight functions needed for <code>pallet_utility</code>.\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nStorage: <code>SafeMode::EnteredUntil</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.")