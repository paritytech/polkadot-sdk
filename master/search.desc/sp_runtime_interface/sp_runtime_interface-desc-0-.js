searchState.loadedDescShard("sp_runtime_interface", 0, "Substrate runtime interface\nThe raw FFI type that is used to pass <code>Self</code> through the …\nThe inner type without any serialization strategy wrapper.\nA raw pointer that can be used in a runtime interface …\nSomething that can be used by the runtime interface as …\nTraits required by the runtime interface from the host …\nPack a pointer and length into an <code>u64</code>.\nProvides host &lt;-&gt; runtime FFI marshalling strategy newtype …\nAttribute macro for transforming a trait declaration into …\nUnpacks an <code>u64</code> into the pointer and length.\nTraits required by the runtime interface from the wasm …\nA type used as a parameter in a host function. Can be …\nA type used as a return value in a host function. Can be …\nThe owned inner type.\nCreates <code>Self::Owned</code> from the given <code>arg</code> received through …\nConvert <code>Self::Inner</code> into an FFI value.\nCreates <code>Self::Inner</code> from an owned value.\nWrite back a modified <code>value</code> back into the runtime’s …\n(DEPRECATED) Return <code>T</code> into the runtime using the SCALE …\n(DEPRECATED) Return <code>T</code> as a blob of bytes into the runtime.\n(DEPRECATED) Return <code>T</code> as a blob of bytes into the runtime.\nPass <code>T</code> through the FFI boundary by first converting it to <code>U</code>…\nPass a <code>T</code> into the host using the SCALE codec.\nPass a <code>&amp;[T]</code> into the host using the SCALE codec.\nPass a value into the host by a fat pointer.\nPass a value into the host by a fat pointer, writing it …\nPass a value into the host by a thin pointer.\nPass a value into the host by a thin pointer.\nPass a pointer into the host and write to it after the …\nReturn <code>T</code> through the FFI boundary by first converting it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructor for the value passed into <code>into_ffi_value</code>.\nA function which implementation can be exchanged.\nA type used as a return value in a host function. Can be …\nA type used as a parameter in a host function. Can be …\nRestores a function implementation on drop.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>Self::Inner</code> from the given FFI value.\nReturns the internal function pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Self::Inner</code> into an FFI type, with an optional …\nCreate a new instance of <code>ExchangeableFunction</code>.\nReplace the implementation with <code>new_impl</code>.")