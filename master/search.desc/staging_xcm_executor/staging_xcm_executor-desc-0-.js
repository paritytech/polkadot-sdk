searchState.loadedDescShard("staging_xcm_executor", 0, "A list of (Origin, Target) pairs allowing a given Origin …\nThe handler for when there is an instruction to claim …\nHandler for exchanging assets.\nHandler for asset locking.\nHow to withdraw and deposit an asset.\nThe general asset trap - handler for when assets are left …\nMap of non-wildcard fungible and non-fungible assets held …\nWhether we should execute the given XCM at all.\nThe call dispatcher used by XCM.\nThe trait to parameterize the <code>XcmExecutor</code>.\nConfigure the fees.\nA struct to specify how fees are being paid.\nAllows optional logic execution for the <code>HrmpChannelAccepted</code>…\nAllows optional logic execution for the <code>HrmpChannelClosing</code> …\nAllows optional logic execution for the …\nCombinations of (Asset, Location) pairs which we trust as …\nCombinations of (Asset, Location) pairs which we trust as …\nThe maximum number of assets we target to have in the …\nThe method of exporting a message.\nHow to get a call origin from a <code>OriginKind</code> value.\nInformation on all pallets.\nWhat to do when a response of a query is found.\nThe outer call dispatch type.\nThe safe call filter for <code>Transact</code>.\nHow we handle version subscription requests.\nThe means of purchasing weight credit for XCM execution.\nTransactional processor for XCM instructions.\nThe origin locations and specific universal junctions to …\nThis chain’s Universal Location.\nThe means of determining an XCM message’s weight.\nThe XCM executor.\nAllows recording the last executed XCM (used by dry-run …\nHow to send an onward XCM message.\nA borrowing iterator over all assets.\nConsumes <code>self</code> and returns its original value excluding …\nReturns <code>true</code> if all <code>assets</code> are contained within <code>self</code>.\nReturns <code>true</code> if <code>asset</code> is contained within <code>self</code>.\nReturns <code>true</code> if all <code>assets</code> are contained within <code>self</code>.\nReturns an error unless all <code>assets</code> are contained in <code>self</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe fungible assets.\nA borrowing iterator over the fungible assets.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA consuming iterator over all assets.\nReturns <code>true</code> if <code>self</code> contains no assets.\nIf true, then the fee assets are taken directly from the …\nTotal number of distinct assets.\nReturn the assets in <code>self</code>, but (asset-wise) of no greater …\nNew value, containing no assets.\nThe non-fungible assets.\nA borrowing iterator over the non-fungible assets.\nExecute any final operations after having executed the XCM …\nAlter any concretely identified assets by prepending the …\nMutate the assets to be interpreted as the same assets …\nMutates <code>self</code> to its original value less <code>mask</code> and returns …\nMutate <code>self</code> to contain the given <code>asset</code>, saturating if …\nMutate <code>self</code> to contain all given <code>assets</code>, saturating if …\nSwaps two mutable AssetsInHolding, without deinitializing …\nVarious traits used in configuring the executor.\nMutates <code>self</code> to its original value less <code>mask</code> and returns …\n<code>Location</code> to <code>AccountId</code> conversion failed.\n<code>u128</code> amount to currency <code>Balance</code> conversion failed.\nA service for exchanging assets.\n<code>Location</code> to <code>AssetId</code>/<code>ClassId</code> conversion failed.\nDefine a handler for notification of an asset being locked …\nThe given asset is not handled. (According to …\nHow to withdraw and deposit an asset.\nErrors related to determining asset transfer support.\nDefines how a call is dispatched with given origin. Allows …\nThe <code>charge_fees</code> API.\nTrait to determine whether the execution engine is …\nDefine any handlers for the <code>AssetClaim</code> instruction.\nMeans of converting a location into an account identifier.\nA converter <code>trait</code> for origin types.\nWhen the <code>DepositReserveAsset</code> instruction is called.\nshould reserve-transfer <code>asset</code> to <code>dest</code>, using <code>dest</code> as …\nDefine a handler for when some non-empty <code>AssetsInHolding</code> …\nErrors associated with <code>MatchesFungibles</code> operation.\nWhen the <code>ExportMessage</code> instruction is called (and includes …\nUtility for delivering a message to a system under a …\nHandle stuff to do with taking fees in certain XCM …\nContext under which a fee is paid.\nFilters assets/location pairs.\nExecutes optional logic when a <code>HrmpChannelAccepted</code> XCM …\nExecutes optional logic when a <code>HrmpChannelClosing</code> XCM …\nExecutes logic when a <code>HrmpNewChannelOpenRequest</code> XCM …\nWhether or not the implementor of the this trait is …\nA structure that performs identity conversion.\nWhen the <code>InitiateReserveWithdraw</code> instruction is called.\nWhen the <code>InitiateTeleport</code> instruction is called.\nWhen the <code>InitiateTransfer</code> instruction is called.\n<code>AssetInstance</code> to non-fungibles instance ID conversion …\nCombinations of (Asset, Location) pairs which we trust as …\nCombinations of (Asset, Location) pairs which we trust as …\nA structure that performs standard conversion using the …\nshould reserve-transfer <code>asset</code> to <code>dest</code>, using local chain …\nWhen the <code>LockAsset</code> instruction is called.\n<code>Enact</code> implementer for <code>prepare_lock</code>. This type may be …\nNo response with the given <code>QueryId</code> was found, or the …\nDefine what needs to be done upon receiving a query …\nThe response has not yet arrived, the XCM might still be …\nProvides mechanisms for transactional processing of XCM …\nProperties of an XCM message and its imminent execution.\nProvides methods to expect responses from XCMs and query …\nWhen the <code>QueryPallet</code> instruction is called.\nThe possible state of an XCM query response.\nThe response has arrived, and includes the inner Response …\nTrait for recording XCMs.\n<code>Enact</code> implementer for <code>prepare_reduce_unlockable</code>. This type …\nshould reserve-transfer <code>asset</code> to <code>dest</code>, using remote chain …\nWhen a reporting instruction is called.\nWhen the <code>RequestUnlock</code> instruction is called.\nTrait to determine whether the execution engine should …\nshould teleport <code>asset</code> to <code>dest</code>\nIntermediate value which connects the two phases of the …\nFacility for asset transacting.\nWhen the <code>TransferReserveAsset</code> instruction is called.\nSpecify which type of asset transfer is required for a …\nGot an unexpected XCM version.\nReserve chain could not be determined for assets.\n<code>Enact</code> implementer for <code>prepare_unlock</code>. This type may be …\nTrait for a type which handles notifying a destination of …\nDetermine the weight of an XCM message.\nCharge for weight in order to execute XCM.\nA trait for identifying asset transfer type based on …\nPurchase execution weight credit in return for up to a …\nEnsure that <code>check_in</code> will do as expected.\nEnsure that <code>check_in</code> will do as expected.\nEnsure that <code>check_out</code> will do as expected.\nEnsure that <code>check_out</code> will do as expected.\nAn asset has been teleported in from the given origin. …\nAn asset has been teleported in from the given origin. …\nAn asset has been teleported out to the given destination. …\nAn asset has been teleported out to the given destination. …\nClaim any assets available to <code>origin</code> and return them in a …\nA filter to distinguish between asset/location pairs.\nConvert the <code>location</code> into <code>Some</code> account ID, or <code>None</code> if not …\nAttempt to convert <code>origin</code> to the generic <code>Origin</code> whilst …\nActually carry out the delivery operation for a previously …\nDeposit the <code>what</code> asset into the account of <code>who</code>.\nDeposit the <code>what</code> asset into the account of <code>who</code>.\nDetermine transfer type to be used for transferring <code>asset</code> …\nDetermine transfer type to be used for transferring <code>asset</code> …\nHandler for receiving dropped assets. Returns the weight …\nEnact a lock. This should generally be infallible if …\nHandler for exchanging an asset.\nMakes sure to expect a response with the given id.\nReturns <code>true</code> if we are expecting a response from <code>origin</code> …\nConvenience function for using a <code>SendXcm</code> implementation. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDo something with the fee which has been paid. Doing …\nReturn the maximum amount of weight that an attempted …\nMove an <code>asset</code> <code>from</code> one location in <code>to</code> another location.\nMove an <code>asset</code> <code>from</code> one location in <code>to</code> another location.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if a location is subscribed to XCM version …\nDetermine if a fee should be waived.\nThe identity of the message, if one is known. If left as …\nCreate a new trader instance.\nAttempt to create a new query ID and register it as a …\nHandler for when a location reports to us that an asset …\nHandler for receiving a <code>response</code> from <code>origin</code> relating to …\nPrepare to lock an asset. On success, a <code>Self::LockTicket</code> …\nHandler for when an owner wishes to unlock an asset on a …\nPrepare to unlock an asset. On success, a …\nProcesses an XCM instruction encapsulated within the …\nHandler for quoting the exchange price of two asset …\nRecord <code>xcm</code>.\nGet recorded XCM. Returns <code>None</code> if no message was sent, or …\nAttempt a refund of <code>weight</code> into some asset. The caller …\nAttempt a refund of <code>weight</code> into some asset. The caller …\nConsume <code>message</code> and return another which is equivalent to …\nEnable or disable recording.\nReturns <code>Ok(())</code> if the given <code>message</code> may be executed.\nWhether or not we should record incoming XCMs.\nStart notifying <code>location</code> should the XCM version of this …\nStop notifying <code>location</code> should the XCM change. Returns an …\nAttempt to remove and return the response of query with ID …\nMove an <code>asset</code> <code>from</code> one location in <code>to</code> another location.\nMove an <code>asset</code> <code>from</code> one location in <code>to</code> another location.\nCheck whether the given <code>message</code> is deliverable to the …\nConvenience function for using a <code>SendXcm</code> implementation. …\nReturn the maximum amount of weight that an attempted …\nThe amount of weight that the system has determined this …\nWithdraw the given asset from the consensus system. Return …\nWithdraw the given asset from the consensus system. Return …\nA structure that performs identity conversion.\nA structure that performs standard conversion using the …")