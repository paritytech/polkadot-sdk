searchState.loadedDescShard("bp_header_chain", 0, "Defines traits which represent a common interface for …\nAverage size of the chain header. We don’t expect to see …\nA GRANDPA Authority List and ID.\nA minimized version of <code>pallet-bridge-grandpa::Call</code> that …\nThe <code>BridgeGrandpaCall</code> for a pallet that bridges with given …\nSubstrate-based chain that is using direct GRANDPA …\nA trait that provides helper methods for querying the …\nThe type returned when encountering an error while looking …\nAbstract finality proof that is justifying block finality.\nHelper trait for finding equivocations in finality proofs.\nA struct that provides helper methods for querying the …\nSubstrate header chain, abstracted from the way it is …\nHeader chain error.\nThe finality-related info associated to a header.\nProcessed Grandpa-related info associated to a header.\nData required for initializing the GRANDPA bridge pallet.\nMax number of GRANDPA authorities at the chain.\nMaximal size of the mandatory chain header. Mandatory …\nA type that can be used as a parameter in a dispatchable …\nMax reasonable number of headers in <code>votes_ancestries</code> …\nError generated by the <code>storage_proof</code> module.\nHeader data that we’re storing on-chain.\nStored header data builder.\nGrandpa-related info associated to a header. This info can …\nResult of checking maximal expected submit finality proof …\nA digest information on the …\nHeader with given hash is missing from the chain.\nName of the bridge GRANDPA pallet (used in …\nList of GRANDPA authorities for the current round.\nThe initial authorities of the pallet.\nNumber of the finality target.\nBuild header data from self.\nAn identifier of the validators set that has signed the …\nExtra size (in bytes) that we assume are included in the …\nExtra size (in bytes) that we assume are included in the …\nExtra weight that we assume is included in the call.\nThe header finality proof.\nThe header finality proof.\nThe header finality proof.\nReturns state (storage) root of given finalized header.\nFind equivocations.\nFind and return forced change digest item. Or light client …\nFind and return scheduled (regular) change digest item.\nReturns <code>true</code> if call size/weight is below our estimations …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe header from which we should start syncing.\n<code>pallet-bridge-grandpa::Call::initialize</code>\n<code>pallet-bridge-grandpa::Call::initialize</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, then the call must be free (assuming that …\nIf <code>true</code>, then the call proves new <strong>mandatory</strong> header.\nA flag that is true if the header is the mandatory header …\nIf true, the call weight is larger than what we have …\nLogic for checking GRANDPA Finality Proofs.\nReturns maximal expected size of <code>submit_finality_proof</code> …\nCreate a new GRANDPA Authority Set.\nThe new verification context introduced by the header.\nThe new verification context introduced by the header.\nThe new verification context introduced by the header.\nHeader number.\nPallet operating mode.\nReturns true if digest contains item that schedules …\nMonotonic identifier of the current GRANDPA authority set.\nThe ID of the initial authority set.\nHeader state root.\nStorage keys of bridge GRANDPA pallet.\n<code>pallet-bridge-grandpa::Call::submit_finality_proof</code>\n<code>pallet-bridge-grandpa::Call::submit_finality_proof</code>\n<code>pallet-bridge-grandpa::Call::submit_finality_proof_ex</code>\n<code>pallet-bridge-grandpa::Call::submit_finality_proof_ex</code>\nChecks whether the given <code>header</code> and its finality <code>proof</code> fit …\nReturn hash of header that this proof is generated for.\nReturn number of header that this proof is generated for.\nGet storage proof checker using finalized header.\nAn identifier of the validators set, that have signed the …\nThe header that we are going to finalize.\nThe header that we are going to finalize.\nAll data, required to initialize the pallet.\nFinality justification for the <code>finality_target</code>.\nFinality justification for the <code>finality_target</code>.\nAn identifier of the validators set, that have signed the …\nThe header that we are going to finalize.\nThe header that we are going to finalize.\nAll data, required to initialize the pallet.\nFinality justification for the <code>finality_target</code>.\nFinality justification for the <code>finality_target</code>.\nVotes ancestries with useful methods.\nJustification contains duplicate authority precommit.\nThe justification contains duplicate headers in its …\nStructure that can extract equivocations from multiple …\nJustification verification error.\nHelper struct for finding equivocations in GRANDPA proofs.\nA GRANDPA Justification is a proof that a given header was …\nCould not convert <code>AuthorityList</code> to <code>VoterSet</code>.\nThe authority has provided an invalid signature.\nJustification is finalizing unexpected header.\nFailed to decode justification.\nThe context needed for validating GRANDPA finality proofs.\nJustification verification error.\nError validating a precommit\nJustification verification error.\nJustification contains redundant votes.\nThe justification contains extra (unused) headers in its …\nThe cumulative weight of all votes in the justification is …\nJustification contains unknown authority precommit.\nThe justification contains precommit for header that is …\nReturns a route if the precommit target block is a …\nThe ID of the authority set used to verify the …\nThe set of votes for the chain which is to be finalized.\nReturn identifier of header that this justification claims …\nDecode justification target.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the equivocation proofs that have been collected.\nReturns reasonable size of justification using constants …\nCreate a new instance of <code>EquivocationsCollector</code>.\nCreates a new instance of <code>AncestryChain</code> starting from a …\nReturns the hash of a block’s parent if the block is …\nParse additional justifications for equivocations.\nGiven GRANDPA authorities set size, return number of valid …\nThe round (voting period) this justification is valid for.\nVerify and optimize given justification by removing …\nVerify that justification, that is generated by given …\nThe authority set used to verify the justification.\nA proof that the chain of blocks in the commit are related …\nName of the <code>BestFinalized</code> storage value.\nName of the <code>CurrentAuthoritySet</code> storage value.\nName of the <code>IsHalted</code> storage value.\nStorage key of the best finalized header number and hash …\nStorage key of the <code>CurrentAuthoritySet</code> variable in the …\nStorage key of the <code>PalletOperatingMode</code> variable in the …")