searchState.loadedDescShard("sc_consensus", 0, "Collection of common consensus specific implementations\nImplement Longest Chain Select implementation where ‘…\nBlock import helpers.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nImport Queue primitive: something which can verify and …\nCalls <code>U::from(self)</code>.\nMetering tools for consensus\nInstantiate a new LongestChain for Backend B\nProvides a generic wrapper around shared data. See …\nAlready in the blockchain.\nApply precomputed changes coming from block execution or …\nData required to check validity of a Block.\nBlock import trait.\nData required to import a Block.\nChanges coming from block execution.\nCustom fork choice rule, where true indicates the new …\nThe error type.\nExecute block body (required) and compute state.\nExecute block body if parent state is available and …\nFork choice strategy.\nWhole new state.\nBlock import result.\nBlock imported.\nAuxiliary data associated with an imported block result.\nImported state data. A vector of key-value pairs that …\nJustification import trait\nControl the synchronization process of block …\nBlock or parent is known to be bad.\nLongest chain fork choice.\nParent state is missing.\nDon’t execute or import state.\nDefines how a new state is computed for a given imported …\nPrecomputed storage.\nBlock parent is not in the chain.\nAllow importing the block if parent block is missing.\nAllow importing the block skipping state verification if …\nAuxiliary consensus data produced by the block. Contains a …\nReceived a bad justification.\nTarget block hash.\nThe body of the block.\nCheck block preconditions.\nClear all pending justification requests.\nClear all pending justification requests.\nWhether to create “block gap” in case this block doesn…\nIs this block finalized already? <code>true</code> implies instant …\nFork choice strategy of this import. This should only be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to a given intermediate.\nGet a mutable reference to a given intermediate.\nHandles any necessary request for justifications (or …\nHash of the block that we verify.\nThe header, without consensus post-digests applied. This …\nOnly the header has been imported. Block body verification …\nImport a block.\nRe-validate existing block.\nRe-validate existing block.\nImport a Block justification and finalize the given block.\nReturns default value for <code>ImportResult::Imported</code> with …\nIndexed transaction body of the block.\nInsert intermediate by given key.\nIntermediate values that are interpreted by block …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the block that was imported is the new best block.\nJustification(s) provided for this block from the outside.\nRequest a justification for the given block.\nCreate a new block import params.\nBlock number of the block that we verify.\nCalled by the import queue when it is started. Returns a …\nOrigin of the Block\nParent hash of the block that we verify.\nDigest items that have been added after the runtime for …\nGet the full header hash (with post-digests applied).\nCached full header hash (with post-digests applied).\nGet the post header.\nRemove and return intermediate by given key.\nRequest a justification for the given block.\nCheck if execution checks that require runtime calls …\nState keys and values.\nSpecify how the new state is computed.\nCheck if this block contains state import action\nBlock is known to be Bad\nInterface to a basic block import queue that is importing …\nBlock import error.\nBlock import successful result.\nShared block import struct used by the queue.\nShared justification import struct used by the queue.\nBlock import has been cancelled. This can happen if the …\nA commonly-used Import Queue type.\nBlocks import queue API.\nImported known block.\nImported unknown block.\nBlock data used by the queue.\nBlock missed header, can’t be imported\nHooks that the verification queue can use to influence the …\nParent state is missing.\nOther error.\nMaps to the RuntimeOrigin used by the network.\nBlock has an unknown parent\nBlock verification failed, can’t be imported\nVerify a justification of a block\nAllow importing the block skipping state verification if …\nBatch of blocks imported, with or without error.\nBlock body if requested.\nProvides the <code>buffered_link</code> utility.\nCheck block preconditions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBlock header hash.\nBlock header if requested.\nImport a block.\nImport a bunch of blocks, every next block must be an …\nRe-validate existing block.\nImport block justifications.\nSingle block import function.\nIndexed block body if requested.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJustification import result.\nJustification(s) if requested.\nInstantiate a new basic queue, with given verifier.\nReturns the imported block number.\nThe peer, we received this from\nThis method should behave in a way similar to <code>Future::poll</code>…\nPoll actions from network.\nRequest a justification for the given block.\nStart asynchronous runner for import queue.\nStart asynchronous runner for import queue.\nGet a copy of the handle to <code>ImportQueueService</code>.\nGet handle to <code>ImportQueueService</code>.\nGet a reference to the handle to <code>ImportQueueService</code>.\nGet a reference to the handle to <code>ImportQueueService</code>.\nSkip block execution and state verification.\nDo not compute new state, but rather set it to the given …\nVerify the given block data and return the …\nInternal buffered message.\nSee <code>buffered_link</code>.\nSee <code>buffered_link</code>.\nWraps around an unbounded channel from the <code>futures</code> crate. …\nClose the channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the sender points to nowhere.\nPoll next element from import queue and send the …\nPolls for the buffered link actions. Any enqueued action …\nSend action for the synchronization to perform.\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the <code>import_blocks</code> method\nCreate an <code>Expectation</code> for mocking the <code>import_justifications</code>…\nCreate an <code>Expectation</code> for mocking the <code>poll_actions</code> method\nCreate an <code>Expectation</code> for mocking the <code>run</code> method\nCreate an <code>Expectation</code> for mocking the <code>service</code> method\nCreate an <code>Expectation</code> for mocking the <code>service_ref</code> method\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;mut self</code> argument …\nSimulating calling the real method for this expectation\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nConvenience method that can be used to supply a return …\nSupply a closure that the <code>Expectation</code> will use to create …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching crieteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nSome shared data that provides support for locking this …\nCreated by <code>SharedData::shared_data_locked</code>.\nCreated by <code>SharedDataLocked::release_mutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>SharedData</code> to share the given …\nRelease the mutex, but keep the shared data locked.\nAcquire access to the shared data.\nAcquire access to the shared data and lock it.\nUpgrade to a <em>real</em> mutex guard that will give access to the …")