searchState.loadedDescShard("sp_wasm_interface", 0, "Types and traits for interfacing between the host and the …\nMaximum number of bytes <code>ReturnValue</code> might occupy when …\nContains the error value\nA wrapper which merges two sets of host functions, and …\nAn <code>f32</code> value type.\nA 32-bit floating-point number stored as raw bit pattern.\nAn <code>f64</code> value type.\nA 64-bit floating-point number stored as raw bit pattern.\nSomething that provides a function implementation on the …\nContext used by <code>Function</code> to interact with the allocator …\nA trait used to statically register host callbacks with …\nSomething that provides implementations for host functions.\nAn <code>i32</code> value type.\nA 32-bit integer.\nAn <code>i64</code> value type.\nA 64-bit integer.\nSomething that can be converted into a wasm compatible …\nA trait that requires <code>RefUnwindSafe</code> when <code>feature = std</code>.\nContains the success value\nType to represent a pointer in wasm at the host.\nSomething that can be wrapped in a wasm <code>Pointer</code>.\nResult type used by traits in this crate.\nTyped value that can be returned from a function.\nThe size of the type in wasm.\nThe Signature of a function\nSomething that can may be created from a wasm <code>Value</code>.\nFor returning nothing.\nThe type of the value in wasm.\nValues supported by Substrate on the boundary between …\nFor returning some concrete value.\nValue types supported by Substrate on the boundary between …\nA trait for types directly usable at the WASM FFI boundary …\nThe word size used in wasm. Normally known as <code>usize</code> in …\nAllocate a memory instance of <code>size</code> bytes.\nThe arguments of a function.\nReturn <code>Self</code> as <code>i32</code>.\nCast this pointer of type <code>T</code> to a pointer of type <code>R</code>.\nDeallocate a given memory instance.\nExecute this function with the given arguments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the host functions <code>Self</code> provides.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>self</code> into a wasm <code>Value</code>.\nReturns the name of this function.\nCreate a new instance of <code>Self</code>.\nCreate a new instance of <code>Signature</code>.\nCreate a new instance of <code>Signature</code> with the given <code>args</code> and …\nCreate a null pointer.\nCalculate the offset from this pointer.\nRead memory from <code>address</code> into a vector.\nRead memory into the given <code>dest</code> buffer from <code>address</code>.\nRegisters a panic error message within the executor.\nStatically registers the host functions.\nRegisters a given host function with the WASM executor.\nThe optional return value of a function.\nReturns the signature of this function.\nTry to convert the given <code>Value</code> into <code>Self</code>.\nReturns the type of this value.\nWraps the given <code>caller</code> in a type which implements …\nWrite the given data at <code>address</code> into the memory.")