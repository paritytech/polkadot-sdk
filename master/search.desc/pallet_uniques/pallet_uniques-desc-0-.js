searchState.loadedDescShard("pallet_uniques", 0, "Unique (Items) Module\nWitness data for the destroy transactions.\nInformation concerning the ownership of a single unique …\nCan thaw tokens, force transfers and burn tokens from any …\nThe approved transferrer of this item, if one is set.\nThe total number of attributes for this collection.\nThe total number of attributes for this collection.\nGeneral information concerning this collection. Limited in …\nGeneral information concerning this item. Limited in …\nThe amount held in the pallet’s default account for this …\nThe balance deposited for this metadata.\nThe balance deposited for this metadata.\nIf <code>true</code>, then no deposit is needed to hold items of this …\nCan freeze tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the collection is frozen for non-admin transfers.\nWhether the item can be transferred or not.\nWhether the collection’s metadata may be changed by a …\nWhether the item metadata may be changed by a non Force …\nCan mint tokens.\nThe total number of outstanding item metadata of this …\nThe total number of items in this collection that have …\nThe total number of outstanding items of this collection.\nThe total number of outstanding items of this collection.\nVarious pieces of common functionality.\nCan change <code>owner</code>, <code>issuer</code>, <code>freezer</code> and <code>admin</code> accounts.\nThe owner of this item.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe total balance deposited for the all storage associated …\nAutogenerated weights for <code>pallet_uniques</code>\nMigrate the pallet storage from <code>0</code> to <code>1</code>.\nThe item ID has already been used for an item.\nAn approval for a <code>delegate</code> account to transfer the <code>item</code> of …\nAn <code>item</code> of a <code>collection</code> has been approved by the <code>owner</code> for …\nAttribute metadata has been cleared for a <code>collection</code> or …\nThe basic amount of funds that must be reserved when …\nNew attribute metadata has been set for a <code>collection</code> or …\nInvalid witness data given.\nThe provided bid is too low.\nAn <code>item</code> was destroyed.\nContains a variant per dispatchable extrinsic that this …\nDetails of a collection.\nThe basic amount of funds that must be reserved for …\nSome <code>collection</code> was frozen.\nIdentifier for the collection of item.\nMax supply has been set for a collection.\nMetadata has been cleared for a <code>collection</code>.\nMetadata of a collection.\nNew metadata has been set for a <code>collection</code>.\nSome <code>collection</code> was thawed.\nConfiguration trait of this pallet.\nStandard collection creation is only allowed if the origin …\nA <code>collection</code> was created.\nThe currency mechanism, used for paying for reserves.\nThe additional funds that must be reserved for the number …\nA <code>collection</code> was destroyed.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA <code>collection</code> was force-created.\nThe origin which may forcibly create or destroy an item or …\nSome <code>item</code> was frozen.\nThe item or collection is frozen.\nA set of helper functions for benchmarking.\nThe item ID is already taken.\n<code>Instance1</code> to be used for instantiable pallets defined with …\nAn <code>item</code> was issued.\nThe items in existence and their ownership details.\nAn item was bought.\nThe basic amount of funds that must be reserved for an …\nThe type used to identify a unique item within a …\nMetadata of an item.\nPrice of an asset instance.\nThe price for the instance was removed.\nThe price was set for the instance.\nA <code>collection</code> has had its attributes changed by the <code>Force</code> …\nThe maximum length of an attribute key.\nThe item is locked.\nLocker trait to enable Locking mechanism downstream.\nThe max supply has already been set.\nAll items have been minted.\nThe provided max supply is less to the amount of items a …\nMetadata has been cleared for an item.\nThe basic amount of funds that must be reserved when …\nNew metadata has been set for an item.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThere is no delegate approved.\nThe signing account has no permission to do the operation.\nItem is not for sale.\nThe owner changed.\nThe collection, if any, of which an account is willing to …\nOwnership acceptance has changed for an account.\nThe <code>Pallet</code> struct, the main type that implements traits …\nMetadata has been cleared for an item.\nThe overarching event type.\nThe maximum length of data stored on-chain.\nThe management team changed.\nSome <code>item</code> was thawed.\nAn <code>item</code> was transferred.\nThe named owner has not signed ownership of the collection …\nNo approval exists that would allow the transfer.\nThe given item ID is unknown.\nThe given item ID is unknown.\nThe maximum length of an attribute value.\nWeight information for extrinsics in this pallet.\nThe delegate turned out to be different to what was …\nThe owner turned out to be different to what was expected.\nApprove an item to be transferred by a delegated …\nApprove an item to be transferred by a delegated …\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nDestroy a single item.\nDestroy a single item.\nAllows to buy an item if it’s up for sale.\nAllows to buy an item if it’s up for sale.\nReturns <code>true</code> if the <code>item</code> of <code>collection</code> may be transferred.\nCancel the prior approval for the transfer of an item by a …\nCancel the prior approval for the transfer of an item by a …\nClear an attribute for a collection or item.\nClear an attribute for a collection or item.\nClear the metadata for a collection.\nClear the metadata for a collection.\nClear the metadata for an item.\nClear the metadata for an item.\nReturns the attribute value of <code>item</code> of <code>collection</code> …\nGet the owner of the item, if the item exists.\nReturns an iterator of the collections in existence.\nIssue a new collection of non-fungible items from a public …\nIssue a new collection of non-fungible items from a public …\nCreate a <code>collection</code> of nonfungible items to be owned by <code>who</code>…\nDestroy a collection of fungible items.\nDestroy a collection of fungible items.\nAuto-generated docs-only module listing all defined …\nBurn (destroy) an item from a collection.\nBuy an item from a collection.\nCreate a new collection with the provided details.\nDestroy a collection along with its associated items and …\nMint (create) a new item within a collection and assign …\nSet or remove the price for an item in a collection.\nPerform a transfer of an item from one account to another …\nIssue a new collection of non-fungible items from a …\nIssue a new collection of non-fungible items from a …\nAlter the attributes of a given item.\nAlter the attributes of a given item.\nDisallow further unprivileged transfer of an item.\nDisallow further unprivileged transfer of an item.\nDisallow further unprivileged transfers for a whole …\nDisallow further unprivileged transfers for a whole …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of the items of a <code>collection</code> in …\nMint an item of a particular collection.\nMint an item of a particular collection.\nCreate a call with the variant <code>approve_transfer</code>.\nCreate a call with the variant <code>burn</code>.\nCreate a call with the variant <code>buy_item</code>.\nCreate a call with the variant <code>cancel_approval</code>.\nCreate a call with the variant <code>clear_attribute</code>.\nCreate a call with the variant <code>clear_collection_metadata</code>.\nCreate a call with the variant <code>clear_metadata</code>.\nCreate a call with the variant <code>create</code>.\nCreate a call with the variant <code>destroy</code>.\nCreate a call with the variant <code>force_create</code>.\nCreate a call with the variant <code>force_item_status</code>.\nCreate a call with the variant <code>freeze</code>.\nCreate a call with the variant <code>freeze_collection</code>.\nCreate a call with the variant <code>mint</code>.\nCreate a call with the variant <code>redeposit</code>.\nCreate a call with the variant <code>set_accept_ownership</code>.\nCreate a call with the variant <code>set_attribute</code>.\nCreate a call with the variant <code>set_collection_max_supply</code>.\nCreate a call with the variant <code>set_collection_metadata</code>.\nCreate a call with the variant <code>set_metadata</code>.\nCreate a call with the variant <code>set_price</code>.\nCreate a call with the variant <code>set_team</code>.\nCreate a call with the variant <code>thaw</code>.\nCreate a call with the variant <code>thaw_collection</code>.\nCreate a call with the variant <code>transfer</code>.\nCreate a call with the variant <code>transfer_ownership</code>.\nReturns an iterator of the items of all collections owned …\nReturns an iterator of the items of <code>collection</code> owned by <code>who</code>…\nGet the owner of the item, if the item exists.\nReevaluate the deposits on some items.\nReevaluate the deposits on some items.\nSet (or reset) the acceptance of ownership for a …\nSet (or reset) the acceptance of ownership for a …\nSet an attribute for a collection or item.\nSet an attribute for a collection or item.\nSet the maximum amount of items a collection could have.\nSet the maximum amount of items a collection could have.\nSet the metadata for a collection.\nSet the metadata for a collection.\nSet the metadata for an item.\nSet the metadata for an item.\nSet (or reset) the price for an item.\nSet (or reset) the price for an item.\nChange the Issuer, Admin and Freezer of a collection.\nChange the Issuer, Admin and Freezer of a collection.\nAuto-generated docs-only module listing all (public and …\nRe-allow unprivileged transfer of an item.\nRe-allow unprivileged transfer of an item.\nRe-allow unprivileged transfers for a whole collection.\nRe-allow unprivileged transfers for a whole collection.\nMove an item from the sender account to another.\nMove an item from the sender account to another.\nChange the Owner of a collection.\nChange the Owner of a collection.\nApprove an item to be transferred by a delegated …\nDestroy a single item.\nAllows to buy an item if it’s up for sale.\nCancel the prior approval for the transfer of an item by a …\nClear an attribute for a collection or item.\nClear the metadata for a collection.\nClear the metadata for an item.\nIssue a new collection of non-fungible items from a public …\nDestroy a collection of fungible items.\nIssue a new collection of non-fungible items from a …\nAlter the attributes of a given item.\nDisallow further unprivileged transfer of an item.\nDisallow further unprivileged transfers for a whole …\nMint an item of a particular collection.\nReevaluate the deposits on some items.\nSet (or reset) the acceptance of ownership for a …\nSet an attribute for a collection or item.\nSet the maximum amount of items a collection could have.\nSet the metadata for a collection.\nSet the metadata for an item.\nSet (or reset) the price for an item.\nChange the Issuer, Admin and Freezer of a collection.\nRe-allow unprivileged transfer of an item.\nRe-allow unprivileged transfers for a whole collection.\nMove an item from the sender account to another.\nChange the Owner of a collection.\nThe items held by any given account; set out this way so …\nAttributes of a collection.\nDetails of a collection.\nThe collections owned by any given account; set out this …\nKeeps track of the number of items a collection might have.\nMetadata of a collection.\nThe items in existence and their ownership details.\nMetadata of an item.\nPrice of an asset instance.\nThe collection, if any, of which an account is willing to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_uniques</code> using the Substrate node and …\nWeight functions needed for <code>pallet_uniques</code>.\nStorage: <code>Uniques::Class</code> (r:1 w:0) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:0) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::OwnershipAcceptance</code> (r:1 w:1) Proof: …\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::CollectionMaxSupply</code> (r:1 w:1) Proof: …\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:0) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Asset</code> (r:1 w:1) Proof: <code>Uniques::Asset</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:1) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::Class</code> (r:1 w:0) Proof: <code>Uniques::Class</code> (…\nStorage: <code>Uniques::OwnershipAcceptance</code> (r:1 w:1) Proof: …")