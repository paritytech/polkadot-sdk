searchState.loadedDescShard("parachains_common", 0, "We assume that ~5% of the block weight is consumed by …\nSome way of identifying an account on the chain. We …\nThe type for looking up accounts. We don’t expect more …\nBalance of an account.\nAn index to a block.\nA message from the runtime to the consensus engine. This …\nDigest item type.\nAn ECDSA/SECP256k1 signature.\nAn Ed25519 signature.\nA hash of some data used by the chain.\nWe allow for 0.5 seconds of compute with a 6 second …\nThis determines the average expected block time that we …\nWe allow <code>Normal</code> extrinsics to fill up the block up to 75%, …\nIndex of a transaction in the chain.\nSome other thing. Unsupported and experimental.\nA pre-runtime digest.\nAn indication for the light clients that the runtime …\nPut a Seal on it. This is only used by native code, and is …\nAlias to 512-bit hash when used in the context of a …\nAn Sr25519 signature.\nTreasury pallet id of the local chain, used to convert …\nAuxiliary struct/enums for parachain runtimes. Taken from …\nHelpers to deal with configuring the message queue in the …\nOpaque types. These are used by the CLI to instantiate …\nType alias to conveniently refer to <code>frame_system</code>’s …\nAllow checking in assets that exists.\nAsset filter that allows all assets from a certain …\nA <code>HandleCredit</code> implementation that naively transfers the …\nType alias to conveniently refer to the <code>Currency::Balance</code> …\nFungible implementation of <code>OnUnbalanced</code> that deals with …\nType alias to conveniently refer to the …\nAllow checking in assets that have issuance &gt; 0.\nImplements <code>OnUnbalanced::on_unbalanced</code> to teleport slashed …\nImplementation of <code>OnUnbalanced</code> that deposits the fees into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNarrow the scope of the <code>Inner</code> query from …\nConvert a sibling <code>ParaId</code> to an <code>AggregateMessageOrigin</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpaque block type.\nOpaque block identifier type.\nIdentify by block header hash.\nOpaque block header type.\nIdentify by block number.\nSimple blob to hold an extrinsic without committing to its …\nA chain-specific digest of data useful for light clients …\nThe accompanying extrinsics.\nThe merkle root of the extrinsics.\nReturns the argument unchanged.\nConvert an encoded extrinsic to an <code>OpaqueExtrinsic</code>.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe block header.\nCalls <code>U::from(self)</code>.\nThe block number.\nThe parent hash.\nThe state trie merkle root\nContains all sibling system parachains, including the one …\nA <code>ChargeFeeInFungibles</code> implementation that converts the …\nAccepts an asset if it is a concrete asset from the system …\nAccepts an asset if it is a native asset from a particular …\nFilter to check if a given location is the parent Relay …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")