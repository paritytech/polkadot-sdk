searchState.loadedDescShard("pallet_atomic_swap", 0, "Atomic Swap\nA swap action that only allows transferring balances.\nHashed proof type.\nPending atomic swap operation.\nDefinition of a pending atomic swap action. It contains …\nAction of this swap.\nCancel the resources reserved in <code>source</code>.\nClaim the reserved resources, with <code>source</code> and <code>target</code>. …\nEnd block of the lock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new swap action value of balance.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReserve the resources needed for the swap, from the given …\nSource of the swap.\nWeight for executing the operation.\nSwap has already been claimed.\nSwap already exists.\nContains a variant per dispatchable extrinsic that this …\nClaim action mismatch.\nConfiguration trait of this pallet.\nDuration has not yet passed for the swap to be cancelled.\nThe <code>Error</code> enum of this pallet.\nEvent of atomic swap pallet.\nSwap proof is invalid.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nSwap created.\nSwap does not exist.\nThe <code>Pallet</code> struct, the main type that implements traits …\nStorage type is <code>StorageDoubleMap</code> with key1 type T :: …\nLimit of proof size.\nProof is too large.\nThe overarching event type.\nSource does not match.\nSwap action.\nSwap cancelled.\nSwap claimed. The last parameter indicates whether the …\nCancel an atomic swap. Only possible after the originally …\nCancel an atomic swap. Only possible after the originally …\nClaim an atomic swap.\nClaim an atomic swap.\nRegister a new atomic swap, declaring an intention to send …\nRegister a new atomic swap, declaring an intention to send …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>cancel_swap</code>.\nCreate a call with the variant <code>claim_swap</code>.\nCreate a call with the variant <code>create_swap</code>.\nAuto-generated docs-only module listing all (public and …\nCancel an atomic swap. Only possible after the originally …\nClaim an atomic swap.\nRegister a new atomic swap, declaring an intention to send …\nWarning: Doc-Only\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.")