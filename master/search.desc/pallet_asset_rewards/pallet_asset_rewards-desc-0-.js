searchState.loadedDescShard("pallet_asset_rewards", 0, "FRAME Staking Rewards Pallet\nThe runtime API for the asset rewards pallet.\nUnique id type for each pool.\nThe state and configuration of an incentive pool.\nConvenience alias for <code>PoolInfo</code>.\nThe state of a staker in a pool.\nWeight functions needed for <code>pallet_asset_rewards</code>.\nAsset Rewards pallet benchmarking.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nGet the cost of creating a pool.\nBenchmark Helper\nReturns the reward asset id.\nReturns the staked asset id.\nIdentifier for each type of asset.\nRegistry of assets that can be configured to either stake …\nFreezer for the Assets.\nThe type in which the assets are measured.\nHelper for benchmarking.\nThere was an error converting a block number.\nPallet’s callable functions.\nConfiguration trait of this pallet.\nMeans for associating a cost with the on-chain storage of …\nThe origin with permission to create pools.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe expiry block must be in the future.\nThe expiry block can be only extended.\nA reason for the pallet placing a hold on funds.\nA reason for the pallet placing a hold on funds.\nInsufficient funds to create the freeze.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nStores the <code>PoolId</code> to use for the next pool.\nThe pool still has staked tokens or rewards.\nAn operation was attempted with a non-existent asset.\nAn operation was attempted on a non-existent pool.\nAn operation was attempted for a non-existent staker.\nThe staker does not have enough tokens to perform the …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet’s unique identifier, used to derive the pool…\nA pool admin was modified.\nA pool information was cleared after it’s completion.\nThe cost associated with storing pool information on-chain …\nA new reward pool was created.\nCost associated with storing pool information on-chain.\nA pool expiry block was modified by the admin.\nA pool reward rate was modified by the admin.\nState of pool stakers.\nState and configuration of each staking pool.\nThe reward rate per block can be only increased.\nAn account harvested some rewards.\nOverarching event type.\nThe overarching freeze reason.\nFunds are staked in the pallet.\nAn account staked some tokens in a pool.\nAn account unstaked some tokens from a pool.\nWeight information for extrinsics in this pallet.\nCleanup a pool.\nCleanup a pool.\nCreate a new reward pool.\nCreate a new reward pool.\nConvenience method to deposit reward tokens into a pool.\nConvenience method to deposit reward tokens into a pool.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHarvest unclaimed pool rewards.\nHarvest unclaimed pool rewards.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>cleanup_pool</code>.\nCreate a call with the variant <code>create_pool</code>.\nCreate a call with the variant <code>deposit_reward_tokens</code>.\nCreate a call with the variant <code>harvest_rewards</code>.\nCreate a call with the variant <code>set_pool_admin</code>.\nCreate a call with the variant <code>set_pool_expiry_block</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>stake</code>.\nCreate a call with the variant <code>unstake</code>.\nDerive a pool account ID from the pool’s ID.\nThe pool creation footprint.\nModify a pool admin.\nModify a pool admin.\nSet when the pool should expire.\nSet when the pool should expire.\nModify a pool reward rate.\nModify a pool reward rate.\nStake additional tokens in a pool.\nStake additional tokens in a pool.\nAuto-generated docs-only module listing all (public and …\nUnstake tokens from a pool.\nUnstake tokens from a pool.\nComputes update pool and staker reward state.\nComputes update pool reward state.\nThe account allowed to modify the pool.\nThe staked asset amount.\nThe unstaked asset amount.\nThe amount of harvested tokens.\nThe account that signed transaction.\nThe account that signed transaction.\nThe account that created the pool.\nThe block the pool will cease to accumulate rewards.\nThe new admin.\nThe new expiry block.\nThe new reward rate per block.\nThe pool.\nThe pool.\nThe pool.\nThe unique ID for the new pool.\nThe modified pool.\nThe modified pool.\nThe modified pool.\nThe cleared pool.\nThe reward asset.\nThe initial reward rate per block.\nThe staking asset.\nThe account that staked assets.\nThe account that unstaked assets.\nThe staker whos rewards were harvested.\nCleanup a pool.\nCreate a new reward pool.\nConvenience method to deposit reward tokens into a pool.\nHarvest unclaimed pool rewards.\nModify a pool admin.\nSet when the pool should expire.\nModify a pool reward rate.\nStake additional tokens in a pool.\nUnstake tokens from a pool.\nStores the <code>PoolId</code> to use for the next pool.\nThe cost associated with storing pool information on-chain …\nState of pool stakers.\nState and configuration of each staking pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")