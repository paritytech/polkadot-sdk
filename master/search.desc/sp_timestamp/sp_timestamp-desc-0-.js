searchState.loadedDescShard("sp_timestamp", 0, "Substrate core types and inherents for timestamps.\nThe identifier for the <code>timestamp</code> inherent.\nProvide duration since unix epoch in millisecond for …\nErrors that can occur while checking the timestamp …\nThe type of the inherent.\nUnit type wrapper that represents a timestamp.\nAuxiliary trait to extract timestamp inherent data.\nThe time between the blocks is too short.\nThe block timestamp is too far in the future.\nReturns <code>self</code> as <code>Duration</code>.\nReturns <code>self</code> as a <code>u64</code> representing the elapsed time since …\nChecked subtraction that returns <code>None</code> on an underflow.\nThe current timestamp using the system time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate <code>Self</code> while using the system time to get the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>Self</code> using the given <code>timestamp</code>.\nCreate new <code>Self</code>.\nReturns the timestamp of this inherent data provider.\nGet timestamp inherent data.\nTry to create an instance ouf of the given identifier and …\nWith the given maximum drift.")