searchState.loadedDescShard("sp_consensus_beefy", 0, "Primitives for BEEFY protocol.\nHook containing helper methods for proving/checking …\nWeight information for the logic in <code>AncestryHelper</code>.\nThe authorities have changed.\nA trait bound which lists all traits which are required to …\nThe index of an authority.\nThe <code>ConsensusEngineId</code> of BEEFY.\nAPI necessary for BEEFY voters.\nTrait representing BEEFY authority id, including custom …\nId of different payloads in the <code>crate::Commitment</code> data.\nHasher used for BEEFY signatures.\nNecessary bounds on the Signature associated with the …\nA commitment signed by GRANDPA validators as part of BEEFY …\nA consensus log item for BEEFY.\nProof showing that an authority voted twice in the same …\nProof showing that an authority voted for a non-canonical …\nProof showing that an authority voted for a future block.\nAuthority set id starts with zero at BEEFY pallet genesis.\nKey type for BEEFY module.\nA commitment signature, accompanied by the id of the …\nThe Hashing used within MMR.\nMMR root hash.\nThe type used to represent an MMR root hash.\nDisable the authority with given index.\nNew BEEFY validator set notification hook.\nAn opaque type used to represent the key ownership proof …\nA BEEFY payload type allowing for future extensibility of …\nTrait for custom BEEFY payload providers.\nType containing proved info about the canonical chain at a …\nA commitment with matching GRANDPA validators’ …\nCurrent active version\nThe data needed for validating the proof.\nA set of BEEFY authorities, a.k.a. validators.\nA typedef for validator set id.\nA SignedCommitment with a version number.\nBEEFY vote message.\nProof containing info about the canonical chain at …\nReturn the block number where BEEFY consensus is …\nFinalized block number this commitment is for.\nBEEFY cryptographic types for BLS crypto\nCheck a commitment signature by encoding the commitment and\nVerifies the equivocation proof by making sure that both …\nThe commitment signatures are collected for.\nCommit to information extracted from a finalized block\nBEEFY cryptographic types for (ECDSA,BLS) crypto pair\nBEEFY cryptographic types for ECDSA crypto\nExtract the validation context from the provided header.\nWeight info for the …\nThe first vote in the equivocation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstruct a new payload given an initial value\nGenerates a proof that the <code>prev_block_number</code> is part of …\nGenerates a proof of key ownership for the given authority …\nGenerates a proof that the <code>prev_block_number</code> is part of …\nReturns all decoded payload values under given <code>id</code>.\nReturns all the raw payloads under given <code>id</code>.\nReturns a decoded payload value under given <code>id</code>.\nReturns a raw payload under given <code>id</code>.\nThe header of the block where the ancestry proof was …\nReturn the validator set id.\nNode authority id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a commitment is pointing to a header on a …\nWeight info for the <code>AncestryHelper::is_non_canonical()</code> …\nRegistry of all known <code>BeefyPayloadId</code>.\nReturn the number of validators in the set.\nBEEFY + MMR utilities.\nReturn a validator set with the given validators and set …\nReturns the authority id of the equivocator.\nFunction called by the pallet when BEEFY validator set …\nProvide BEEFY payload if available for <code>header</code>.\nA collection of payloads to be signed, see <code>Payload</code> for …\nPush a <code>Vec&lt;u8&gt;</code> with a given id into the payload vec. This …\nReturns the round number at which the equivocation …\nThe second vote in the equivocation.\nReturns the set id at which the equivocation occurred.\nThe signature.\nNode signature\nReturn the number of collected signatures.\nGRANDPA validators’ signatures for the commitment.\nSubmits an unsigned extrinsic to report a double voting …\nSubmits an unsigned extrinsic to report a fork voting …\nSubmits an unsigned extrinsic to report a future block …\nTest utilities\nCreates a <code>KnownSignature&lt;TAuthorityId, TSignature&gt;</code> from an …\nTry to decode the <code>AncestryProof</code>.\nThe signing validator.\nReturn the current active BEEFY validator set\nBEEFY validator set supposed to sign this commitment.\nReturn a reference to the vec of validators.\nVerify a signature.\nVerify all the commitment signatures against the validator …\nThe equivocated vote.\nThe equivocated vote.\nPrimitives for light, 2-phase interactive verification …\nIdentity of a BEEFY authority using BLS as its crypto.\nSignature for a BEEFY authority using BLS as its crypto.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic key pair type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic public key type.\nIdentity of a BEEFY authority using (ECDSA,BLS) as its …\nSignature for a BEEFY authority using (ECDSA,BLS) as its …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic key pair type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic public key type.\nIdentity of a BEEFY authority using ECDSA as its crypto.\nSignature for a BEEFY authority using ECDSA as its crypto.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic key pair type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic public key type.\nA <code>Payload</code> identifier for Merkle Mountain Range root hash.\nDetails of a BEEFY authority set.\nA provider for extra data that gets added to the Mmr leaf\nDetails of the next BEEFY authority set.\nA standard leaf that gets added every block to the MMR …\nAn MMR leaf versioning scheme.\nA <code>crate::Payload</code> provider where payload is Merkle Mountain …\nA merkle root of the next BEEFY authority set.\nReturn a vector of bytes, ideally should be a merkle root …\nExtract the MMR root hash from a digest in the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nId of the set.\nId of the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommitment(s) to BEEFY AuthorityIds.\nCommitment(s) to BEEFY AuthorityIds.\nArbitrary extra leaf data to be used by downstream pallets …\nNumber of validators in the set.\nNumber of validators in the set.\nCreate new BEEFY Payload provider with MMR Root as payload.\nCreate new version object from <code>major</code> and <code>minor</code> components.\nCurrent block parent number and hash.\nSplit the version into <code>major</code> and <code>minor</code> sub-components.\nVersion of the leaf format.\nTrait representing BEEFY specific generation and signing …\nSet of test accounts using <code>crate::ecdsa_crypto</code> types.\nAn iterator over the variants of Keyring\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet Keyring from public key.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new <code>DoubleVotingProof</code> based on given arguments.\nCreate a new <code>ForkVotingProof</code> based on vote &amp; canonical …\nCreate a new <code>ForkVotingProof</code> based on vote &amp; canonical …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn key pair.\nReturn public key.\nSign <code>msg</code>.\nGenerate and return signature for <code>message</code> using custom …\nCreate a new <code>VoteMessage</code> from commitment primitives and …\nReturn seed string.\nA light form of SignedCommitment.\nThe full content of the commitment.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConvert SignedCommitment into SignedCommitmentWitness.\nCalls <code>U::from(self)</code>.\nEither a merkle root of signatures in the original signed …\nThe bit vector of validators who signed the commitment.")