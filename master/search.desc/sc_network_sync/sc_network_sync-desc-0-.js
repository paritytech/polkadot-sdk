searchState.loadedDescShard("sc_network_sync", 0, "Blockchain syncing implementation in Substrate.\nEnumerate in ascending order (from child to parent).\nBlock data sent in the response.\nRequest block data from a peer.\nResponse to <code>BlockRequest</code>\nEnumerate in descending order (from parent to canonical …\nBlock enumeration direction.\nA key value state.\nA key-value pair.\nRequest storage data from a peer.\nString value of the enum field names used in the ProtoBuf …\nBlock header hash.\nBlock relay protocol related definitions.\nNested message and enum types in <code>BlockRequest</code>.\nHelper for handling (i.e. answering) block requests from a …\nBlock data for the requested sequence.\nBlock body if requested.\nSet to true when there are no more keys to return.\nReturns the enum value of <code>direction</code>, or the default if the …\nSequence direction. If missing, should be interpreted as …\n<code>SyncingEngine</code> is the actor responsible for syncing …\nA collection of keys-values states. Only populated if …\nA collection of keys-values.\nBits of block data to request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart from this block.\nConverts an <code>i32</code> to a <code>Direction</code>, or <code>None</code> if <code>value</code> is not a …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates an enum from field names used in the ProtoBuf …\nBlock header hash.\nBlock header if requested.\nIndexed block body if requestd.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if justification should be treated as present but …\nReturns <code>true</code> if <code>value</code> is a variant of <code>Direction</code>.\nJustification if requested.\nJustifications if requested. Unlike the field for a single …\nMaximum number of blocks to return. An implementation …\nBlock message queue if requested.\nContains mock implementations of <code>ChainSync</code> and ‘…\nif ‘true’ indicates that response should contain raw …\nIf <code>no_proof</code> is false in request, this contains proof nodes.\nBlock receipt if requested.\n<code>SyncingEngine</code>-related service code\nSets <code>direction</code> to the provided enum value.\nStart from this key. Multiple keys used for nested state …\nHelper for handling (i.e. answering) state requests from a …\nRoot of for this level, empty length bytes if top level.\n<code>SyncingStrategy</code> defines an interface …\nIndicate to the receiver that we support multiple …\nCommon syncing types.\nHelper for handling (i.e. answering) grandpa warp sync …\nThe client side stub to download blocks from peers. This …\nBlock relay specific params for network creation, …\nErrors returned by …\nThe serving side of the block relay protocol. It runs a …\nFailed to decode the response bytes.\nFailed to extract the blocks from the decoded bytes.\nParses the protocol specific response to retrieve the …\nPerforms the protocol specific sequence to fetch the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProtocol name used by block downloader.\nStarts the protocol processing.\nStart from this block.\nStart with given hash.\nStart with given block number.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe full block server implementation of <code>BlockServer</code>. It …\nThe full block downloader implementation of `…\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a <code>RequestResponseProtocolConfig</code> for the block …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRequestHandler</code>.\nA collection of blocks being downloaded.\nBlock data with origin.\nThe Block Message from the wire\nClear everything.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInsert a set of blocks into collection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a set of block hashes that require a header …\nCreate a new instance.\nThe peer, we received this from\nGet a valid chain of blocks ordered in descending order …\nThe “major syncing” metric.\nPeer information\nMake sure an important block is propagated to peers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds a set of blocks known to this peer.\nPush a block announce validation.\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>download_blocks</code> …\nCreate an <code>Expectation</code> for mocking the <code>protocol_name</code> method\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;self</code> argument and …\nCall this <code>Expectation</code> as if it were the real method.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a reference to a constant value from the <code>Expectation</code>\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>add_known_address</code> …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>add_reserved_peer</code> …\nCreate an <code>Expectation</code> for mocking the <code>blocks_processed</code> …\nCreate an <code>Expectation</code> for mocking the <code>deny_unreserved_peers</code>…\nCreate an <code>Expectation</code> for mocking the <code>disconnect_peer</code> …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>peer_reputation</code> …\nCreate an <code>Expectation</code> for mocking the <code>peer_role</code> method\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>remove_reserved_peer</code> …\nCreate an <code>Expectation</code> for mocking the <code>report_peer</code> method\nCreate an <code>Expectation</code> for mocking the <code>request</code> method\nCreate an <code>Expectation</code> for mocking the <code>request_justification</code>…\nCreate an <code>Expectation</code> for mocking the <code>reserved_peers</code> method\nCreate an <code>Expectation</code> for mocking the <code>set_authorized_only</code> …\nCreate an <code>Expectation</code> for mocking the <code>set_authorized_peers</code> …\nCreate an <code>Expectation</code> for mocking the <code>set_reserved_peers</code> …\nCreate an <code>Expectation</code> for mocking the <code>set_sync_fork_request</code>…\nCreate an <code>Expectation</code> for mocking the <code>start_request</code> method\nCreate an <code>Expectation</code> for mocking the <code>sync_num_connected</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nCall <code>NetworkPeers::disconnect_peer()</code>\nNetwork-related services required by <code>sc-network-sync</code>\nHandle that is (temporarily) passed to <code>ChainSync</code> so it can …\nNetwork service provider for <code>ChainSync</code>\nCall <code>NetworkPeers::report_peer()</code>\nCall <code>NetworkRequest::start_request()</code>\nCommands that <code>ChainSync</code> wishes to send to <code>NetworkService</code>\nDisconnect peer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet handle to talk to the provider\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>NetworkServiceProvider</code>\nCreate new service handle\nReport peer\nRun the <code>NetworkServiceProvider</code>\nSend request to peer\nHandle for communicating with <code>SyncingEngine</code> asynchronously\nCommands send to <code>SyncingEngine</code>\nGet syncing event stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new handle\nGet the number of active peers.\nGet the number of peers known to <code>SyncingEngine</code> (both full …\nGet the number of downloaded blocks.\nGet the number of sync requests.\nNotify the <code>SyncingEngine</code> that a block has been finalized.\nGet peer information.\nRequest a justification for the given block from the …\nConfigure an explicit fork sync request.\nGet sync status\nGet high-level view of the syncing status.\nHandler for incoming block requests from a remote peer.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a <code>RequestResponseProtocolConfig</code> for the state …\nCalls <code>U::from(self)</code>.\nCreate a new <code>StateRequestHandler</code>.\nRun <code>StateRequestHandler</code>.\nDrop stale request.\nPeer misbehaved. Disconnect, report it and cancel any …\nStrategy finished. Nothing to do, this is handled by …\nImport blocks.\nImport justifications.\nStart request to peer.\nThe key identifying a specific strategy for responses …\nSyncing strategy for syncing engine to use\nGet actions that should be performed by the owner on the …\nNotify syncing state machine that a new sync peer has …\nContains the state of the chain synchronization process\nClear extra justification requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the syncing action has completed.\nInstantiate opaque strategy key.\nGet the total number of downloaded blocks.\nGet the number of peers known to the syncing strategy.\nGet an estimate of the number of parallel sync requests.\nNotify a syncing strategy that a block has been finalized.\nA batch of blocks that have been processed, with or …\nProcess generic response.\nReport a justification import (successful or not).\nSubmit a validated block announcement.\n<code>PolkadotSyncingStrategy</code> is a proxy between …\nNotify that a sync peer has disconnected.\nRequest extra justification.\nConfigure an explicit fork sync request in case external …\nState sync strategy.\nState sync support.\nReturns the current sync status.\nInform sync about a new best imported block.\nWarp syncing strategy. Bootstraps chain by downloading …\nThe main data structure which contains all the state for a …\nSync operation mode.\nFull block download and verification.\nDownload blocks and the latest state.\nStrategy key used by chain sync.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nValidate that the given <code>blocks</code> are correct. Returns the …\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nProxy to specific syncing strategies used in Polkadot.\nSyncing configuration containing data for …\nBlock downloader\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of blocks to request.\nThe number of parallel downloads to guard against slow …\nPrometheus metrics registry.\nNumber of peers that need to be connected before warp sync …\nSyncing mode.\nInitialize a new syncing strategy.\nProceed with the next strategy if the active one finished.\nProtocol name used to send out state requests\nStrategy key used by state sync.\nSyncing strategy that downloads and imports a recent state …\nGet actions that should be performed.\nNotify that a new peer has connected.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCheck if state sync has succeeded.\nCreate a new instance.\nCreate a new instance with a custom state sync provider.\nA batch of blocks have been processed, with or without …\nProcess state response.\nSubmit a validated block announcement.\nNotify that a peer has disconnected.\nReturns the current sync status.\nBad state chunk.\nContinue downloading.\nState is complete and ready for import.\nImport state chunk result.\nState sync state machine.\nReported state download progress.\nGeneric state sync provider. Used for mocking in tests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nValidate and import a state response.\nValidate and import a state response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the state is complete.\nCheck if the state is complete.\nCreate a new instance.\nProduce next state request.\nProduce next state request.\nEstimated download percentage.\nCurrent state sync phase.\nReturns state sync estimated progress.\nReturns state sync estimated progress.\nTotal state size in bytes downloaded so far.\nReturns target block hash.\nReturns target block hash.\nReturns target block number.\nReturns target block number.\nA list of Grandpa authorities with associated weights.\nWaiting for peers to connect.\nTarget finality is proved.\nWarp sync is complete.\nDownloading block history.\nDownloading state data.\nDownloading target block.\nDownloading and verifying grandpa warp proofs.\nScale-encoded warp sync proof response.\nImporting state.\nProof is valid, but the target was not reached.\nStrategy key used by warp sync.\nThe monotonic identifier of a GRANDPA set of authorities.\nProof verification result.\nWarp sync request\nWarp sync state machine. Accumulates warp proofs and state.\nWarp sync configuration as accepted by <code>WarpSync</code>.\nReported warp sync phase.\nReported warp sync progress.\nWarp sync backend. Handles retrieving and verifying warp …\nStandard warp sync for the chain.\nSkip downloading proofs and use provided header of the …\nGet actions that should be performed by the owner on …\nNotify that a new peer has connected.\nStart collecting proofs from this block.\nGet current list of authorities. This is supposed to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate proof starting at given block hash. The proof is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance. When passing a warp sync provider …\nGet the number of peers known to warp sync.\nProcess (target) block response.\nSubmit a validated block announcement.\nProcess warp proof response.\nEstimated download percentage.\nReturns warp sync estimated progress (stage, bytes …\nNotify that a peer has disconnected.\nReturns the current sync status.\nTake the result of finished warp sync, returning <code>None</code> if …\nTotal bytes downloaded so far.\nVerify warp proof against current set of authorities.\nA peer did not behave as expected and should be reported.\nActively catching up with the chain.\nInfo about a peer’s known state (both full and light).\nInitial sync is complete, keep-up sync is active.\nAll blocks are downloaded and are being imported.\nPeer that the syncing implementation is tracking connected.\nPeer that the syncing implementation was tracking …\nThe sync status of a peer we are trying to sync with\nSyncing-related events that other protocols can subscribe …\nReported sync state.\nSyncing status and statistics.\nProvides high-level status of syncing.\nTheir best block hash.\nPeer best block hash\nTheir best block number.\nPeer best block number\nTarget sync block number.\nSubscribe to syncing-related events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre we actively catching up with the chain?\nNumber of peers participating in syncing.\nNumber of blocks queued for import\nRoles\nCurrent global sync state.\nState sync status in progress, if any.\nGet high-level view of the syncing status.\nWarp sync in progress, if any.\nHandler for incoming grandpa warp sync requests from a …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a <code>RequestResponseProtocolConfig</code> for the grandpa …\nCalls <code>U::from(self)</code>.\nCreate a new <code>RequestHandler</code>.\nRun <code>RequestHandler</code>.")