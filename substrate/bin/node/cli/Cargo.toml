[package]
name = "node-cli"
version = "2.0.0"
authors = ["Parity Technologies <admin@parity.io>"]
description = "Substrate node implementation in Rust."
build = "build.rs"
edition = "2018"
default-run = "substrate"

[badges]
travis-ci = { repository = "paritytech/substrate", branch = "master" }
maintenance = { status = "actively-developed" }
is-it-maintained-issue-resolution = { repository = "paritytech/substrate" }
is-it-maintained-open-issues = { repository = "paritytech/substrate" }

[[bin]]
name = "substrate"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
codec = { package = "parity-scale-codec", version = "1.0.6" }
serde = { version = "1.0.102", features = ["derive"] }
futures01 = { package = "futures", version = "0.1.29" }
futures = { version = "0.3.1", features = ["compat"] }
hex-literal = "0.2.1"
jsonrpc-core = "14.0.3"
log = "0.4.8"
rand = "0.7.2"
structopt = "0.3.3"

# primitives
sp-authority-discovery = { path = "../../../primitives/authority-discovery"}
sp-consensus-babe = { path = "../../../primitives/consensus/babe" }
grandpa-primitives = { package = "sp-finality-grandpa", path = "../../../primitives/finality-grandpa" }
sp-core = { path = "../../../primitives/core" }
sp-runtime = { path = "../../../primitives/runtime" }
sp-timestamp = { path = "../../../primitives/timestamp", default-features = false }
sp-finality-tracker = { path = "../../../primitives/finality-tracker", default-features = false }
sp-inherents = { path = "../../../primitives/inherents" }
sp-keyring = { path = "../../../primitives/keyring" }
sp-io = { path = "../../../primitives/io" }
sp-consensus = { path = "../../../primitives/consensus/common" }

# client dependencies
sc-client-api = { path = "../../../client/api" }
sc-client = { path = "../../../client/" }
sc-chain-spec = { path = "../../../client/chain-spec" }
sc-transaction-pool = { path = "../../../client/transaction-pool" }
sp-transaction-pool = { path = "../../../primitives/transaction-pool" }
sc-network = { path = "../../../client/network" }
sc-consensus-babe = { path = "../../../client/consensus/babe" }
grandpa = { package = "sc-finality-grandpa", path = "../../../client/finality-grandpa" }
sc-client-db = { path = "../../../client/db", default-features = false }
sc-offchain = { path = "../../../client/offchain" }
sc-rpc = { path = "../../../client/rpc" }
sc-basic-authority = { path = "../../../client/basic-authorship" }
sc-service = { path = "../../../client/service", default-features = false }
sc-telemetry = { path = "../../../client/telemetry" }
sc-authority-discovery = { path = "../../../client/authority-discovery"}

# frame dependencies
pallet-indices = { path = "../../../frame/indices" }
pallet-timestamp = { path = "../../../frame/timestamp", default-features = false }
pallet-contracts = { path = "../../../frame/contracts" }
frame-system = { path = "../../../frame/system" }
pallet-balances = { path = "../../../frame/balances" }
pallet-transaction-payment = { path = "../../../frame/transaction-payment" }
frame-support = { path = "../../../frame/support", default-features = false }
pallet-im-online = { path = "../../../frame/im-online", default-features = false }
pallet-authority-discovery = { path = "../../../frame/authority-discovery"}

# node-specific dependencies
node-runtime = { path = "../runtime" }
node-rpc = { path = "../rpc" }
node-primitives = { path = "../primitives" }
node-executor = { path = "../executor" }

# CLI-specific dependencies
tokio = { version = "0.1.22", optional = true }
sc-cli = { path = "../../../client/cli", optional = true }
ctrlc = { version = "3.1.3", features = ["termination"], optional = true }
node-transaction-factory = { path = "../transaction-factory", optional = true }

# WASM-specific dependencies
libp2p = { version = "0.13.0", default-features = false, optional = true }
clear_on_drop = { version = "0.2.3", features = ["no_cc"], optional = true }	# Imported just for the `no_cc` feature
console_error_panic_hook = { version = "0.1.1", optional = true }
console_log = { version = "0.1.2", optional = true }
js-sys = { version = "0.3.22", optional = true }
wasm-bindgen = { version = "0.2.45", optional = true }
wasm-bindgen-futures = { version = "0.3.22", optional = true }
kvdb-memorydb = { version = "0.1.1", optional = true }
rand6 = { package = "rand", version = "0.6", features = ["wasm-bindgen"], optional = true }	# Imported just for the `wasm-bindgen` feature

[dev-dependencies]
sc-keystore = { path = "../../../client/keystore" }
sc-consensus-babe = { path = "../../../client/consensus/babe", features = ["test-helpers"] }
sc-service-test = { path = "../../../client/service/test" }
futures = "0.3.1"
tempfile = "3.1.0"

[build-dependencies]
sc-cli = { package = "sc-cli", path = "../../../client/cli" }
build-script-utils = { package = "substrate-build-script-utils", path = "../../../utils/build-script-utils" }
structopt = "0.3.3"
vergen = "3.0.4"

[features]
default = ["cli"]
browser = [
	"clear_on_drop",
	"console_error_panic_hook",
	"console_log",
	"js-sys",
	"libp2p",
	"wasm-bindgen",
	"wasm-bindgen-futures",
	"kvdb-memorydb",
	"rand/wasm-bindgen",
	"rand6"
]
cli = [
	"sc-cli",
	"node-transaction-factory",
	"tokio",
	"ctrlc",
	"sc-service/rocksdb",
	"node-executor/wasmi-errno",
]
wasmtime = [
	"cli",
	"node-executor/wasmtime",
	"sc-cli/wasmtime",
	"sc-service/wasmtime",
]
