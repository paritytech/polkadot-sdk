[package]
name = "sc-executor-wasmtime"
version = "0.29.0"
authors.workspace = true
edition.workspace = true
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
homepage = "https://substrate.io"
repository.workspace = true
description = "Defines a `WasmRuntime` that uses the Wasmtime JIT to execute."
readme = "README.md"

[lints]
workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
log = { workspace = true, default-features = true }
cfg-if = { workspace = true }
libc = { workspace = true }
parking_lot = { workspace = true, default-features = true }

# When bumping wasmtime do not forget to also bump rustix
# to exactly the same version as used by wasmtime!
wasmtime = { features = [
	"cache",
	"cranelift",
	"jitdump",
	"parallel-compilation",
	"pooling-allocator",
], workspace = true }
anyhow = { workspace = true }
sc-allocator = { workspace = true, default-features = true }
sc-executor-common = { workspace = true, default-features = true }
sp-runtime-interface = { workspace = true, default-features = true }
sp-wasm-interface = { features = ["wasmtime"], workspace = true, default-features = true }

# Here we include the rustix crate in the exactly same semver-compatible version as used by
# wasmtime and enable its 'use-libc' flag.
#
# By default rustix directly calls the appropriate syscalls completely bypassing libc;
# this doesn't have any actual benefits for us besides making it harder to debug memory
# problems (since then `mmap` etc. cannot be easily hooked into).
rustix = { features = ["fs", "mm", "param", "std", "use-libc"], workspace = true }

[dev-dependencies]
wat = { workspace = true }
sc-runtime-test = { workspace = true }
sp-io = { workspace = true, default-features = true }
tempfile = { workspace = true }
paste = { workspace = true, default-features = true }
codec = { workspace = true, default-features = true }
cargo_metadata = { workspace = true }
