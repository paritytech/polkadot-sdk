// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-19, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(c: u32, s: u32, ) -> Weight;
	fn call(c: u32, ) -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(3_603_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_217_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_000
			.saturating_add((36_769_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(54_463_000 as Weight)
			// Standard Error: 105_000
			.saturating_add((77_542_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(184_114_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((117_247_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 5_000
			.saturating_add((1_542_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(183_501_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((5_645_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_473_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(173_411_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_639_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(125_839_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_123_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(131_793_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((231_138_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(129_995_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((231_839_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(129_710_000 as Weight)
			// Standard Error: 85_000
			.saturating_add((227_268_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(133_445_000 as Weight)
			// Standard Error: 144_000
			.saturating_add((487_125_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(129_299_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((227_118_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(126_120_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((227_326_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(130_934_000 as Weight)
			// Standard Error: 89_000
			.saturating_add((226_638_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(128_738_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((227_062_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(132_375_000 as Weight)
			// Standard Error: 88_000
			.saturating_add((226_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(127_888_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((227_851_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(131_825_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((420_149_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(113_641_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((113_068_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(122_982_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((6_828_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(131_913_000 as Weight)
			// Standard Error: 0
			.saturating_add((275_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(114_164_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((4_318_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(123_940_000 as Weight)
			// Standard Error: 0
			.saturating_add((664_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(123_340_000 as Weight)
			// Standard Error: 99_000
			.saturating_add((89_126_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(217_499_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((5_608_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(149_019_000 as Weight)
			// Standard Error: 903_000
			.saturating_add((87_433_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(18_255_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((5_142_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 141_000
			.saturating_add((2_478_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_242_000
			.saturating_add((2_935_421_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(140_411_000 as Weight)
			// Standard Error: 146_000
			.saturating_add((566_687_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(132_048_000 as Weight)
			// Standard Error: 308_000
			.saturating_add((818_622_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_080_578_000 as Weight)
			// Standard Error: 2_337_000
			.saturating_add((534_525_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 460_000
			.saturating_add((167_990_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(123_998_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((155_113_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_debug_message(r: u32, ) -> Weight {
		(120_514_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((124_243_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(47_131_000 as Weight)
			// Standard Error: 931_000
			.saturating_add((4_033_062_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(549_577_000 as Weight)
			// Standard Error: 192_000
			.saturating_add((57_815_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_635_000
			.saturating_add((1_214_454_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_044_000
			.saturating_add((883_653_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(568_190_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((106_420_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_553_000
			.saturating_add((4_810_405_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_671_000
			.saturating_add((10_965_308_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(10_138_403_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((264_871_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 67_846_000
			.saturating_add((3_793_372_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 21_000
			.saturating_add((49_168_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 22_000
			.saturating_add((71_664_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(205 as Weight))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 34_546_000
			.saturating_add((19_938_393_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(8_861_543_000 as Weight)
			// Standard Error: 566_000
			.saturating_add((585_057_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 80_000
			.saturating_add((52_025_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 80_000
			.saturating_add((75_956_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 80_000
			.saturating_add((198_033_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes(204 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(129_022_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((216_764_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(414_489_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((481_873_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(127_636_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((225_094_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(216_668_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((331_423_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(129_582_000 as Weight)
			// Standard Error: 97_000
			.saturating_add((198_429_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(288_991_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((148_497_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(128_711_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((197_050_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(275_444_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((148_469_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(20_089_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((3_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(22_187_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((162_969_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(22_292_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((233_277_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(20_083_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((12_378_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_091_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((12_195_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_082_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((6_151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(20_031_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((13_978_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(20_063_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((15_524_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_332_000 as Weight)
			// Standard Error: 0
			.saturating_add((117_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(20_446_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((90_977_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(28_119_000 as Weight)
			// Standard Error: 390_000
			.saturating_add((192_865_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(228_352_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((3_891_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(37_745_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((3_135_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(37_639_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_541_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(37_639_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((4_813_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_379_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_757_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(23_378_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((8_437_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(22_245_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_446_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(20_714_000 as Weight)
			// Standard Error: 478_000
			.saturating_add((2_314_540_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(20_126_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((5_316_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((5_344_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_135_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_909_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_515_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_229_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_113_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(20_070_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((5_226_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(20_090_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((5_296_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(20_095_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_323_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_043_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_280_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(20_061_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_226_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(20_072_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_315_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(20_054_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_228_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(20_169_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_262_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(20_115_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_212_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_122_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_166_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(20_140_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_242_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_365_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_179_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_144_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_143_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_129_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_247_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_953_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(20_093_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((12_040_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(20_102_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((12_945_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(20_132_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_199_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_155_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_103_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_088_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_213_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_060_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_275_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(20_104_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_282_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_111_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_264_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_096_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_347_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(20_091_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_370_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(20_102_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((7_266_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(3_603_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_217_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_000
			.saturating_add((36_769_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(54_463_000 as Weight)
			// Standard Error: 105_000
			.saturating_add((77_542_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(184_114_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((117_247_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 5_000
			.saturating_add((1_542_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(183_501_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((5_645_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_473_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(173_411_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_639_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(125_839_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_123_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(131_793_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((231_138_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(129_995_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((231_839_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(129_710_000 as Weight)
			// Standard Error: 85_000
			.saturating_add((227_268_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(133_445_000 as Weight)
			// Standard Error: 144_000
			.saturating_add((487_125_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(129_299_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((227_118_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(126_120_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((227_326_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(130_934_000 as Weight)
			// Standard Error: 89_000
			.saturating_add((226_638_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(128_738_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((227_062_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(132_375_000 as Weight)
			// Standard Error: 88_000
			.saturating_add((226_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(127_888_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((227_851_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(131_825_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((420_149_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(113_641_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((113_068_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(122_982_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((6_828_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(131_913_000 as Weight)
			// Standard Error: 0
			.saturating_add((275_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(114_164_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((4_318_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(123_940_000 as Weight)
			// Standard Error: 0
			.saturating_add((664_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(123_340_000 as Weight)
			// Standard Error: 99_000
			.saturating_add((89_126_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(217_499_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((5_608_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(149_019_000 as Weight)
			// Standard Error: 903_000
			.saturating_add((87_433_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(18_255_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((5_142_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 141_000
			.saturating_add((2_478_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_242_000
			.saturating_add((2_935_421_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(140_411_000 as Weight)
			// Standard Error: 146_000
			.saturating_add((566_687_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(132_048_000 as Weight)
			// Standard Error: 308_000
			.saturating_add((818_622_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_080_578_000 as Weight)
			// Standard Error: 2_337_000
			.saturating_add((534_525_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 460_000
			.saturating_add((167_990_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(123_998_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((155_113_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_debug_message(r: u32, ) -> Weight {
		(120_514_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((124_243_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(47_131_000 as Weight)
			// Standard Error: 931_000
			.saturating_add((4_033_062_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(549_577_000 as Weight)
			// Standard Error: 192_000
			.saturating_add((57_815_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_635_000
			.saturating_add((1_214_454_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_044_000
			.saturating_add((883_653_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(568_190_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((106_420_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_553_000
			.saturating_add((4_810_405_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_671_000
			.saturating_add((10_965_308_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(10_138_403_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((264_871_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 67_846_000
			.saturating_add((3_793_372_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 21_000
			.saturating_add((49_168_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 22_000
			.saturating_add((71_664_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 34_546_000
			.saturating_add((19_938_393_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(8_861_543_000 as Weight)
			// Standard Error: 566_000
			.saturating_add((585_057_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 80_000
			.saturating_add((52_025_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 80_000
			.saturating_add((75_956_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 80_000
			.saturating_add((198_033_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes(204 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(129_022_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((216_764_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(414_489_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((481_873_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(127_636_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((225_094_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(216_668_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((331_423_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(129_582_000 as Weight)
			// Standard Error: 97_000
			.saturating_add((198_429_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(288_991_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((148_497_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(128_711_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((197_050_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(275_444_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((148_469_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(20_089_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((3_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(22_187_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((162_969_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(22_292_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((233_277_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(20_083_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((12_378_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_091_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((12_195_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_082_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((6_151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(20_031_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((13_978_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(20_063_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((15_524_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_332_000 as Weight)
			// Standard Error: 0
			.saturating_add((117_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(20_446_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((90_977_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(28_119_000 as Weight)
			// Standard Error: 390_000
			.saturating_add((192_865_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(228_352_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((3_891_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(37_745_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((3_135_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(37_639_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_541_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(37_639_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((4_813_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_379_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_757_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(23_378_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((8_437_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(22_245_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_446_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(20_714_000 as Weight)
			// Standard Error: 478_000
			.saturating_add((2_314_540_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(20_126_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((5_316_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((5_344_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_135_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_909_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_515_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_229_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_113_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(20_070_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((5_226_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(20_090_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((5_296_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(20_095_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_323_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_043_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_280_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(20_061_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_226_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(20_072_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_315_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(20_054_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_228_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(20_169_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_262_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(20_115_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_212_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_122_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_166_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(20_140_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_242_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_365_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_179_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_144_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_143_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_129_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_247_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_107_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_953_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(20_093_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((12_040_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(20_102_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((12_945_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(20_132_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_199_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_155_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_103_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_088_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_213_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_060_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_275_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(20_104_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_282_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_111_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_264_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_096_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_347_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(20_091_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_370_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(20_102_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((7_266_000 as Weight).saturating_mul(r as Weight))
	}
}
