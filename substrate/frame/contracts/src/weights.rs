// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.1
//! DATE: 2021-02-04, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn update_schedule() -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn claim_surcharge() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_delta(d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(3_947_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(46_644_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_295_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 164_000
			.saturating_add((165_220_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(28_195_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 126_000
			.saturating_add((154_196_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 63_000
			.saturating_add((2_764_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn instantiate(s: u32, ) -> Weight {
		(201_407_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_247_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn call() -> Weight {
		(180_337_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge() -> Weight {
		(322_371_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(135_499_000 as Weight)
			// Standard Error: 296_000
			.saturating_add((275_938_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(132_674_000 as Weight)
			// Standard Error: 158_000
			.saturating_add((273_808_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(126_819_000 as Weight)
			// Standard Error: 145_000
			.saturating_add((269_173_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(140_223_000 as Weight)
			// Standard Error: 259_000
			.saturating_add((581_353_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(129_490_000 as Weight)
			// Standard Error: 132_000
			.saturating_add((269_433_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(127_251_000 as Weight)
			// Standard Error: 161_000
			.saturating_add((268_720_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(129_546_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((268_280_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(133_306_000 as Weight)
			// Standard Error: 208_000
			.saturating_add((604_235_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(133_689_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((267_107_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(133_773_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((268_897_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(133_222_000 as Weight)
			// Standard Error: 476_000
			.saturating_add((514_400_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(118_769_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((134_134_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(124_719_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((7_486_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(136_348_000 as Weight)
			// Standard Error: 0
			.saturating_add((274_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(118_710_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((4_566_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(127_609_000 as Weight)
			// Standard Error: 0
			.saturating_add((786_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(125_463_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((106_188_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(219_195_000 as Weight)
			// Standard Error: 361_000
			.saturating_add((131_326_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(6_742_000 as Weight)
			// Standard Error: 2_484_000
			.saturating_add((3_747_735_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(137_248_000 as Weight)
			// Standard Error: 662_000
			.saturating_add((661_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(147_654_000 as Weight)
			// Standard Error: 305_000
			.saturating_add((935_148_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_246_123_000 as Weight)
			// Standard Error: 2_807_000
			.saturating_add((585_535_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 553_000
			.saturating_add((249_976_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(140_588_000 as Weight)
			// Standard Error: 228_000
			.saturating_add((707_872_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(2_767_124_000 as Weight)
			// Standard Error: 18_504_000
			.saturating_add((17_507_873_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_748_586_000 as Weight)
			// Standard Error: 359_000
			.saturating_add((75_231_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_209_000
			.saturating_add((2_261_355_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(83_780_000 as Weight)
			// Standard Error: 965_000
			.saturating_add((973_164_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(728_625_000 as Weight)
			// Standard Error: 294_000
			.saturating_add((154_625_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_543_000
			.saturating_add((5_467_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 9_216_000
			.saturating_add((10_265_093_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(10_426_869_000 as Weight)
			// Standard Error: 114_622_000
			.saturating_add((4_366_037_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 40_000
			.saturating_add((59_741_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 43_000
			.saturating_add((82_331_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 35_927_000
			.saturating_add((21_088_623_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(17_200_760_000 as Weight)
			// Standard Error: 157_000
			.saturating_add((61_221_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 157_000
			.saturating_add((84_149_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 157_000
			.saturating_add((284_655_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(207 as Weight))
			.saturating_add(T::DbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(126_005_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((252_338_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(727_930_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((430_299_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(129_778_000 as Weight)
			// Standard Error: 146_000
			.saturating_add((266_097_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(683_078_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((344_294_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(141_731_000 as Weight)
			// Standard Error: 251_000
			.saturating_add((239_931_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(563_895_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((160_216_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(132_587_000 as Weight)
			// Standard Error: 159_000
			.saturating_add((239_287_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(606_572_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((160_101_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(24_366_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((3_114_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(26_779_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((161_654_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(26_763_000 as Weight)
			// Standard Error: 88_000
			.saturating_add((232_822_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(24_342_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((12_530_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(24_301_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((12_106_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_253_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((6_464_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(24_259_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((14_030_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(24_313_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((15_788_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(37_991_000 as Weight)
			// Standard Error: 0
			.saturating_add((138_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(24_739_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((97_567_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(32_395_000 as Weight)
			// Standard Error: 432_000
			.saturating_add((198_972_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(238_857_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((3_491_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(42_196_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((3_161_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(42_133_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((3_459_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(42_164_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((4_653_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(27_802_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((7_780_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(27_826_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((11_978_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(26_753_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((3_494_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(25_078_000 as Weight)
			// Standard Error: 4_213_000
			.saturating_add((2_324_209_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(24_301_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((5_201_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(24_237_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((5_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(24_290_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_780_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(24_278_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((5_145_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(24_249_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((5_248_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(24_266_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((5_236_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(24_236_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((5_304_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(24_262_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_220_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(24_287_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_072_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(24_211_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_196_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(24_175_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_392_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(24_209_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_131_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(24_261_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_203_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(24_258_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_120_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(24_236_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_076_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(24_262_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_261_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(24_242_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_249_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(24_248_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((7_149_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(24_243_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_128_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(24_217_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_237_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(24_191_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((12_970_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_213_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((12_106_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(24_238_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((12_944_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_317_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_129_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(24_282_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_123_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(24_243_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_148_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(24_239_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_157_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(24_279_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(24_285_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((7_333_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(24_298_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_228_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(24_226_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_269_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(24_235_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_299_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(3_947_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(46_644_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_295_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 164_000
			.saturating_add((165_220_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(28_195_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 126_000
			.saturating_add((154_196_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 63_000
			.saturating_add((2_764_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn instantiate(s: u32, ) -> Weight {
		(201_407_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_247_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn call() -> Weight {
		(180_337_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge() -> Weight {
		(322_371_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(135_499_000 as Weight)
			// Standard Error: 296_000
			.saturating_add((275_938_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(132_674_000 as Weight)
			// Standard Error: 158_000
			.saturating_add((273_808_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(126_819_000 as Weight)
			// Standard Error: 145_000
			.saturating_add((269_173_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(140_223_000 as Weight)
			// Standard Error: 259_000
			.saturating_add((581_353_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(129_490_000 as Weight)
			// Standard Error: 132_000
			.saturating_add((269_433_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(127_251_000 as Weight)
			// Standard Error: 161_000
			.saturating_add((268_720_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(129_546_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((268_280_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(133_306_000 as Weight)
			// Standard Error: 208_000
			.saturating_add((604_235_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(133_689_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((267_107_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(133_773_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((268_897_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(133_222_000 as Weight)
			// Standard Error: 476_000
			.saturating_add((514_400_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(118_769_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((134_134_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(124_719_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((7_486_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(136_348_000 as Weight)
			// Standard Error: 0
			.saturating_add((274_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(118_710_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((4_566_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(127_609_000 as Weight)
			// Standard Error: 0
			.saturating_add((786_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(125_463_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((106_188_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(219_195_000 as Weight)
			// Standard Error: 361_000
			.saturating_add((131_326_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(6_742_000 as Weight)
			// Standard Error: 2_484_000
			.saturating_add((3_747_735_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(137_248_000 as Weight)
			// Standard Error: 662_000
			.saturating_add((661_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(147_654_000 as Weight)
			// Standard Error: 305_000
			.saturating_add((935_148_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_246_123_000 as Weight)
			// Standard Error: 2_807_000
			.saturating_add((585_535_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 553_000
			.saturating_add((249_976_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(140_588_000 as Weight)
			// Standard Error: 228_000
			.saturating_add((707_872_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(2_767_124_000 as Weight)
			// Standard Error: 18_504_000
			.saturating_add((17_507_873_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_748_586_000 as Weight)
			// Standard Error: 359_000
			.saturating_add((75_231_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_209_000
			.saturating_add((2_261_355_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(83_780_000 as Weight)
			// Standard Error: 965_000
			.saturating_add((973_164_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(728_625_000 as Weight)
			// Standard Error: 294_000
			.saturating_add((154_625_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_543_000
			.saturating_add((5_467_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 9_216_000
			.saturating_add((10_265_093_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(10_426_869_000 as Weight)
			// Standard Error: 114_622_000
			.saturating_add((4_366_037_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 40_000
			.saturating_add((59_741_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 43_000
			.saturating_add((82_331_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 35_927_000
			.saturating_add((21_088_623_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(17_200_760_000 as Weight)
			// Standard Error: 157_000
			.saturating_add((61_221_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 157_000
			.saturating_add((84_149_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 157_000
			.saturating_add((284_655_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(207 as Weight))
			.saturating_add(RocksDbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(126_005_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((252_338_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(727_930_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((430_299_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(129_778_000 as Weight)
			// Standard Error: 146_000
			.saturating_add((266_097_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(683_078_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((344_294_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(141_731_000 as Weight)
			// Standard Error: 251_000
			.saturating_add((239_931_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(563_895_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((160_216_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(132_587_000 as Weight)
			// Standard Error: 159_000
			.saturating_add((239_287_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(606_572_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((160_101_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(24_366_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((3_114_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(26_779_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((161_654_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(26_763_000 as Weight)
			// Standard Error: 88_000
			.saturating_add((232_822_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(24_342_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((12_530_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(24_301_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((12_106_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_253_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((6_464_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(24_259_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((14_030_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(24_313_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((15_788_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(37_991_000 as Weight)
			// Standard Error: 0
			.saturating_add((138_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(24_739_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((97_567_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(32_395_000 as Weight)
			// Standard Error: 432_000
			.saturating_add((198_972_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(238_857_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((3_491_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(42_196_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((3_161_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(42_133_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((3_459_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(42_164_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((4_653_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(27_802_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((7_780_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(27_826_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((11_978_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(26_753_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((3_494_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(25_078_000 as Weight)
			// Standard Error: 4_213_000
			.saturating_add((2_324_209_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(24_301_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((5_201_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(24_237_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((5_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(24_290_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_780_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(24_278_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((5_145_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(24_249_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((5_248_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(24_266_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((5_236_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(24_236_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((5_304_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(24_262_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_220_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(24_287_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_072_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(24_211_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_196_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(24_175_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_392_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(24_209_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_131_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(24_261_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_203_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(24_258_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_120_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(24_236_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_076_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(24_262_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_261_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(24_242_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_249_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(24_248_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((7_149_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(24_243_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_128_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(24_217_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_237_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(24_191_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((12_970_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_213_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((12_106_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(24_238_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((12_944_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_317_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_129_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(24_282_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_123_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(24_243_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_148_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(24_239_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_157_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(24_279_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_253_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(24_285_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((7_333_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(24_298_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_228_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(24_226_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_269_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(24_235_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_299_000 as Weight).saturating_mul(r as Weight))
	}
}
