// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-02-18, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn update_schedule() -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(c: u32, s: u32, ) -> Weight;
	fn call(c: u32, ) -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_rent_params(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(3_850_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(52_925_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_297_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(434_698_000 as Weight)
			// Standard Error: 210_000
			.saturating_add((166_559_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(29_918_000 as Weight)
			// Standard Error: 185_000
			.saturating_add((123_774_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(29_795_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(225_834_000 as Weight)
			// Standard Error: 144_000
			.saturating_add((165_632_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 9_000
			.saturating_add((2_563_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(190_482_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((8_724_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_000
			.saturating_add((2_512_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(195_414_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_920_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(336_867_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((5_262_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(143_935_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((266_876_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(150_342_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((266_051_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(144_833_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((259_279_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(152_032_000 as Weight)
			// Standard Error: 218_000
			.saturating_add((573_038_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(148_831_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((260_718_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(142_925_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((260_426_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(143_151_000 as Weight)
			// Standard Error: 119_000
			.saturating_add((260_964_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(155_126_000 as Weight)
			// Standard Error: 225_000
			.saturating_add((599_056_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(144_566_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((257_620_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(147_274_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((258_627_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_params(r: u32, ) -> Weight {
		(168_575_000 as Weight)
			// Standard Error: 394_000
			.saturating_add((397_754_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(148_102_000 as Weight)
			// Standard Error: 201_000
			.saturating_add((537_088_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(125_122_000 as Weight)
			// Standard Error: 89_000
			.saturating_add((122_350_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(137_334_000 as Weight)
			// Standard Error: 99_000
			.saturating_add((7_359_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(145_094_000 as Weight)
			// Standard Error: 0
			.saturating_add((283_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(127_544_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((4_640_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(137_517_000 as Weight)
			// Standard Error: 0
			.saturating_add((783_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(138_292_000 as Weight)
			// Standard Error: 689_000
			.saturating_add((111_698_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(263_507_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((8_409_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(232_291_000 as Weight)
			// Standard Error: 301_000
			.saturating_add((136_379_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 162_000
			.saturating_add((8_619_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 162_000
			.saturating_add((4_877_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_433_000
			.saturating_add((3_762_810_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(153_634_000 as Weight)
			// Standard Error: 267_000
			.saturating_add((650_160_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(137_080_000 as Weight)
			// Standard Error: 1_009_000
			.saturating_add((949_228_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_259_129_000 as Weight)
			// Standard Error: 2_542_000
			.saturating_add((609_859_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 501_000
			.saturating_add((249_496_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(170_417_000 as Weight)
			// Standard Error: 434_000
			.saturating_add((721_511_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(1_870_542_000 as Weight)
			// Standard Error: 26_871_000
			.saturating_add((18_312_239_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_763_732_000 as Weight)
			// Standard Error: 258_000
			.saturating_add((74_848_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_745_000
			.saturating_add((2_316_433_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(87_218_000 as Weight)
			// Standard Error: 745_000
			.saturating_add((948_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(719_050_000 as Weight)
			// Standard Error: 266_000
			.saturating_add((154_812_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(19_439_000 as Weight)
			// Standard Error: 2_468_000
			.saturating_add((5_674_822_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_465_000
			.saturating_add((11_066_530_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(9_916_288_000 as Weight)
			// Standard Error: 552_000
			.saturating_add((397_842_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 229_902_000
			.saturating_add((5_243_673_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 72_000
			.saturating_add((59_737_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 77_000
			.saturating_add((82_259_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_016_000
			.saturating_add((22_206_489_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(9_991_947_000 as Weight)
			// Standard Error: 637_000
			.saturating_add((881_981_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 90_000
			.saturating_add((63_638_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 90_000
			.saturating_add((87_288_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 90_000
			.saturating_add((311_808_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(207 as Weight))
			.saturating_add(T::DbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(132_452_000 as Weight)
			// Standard Error: 227_000
			.saturating_add((239_671_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(756_802_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((429_454_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(139_440_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((249_514_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(658_595_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((343_814_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(138_124_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((223_189_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(689_667_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((160_006_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(140_225_000 as Weight)
			// Standard Error: 156_000
			.saturating_add((223_696_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(693_756_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((159_996_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(24_250_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((3_134_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(26_509_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((161_556_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(26_499_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((233_755_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(24_175_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_450_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(24_219_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((12_058_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_146_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((6_017_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(24_229_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((13_726_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(24_219_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((15_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_981_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((156_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(24_599_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((95_771_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(32_584_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((193_216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(240_739_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((3_407_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(41_963_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_110_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(41_956_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((3_460_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(42_002_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((4_591_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(27_646_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_821_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(27_615_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((11_807_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(27_106_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((2_952_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(24_956_000 as Weight)
			// Standard Error: 3_541_000
			.saturating_add((2_332_414_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(24_183_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_166_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(24_142_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((5_146_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(24_161_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((5_807_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(24_167_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((5_288_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(24_252_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((5_091_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(24_243_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((5_076_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(24_227_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((5_135_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(24_278_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_124_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(24_254_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_067_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(24_220_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_122_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(24_221_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(24_259_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_135_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(24_245_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(24_289_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_023_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(24_239_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_065_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(24_256_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_119_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(24_240_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_225_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(24_266_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((6_996_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(24_265_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((6_974_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(24_232_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_103_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(24_245_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((12_915_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_177_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((12_232_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(24_171_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((12_939_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_788_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((11_657_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(24_252_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_003_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(24_263_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_005_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(24_239_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_020_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(24_212_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_172_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(24_220_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_246_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(24_213_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_191_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(24_221_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_192_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(24_235_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_106_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(3_850_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(52_925_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_297_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(434_698_000 as Weight)
			// Standard Error: 210_000
			.saturating_add((166_559_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(29_918_000 as Weight)
			// Standard Error: 185_000
			.saturating_add((123_774_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(29_795_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(225_834_000 as Weight)
			// Standard Error: 144_000
			.saturating_add((165_632_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 9_000
			.saturating_add((2_563_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(190_482_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((8_724_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_000
			.saturating_add((2_512_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(195_414_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_920_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(336_867_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((5_262_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(143_935_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((266_876_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(150_342_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((266_051_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(144_833_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((259_279_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(152_032_000 as Weight)
			// Standard Error: 218_000
			.saturating_add((573_038_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(148_831_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((260_718_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(142_925_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((260_426_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(143_151_000 as Weight)
			// Standard Error: 119_000
			.saturating_add((260_964_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(155_126_000 as Weight)
			// Standard Error: 225_000
			.saturating_add((599_056_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(144_566_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((257_620_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(147_274_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((258_627_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_params(r: u32, ) -> Weight {
		(168_575_000 as Weight)
			// Standard Error: 394_000
			.saturating_add((397_754_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(148_102_000 as Weight)
			// Standard Error: 201_000
			.saturating_add((537_088_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(125_122_000 as Weight)
			// Standard Error: 89_000
			.saturating_add((122_350_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(137_334_000 as Weight)
			// Standard Error: 99_000
			.saturating_add((7_359_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(145_094_000 as Weight)
			// Standard Error: 0
			.saturating_add((283_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(127_544_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((4_640_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(137_517_000 as Weight)
			// Standard Error: 0
			.saturating_add((783_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(138_292_000 as Weight)
			// Standard Error: 689_000
			.saturating_add((111_698_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(263_507_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((8_409_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(232_291_000 as Weight)
			// Standard Error: 301_000
			.saturating_add((136_379_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 162_000
			.saturating_add((8_619_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 162_000
			.saturating_add((4_877_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_433_000
			.saturating_add((3_762_810_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(153_634_000 as Weight)
			// Standard Error: 267_000
			.saturating_add((650_160_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(137_080_000 as Weight)
			// Standard Error: 1_009_000
			.saturating_add((949_228_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_259_129_000 as Weight)
			// Standard Error: 2_542_000
			.saturating_add((609_859_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 501_000
			.saturating_add((249_496_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(170_417_000 as Weight)
			// Standard Error: 434_000
			.saturating_add((721_511_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(1_870_542_000 as Weight)
			// Standard Error: 26_871_000
			.saturating_add((18_312_239_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_763_732_000 as Weight)
			// Standard Error: 258_000
			.saturating_add((74_848_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_745_000
			.saturating_add((2_316_433_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(87_218_000 as Weight)
			// Standard Error: 745_000
			.saturating_add((948_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(719_050_000 as Weight)
			// Standard Error: 266_000
			.saturating_add((154_812_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(19_439_000 as Weight)
			// Standard Error: 2_468_000
			.saturating_add((5_674_822_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_465_000
			.saturating_add((11_066_530_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(9_916_288_000 as Weight)
			// Standard Error: 552_000
			.saturating_add((397_842_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 229_902_000
			.saturating_add((5_243_673_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 72_000
			.saturating_add((59_737_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 77_000
			.saturating_add((82_259_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_016_000
			.saturating_add((22_206_489_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(9_991_947_000 as Weight)
			// Standard Error: 637_000
			.saturating_add((881_981_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 90_000
			.saturating_add((63_638_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 90_000
			.saturating_add((87_288_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 90_000
			.saturating_add((311_808_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(207 as Weight))
			.saturating_add(RocksDbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(132_452_000 as Weight)
			// Standard Error: 227_000
			.saturating_add((239_671_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(756_802_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((429_454_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(139_440_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((249_514_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(658_595_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((343_814_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(138_124_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((223_189_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(689_667_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((160_006_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(140_225_000 as Weight)
			// Standard Error: 156_000
			.saturating_add((223_696_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(693_756_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((159_996_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(24_250_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((3_134_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(26_509_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((161_556_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(26_499_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((233_755_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(24_175_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_450_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(24_219_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((12_058_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_146_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((6_017_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(24_229_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((13_726_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(24_219_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((15_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_981_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((156_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(24_599_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((95_771_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(32_584_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((193_216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(240_739_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((3_407_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(41_963_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_110_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(41_956_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((3_460_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(42_002_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((4_591_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(27_646_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_821_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(27_615_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((11_807_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(27_106_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((2_952_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(24_956_000 as Weight)
			// Standard Error: 3_541_000
			.saturating_add((2_332_414_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(24_183_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_166_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(24_142_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((5_146_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(24_161_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((5_807_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(24_167_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((5_288_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(24_252_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((5_091_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(24_243_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((5_076_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(24_227_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((5_135_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(24_278_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_124_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(24_254_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_067_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(24_220_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_122_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(24_221_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(24_259_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_135_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(24_245_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(24_289_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_023_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(24_239_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_065_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(24_256_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_119_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(24_240_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_225_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(24_266_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((6_996_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(24_265_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((6_974_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(24_232_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_103_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(24_245_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((12_915_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_177_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((12_232_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(24_171_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((12_939_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_788_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((11_657_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(24_252_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_003_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(24_263_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_005_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(24_239_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_020_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(24_212_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_172_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(24_220_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_246_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(24_213_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_191_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(24_221_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_192_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(24_235_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_106_000 as Weight).saturating_mul(r as Weight))
	}
}
