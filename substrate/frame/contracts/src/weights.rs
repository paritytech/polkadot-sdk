// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-10, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(c: u32, s: u32, ) -> Weight;
	fn call(c: u32, ) -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_rent_params(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(3_676_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_259_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_000
			.saturating_add((35_157_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(42_341_000 as Weight)
			// Standard Error: 190_000
			.saturating_add((95_696_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(178_191_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((135_736_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 9_000
			.saturating_add((1_867_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(183_874_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((8_659_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_000
			.saturating_add((1_781_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(186_051_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((3_919_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(133_967_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((4_733_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(131_758_000 as Weight)
			// Standard Error: 361_000
			.saturating_add((249_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(141_100_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((245_593_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(141_578_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((240_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(144_329_000 as Weight)
			// Standard Error: 197_000
			.saturating_add((529_903_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(137_318_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((239_623_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(138_343_000 as Weight)
			// Standard Error: 260_000
			.saturating_add((241_997_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(138_989_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((239_424_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(140_118_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((240_866_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(139_962_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((239_267_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(139_652_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((240_282_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_params(r: u32, ) -> Weight {
		(136_806_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((359_911_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(148_086_000 as Weight)
			// Standard Error: 116_000
			.saturating_add((470_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(123_560_000 as Weight)
			// Standard Error: 295_000
			.saturating_add((119_119_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(132_420_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((6_835_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(142_119_000 as Weight)
			// Standard Error: 0
			.saturating_add((245_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(121_030_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((4_444_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(131_704_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((756_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(132_544_000 as Weight)
			// Standard Error: 113_000
			.saturating_add((97_343_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(234_751_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((8_482_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(156_439_000 as Weight)
			// Standard Error: 1_068_000
			.saturating_add((96_724_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(101_920_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((7_588_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 162_000
			.saturating_add((3_475_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_431_000
			.saturating_add((3_733_137_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(151_598_000 as Weight)
			// Standard Error: 168_000
			.saturating_add((608_967_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(149_224_000 as Weight)
			// Standard Error: 205_000
			.saturating_add((896_074_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_198_650_000 as Weight)
			// Standard Error: 2_742_000
			.saturating_add((566_152_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 540_000
			.saturating_add((248_898_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(133_149_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((163_281_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_debug_message(r: u32, ) -> Weight {
		(126_413_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((128_176_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_710_000
			.saturating_add((3_933_779_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(582_721_000 as Weight)
			// Standard Error: 228_000
			.saturating_add((71_341_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_470_000
			.saturating_add((1_281_241_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(11_848_000 as Weight)
			// Standard Error: 1_028_000
			.saturating_add((934_213_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(602_494_000 as Weight)
			// Standard Error: 255_000
			.saturating_add((152_885_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_746_000
			.saturating_add((5_264_601_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 13_325_000
			.saturating_add((11_706_784_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(9_518_851_000 as Weight)
			// Standard Error: 349_000
			.saturating_add((391_414_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 145_480_000
			.saturating_add((4_113_632_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 46_000
			.saturating_add((60_888_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 49_000
			.saturating_add((79_489_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(205 as Weight))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 39_418_000
			.saturating_add((21_356_322_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(12_419_243_000 as Weight)
			// Standard Error: 1_454_000
			.saturating_add((848_075_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 206_000
			.saturating_add((61_500_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 206_000
			.saturating_add((82_895_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 206_000
			.saturating_add((236_893_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes(204 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(129_427_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((227_721_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 202_000
			.saturating_add((494_366_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(133_222_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((237_008_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(1_245_757_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((339_755_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(133_091_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((208_234_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(799_510_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((158_583_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(130_180_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((206_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(965_700_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((154_387_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(20_233_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((3_445_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(29_798_000 as Weight)
			// Standard Error: 1_137_000
			.saturating_add((137_787_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(22_914_000 as Weight)
			// Standard Error: 701_000
			.saturating_add((205_918_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(20_225_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((12_545_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_196_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((12_677_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_204_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((6_920_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(20_220_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((15_209_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(20_262_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((15_909_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(35_644_000 as Weight)
			// Standard Error: 0
			.saturating_add((82_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(20_566_000 as Weight)
			// Standard Error: 79_000
			.saturating_add((91_776_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(28_243_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((169_342_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(206_233_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((4_685_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(37_775_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((3_553_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(37_836_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((3_745_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(37_816_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((4_929_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_385_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_494_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(23_334_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((8_306_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(22_311_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((3_548_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(20_789_000 as Weight)
			// Standard Error: 269_000
			.saturating_add((2_070_923_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(20_196_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(20_215_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((5_053_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_257_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_891_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(20_263_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((5_438_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_214_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((4_882_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(20_152_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((4_946_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(20_216_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((4_974_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(20_195_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_463_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_170_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_425_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(20_208_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_424_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(20_244_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_391_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(20_218_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_384_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(20_208_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_392_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(20_201_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_375_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_213_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_460_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(20_141_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_498_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_213_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_137_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_325_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_148_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_389_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_152_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_264_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_153_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_755_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(20_135_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((12_845_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(20_203_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_792_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(20_110_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((12_880_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_098_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_416_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_156_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_428_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_163_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_343_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(20_167_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_192_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_660_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_162_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_652_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(20_151_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_890_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(20_154_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_434_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(3_676_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_259_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_000
			.saturating_add((35_157_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(42_341_000 as Weight)
			// Standard Error: 190_000
			.saturating_add((95_696_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(178_191_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((135_736_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 9_000
			.saturating_add((1_867_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(183_874_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((8_659_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_000
			.saturating_add((1_781_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(186_051_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((3_919_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(133_967_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((4_733_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(131_758_000 as Weight)
			// Standard Error: 361_000
			.saturating_add((249_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(141_100_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((245_593_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(141_578_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((240_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(144_329_000 as Weight)
			// Standard Error: 197_000
			.saturating_add((529_903_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(137_318_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((239_623_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(138_343_000 as Weight)
			// Standard Error: 260_000
			.saturating_add((241_997_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(138_989_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((239_424_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(140_118_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((240_866_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(139_962_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((239_267_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(139_652_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((240_282_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_params(r: u32, ) -> Weight {
		(136_806_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((359_911_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(148_086_000 as Weight)
			// Standard Error: 116_000
			.saturating_add((470_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(123_560_000 as Weight)
			// Standard Error: 295_000
			.saturating_add((119_119_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(132_420_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((6_835_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(142_119_000 as Weight)
			// Standard Error: 0
			.saturating_add((245_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(121_030_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((4_444_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(131_704_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((756_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(132_544_000 as Weight)
			// Standard Error: 113_000
			.saturating_add((97_343_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(234_751_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((8_482_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(156_439_000 as Weight)
			// Standard Error: 1_068_000
			.saturating_add((96_724_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(101_920_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((7_588_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 162_000
			.saturating_add((3_475_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_431_000
			.saturating_add((3_733_137_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(151_598_000 as Weight)
			// Standard Error: 168_000
			.saturating_add((608_967_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(149_224_000 as Weight)
			// Standard Error: 205_000
			.saturating_add((896_074_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_198_650_000 as Weight)
			// Standard Error: 2_742_000
			.saturating_add((566_152_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 540_000
			.saturating_add((248_898_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(133_149_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((163_281_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_debug_message(r: u32, ) -> Weight {
		(126_413_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((128_176_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_710_000
			.saturating_add((3_933_779_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(582_721_000 as Weight)
			// Standard Error: 228_000
			.saturating_add((71_341_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_470_000
			.saturating_add((1_281_241_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(11_848_000 as Weight)
			// Standard Error: 1_028_000
			.saturating_add((934_213_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(602_494_000 as Weight)
			// Standard Error: 255_000
			.saturating_add((152_885_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_746_000
			.saturating_add((5_264_601_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 13_325_000
			.saturating_add((11_706_784_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(9_518_851_000 as Weight)
			// Standard Error: 349_000
			.saturating_add((391_414_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 145_480_000
			.saturating_add((4_113_632_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 46_000
			.saturating_add((60_888_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 49_000
			.saturating_add((79_489_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 39_418_000
			.saturating_add((21_356_322_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(12_419_243_000 as Weight)
			// Standard Error: 1_454_000
			.saturating_add((848_075_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 206_000
			.saturating_add((61_500_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 206_000
			.saturating_add((82_895_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 206_000
			.saturating_add((236_893_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes(204 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(129_427_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((227_721_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 202_000
			.saturating_add((494_366_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(133_222_000 as Weight)
			// Standard Error: 330_000
			.saturating_add((237_008_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(1_245_757_000 as Weight)
			// Standard Error: 77_000
			.saturating_add((339_755_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(133_091_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((208_234_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(799_510_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((158_583_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(130_180_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((206_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(965_700_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((154_387_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(20_233_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((3_445_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(29_798_000 as Weight)
			// Standard Error: 1_137_000
			.saturating_add((137_787_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(22_914_000 as Weight)
			// Standard Error: 701_000
			.saturating_add((205_918_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(20_225_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((12_545_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_196_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((12_677_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_204_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((6_920_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(20_220_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((15_209_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(20_262_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((15_909_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(35_644_000 as Weight)
			// Standard Error: 0
			.saturating_add((82_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(20_566_000 as Weight)
			// Standard Error: 79_000
			.saturating_add((91_776_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(28_243_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((169_342_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(206_233_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((4_685_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(37_775_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((3_553_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(37_836_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((3_745_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(37_816_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((4_929_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_385_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_494_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(23_334_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((8_306_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(22_311_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((3_548_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(20_789_000 as Weight)
			// Standard Error: 269_000
			.saturating_add((2_070_923_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(20_196_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(20_215_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((5_053_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_257_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_891_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(20_263_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((5_438_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_214_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((4_882_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(20_152_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((4_946_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(20_216_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((4_974_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(20_195_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_463_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_170_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_425_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(20_208_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_424_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(20_244_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_391_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(20_218_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_384_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(20_208_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_392_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(20_201_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_375_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_213_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_460_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(20_141_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_498_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_213_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_137_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_325_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_148_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_389_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_152_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_264_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_153_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_755_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(20_135_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((12_845_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(20_203_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_792_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(20_110_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((12_880_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_098_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_416_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_156_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_428_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_163_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_343_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(20_167_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_192_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_660_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_162_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_652_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(20_151_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_890_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(20_154_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_434_000 as Weight).saturating_mul(r as Weight))
	}
}
