// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_glutton`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-jniz7bxx-project-674-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_glutton
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./substrate/frame/glutton/src/weights.rs
// --header=./substrate/HEADER-APACHE2
// --template=./substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_glutton`.
pub trait WeightInfo {
	fn initialize_pallet_grow(n: u32, ) -> Weight;
	fn initialize_pallet_shrink(n: u32, ) -> Weight;
	fn waste_ref_time_iter(i: u32, ) -> Weight;
	fn waste_proof_size_some(i: u32, ) -> Weight;
	fn on_idle_high_proof_waste() -> Weight;
	fn on_idle_low_proof_waste() -> Weight;
	fn empty_on_idle() -> Weight;
	fn set_compute() -> Weight;
	fn set_storage() -> Weight;
}

/// Weights for `pallet_glutton` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Glutton::TrashDataCount` (r:1 w:1)
	/// Proof: `Glutton::TrashDataCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:0 w:1000)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1000]`.
	fn initialize_pallet_grow(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `1489`
		// Minimum execution time: 10_101_000 picoseconds.
		Weight::from_parts(10_283_000, 1489)
			// Standard Error: 2_504
			.saturating_add(Weight::from_parts(10_903_758, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Glutton::TrashDataCount` (r:1 w:1)
	/// Proof: `Glutton::TrashDataCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:0 w:1000)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1000]`.
	fn initialize_pallet_shrink(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `1489`
		// Minimum execution time: 9_993_000 picoseconds.
		Weight::from_parts(10_097_000, 1489)
			// Standard Error: 991
			.saturating_add(Weight::from_parts(1_201_970, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// The range of component `i` is `[0, 100000]`.
	fn waste_ref_time_iter(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 633_000 picoseconds.
		Weight::from_parts(676_000, 0)
			// Standard Error: 6
			.saturating_add(Weight::from_parts(104_630, 0).saturating_mul(i.into()))
	}
	/// Storage: `Glutton::TrashData` (r:5000 w:0)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 5000]`.
	fn waste_proof_size_some(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119141 + i * (1022 ±0)`
		//  Estimated: `990 + i * (3016 ±0)`
		// Minimum execution time: 274_000 picoseconds.
		Weight::from_parts(375_134_890, 990)
			// Standard Error: 5_995
			.saturating_add(Weight::from_parts(6_854_149, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 3016).saturating_mul(i.into()))
	}
	/// Storage: `Glutton::Storage` (r:1 w:0)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::Compute` (r:1 w:0)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:1737 w:0)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	fn on_idle_high_proof_waste() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1900524`
		//  Estimated: `5239782`
		// Minimum execution time: 57_848_559_000 picoseconds.
		Weight::from_parts(58_153_999_000, 5239782)
			.saturating_add(T::DbWeight::get().reads(1739_u64))
	}
	/// Storage: `Glutton::Storage` (r:1 w:0)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::Compute` (r:1 w:0)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:5 w:0)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	fn on_idle_low_proof_waste() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9574`
		//  Estimated: `16070`
		// Minimum execution time: 98_871_351_000 picoseconds.
		Weight::from_parts(98_951_547_000, 16070)
			.saturating_add(T::DbWeight::get().reads(7_u64))
	}
	/// Storage: `Glutton::Storage` (r:1 w:0)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::Compute` (r:1 w:0)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn empty_on_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `1493`
		// Minimum execution time: 7_420_000 picoseconds.
		Weight::from_parts(7_726_000, 1493)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Glutton::Compute` (r:0 w:1)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_compute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_393_000 picoseconds.
		Weight::from_parts(5_728_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Glutton::Storage` (r:0 w:1)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_304_000 picoseconds.
		Weight::from_parts(5_622_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Glutton::TrashDataCount` (r:1 w:1)
	/// Proof: `Glutton::TrashDataCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:0 w:1000)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1000]`.
	fn initialize_pallet_grow(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `1489`
		// Minimum execution time: 10_101_000 picoseconds.
		Weight::from_parts(10_283_000, 1489)
			// Standard Error: 2_504
			.saturating_add(Weight::from_parts(10_903_758, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Glutton::TrashDataCount` (r:1 w:1)
	/// Proof: `Glutton::TrashDataCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:0 w:1000)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1000]`.
	fn initialize_pallet_shrink(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `1489`
		// Minimum execution time: 9_993_000 picoseconds.
		Weight::from_parts(10_097_000, 1489)
			// Standard Error: 991
			.saturating_add(Weight::from_parts(1_201_970, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// The range of component `i` is `[0, 100000]`.
	fn waste_ref_time_iter(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 633_000 picoseconds.
		Weight::from_parts(676_000, 0)
			// Standard Error: 6
			.saturating_add(Weight::from_parts(104_630, 0).saturating_mul(i.into()))
	}
	/// Storage: `Glutton::TrashData` (r:5000 w:0)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 5000]`.
	fn waste_proof_size_some(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119141 + i * (1022 ±0)`
		//  Estimated: `990 + i * (3016 ±0)`
		// Minimum execution time: 274_000 picoseconds.
		Weight::from_parts(375_134_890, 990)
			// Standard Error: 5_995
			.saturating_add(Weight::from_parts(6_854_149, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 3016).saturating_mul(i.into()))
	}
	/// Storage: `Glutton::Storage` (r:1 w:0)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::Compute` (r:1 w:0)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:1737 w:0)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	fn on_idle_high_proof_waste() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1900524`
		//  Estimated: `5239782`
		// Minimum execution time: 57_848_559_000 picoseconds.
		Weight::from_parts(58_153_999_000, 5239782)
			.saturating_add(RocksDbWeight::get().reads(1739_u64))
	}
	/// Storage: `Glutton::Storage` (r:1 w:0)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::Compute` (r:1 w:0)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::TrashData` (r:5 w:0)
	/// Proof: `Glutton::TrashData` (`max_values`: Some(65000), `max_size`: Some(1036), added: 3016, mode: `MaxEncodedLen`)
	fn on_idle_low_proof_waste() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9574`
		//  Estimated: `16070`
		// Minimum execution time: 98_871_351_000 picoseconds.
		Weight::from_parts(98_951_547_000, 16070)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
	}
	/// Storage: `Glutton::Storage` (r:1 w:0)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Glutton::Compute` (r:1 w:0)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn empty_on_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `1493`
		// Minimum execution time: 7_420_000 picoseconds.
		Weight::from_parts(7_726_000, 1493)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Glutton::Compute` (r:0 w:1)
	/// Proof: `Glutton::Compute` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_compute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_393_000 picoseconds.
		Weight::from_parts(5_728_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Glutton::Storage` (r:0 w:1)
	/// Proof: `Glutton::Storage` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_304_000 picoseconds.
		Weight::from_parts(5_622_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
