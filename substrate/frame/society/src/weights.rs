// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_society`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-bn-ce5rx-project-674-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_society
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./substrate/frame/society/src/weights.rs
// --header=./substrate/HEADER-APACHE2
// --template=./substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_society`.
pub trait WeightInfo {
	fn bid() -> Weight;
	fn unbid() -> Weight;
	fn vouch() -> Weight;
	fn unvouch() -> Weight;
	fn vote() -> Weight;
	fn defender_vote() -> Weight;
	fn payout() -> Weight;
	fn waive_repay() -> Weight;
	fn found_society() -> Weight;
	fn dissolve() -> Weight;
	fn judge_suspended_member() -> Weight;
	fn set_parameters() -> Weight;
	fn punish_skeptic() -> Weight;
	fn claim_membership() -> Weight;
	fn bestow_membership() -> Weight;
	fn kick_candidate() -> Weight;
	fn resign_candidacy() -> Weight;
	fn drop_candidate() -> Weight;
	fn cleanup_candidacy() -> Weight;
	fn cleanup_challenge() -> Weight;
}

/// Weights for `pallet_society` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `444`
		//  Estimated: `3909`
		// Minimum execution time: 29_905_000 picoseconds.
		Weight::from_parts(31_031_000, 3909)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn unbid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `461`
		//  Estimated: `1946`
		// Minimum execution time: 23_038_000 picoseconds.
		Weight::from_parts(23_904_000, 1946)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:2 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `6421`
		// Minimum execution time: 21_197_000 picoseconds.
		Weight::from_parts(22_043_000, 6421)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unvouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4000`
		// Minimum execution time: 14_402_000 picoseconds.
		Weight::from_parts(15_171_000, 4000)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:1)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4034`
		// Minimum execution time: 21_930_000 picoseconds.
		Weight::from_parts(22_666_000, 4034)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Defending` (r:1 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn defender_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
		//  Estimated: `4026`
		// Minimum execution time: 18_821_000 picoseconds.
		Weight::from_parts(19_633_000, 4026)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `650`
		//  Estimated: `4115`
		// Minimum execution time: 47_262_000 picoseconds.
		Weight::from_parts(48_313_000, 4115)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn waive_repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547`
		//  Estimated: `4012`
		// Minimum execution time: 18_189_000 picoseconds.
		Weight::from_parts(19_038_000, 4012)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Head` (r:1 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Founder` (r:0 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn found_society() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `1665`
		// Minimum execution time: 14_815_000 picoseconds.
		Weight::from_parts(15_426_000, 1665)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:5 w:5)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:5 w:5)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:4 w:4)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:4 w:4)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Head` (r:0 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Defending` (r:0 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:0 w:1)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:0 w:1)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:0 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:0 w:1)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Bids` (r:0 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:0 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn dissolve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
		//  Estimated: `15019`
		// Minimum execution time: 57_787_000 picoseconds.
		Weight::from_parts(59_489_000, 15019)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(30_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:1)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:0)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:1 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn judge_suspended_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 19_262_000 picoseconds.
		Weight::from_parts(19_752_000, 3970)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:0)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `1872`
		// Minimum execution time: 10_656_000 picoseconds.
		Weight::from_parts(11_063_000, 1872)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:1 w:0)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:0)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn punish_skeptic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `636`
		//  Estimated: `4101`
		// Minimum execution time: 22_837_000 picoseconds.
		Weight::from_parts(23_738_000, 4101)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `632`
		//  Estimated: `4097`
		// Minimum execution time: 35_142_000 picoseconds.
		Weight::from_parts(36_811_000, 4097)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bestow_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `650`
		//  Estimated: `4115`
		// Minimum execution time: 37_133_000 picoseconds.
		Weight::from_parts(38_366_000, 4115)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn kick_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `6196`
		// Minimum execution time: 37_033_000 picoseconds.
		Weight::from_parts(38_293_000, 6196)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn resign_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `746`
		//  Estimated: `6196`
		// Minimum execution time: 35_203_000 picoseconds.
		Weight::from_parts(36_252_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn drop_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `758`
		//  Estimated: `6196`
		// Minimum execution time: 35_518_000 picoseconds.
		Weight::from_parts(36_508_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::VoteClearCursor` (r:1 w:0)
	/// Proof: `Society::VoteClearCursor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:2 w:2)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552`
		//  Estimated: `6492`
		// Minimum execution time: 17_001_000 picoseconds.
		Weight::from_parts(17_845_000, 6492)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3975`
		// Minimum execution time: 11_583_000 picoseconds.
		Weight::from_parts(12_134_000, 3975)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `444`
		//  Estimated: `3909`
		// Minimum execution time: 29_905_000 picoseconds.
		Weight::from_parts(31_031_000, 3909)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn unbid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `461`
		//  Estimated: `1946`
		// Minimum execution time: 23_038_000 picoseconds.
		Weight::from_parts(23_904_000, 1946)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:2 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `6421`
		// Minimum execution time: 21_197_000 picoseconds.
		Weight::from_parts(22_043_000, 6421)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unvouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4000`
		// Minimum execution time: 14_402_000 picoseconds.
		Weight::from_parts(15_171_000, 4000)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:1)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4034`
		// Minimum execution time: 21_930_000 picoseconds.
		Weight::from_parts(22_666_000, 4034)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Defending` (r:1 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn defender_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
		//  Estimated: `4026`
		// Minimum execution time: 18_821_000 picoseconds.
		Weight::from_parts(19_633_000, 4026)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `650`
		//  Estimated: `4115`
		// Minimum execution time: 47_262_000 picoseconds.
		Weight::from_parts(48_313_000, 4115)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn waive_repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547`
		//  Estimated: `4012`
		// Minimum execution time: 18_189_000 picoseconds.
		Weight::from_parts(19_038_000, 4012)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Head` (r:1 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Founder` (r:0 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn found_society() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `1665`
		// Minimum execution time: 14_815_000 picoseconds.
		Weight::from_parts(15_426_000, 1665)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:5 w:5)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:5 w:5)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:4 w:4)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:4 w:4)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Head` (r:0 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Defending` (r:0 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:0 w:1)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:0 w:1)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:0 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:0 w:1)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Bids` (r:0 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:0 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn dissolve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
		//  Estimated: `15019`
		// Minimum execution time: 57_787_000 picoseconds.
		Weight::from_parts(59_489_000, 15019)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(30_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:1)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:0)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:1 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn judge_suspended_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 19_262_000 picoseconds.
		Weight::from_parts(19_752_000, 3970)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:0)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `1872`
		// Minimum execution time: 10_656_000 picoseconds.
		Weight::from_parts(11_063_000, 1872)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:1 w:0)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:0)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn punish_skeptic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `636`
		//  Estimated: `4101`
		// Minimum execution time: 22_837_000 picoseconds.
		Weight::from_parts(23_738_000, 4101)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `632`
		//  Estimated: `4097`
		// Minimum execution time: 35_142_000 picoseconds.
		Weight::from_parts(36_811_000, 4097)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bestow_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `650`
		//  Estimated: `4115`
		// Minimum execution time: 37_133_000 picoseconds.
		Weight::from_parts(38_366_000, 4115)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn kick_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `6196`
		// Minimum execution time: 37_033_000 picoseconds.
		Weight::from_parts(38_293_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn resign_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `746`
		//  Estimated: `6196`
		// Minimum execution time: 35_203_000 picoseconds.
		Weight::from_parts(36_252_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn drop_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `758`
		//  Estimated: `6196`
		// Minimum execution time: 35_518_000 picoseconds.
		Weight::from_parts(36_508_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::VoteClearCursor` (r:1 w:0)
	/// Proof: `Society::VoteClearCursor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:2 w:2)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552`
		//  Estimated: `6492`
		// Minimum execution time: 17_001_000 picoseconds.
		Weight::from_parts(17_845_000, 6492)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3975`
		// Minimum execution time: 11_583_000 picoseconds.
		Weight::from_parts(12_134_000, 3975)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
