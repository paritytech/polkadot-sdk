error[E0277]: the trait bound `pallet::Call<T>: Decode` is not satisfied
  --> $DIR/call_argument_invalid_bound_2.rs:17:12
   |
17 |     #[pallet::call]
   |               ^^^^ the trait `Decode` is not implemented for `pallet::Call<T>`
   |
  ::: $WORKSPACE/frame/support/src/dispatch.rs
   |
   |     type Call: UnfilteredDispatchable + Codec + Clone + PartialEq + Eq;
   |                                         ----- required by this bound in `frame_support::Callable::Call`

error[E0277]: the trait bound `pallet::Call<T>: pallet::_::_parity_scale_codec::Encode` is not satisfied
  --> $DIR/call_argument_invalid_bound_2.rs:17:12
   |
17 |     #[pallet::call]
   |               ^^^^ the trait `pallet::_::_parity_scale_codec::Encode` is not implemented for `pallet::Call<T>`
   |
  ::: $WORKSPACE/frame/support/src/dispatch.rs
   |
   |     type Call: UnfilteredDispatchable + Codec + Clone + PartialEq + Eq;
   |                                         ----- required by this bound in `frame_support::Callable::Call`

error[E0369]: binary operation `==` cannot be applied to type `&<T as pallet::Config>::Bar`
  --> $DIR/call_argument_invalid_bound_2.rs:20:37
   |
20 |         fn foo(origin: OriginFor<T>, bar: T::Bar) -> DispatchResultWithPostInfo {
   |                                           ^
   |
help: consider further restricting this bound
   |
17 |     #[pallet::call + std::cmp::PartialEq]
   |                    ^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `<T as pallet::Config>::Bar: Clone` is not satisfied
  --> $DIR/call_argument_invalid_bound_2.rs:20:37
   |
20 |         fn foo(origin: OriginFor<T>, bar: T::Bar) -> DispatchResultWithPostInfo {
   |                                           ^ the trait `Clone` is not implemented for `<T as pallet::Config>::Bar`
   |
   = note: required by `clone`

error[E0277]: `<T as pallet::Config>::Bar` doesn't implement `std::fmt::Debug`
  --> $DIR/call_argument_invalid_bound_2.rs:20:37
   |
20 |         fn foo(origin: OriginFor<T>, bar: T::Bar) -> DispatchResultWithPostInfo {
   |                                           ^ `<T as pallet::Config>::Bar` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
   |
   = help: the trait `std::fmt::Debug` is not implemented for `<T as pallet::Config>::Bar`
   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&<T as pallet::Config>::Bar`
   = note: required for the cast to the object type `dyn std::fmt::Debug`
