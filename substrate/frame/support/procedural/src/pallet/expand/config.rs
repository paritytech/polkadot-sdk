// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::pallet::Def;
use proc_macro2::{Group, Span, TokenStream, TokenTree};
use quote::{quote, quote_spanned};
use quote::ToTokens;
use syn::{parse_quote, Item};

/// * Generate default rust doc
/// * Generate the default config trait if `with_default` is defined.
pub fn expand_config(def: &mut Def) -> TokenStream {
	let config = &def.config;
	let config_item = {
		let item = &mut def.item.content.as_mut().expect("Checked by def parser").1[config.index];
		if let Item::Trait(item) = item {
			item
		} else {
			unreachable!("Checked by config parser")
		}
	};

	config_item.attrs.insert(
		0,
		parse_quote!(
			#[doc = r"
Configuration trait of this pallet.

The main purpose of this trait is to act as an interface between this pallet and the runtime in
which it is embedded in. A type, function, or constant in this trait is essentially left to be
configured by the runtime that includes this pallet.

Consequently, a runtime that wants to include this pallet must implement this trait."
			]
		),
	);

	// we only emit `DefaultConfig` if there are trait items, so an empty `DefaultConfig` is
	// impossible consequently.
	match &config.default_sub_trait {
		Some(default_sub_trait) if default_sub_trait.items.len() > 0 => {
			let trait_items = &default_sub_trait
				.items
				.iter()
				.map(|item| {
					if item.1 {
						if let syn::TraitItem::Type(item) = item.0.clone() {
							let mut item = item.clone();
							item.bounds.clear();
							syn::TraitItem::Type(item)
						} else {
							item.0.clone()
						}
					} else {
						item.0.clone()
					}
				})
				.collect::<Vec<_>>();

			let type_param_bounds = if default_sub_trait.has_system {
				let system = &def.frame_system;
				let system = replace_span(default_sub_trait.attr_span, system.to_token_stream());
				quote_spanned!( default_sub_trait.attr_span => : #system::DefaultConfig)
			} else {
				quote!()
			};

			let trait_decl_generics = def.trait_decl_generics(default_sub_trait.attr_span);

			let default_config_trait_ending = generate_default_config_trait_ending(
				default_sub_trait.attr_span,
				trait_decl_generics,
				type_param_bounds,
				trait_items,
			);

			let error_report_helper = quote_spanned!(
				default_sub_trait.attr_span =>
				const _: () = {
					/// Based on [`Config`]. Auto-generated by
					/// [`#[pallet::config(with_default)]`](`frame_support::pallet_macros::config`).
					///
					/// Only generated for better error reporting.
					#[doc(hidden)]
					#[allow(dead_code)]
					trait __DefaultConfigErrorReportHelper #default_config_trait_ending
				};
			);
			let error_report_helper =
				replace_span(default_sub_trait.attr_span, error_report_helper);

			let default_config = quote_spanned!(
				default_sub_trait.attr_span =>
				/// Based on [`Config`]. Auto-generated by
				/// [`#[pallet::config(with_default)]`](`frame_support::pallet_macros::config`).
				/// Can be used in tandem with
				/// [`#[register_default_config]`](`frame_support::register_default_config`) and
				/// [`#[derive_impl]`](`frame_support::derive_impl`) to derive test config traits
				/// based on existing pallet config traits in a safe and developer-friendly way.
				///
				/// See [here](`frame_support::pallet_macros::config`) for more information and caveats about
				/// the auto-generated `DefaultConfig` trait and how it is generated.
				pub trait DefaultConfig #default_config_trait_ending
			);

			quote_spanned!(
				default_sub_trait.attr_span =>
				#error_report_helper
				#default_config
			)
		},
		_ => Default::default(),
	}
}

/// Generate all the traits expect the `trait` keyword and ident and doc.
fn generate_default_config_trait_ending(
	span: Span,
	trait_decl_generics: TokenStream,
	type_param_bounds: TokenStream,
	items: &Vec<syn::TraitItem>,
) -> TokenStream {
	quote_spanned!(
		span =>
		#trait_decl_generics #type_param_bounds {
			#(#items)*
		}
	)
}

/// Replace all span in a token stream.
fn replace_span(span: Span, ts: TokenStream) -> TokenStream {
	ts.into_iter()
		.map(|mut tt| {
			tt.set_span(span);
			if let TokenTree::Group(ref mut g) = tt {
				let stream = replace_span(span, g.stream());
				*g = Group::new(g.delimiter(), stream);
			}
			tt
		})
		.collect()
}
