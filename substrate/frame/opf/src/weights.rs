// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_opf`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-02-09, STEPS: `10`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Kazu-Rog`, CPU: `AMD Ryzen 9 4900HS with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/substrate-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_opf
// --extrinsic
// *
// --steps
// 10
// --repeat
// 2
// --output
// substrate/frame/opf/src/weights.rs
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --template
// substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#[allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_opf`.
pub trait WeightInfo {
	fn register_projects_batch(r: u32, ) -> Weight;
	fn unregister_project(r: u32, ) -> Weight;
	fn vote(r: u32, ) -> Weight;
	fn remove_vote(r: u32, ) -> Weight;
	fn release_voter_funds(r: u32, ) -> Weight;
	fn on_registration(r: u32, ) -> Weight;
	fn claim_reward_for(r: u32, ) -> Weight;
}

/// Weights for `pallet_opf` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:1)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::CounterForWhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::CounterForWhiteListedProjectAccounts` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::PublicPropCount` (r:1 w:0)
	/// Proof: `Democracy::PublicPropCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::PublicProps` (r:1 w:0)
	/// Proof: `Democracy::PublicProps` (`max_values`: Some(1), `max_size`: Some(16702), added: 17197, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::Blacklist` (r:1 w:0)
	/// Proof: `Democracy::Blacklist` (`max_values`: None, `max_size`: Some(3238), added: 5713, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::ReferendumCount` (r:1 w:1)
	/// Proof: `Democracy::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::ReferendumInfoOf` (r:0 w:1)
	/// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
	/// Storage: `Opf::VotingRounds` (r:0 w:1)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 50]`.
	fn register_projects_batch(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `18187`
		// Minimum execution time: 62_437_000 picoseconds.
		Weight::from_parts(71_159_011, 18187)
			// Standard Error: 128_713
			.saturating_add(Weight::from_parts(11_057, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::CounterForWhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::CounterForWhiteListedProjectAccounts` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn unregister_project(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `564 + r * (9 ±0)`
		//  Estimated: `3957 + r * (11 ±1)`
		// Minimum execution time: 24_793_000 picoseconds.
		Weight::from_parts(31_491_064, 3957)
			// Standard Error: 65_559
			.saturating_add(Weight::from_parts(121_606, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 11).saturating_mul(r.into()))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:1)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:0)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:1 w:1)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::Votes` (r:1 w:1)
	/// Proof: `Opf::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::ReferendumInfoOf` (r:1 w:1)
	/// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::VotingOf` (r:1 w:1)
	/// Proof: `Democracy::VotingOf` (`max_values`: None, `max_size`: Some(3795), added: 6270, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn vote(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1088 + r * (18 ±0)`
		//  Estimated: `7260 + r * (21 ±2)`
		// Minimum execution time: 146_386_000 picoseconds.
		Weight::from_parts(152_729_661, 7260)
			// Standard Error: 113_508
			.saturating_add(Weight::from_parts(334_666, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(r.into()))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:1)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::Votes` (r:1 w:1)
	/// Proof: `Opf::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:1 w:1)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:0)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Democracy::ReferendumInfoOf` (r:1 w:1)
	/// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::VotingOf` (r:1 w:1)
	/// Proof: `Democracy::VotingOf` (`max_values`: None, `max_size`: Some(3795), added: 6270, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn remove_vote(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1552 + r * (18 ±0)`
		//  Estimated: `7260 + r * (21 ±2)`
		// Minimum execution time: 113_910_000 picoseconds.
		Weight::from_parts(125_015_095, 7260)
			// Standard Error: 137_797
			.saturating_add(Weight::from_parts(174_605, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(r.into()))
	}
	/// Storage: `Opf::Votes` (r:1 w:1)
	/// Proof: `Opf::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn release_voter_funds(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587`
		//  Estimated: `4052`
		// Minimum execution time: 66_349_000 picoseconds.
		Weight::from_parts(69_170_855, 4052)
			// Standard Error: 44_959
			.saturating_add(Weight::from_parts(8_886, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:0)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:51 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:50 w:0)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 50]`.
	fn on_registration(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `672 + r * (77 ±0)`
		//  Estimated: `4138 + r * (2553 ±0)`
		// Minimum execution time: 64_323_000 picoseconds.
		Weight::from_parts(62_611_153, 4138)
			// Standard Error: 223_842
			.saturating_add(Weight::from_parts(4_213_031, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2553).saturating_mul(r.into()))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:0)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:51 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:50 w:0)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 50]`.
	fn claim_reward_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `672 + r * (77 ±0)`
		//  Estimated: `4138 + r * (2553 ±0)`
		// Minimum execution time: 69_701_000 picoseconds.
		Weight::from_parts(69_402_341, 4138)
			// Standard Error: 142_780
			.saturating_add(Weight::from_parts(3_845_926, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2553).saturating_mul(r.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:1)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::CounterForWhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::CounterForWhiteListedProjectAccounts` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::PublicPropCount` (r:1 w:0)
	/// Proof: `Democracy::PublicPropCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::PublicProps` (r:1 w:0)
	/// Proof: `Democracy::PublicProps` (`max_values`: Some(1), `max_size`: Some(16702), added: 17197, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::Blacklist` (r:1 w:0)
	/// Proof: `Democracy::Blacklist` (`max_values`: None, `max_size`: Some(3238), added: 5713, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::ReferendumCount` (r:1 w:1)
	/// Proof: `Democracy::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::ReferendumInfoOf` (r:0 w:1)
	/// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
	/// Storage: `Opf::VotingRounds` (r:0 w:1)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 50]`.
	fn register_projects_batch(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `18187`
		// Minimum execution time: 62_437_000 picoseconds.
		Weight::from_parts(71_159_011, 18187)
			// Standard Error: 128_713
			.saturating_add(Weight::from_parts(11_057, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::CounterForWhiteListedProjectAccounts` (r:1 w:1)
	/// Proof: `Opf::CounterForWhiteListedProjectAccounts` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn unregister_project(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `564 + r * (9 ±0)`
		//  Estimated: `3957 + r * (11 ±1)`
		// Minimum execution time: 24_793_000 picoseconds.
		Weight::from_parts(31_491_064, 3957)
			// Standard Error: 65_559
			.saturating_add(Weight::from_parts(121_606, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 11).saturating_mul(r.into()))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:1)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:0)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:1 w:1)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::Votes` (r:1 w:1)
	/// Proof: `Opf::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::ReferendumInfoOf` (r:1 w:1)
	/// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::VotingOf` (r:1 w:1)
	/// Proof: `Democracy::VotingOf` (`max_values`: None, `max_size`: Some(3795), added: 6270, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn vote(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1088 + r * (18 ±0)`
		//  Estimated: `7260 + r * (21 ±2)`
		// Minimum execution time: 146_386_000 picoseconds.
		Weight::from_parts(152_729_661, 7260)
			// Standard Error: 113_508
			.saturating_add(Weight::from_parts(334_666, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(r.into()))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:1)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::Votes` (r:1 w:1)
	/// Proof: `Opf::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:1 w:1)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:1 w:0)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Democracy::ReferendumInfoOf` (r:1 w:1)
	/// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
	/// Storage: `Democracy::VotingOf` (r:1 w:1)
	/// Proof: `Democracy::VotingOf` (`max_values`: None, `max_size`: Some(3795), added: 6270, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn remove_vote(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1552 + r * (18 ±0)`
		//  Estimated: `7260 + r * (21 ±2)`
		// Minimum execution time: 113_910_000 picoseconds.
		Weight::from_parts(125_015_095, 7260)
			// Standard Error: 137_797
			.saturating_add(Weight::from_parts(174_605, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(r.into()))
	}
	/// Storage: `Opf::Votes` (r:1 w:1)
	/// Proof: `Opf::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 50]`.
	fn release_voter_funds(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587`
		//  Estimated: `4052`
		// Minimum execution time: 66_349_000 picoseconds.
		Weight::from_parts(69_170_855, 4052)
			// Standard Error: 44_959
			.saturating_add(Weight::from_parts(8_886, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:0)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:51 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:50 w:0)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 50]`.
	fn on_registration(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `672 + r * (77 ±0)`
		//  Estimated: `4138 + r * (2553 ±0)`
		// Minimum execution time: 64_323_000 picoseconds.
		Weight::from_parts(62_611_153, 4138)
			// Standard Error: 223_842
			.saturating_add(Weight::from_parts(4_213_031, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2553).saturating_mul(r.into()))
	}
	/// Storage: `Opf::NextVotingRoundNumber` (r:1 w:0)
	/// Proof: `Opf::NextVotingRoundNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::VotingRounds` (r:1 w:0)
	/// Proof: `Opf::VotingRounds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::WhiteListedProjectAccounts` (r:51 w:1)
	/// Proof: `Opf::WhiteListedProjectAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Opf::ProjectFunds` (r:50 w:0)
	/// Proof: `Opf::ProjectFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[1, 50]`.
	fn claim_reward_for(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `672 + r * (77 ±0)`
		//  Estimated: `4138 + r * (2553 ±0)`
		// Minimum execution time: 69_701_000 picoseconds.
		Weight::from_parts(69_402_341, 4138)
			// Standard Error: 142_780
			.saturating_add(Weight::from_parts(3_845_926, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2553).saturating_mul(r.into()))
	}
}
