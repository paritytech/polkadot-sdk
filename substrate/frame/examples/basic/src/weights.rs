// This file is part of Substrate.

// SPDX-License-Identifier: MIT-0

// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! Autogenerated weights for pallet_example_basic
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Shawns-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_example_basic
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_example_basic.
pub trait WeightInfo {
	fn set_dummy_benchmark() -> Weight;
	fn accumulate_dummy() -> Weight;
	fn sort_vector(x: u32, ) -> Weight;
}

/// Weights for pallet_example_basic using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: BasicExample Dummy (r:0 w:1)
	fn set_dummy_benchmark() -> Weight {
		Weight::from_parts(19_000_000 as u64, 0)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: BasicExample Dummy (r:1 w:1)
	fn accumulate_dummy() -> Weight {
		Weight::from_parts(18_000_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	/// The range of component `x` is `[0, 10000]`.
	fn sort_vector(x: u32, ) -> Weight {
		Weight::from_parts(0 as u64, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(520 as u64, 0).saturating_mul(x as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: BasicExample Dummy (r:0 w:1)
	fn set_dummy_benchmark() -> Weight {
		Weight::from_parts(19_000_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: BasicExample Dummy (r:1 w:1)
	fn accumulate_dummy() -> Weight {
		Weight::from_parts(18_000_000 as u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	/// The range of component `x` is `[0, 10000]`.
	fn sort_vector(x: u32, ) -> Weight {
		Weight::from_parts(0 as u64, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(520 as u64, 0).saturating_mul(x as u64))
	}
}
