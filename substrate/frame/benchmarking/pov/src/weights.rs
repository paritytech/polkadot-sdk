// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `frame_benchmarking_pallet_pov`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-02-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `802a4f773b26`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/kitchensink-runtime/kitchensink_runtime.wasm
// --pallet=frame_benchmarking_pallet_pov
// --header=/__w/polkadot-sdk/polkadot-sdk/substrate/HEADER-APACHE2
// --output=/__w/polkadot-sdk/polkadot-sdk/substrate/frame/benchmarking/pov/src/weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=substrate/.maintain/frame-weight-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes
// --genesis-builder-policy=none
// --exclude-pallets=pallet_xcm,pallet_xcm_benchmarks::fungible,pallet_xcm_benchmarks::generic,pallet_nomination_pools,pallet_remark,pallet_transaction_storage,pallet_election_provider_multi_block,pallet_election_provider_multi_block::signed,pallet_election_provider_multi_block::unsigned,pallet_election_provider_multi_block::verifier

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `frame_benchmarking_pallet_pov`.
pub trait WeightInfo {
	fn storage_single_value_read() -> Weight;
	fn storage_single_value_ignored_read() -> Weight;
	fn storage_single_value_ignored_some_read() -> Weight;
	fn storage_single_value_read_twice() -> Weight;
	fn storage_single_value_write() -> Weight;
	fn storage_single_value_kill() -> Weight;
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight;
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight;
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight;
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight;
	fn storage_value_bounded_read() -> Weight;
	fn storage_value_unbounded_read() -> Weight;
	fn storage_value_unbounded_ignored_read() -> Weight;
	fn storage_value_bounded_and_unbounded_read() -> Weight;
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight;
	fn emit_event() -> Weight;
	fn noop() -> Weight;
	fn storage_iteration() -> Weight;
	fn storage_root_is_the_same_every_time(i: u32, ) -> Weight;
}

/// Weights for `frame_benchmarking_pallet_pov` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8`
		//  Estimated: `1489`
		// Minimum execution time: 1_892_000 picoseconds.
		Weight::from_parts(1_998_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8`
		//  Estimated: `0`
		// Minimum execution time: 1_901_000 picoseconds.
		Weight::from_parts(1_986_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Value2` (r:1 w:0)
	/// Proof: `Pov::Value2` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35`
		//  Estimated: `1489`
		// Minimum execution time: 3_726_000 picoseconds.
		Weight::from_parts(3_823_000, 1489)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8`
		//  Estimated: `1489`
		// Minimum execution time: 2_303_000 picoseconds.
		Weight::from_parts(2_397_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 399_000 picoseconds.
		Weight::from_parts(424_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(338_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1182`
		//  Estimated: `4647`
		// Minimum execution time: 11_939_000 picoseconds.
		Weight::from_parts(12_394_000, 4647)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1485`
		//  Estimated: `4950`
		// Minimum execution time: 15_369_000 picoseconds.
		Weight::from_parts(15_798_000, 4950)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2018`
		//  Estimated: `5483`
		// Minimum execution time: 15_533_000 picoseconds.
		Weight::from_parts(15_938_000, 5483)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `990 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 480_429_000 picoseconds.
		Weight::from_parts(300_872_686, 990)
			// Standard Error: 34_169
			.saturating_add(Weight::from_parts(2_576_139, 0).saturating_mul(n.into()))
			// Standard Error: 34_169
			.saturating_add(Weight::from_parts(2_556_997, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Ignored`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `1560 + m * (189 ±0) + n * (3006 ±0)`
		// Minimum execution time: 475_038_000 picoseconds.
		Weight::from_parts(292_015_397, 1560)
			// Standard Error: 34_095
			.saturating_add(Weight::from_parts(2_635_049, 0).saturating_mul(n.into()))
			// Standard Error: 34_095
			.saturating_add(Weight::from_parts(2_609_223, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `41`
		//  Estimated: `3501`
		// Minimum execution time: 143_000 picoseconds.
		Weight::from_parts(2_627_227, 3501)
			// Standard Error: 787
			.saturating_add(Weight::from_parts(1_010_564, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `18 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 150_000 picoseconds.
		Weight::from_parts(159_000, 990)
			// Standard Error: 4_983
			.saturating_add(Weight::from_parts(12_712_821, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: `Pov::DoubleMap1M` (r:1024 w:0)
	/// Proof: `Pov::DoubleMap1M` (`max_values`: Some(1000000), `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21809 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 278_000 picoseconds.
		Weight::from_parts(94_810_048, 990)
			// Standard Error: 4_316
			.saturating_add(Weight::from_parts(4_823_775, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1518`
		// Minimum execution time: 676_000 picoseconds.
		Weight::from_parts(734_000, 1518)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 675_000 picoseconds.
		Weight::from_parts(711_000, 1485)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Ignored`)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 673_000 picoseconds.
		Weight::from_parts(755_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `2019`
		// Minimum execution time: 4_500_000 picoseconds.
		Weight::from_parts(4_674_000, 2019)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13 + l * (1 ±0)`
		//  Estimated: `1497 + l * (1 ±0)`
		// Minimum execution time: 1_988_000 picoseconds.
		Weight::from_parts(2_049_000, 1497)
			// Standard Error: 136
			.saturating_add(Weight::from_parts(12_141, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 1_960_000 picoseconds.
		Weight::from_parts(2_042_000, 4195793)
			// Standard Error: 131
			.saturating_add(Weight::from_parts(12_058, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `1530 + l * (2 ±0)`
		// Minimum execution time: 3_880_000 picoseconds.
		Weight::from_parts(3_895_000, 1530)
			// Standard Error: 268
			.saturating_add(Weight::from_parts(24_105, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 3_761_000 picoseconds.
		Weight::from_parts(3_875_000, 4195793)
			// Standard Error: 267
			.saturating_add(Weight::from_parts(24_045, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 3_797_000 picoseconds.
		Weight::from_parts(3_921_000, 4195793)
			// Standard Error: 268
			.saturating_add(Weight::from_parts(24_112, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 3_752_000 picoseconds.
		Weight::from_parts(3_855_000, 4195793)
			// Standard Error: 268
			.saturating_add(Weight::from_parts(24_140, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::UnboundedMap2` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap2` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104 + i * (8 ±0)`
		//  Estimated: `3568 + i * (8 ±0)`
		// Minimum execution time: 7_386_000 picoseconds.
		Weight::from_parts(8_151_901, 3568)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(3_040, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + i * (4 ±0)`
		//  Estimated: `3567 + i * (4 ±0)`
		// Minimum execution time: 7_457_000 picoseconds.
		Weight::from_parts(8_157_061, 3567)
			// Standard Error: 23
			.saturating_add(Weight::from_parts(1_656, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Ignored`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + i * (4 ±0)`
		//  Estimated: `3501 + i * (4 ±0)`
		// Minimum execution time: 7_290_000 picoseconds.
		Weight::from_parts(8_134_601, 3501)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(1_670, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_879_000 picoseconds.
		Weight::from_parts(3_994_000, 0)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_553_000 picoseconds.
		Weight::from_parts(1_648_000, 0)
	}
	/// Storage: `Pov::UnboundedMapTwox` (r:65001 w:0)
	/// Proof: `Pov::UnboundedMapTwox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn storage_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17985119`
		//  Estimated: `178863584`
		// Minimum execution time: 313_650_675_000 picoseconds.
		Weight::from_parts(318_269_841_000, 178863584)
			.saturating_add(T::DbWeight::get().reads(65001_u64))
	}
	/// Storage: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// The range of component `i` is `[0, 10]`.
	fn storage_root_is_the_same_every_time(_i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 338_000 picoseconds.
		Weight::from_parts(386_845, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8`
		//  Estimated: `1489`
		// Minimum execution time: 1_892_000 picoseconds.
		Weight::from_parts(1_998_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8`
		//  Estimated: `0`
		// Minimum execution time: 1_901_000 picoseconds.
		Weight::from_parts(1_986_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Value2` (r:1 w:0)
	/// Proof: `Pov::Value2` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35`
		//  Estimated: `1489`
		// Minimum execution time: 3_726_000 picoseconds.
		Weight::from_parts(3_823_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8`
		//  Estimated: `1489`
		// Minimum execution time: 2_303_000 picoseconds.
		Weight::from_parts(2_397_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 399_000 picoseconds.
		Weight::from_parts(424_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(338_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1182`
		//  Estimated: `4647`
		// Minimum execution time: 11_939_000 picoseconds.
		Weight::from_parts(12_394_000, 4647)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1485`
		//  Estimated: `4950`
		// Minimum execution time: 15_369_000 picoseconds.
		Weight::from_parts(15_798_000, 4950)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2018`
		//  Estimated: `5483`
		// Minimum execution time: 15_533_000 picoseconds.
		Weight::from_parts(15_938_000, 5483)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `990 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 480_429_000 picoseconds.
		Weight::from_parts(300_872_686, 990)
			// Standard Error: 34_169
			.saturating_add(Weight::from_parts(2_576_139, 0).saturating_mul(n.into()))
			// Standard Error: 34_169
			.saturating_add(Weight::from_parts(2_556_997, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Ignored`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `1560 + m * (189 ±0) + n * (3006 ±0)`
		// Minimum execution time: 475_038_000 picoseconds.
		Weight::from_parts(292_015_397, 1560)
			// Standard Error: 34_095
			.saturating_add(Weight::from_parts(2_635_049, 0).saturating_mul(n.into()))
			// Standard Error: 34_095
			.saturating_add(Weight::from_parts(2_609_223, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `41`
		//  Estimated: `3501`
		// Minimum execution time: 143_000 picoseconds.
		Weight::from_parts(2_627_227, 3501)
			// Standard Error: 787
			.saturating_add(Weight::from_parts(1_010_564, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `18 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 150_000 picoseconds.
		Weight::from_parts(159_000, 990)
			// Standard Error: 4_983
			.saturating_add(Weight::from_parts(12_712_821, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: `Pov::DoubleMap1M` (r:1024 w:0)
	/// Proof: `Pov::DoubleMap1M` (`max_values`: Some(1000000), `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21809 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 278_000 picoseconds.
		Weight::from_parts(94_810_048, 990)
			// Standard Error: 4_316
			.saturating_add(Weight::from_parts(4_823_775, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1518`
		// Minimum execution time: 676_000 picoseconds.
		Weight::from_parts(734_000, 1518)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 675_000 picoseconds.
		Weight::from_parts(711_000, 1485)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Ignored`)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 673_000 picoseconds.
		Weight::from_parts(755_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `2019`
		// Minimum execution time: 4_500_000 picoseconds.
		Weight::from_parts(4_674_000, 2019)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13 + l * (1 ±0)`
		//  Estimated: `1497 + l * (1 ±0)`
		// Minimum execution time: 1_988_000 picoseconds.
		Weight::from_parts(2_049_000, 1497)
			// Standard Error: 136
			.saturating_add(Weight::from_parts(12_141, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 1_960_000 picoseconds.
		Weight::from_parts(2_042_000, 4195793)
			// Standard Error: 131
			.saturating_add(Weight::from_parts(12_058, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `1530 + l * (2 ±0)`
		// Minimum execution time: 3_880_000 picoseconds.
		Weight::from_parts(3_895_000, 1530)
			// Standard Error: 268
			.saturating_add(Weight::from_parts(24_105, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 3_761_000 picoseconds.
		Weight::from_parts(3_875_000, 4195793)
			// Standard Error: 267
			.saturating_add(Weight::from_parts(24_045, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 3_797_000 picoseconds.
		Weight::from_parts(3_921_000, 4195793)
			// Standard Error: 268
			.saturating_add(Weight::from_parts(24_112, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 3_752_000 picoseconds.
		Weight::from_parts(3_855_000, 4195793)
			// Standard Error: 268
			.saturating_add(Weight::from_parts(24_140, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::UnboundedMap2` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap2` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104 + i * (8 ±0)`
		//  Estimated: `3568 + i * (8 ±0)`
		// Minimum execution time: 7_386_000 picoseconds.
		Weight::from_parts(8_151_901, 3568)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(3_040, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + i * (4 ±0)`
		//  Estimated: `3567 + i * (4 ±0)`
		// Minimum execution time: 7_457_000 picoseconds.
		Weight::from_parts(8_157_061, 3567)
			// Standard Error: 23
			.saturating_add(Weight::from_parts(1_656, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Ignored`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + i * (4 ±0)`
		//  Estimated: `3501 + i * (4 ±0)`
		// Minimum execution time: 7_290_000 picoseconds.
		Weight::from_parts(8_134_601, 3501)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(1_670, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_879_000 picoseconds.
		Weight::from_parts(3_994_000, 0)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_553_000 picoseconds.
		Weight::from_parts(1_648_000, 0)
	}
	/// Storage: `Pov::UnboundedMapTwox` (r:65001 w:0)
	/// Proof: `Pov::UnboundedMapTwox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn storage_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17985119`
		//  Estimated: `178863584`
		// Minimum execution time: 313_650_675_000 picoseconds.
		Weight::from_parts(318_269_841_000, 178863584)
			.saturating_add(RocksDbWeight::get().reads(65001_u64))
	}
	/// Storage: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// The range of component `i` is `[0, 10]`.
	fn storage_root_is_the_same_every_time(_i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 338_000 picoseconds.
		Weight::from_parts(386_845, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
