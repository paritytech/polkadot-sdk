// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_ranked_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /Users/gav/Core/substrate/target/release/substrate
// benchmark
// pallet
// --pallet
// pallet-dummy-dim
// --extrinsic=*
// --chain=dev
// --steps=50
// --repeat=20
// --output=../../../frame/dummy-dim/src/weights.rs
// --template=../../../.maintain/frame-weight-template.hbs
// --header=../../../HEADER-APACHE2
// --record-proof

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_dummy_dim.
pub trait WeightInfo {
	fn reserve_ids(c: u32) -> Weight;
	fn renew_id_reservation() -> Weight;
	fn cancel_id_reservation() -> Weight;
	fn recognize_personhood(c: u32) -> Weight;
	fn suspend_personhood(c: u32) -> Weight;
	fn resume_personhood() -> Weight;
	fn start_mutation_session() -> Weight;
	fn end_mutation_session() -> Weight;
}

/// Weights for pallet_dummy_dim using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn reserve_ids(_c: u32) -> Weight { Weight::zero() }
	fn renew_id_reservation() -> Weight { Weight::zero() }
	fn cancel_id_reservation() -> Weight { Weight::zero() }
	fn recognize_personhood(_c: u32) -> Weight { Weight::zero() }
	fn suspend_personhood(_c: u32) -> Weight { Weight::zero() }
	fn resume_personhood() -> Weight { Weight::zero() }
	fn start_mutation_session() -> Weight { Weight::zero() }
	fn end_mutation_session() -> Weight { Weight::zero() }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn reserve_ids(_c: u32) -> Weight { Weight::zero() }
	fn renew_id_reservation() -> Weight { Weight::zero() }
	fn cancel_id_reservation() -> Weight { Weight::zero() }
	fn recognize_personhood(_c: u32) -> Weight { Weight::zero() }
	fn suspend_personhood(_c: u32) -> Weight { Weight::zero() }
	fn resume_personhood() -> Weight { Weight::zero() }
	fn start_mutation_session() -> Weight { Weight::zero() }
	fn end_mutation_session() -> Weight { Weight::zero() }
}
