// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_staking_async_ah_client`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-07-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[1]`, HIGH RANGE: `[1000]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03662`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/westend-runtime/westend_runtime.compact.compressed.wasm
// --pallet
// pallet_staking_async_ah_client
// --extrinsic
// process_buffered_offences
// --steps
// 50
// --repeat
// 20
// --low
// 1
// --high
// 1000
// --output
// ./substrate/frame/staking-async/ah-client/src/weights.rs
// --header
// ./substrate/HEADER-APACHE2
// --template
// ./substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_staking_async_ah_client`.
pub trait WeightInfo {
	fn process_buffered_offences(n: u32, ) -> Weight;
}

/// Weights for `pallet_staking_async_ah_client` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `StakingAhClient::BufferedOffences` (r:1 w:1)
	/// Proof: `StakingAhClient::BufferedOffences` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:0)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 1000]`.
	fn process_buffered_offences(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340 + n * (69 ±0)`
		//  Estimated: `3803 + n * (69 ±0)`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(48_047_906, 3803)
			// Standard Error: 638
			.saturating_add(Weight::from_parts(112_664, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 69).saturating_mul(n.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `StakingAhClient::BufferedOffences` (r:1 w:1)
	/// Proof: `StakingAhClient::BufferedOffences` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:0)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 1000]`.
	fn process_buffered_offences(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340 + n * (69 ±0)`
		//  Estimated: `3803 + n * (69 ±0)`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(48_047_906, 3803)
			// Standard Error: 638
			.saturating_add(Weight::from_parts(112_664, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 69).saturating_mul(n.into()))
	}
}
