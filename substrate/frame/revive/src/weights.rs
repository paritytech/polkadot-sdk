// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-12-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `44311fe9f020`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/production/substrate-node
// benchmark
// pallet
// --extrinsic=*
// --chain=dev
// --pallet=pallet_revive
// --header=/__w/polkadot-sdk/polkadot-sdk/substrate/HEADER-APACHE2
// --output=/__w/polkadot-sdk/polkadot-sdk/substrate/frame/revive/src/weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=substrate/.maintain/frame-weight-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_revive`.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight;
	fn instantiate(i: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn map_account() -> Weight;
	fn unmap_account() -> Weight;
	fn dispatch_as_fallback_account() -> Weight;
	fn noop_host_fn(r: u32, ) -> Weight;
	fn seal_caller() -> Weight;
	fn seal_origin() -> Weight;
	fn seal_is_contract() -> Weight;
	fn seal_code_hash() -> Weight;
	fn seal_own_code_hash() -> Weight;
	fn seal_code_size() -> Weight;
	fn seal_caller_is_origin() -> Weight;
	fn seal_caller_is_root() -> Weight;
	fn seal_address() -> Weight;
	fn seal_weight_left() -> Weight;
	fn seal_ref_time_left() -> Weight;
	fn seal_balance() -> Weight;
	fn seal_balance_of() -> Weight;
	fn seal_get_immutable_data(n: u32, ) -> Weight;
	fn seal_set_immutable_data(n: u32, ) -> Weight;
	fn seal_value_transferred() -> Weight;
	fn seal_minimum_balance() -> Weight;
	fn seal_call_data_size() -> Weight;
	fn seal_block_number() -> Weight;
	fn seal_block_hash() -> Weight;
	fn seal_now() -> Weight;
	fn seal_weight_to_fee() -> Weight;
	fn seal_call_data_load() -> Weight;
	fn seal_input(n: u32, ) -> Weight;
	fn seal_return(n: u32, ) -> Weight;
	fn seal_terminate(n: u32, ) -> Weight;
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(i: u32, ) -> Weight;
	fn get_storage_empty() -> Weight;
	fn get_storage_full() -> Weight;
	fn set_storage_empty() -> Weight;
	fn set_storage_full() -> Weight;
	fn seal_set_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_storage(n: u32, ) -> Weight;
	fn seal_get_storage(n: u32, ) -> Weight;
	fn seal_contains_storage(n: u32, ) -> Weight;
	fn seal_take_storage(n: u32, ) -> Weight;
	fn set_transient_storage_empty() -> Weight;
	fn set_transient_storage_full() -> Weight;
	fn get_transient_storage_empty() -> Weight;
	fn get_transient_storage_full() -> Weight;
	fn rollback_transient_storage() -> Weight;
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_transient_storage(n: u32, ) -> Weight;
	fn seal_get_transient_storage(n: u32, ) -> Weight;
	fn seal_contains_transient_storage(n: u32, ) -> Weight;
	fn seal_take_transient_storage(n: u32, ) -> Weight;
	fn seal_call(t: u32, i: u32, ) -> Weight;
	fn seal_delegate_call() -> Weight;
	fn seal_instantiate(i: u32, ) -> Weight;
	fn seal_hash_sha2_256(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(n: u32, ) -> Weight;
	fn seal_sr25519_verify(n: u32, ) -> Weight;
	fn seal_ecdsa_recover() -> Weight;
	fn seal_ecdsa_to_eth_address() -> Weight;
	fn seal_set_code_hash() -> Weight;
	fn lock_delegate_dependency() -> Weight;
	fn unlock_delegate_dependency() -> Weight;
	fn instr(r: u32, ) -> Weight;
}

/// Weights for `pallet_revive` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 2_891_000 picoseconds.
		Weight::from_parts(2_993_000, 1594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425 + k * (69 ±0)`
		//  Estimated: `415 + k * (70 ±0)`
		// Minimum execution time: 15_971_000 picoseconds.
		Weight::from_parts(2_143_667, 415)
			// Standard Error: 1_310
			.saturating_add(Weight::from_parts(1_193_846, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::AddressSuffix` (r:2 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	fn call_with_code_per_byte(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1465`
		//  Estimated: `7405`
		// Minimum execution time: 91_907_000 picoseconds.
		Weight::from_parts(96_715_802, 7405)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `416`
		//  Estimated: `6348`
		// Minimum execution time: 195_352_000 picoseconds.
		Weight::from_parts(176_927_111, 6348)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(8, 0).saturating_mul(c.into()))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(4_546, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1309`
		//  Estimated: `4760`
		// Minimum execution time: 159_154_000 picoseconds.
		Weight::from_parts(143_397_203, 4760)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(4_483, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::AddressSuffix` (r:2 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1465`
		//  Estimated: `7405`
		// Minimum execution time: 139_895_000 picoseconds.
		Weight::from_parts(149_215_000, 7405)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	fn upload_code(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 51_667_000 picoseconds.
		Weight::from_parts(54_174_928, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 45_495_000 picoseconds.
		Weight::from_parts(47_023_000, 3750)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `529`
		//  Estimated: `6469`
		// Minimum execution time: 27_867_000 picoseconds.
		Weight::from_parts(29_099_000, 6469)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:1)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 41_296_000 picoseconds.
		Weight::from_parts(42_407_000, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::AddressSuffix` (r:0 w:1)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `56`
		//  Estimated: `3521`
		// Minimum execution time: 32_595_000 picoseconds.
		Weight::from_parts(33_863_000, 3521)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 14_131_000 picoseconds.
		Weight::from_parts(14_603_000, 3610)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_271_000 picoseconds.
		Weight::from_parts(8_775_610, 0)
			// Standard Error: 253
			.saturating_add(Weight::from_parts(169_311, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 287_000 picoseconds.
		Weight::from_parts(319_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 241_000 picoseconds.
		Weight::from_parts(284_000, 0)
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	fn seal_is_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306`
		//  Estimated: `3771`
		// Minimum execution time: 10_387_000 picoseconds.
		Weight::from_parts(10_905_000, 3771)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3868`
		// Minimum execution time: 11_182_000 picoseconds.
		Weight::from_parts(11_750_000, 3868)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 253_000 picoseconds.
		Weight::from_parts(302_000, 0)
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473`
		//  Estimated: `3938`
		// Minimum execution time: 15_287_000 picoseconds.
		Weight::from_parts(15_678_000, 3938)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 309_000 picoseconds.
		Weight::from_parts(345_000, 0)
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 274_000 picoseconds.
		Weight::from_parts(310_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 278_000 picoseconds.
		Weight::from_parts(332_000, 0)
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 643_000 picoseconds.
		Weight::from_parts(705_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 234_000 picoseconds.
		Weight::from_parts(263_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `0`
		// Minimum execution time: 5_493_000 picoseconds.
		Weight::from_parts(5_893_000, 0)
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `3729`
		// Minimum execution time: 9_067_000 picoseconds.
		Weight::from_parts(9_387_000, 3729)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238 + n * (1 ±0)`
		//  Estimated: `3703 + n * (1 ±0)`
		// Minimum execution time: 6_034_000 picoseconds.
		Weight::from_parts(6_855_670, 3703)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(716, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_056_000 picoseconds.
		Weight::from_parts(2_262_111, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(627, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 233_000 picoseconds.
		Weight::from_parts(291_000, 0)
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 259_000 picoseconds.
		Weight::from_parts(299_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 265_000 picoseconds.
		Weight::from_parts(304_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 235_000 picoseconds.
		Weight::from_parts(314_000, 0)
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 3_640_000 picoseconds.
		Weight::from_parts(3_764_000, 3495)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 263_000 picoseconds.
		Weight::from_parts(305_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_349_000 picoseconds.
		Weight::from_parts(1_513_000, 0)
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 248_000 picoseconds.
		Weight::from_parts(270_000, 0)
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_input(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 434_000 picoseconds.
		Weight::from_parts(571_982, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(147, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 279_000 picoseconds.
		Weight::from_parts(459_130, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(295, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:33 w:33)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[0, 32]`.
	fn seal_terminate(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `324 + n * (88 ±0)`
		//  Estimated: `3790 + n * (2563 ±0)`
		// Minimum execution time: 22_634_000 picoseconds.
		Weight::from_parts(23_408_358, 3790)
			// Standard Error: 9_332
			.saturating_add(Weight::from_parts(4_322_527, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(n.into()))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 512]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_382_000 picoseconds.
		Weight::from_parts(4_398_929, 0)
			// Standard Error: 2_657
			.saturating_add(Weight::from_parts(172_204, 0).saturating_mul(t.into()))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(730, 0).saturating_mul(n.into()))
	}
	/// The range of component `i` is `[0, 262144]`.
	fn seal_debug_message(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(632_353, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(804, 0).saturating_mul(i.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `744`
		// Minimum execution time: 7_954_000 picoseconds.
		Weight::from_parts(8_281_000, 744)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10754`
		//  Estimated: `10754`
		// Minimum execution time: 43_378_000 picoseconds.
		Weight::from_parts(44_417_000, 10754)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `744`
		// Minimum execution time: 9_160_000 picoseconds.
		Weight::from_parts(9_567_000, 744)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10754`
		//  Estimated: `10754`
		// Minimum execution time: 44_815_000 picoseconds.
		Weight::from_parts(45_791_000, 10754)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	/// The range of component `o` is `[0, 512]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 9_186_000 picoseconds.
		Weight::from_parts(9_969_981, 247)
			// Standard Error: 42
			.saturating_add(Weight::from_parts(569, 0).saturating_mul(n.into()))
			// Standard Error: 42
			.saturating_add(Weight::from_parts(564, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_936_000 picoseconds.
		Weight::from_parts(9_836_899, 247)
			// Standard Error: 65
			.saturating_add(Weight::from_parts(699, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_589_000 picoseconds.
		Weight::from_parts(9_541_847, 247)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(1_467, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_135_000 picoseconds.
		Weight::from_parts(8_942_735, 247)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(776, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 9_398_000 picoseconds.
		Weight::from_parts(10_437_050, 247)
			// Standard Error: 66
			.saturating_add(Weight::from_parts(1_543, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_401_000 picoseconds.
		Weight::from_parts(1_537_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_789_000 picoseconds.
		Weight::from_parts(1_923_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_370_000 picoseconds.
		Weight::from_parts(1_469_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_508_000 picoseconds.
		Weight::from_parts(1_630_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_038_000 picoseconds.
		Weight::from_parts(1_162_000, 0)
	}
	/// The range of component `n` is `[0, 512]`.
	/// The range of component `o` is `[0, 512]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_194_000 picoseconds.
		Weight::from_parts(2_408_809, 0)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(274, 0).saturating_mul(n.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(384, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_016_000 picoseconds.
		Weight::from_parts(2_327_461, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(395, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_810_000 picoseconds.
		Weight::from_parts(2_085_894, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(307, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_647_000 picoseconds.
		Weight::from_parts(1_870_594, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(192, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_take_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_465_000 picoseconds.
		Weight::from_parts(2_793_999, 0)
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1292 + t * (280 ±0)`
		//  Estimated: `4757 + t * (2518 ±0)`
		// Minimum execution time: 41_770_000 picoseconds.
		Weight::from_parts(43_442_208, 4757)
			// Standard Error: 57_667
			.saturating_add(Weight::from_parts(1_615_795, 0).saturating_mul(t.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2518).saturating_mul(t.into()))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1237`
		//  Estimated: `4702`
		// Minimum execution time: 37_246_000 picoseconds.
		Weight::from_parts(37_937_000, 4702)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1310`
		//  Estimated: `4769`
		// Minimum execution time: 121_745_000 picoseconds.
		Weight::from_parts(115_673_010, 4769)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(4_189, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 680_000 picoseconds.
		Weight::from_parts(4_292_405, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_484, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_075_000 picoseconds.
		Weight::from_parts(4_363_912, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(3_702, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 690_000 picoseconds.
		Weight::from_parts(3_850_921, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_601, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 623_000 picoseconds.
		Weight::from_parts(3_751_112, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_600, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 49_059_000 picoseconds.
		Weight::from_parts(39_728_209, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(5_180, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_754_000 picoseconds.
		Weight::from_parts(48_077_000, 0)
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_690_000 picoseconds.
		Weight::from_parts(12_823_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `3765`
		// Minimum execution time: 18_360_000 picoseconds.
		Weight::from_parts(18_924_000, 3765)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn lock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `3803`
		// Minimum execution time: 13_912_000 picoseconds.
		Weight::from_parts(14_686_000, 3803)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn unlock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `3561`
		// Minimum execution time: 13_215_000 picoseconds.
		Weight::from_parts(13_562_000, 3561)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_570_000 picoseconds.
		Weight::from_parts(10_138_693, 0)
			// Standard Error: 91
			.saturating_add(Weight::from_parts(71_512, 0).saturating_mul(r.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 2_891_000 picoseconds.
		Weight::from_parts(2_993_000, 1594)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425 + k * (69 ±0)`
		//  Estimated: `415 + k * (70 ±0)`
		// Minimum execution time: 15_971_000 picoseconds.
		Weight::from_parts(2_143_667, 415)
			// Standard Error: 1_310
			.saturating_add(Weight::from_parts(1_193_846, 0).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::AddressSuffix` (r:2 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	fn call_with_code_per_byte(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1465`
		//  Estimated: `7405`
		// Minimum execution time: 91_907_000 picoseconds.
		Weight::from_parts(96_715_802, 7405)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `416`
		//  Estimated: `6348`
		// Minimum execution time: 195_352_000 picoseconds.
		Weight::from_parts(176_927_111, 6348)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(8, 0).saturating_mul(c.into()))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(4_546, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1309`
		//  Estimated: `4760`
		// Minimum execution time: 159_154_000 picoseconds.
		Weight::from_parts(143_397_203, 4760)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(4_483, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::AddressSuffix` (r:2 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1465`
		//  Estimated: `7405`
		// Minimum execution time: 139_895_000 picoseconds.
		Weight::from_parts(149_215_000, 7405)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	fn upload_code(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 51_667_000 picoseconds.
		Weight::from_parts(54_174_928, 3574)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 45_495_000 picoseconds.
		Weight::from_parts(47_023_000, 3750)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `529`
		//  Estimated: `6469`
		// Minimum execution time: 27_867_000 picoseconds.
		Weight::from_parts(29_099_000, 6469)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:1)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 41_296_000 picoseconds.
		Weight::from_parts(42_407_000, 3574)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `Measured`)
	/// Storage: `Revive::AddressSuffix` (r:0 w:1)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `56`
		//  Estimated: `3521`
		// Minimum execution time: 32_595_000 picoseconds.
		Weight::from_parts(33_863_000, 3521)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 14_131_000 picoseconds.
		Weight::from_parts(14_603_000, 3610)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_271_000 picoseconds.
		Weight::from_parts(8_775_610, 0)
			// Standard Error: 253
			.saturating_add(Weight::from_parts(169_311, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 287_000 picoseconds.
		Weight::from_parts(319_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 241_000 picoseconds.
		Weight::from_parts(284_000, 0)
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	fn seal_is_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306`
		//  Estimated: `3771`
		// Minimum execution time: 10_387_000 picoseconds.
		Weight::from_parts(10_905_000, 3771)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3868`
		// Minimum execution time: 11_182_000 picoseconds.
		Weight::from_parts(11_750_000, 3868)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 253_000 picoseconds.
		Weight::from_parts(302_000, 0)
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473`
		//  Estimated: `3938`
		// Minimum execution time: 15_287_000 picoseconds.
		Weight::from_parts(15_678_000, 3938)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 309_000 picoseconds.
		Weight::from_parts(345_000, 0)
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 274_000 picoseconds.
		Weight::from_parts(310_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 278_000 picoseconds.
		Weight::from_parts(332_000, 0)
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 643_000 picoseconds.
		Weight::from_parts(705_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 234_000 picoseconds.
		Weight::from_parts(263_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `0`
		// Minimum execution time: 5_493_000 picoseconds.
		Weight::from_parts(5_893_000, 0)
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `3729`
		// Minimum execution time: 9_067_000 picoseconds.
		Weight::from_parts(9_387_000, 3729)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238 + n * (1 ±0)`
		//  Estimated: `3703 + n * (1 ±0)`
		// Minimum execution time: 6_034_000 picoseconds.
		Weight::from_parts(6_855_670, 3703)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(716, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_056_000 picoseconds.
		Weight::from_parts(2_262_111, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(627, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 233_000 picoseconds.
		Weight::from_parts(291_000, 0)
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 259_000 picoseconds.
		Weight::from_parts(299_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 265_000 picoseconds.
		Weight::from_parts(304_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 235_000 picoseconds.
		Weight::from_parts(314_000, 0)
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 3_640_000 picoseconds.
		Weight::from_parts(3_764_000, 3495)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 263_000 picoseconds.
		Weight::from_parts(305_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_349_000 picoseconds.
		Weight::from_parts(1_513_000, 0)
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 248_000 picoseconds.
		Weight::from_parts(270_000, 0)
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_input(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 434_000 picoseconds.
		Weight::from_parts(571_982, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(147, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 279_000 picoseconds.
		Weight::from_parts(459_130, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(295, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:33 w:33)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[0, 32]`.
	fn seal_terminate(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `324 + n * (88 ±0)`
		//  Estimated: `3790 + n * (2563 ±0)`
		// Minimum execution time: 22_634_000 picoseconds.
		Weight::from_parts(23_408_358, 3790)
			// Standard Error: 9_332
			.saturating_add(Weight::from_parts(4_322_527, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(n.into()))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 512]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_382_000 picoseconds.
		Weight::from_parts(4_398_929, 0)
			// Standard Error: 2_657
			.saturating_add(Weight::from_parts(172_204, 0).saturating_mul(t.into()))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(730, 0).saturating_mul(n.into()))
	}
	/// The range of component `i` is `[0, 262144]`.
	fn seal_debug_message(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(632_353, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(804, 0).saturating_mul(i.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `744`
		// Minimum execution time: 7_954_000 picoseconds.
		Weight::from_parts(8_281_000, 744)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10754`
		//  Estimated: `10754`
		// Minimum execution time: 43_378_000 picoseconds.
		Weight::from_parts(44_417_000, 10754)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `744`
		// Minimum execution time: 9_160_000 picoseconds.
		Weight::from_parts(9_567_000, 744)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10754`
		//  Estimated: `10754`
		// Minimum execution time: 44_815_000 picoseconds.
		Weight::from_parts(45_791_000, 10754)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	/// The range of component `o` is `[0, 512]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 9_186_000 picoseconds.
		Weight::from_parts(9_969_981, 247)
			// Standard Error: 42
			.saturating_add(Weight::from_parts(569, 0).saturating_mul(n.into()))
			// Standard Error: 42
			.saturating_add(Weight::from_parts(564, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_936_000 picoseconds.
		Weight::from_parts(9_836_899, 247)
			// Standard Error: 65
			.saturating_add(Weight::from_parts(699, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_589_000 picoseconds.
		Weight::from_parts(9_541_847, 247)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(1_467, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_135_000 picoseconds.
		Weight::from_parts(8_942_735, 247)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(776, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 9_398_000 picoseconds.
		Weight::from_parts(10_437_050, 247)
			// Standard Error: 66
			.saturating_add(Weight::from_parts(1_543, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_401_000 picoseconds.
		Weight::from_parts(1_537_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_789_000 picoseconds.
		Weight::from_parts(1_923_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_370_000 picoseconds.
		Weight::from_parts(1_469_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_508_000 picoseconds.
		Weight::from_parts(1_630_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_038_000 picoseconds.
		Weight::from_parts(1_162_000, 0)
	}
	/// The range of component `n` is `[0, 512]`.
	/// The range of component `o` is `[0, 512]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_194_000 picoseconds.
		Weight::from_parts(2_408_809, 0)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(274, 0).saturating_mul(n.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(384, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_016_000 picoseconds.
		Weight::from_parts(2_327_461, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(395, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_810_000 picoseconds.
		Weight::from_parts(2_085_894, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(307, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_647_000 picoseconds.
		Weight::from_parts(1_870_594, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(192, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_take_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_465_000 picoseconds.
		Weight::from_parts(2_793_999, 0)
	}
	/// Storage: `Revive::AddressSuffix` (r:1 w:0)
	/// Proof: `Revive::AddressSuffix` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1292 + t * (280 ±0)`
		//  Estimated: `4757 + t * (2518 ±0)`
		// Minimum execution time: 41_770_000 picoseconds.
		Weight::from_parts(43_442_208, 4757)
			// Standard Error: 57_667
			.saturating_add(Weight::from_parts(1_615_795, 0).saturating_mul(t.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2518).saturating_mul(t.into()))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1237`
		//  Estimated: `4702`
		// Minimum execution time: 37_246_000 picoseconds.
		Weight::from_parts(37_937_000, 4702)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1310`
		//  Estimated: `4769`
		// Minimum execution time: 121_745_000 picoseconds.
		Weight::from_parts(115_673_010, 4769)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(4_189, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 680_000 picoseconds.
		Weight::from_parts(4_292_405, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_484, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_075_000 picoseconds.
		Weight::from_parts(4_363_912, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(3_702, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 690_000 picoseconds.
		Weight::from_parts(3_850_921, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_601, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 623_000 picoseconds.
		Weight::from_parts(3_751_112, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_600, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 49_059_000 picoseconds.
		Weight::from_parts(39_728_209, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(5_180, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_754_000 picoseconds.
		Weight::from_parts(48_077_000, 0)
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_690_000 picoseconds.
		Weight::from_parts(12_823_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `3765`
		// Minimum execution time: 18_360_000 picoseconds.
		Weight::from_parts(18_924_000, 3765)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn lock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `3803`
		// Minimum execution time: 13_912_000 picoseconds.
		Weight::from_parts(14_686_000, 3803)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn unlock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `3561`
		// Minimum execution time: 13_215_000 picoseconds.
		Weight::from_parts(13_562_000, 3561)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_570_000 picoseconds.
		Weight::from_parts(10_138_693, 0)
			// Standard Error: 91
			.saturating_add(Weight::from_parts(71_512, 0).saturating_mul(r.into()))
	}
}
