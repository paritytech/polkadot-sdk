error[E0425]: cannot find function `bar` in module `test`
  --> tests/ui/no_feature_gated_method.rs:33:8
   |
33 |     test::bar();
   |           ^^^ not found in `test`
   |
note: found an item that was configured out
  --> tests/ui/no_feature_gated_method.rs:25:5
   |
25 |     fn bar() {}
   |        ^^^
note: the item is gated behind the `bar-feature` feature
  --> tests/ui/no_feature_gated_method.rs:24:8
   |
24 |     #[cfg(feature = "bar-feature")]
   |           ^^^^^^^^^^^^^^^^^^^^^^^
note: found an item that was configured out
  --> tests/ui/no_feature_gated_method.rs:25:5
   |
25 |     fn bar() {}
   |        ^^^
note: the item is gated here
  --> tests/ui/no_feature_gated_method.rs:20:1
   |
20 | #[runtime_interface]
   | ^^^^^^^^^^^^^^^^^^^^
   = note: this error originates in the attribute macro `runtime_interface` (in Nightly builds, run with -Z macro-backtrace for more info)

error: unexpected `cfg` condition value: `bar-feature`
  --> tests/ui/no_feature_gated_method.rs:24:8
   |
24 |     #[cfg(feature = "bar-feature")]
   |           ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `disable_target_static_assertions`, and `std`
   = help: consider adding `bar-feature` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `-D unexpected-cfgs` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(unexpected_cfgs)]`

error: unexpected `cfg` condition value: `bar-feature`
  --> tests/ui/no_feature_gated_method.rs:27:12
   |
27 |     #[cfg(not(feature = "bar-feature"))]
   |               ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `disable_target_static_assertions`, and `std`
   = help: consider adding `bar-feature` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
