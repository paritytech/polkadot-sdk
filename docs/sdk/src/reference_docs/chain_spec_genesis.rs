//! Chain spec and genesis build.
//!
//! # What is chain-spec.
//!
//! # What is genesis state and how to build it.
//!
//! ## `GenesisConfig` for `pallet`
//!
//! pallet_bar GenesisConfig:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_bar_GenesisConfig)]
//! pallet_bar:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_bar)]

//! pallet_bar:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_bar_build)]

//! GenesisConfig may contain also more complicated types including nested structs or enums.
//! GenesisConfig for `pallet_foo
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_foo_GenesisConfig)]

//! pallet_foo build function. It uses fields of GenesisConfig to generate storage. Please not that
//! fields of `GenesisConfig` may not be directly mapped to storage items:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_foo_build)]

//! The runtime genesis config struct consists of configs for every pallet. For sample runtime used
//! in this guide, it consists of `SystemConfig`, `BarConfig` and `FooConfig`. This structure was
//! automatically generated by macro and it can be sneaked peaked here: [`RuntimeGenesisConfig`].

//! Runtime exposes a dedicated runtime API for interacting with its genesis config:
//! [`sp-genesis-builder::GenesisBuilder`]. Implementation shall be provided withing
//! `impl_runtime_apis` macro, typically making use of some helpers provided: [`build_state`],
//! ['get_preset'].
//! Typically implementation of [`sp-genesis-builder::GenesisBuilder`] is as follows:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/runtime.rs", runtime_impl)]

//! Please note that two functions are customized `preset_names` and `get_preset`. The first one
//! just provdes a vec of names of supported presets, while the latter one delegats the call to
//! function that maps the name to preset: [`chain_spec_guide_runtime::presets::get_builtin_preset`]
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", get_builtin_preset)]

//! Internally presets can be provided in a number of ways:
//! - json in string form:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_1)]
//! - json using runtime types to serialize values:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_2)]
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_3)]
//! It is worth noting that preset does not have to be the full `RuntimeGenesisConfig`, in that
//! sense that it does not have to contain all the keys of the struct. The preset is acutally a json
//! patch that will be merged with default value of `RuntimeGenesisConfig`.

//! # Interacting with the tool
//!
//! # JSON representation
//! The json representation of runtime genesis config:
//!
//! # Raw genesis storage.
//! The json representation of runtime genesis storage:
//! What are hashes? How to decipher them?
//!
//!
//! [`RuntimeGenesisConfig`]:
//!     chain_spec_guide_runtime::runtime::RuntimeGenesisConfig
//! [`impl_runtime_apis`]: frame::runtime::prelude::impl_runtime_apis
//! [`build_state`]: frame_support::genesis_builder_helper::build_state
//! [`get_preset`]: frame_support::genesis_builder_helper::get_preset
