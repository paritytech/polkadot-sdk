//! Chain spec and genesis build.
//!
//! # What is chain-spec.
//!
//! Chain specicfication file defines the set of properties that are required to run the node as
//! part of the chain. The chain specification consists of two main parts:
//! - initial state of the runtime,
//! - network / logical properties of the chain, the most important property being the list of
//!   bootnodes.
//!
//! This document describes how initial state is handled in pallets and runtime, and how to interact
//! with runtime in order to build genesis sate.
//!
//! For more informations on chain specification and its properties refer to
//! [`sc_chain_spec#from-initial-state-to-raw-genesis`].
//!
//! The initial genesis state can be provided in the following formats:
//!   - full,
//!   - patch,
//!   - raw,
//!
//! Each of the format is explained in [_chain-spec-format_][`sc_chain_spec#chain-spec-formats`].
//!
//!
//! ## `GenesisConfig` for `pallet`
//!
//! Every frame pallet may have its initial state which is defined by the `GenesisConfig` internal
//! struct. It is a regular rust struct, annotated with [`pallet::genesis_config`] attribute.
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_bar_GenesisConfig)]

//! The struct shall be defined within the pallet `mod`, as in the following code:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_bar)]

//! The initial state conveyed in `GenesisConfig` struct is transformed into state storage items by
//! means of the [`BuildGenesisConfig`] trait wich shall be implemented for pallet's `GenesisConfig`
//! struct. The [`pallet::genesis_build`] attribute shall be attached to the `impl` block:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_bar_build)]

//! GenesisConfig may contain also more complicated types including nested structs or enums, as in
//! the example for `pallet_foo`:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_foo_GenesisConfig)]

//! Please note that fields of `GenesisConfig` may not be directly mapped to storage items:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/pallets.rs", pallet_foo_build)]

//! ## `GenesisConfig` for `runtimes`

//! The runtime genesis config struct consists of configs for every pallet. For [_demonstration
//! runtime_][`chain_spec_guide_runtime`] used in this guide, it consists of `SystemConfig`,
//! `BarConfig` and `FooConfig`. This structure was automatically generated by macro and it can be
//! sneaked peaked here: [`RuntimeGenesisConfig`].
//!
//! Runtime exposes a dedicated runtime API for interacting with its genesis config:
//! [`sp_genesis_builder::GenesisBuilder`]. Implementation shall be provided within
//! [`sp_api::impl_runtime_apis`] macro, typically making use of some helpers provided:
//! [`build_state`], [`get_preset`].
//! Usual implementation of [`sp_genesis_builder::GenesisBuilder`] is as follows:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/runtime.rs", runtime_impl)]

//! Please note that two functions are customized `preset_names` and `get_preset`. The first one
//! just provdes a vec of names of supported presets, while the latter one delegats the call to
//! function that maps the name to preset: [`chain_spec_guide_runtime::presets::get_builtin_preset`]
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", get_builtin_preset)]

//! ## Genesis state presets for `runtime`

//! Rutime may provide many flavors of initial genesis state. This may be useful for predefined
//! testing networks, local development, or CI integration tests. Predefined genesis state may
//! contain a list of pre-funded accounts, predefined authorithies for consensue, sudo key and many
//! others useful for testing.

//! Internally presets can be provided in a number of ways:
//! - json in string form:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_1)]
//! - json using runtime types to serialize values:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_2)]
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_3)]
//! It is worth noting that preset does not have to be the full `RuntimeGenesisConfig`, in that
//! sense that it does not have to contain all the keys of the struct. The preset is acutally a json
//! patch that will be merged with default value of `RuntimeGenesisConfig`. This approach should
//! simplify maintanance of builtin presets. Following example illustrates runtime genesis config
//! patch:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/src/presets.rs", preset_4)]

//! # Interacting with the tool
//!
//! The [`chain_spec_builder`] util allows to interact with runtime in order to list or display
//! presets and build the chain specification file. It is possible to use the tool with the
//! [_demonstration runtime_][`chain_spec_guide_runtime`]. To build required packages just run the
//! following command:
//! ```no_run
//! cargo build -p staging-chain-spec-builder -p chain-spec-guide-runtime --release
//! ```
//! Here are some examples in the form of rust tests:
//! ### Listing available presets names:
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/tests/chain_spec_builder_tests.rs", list_presets)]
//! ### Displaying preset with given name
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/tests/chain_spec_builder_tests.rs", get_preset)]
//! ### Building chain-spec using given preset
#![doc = docify::embed!("./src/reference_docs/chain_spec_runtime/tests/chain_spec_builder_tests.rs", generate_chain_spec)]
//!
//! [`RuntimeGenesisConfig`]:
//!     chain_spec_guide_runtime::runtime::RuntimeGenesisConfig
//! [`impl_runtime_apis`]: frame::runtime::prelude::impl_runtime_apis
//! [`build_state`]: frame_support::genesis_builder_helper::build_state
//! [`get_preset`]: frame_support::genesis_builder_helper::get_preset
//! [`pallet::genesis_build`]: frame_support::pallet_macros::genesis_build
//! [`pallet::genesis_config`]: frame_support::pallet_macros::genesis_config
//! [`BuildGenesisConfig`]: frame_support::traits::BuildGenesisConfig
//! [`chain_spec_builder`]: ../../../staging_chain_spec_builder/index.html
