// Copyright (C) Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_bridge_grandpa
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `covid`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/millau-bridge-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_bridge_grandpa
// --extrinsic=*
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --output=./modules/grandpa/src/weights.rs
// --template=./.maintain/bridge-weight-template.hbs

#![allow(clippy::all)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bridge_grandpa.
pub trait WeightInfo {
	fn submit_finality_proof(p: u32, v: u32) -> Weight;
}

/// Weights for `pallet_bridge_grandpa` that are generated using one of the Bridge testnets.
///
/// Those weights are test only and must never be used in production.
pub struct BridgeWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BridgeWeight<T> {
	/// Storage: BridgeRialtoGrandpa PalletOperatingMode (r:1 w:0)
	///
	/// Proof: BridgeRialtoGrandpa PalletOperatingMode (max_values: Some(1), max_size: Some(1),
	/// added: 496, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa RequestCount (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa RequestCount (max_values: Some(1), max_size: Some(4), added: 499,
	/// mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa BestFinalized (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa BestFinalized (max_values: Some(1), max_size: Some(36), added:
	/// 531, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa CurrentAuthoritySet (r:1 w:0)
	///
	/// Proof: BridgeRialtoGrandpa CurrentAuthoritySet (max_values: Some(1), max_size: Some(209),
	/// added: 704, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa ImportedHashesPointer (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa ImportedHashesPointer (max_values: Some(1), max_size: Some(4),
	/// added: 499, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa ImportedHashes (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa ImportedHashes (max_values: Some(14400), max_size: Some(36),
	/// added: 2016, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa ImportedHeaders (r:0 w:2)
	///
	/// Proof: BridgeRialtoGrandpa ImportedHeaders (max_values: Some(14400), max_size: Some(68),
	/// added: 2048, mode: MaxEncodedLen)
	///
	/// The range of component `p` is `[1, 4]`.
	///
	/// The range of component `v` is `[50, 100]`.
	fn submit_finality_proof(p: u32, v: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `394 + p * (60 ±0)`
		//  Estimated: `4745`
		// Minimum execution time: 228_072 nanoseconds.
		Weight::from_parts(57_853_228, 4745)
			// Standard Error: 149_421
			.saturating_add(Weight::from_parts(36_708_702, 0).saturating_mul(p.into()))
			// Standard Error: 10_625
			.saturating_add(Weight::from_parts(1_469_032, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: BridgeRialtoGrandpa PalletOperatingMode (r:1 w:0)
	///
	/// Proof: BridgeRialtoGrandpa PalletOperatingMode (max_values: Some(1), max_size: Some(1),
	/// added: 496, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa RequestCount (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa RequestCount (max_values: Some(1), max_size: Some(4), added: 499,
	/// mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa BestFinalized (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa BestFinalized (max_values: Some(1), max_size: Some(36), added:
	/// 531, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa CurrentAuthoritySet (r:1 w:0)
	///
	/// Proof: BridgeRialtoGrandpa CurrentAuthoritySet (max_values: Some(1), max_size: Some(209),
	/// added: 704, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa ImportedHashesPointer (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa ImportedHashesPointer (max_values: Some(1), max_size: Some(4),
	/// added: 499, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa ImportedHashes (r:1 w:1)
	///
	/// Proof: BridgeRialtoGrandpa ImportedHashes (max_values: Some(14400), max_size: Some(36),
	/// added: 2016, mode: MaxEncodedLen)
	///
	/// Storage: BridgeRialtoGrandpa ImportedHeaders (r:0 w:2)
	///
	/// Proof: BridgeRialtoGrandpa ImportedHeaders (max_values: Some(14400), max_size: Some(68),
	/// added: 2048, mode: MaxEncodedLen)
	///
	/// The range of component `p` is `[1, 4]`.
	///
	/// The range of component `v` is `[50, 100]`.
	fn submit_finality_proof(p: u32, v: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `394 + p * (60 ±0)`
		//  Estimated: `4745`
		// Minimum execution time: 228_072 nanoseconds.
		Weight::from_parts(57_853_228, 4745)
			// Standard Error: 149_421
			.saturating_add(Weight::from_parts(36_708_702, 0).saturating_mul(p.into()))
			// Standard Error: 10_625
			.saturating_add(Weight::from_parts(1_469_032, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
}
