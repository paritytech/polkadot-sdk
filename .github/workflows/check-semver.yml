name: Check semver

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  workflow_dispatch:
  merge_group:

concurrency:
  group: check-semver-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TOOLCHAIN: nightly-2024-11-19

jobs:
  isdraft:
    uses: ./.github/workflows/reusable-isdraft.yml
  preflight:
    needs: isdraft
    uses: ./.github/workflows/reusable-preflight.yml
  check-semver:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [preflight]
    container:
      image: ${{ needs.preflight.outputs.IMAGE }}
    steps:
      - uses: actions/checkout@6d193bf28034eafb982f37bd894289fe649468fc # v4.1.7
        with:
          fetch-depth: 2

      - name: extra git setup
        run: |
          git config --global --add safe.directory '*'

          git branch old HEAD^1

      - name: Comment If Backport
        if: ${{ startsWith(github.event.pull_request.base.ref, 'stable') }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: |
          echo "This is a backport into stable."

            cat > msg.txt <<EOF
            This pull request is amending an existing release. Please proceed with extreme caution,
            as to not impact downstream teams that rely on the stability of it. Some things to consider:
            - Backports are only for 'patch' or 'minor' changes. No 'major' or other breaking change.
            - Should be a legit *fix* for some  bug, not adding tons of new features.
            - Must either be already audited or not need an audit.

            <details><summary><i>Emergency Bypass</i></summary>
            <p>

            If you really need to bypass this check: add <code>validate: false</code> to each crate
            in the Prdoc where a breaking change is introduced. This will release a new major
            version of that crate and all its reverse dependencies and basically break the release.

            </p>
            </details> 
          EOF
          gh issue comment $PR --edit-last -F msg.txt || gh issue comment $PR -F msg.txt

          echo "PRDOC_EXTRA_ARGS=--max-bump minor" >> $GITHUB_ENV

      - name: Echo Skip
        if: ${{ contains(github.event.pull_request.labels.*.name, 'R0-silent') }}
        run: echo "Skipping this PR because it is labeled as R0-silent."

      - name: Rust Cache
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'R0-silent') }}
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          cache-on-failure: true

      - name: Rust compilation prerequisites
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'R0-silent') }}
        run: |
          rustup default $TOOLCHAIN
          rustup target add wasm32-unknown-unknown --toolchain $TOOLCHAIN
          rustup component add rust-src --toolchain $TOOLCHAIN

      - name: Install parity-publish
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'R0-silent') }}
        # Set the target dir to cache the build.
        run: CARGO_TARGET_DIR=./target/ cargo install parity-publish@0.10.4 --locked -q

      - name: Get original PR number
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'R0-silent') }}
        shell: bash
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          . ./.github/scripts/common/lib.sh
          original_pr_number=''

          echo "Checking PR title: $PR_TITLE"

          if [[ "$PR_TITLE" =~ 'Backport' ]]; then
            # Extracting the original PR number from the backport's PR title
            original_pr_number=$(extract_pr_number_from_pr_title "$PR_TITLE")
            echo "Extracted PR number: $original_pr_number"
          else
            original_pr_number=${{ github.event.pull_request.number }}
          fi
          echo "PR_NUMBER=$original_pr_number" >> $GITHUB_ENV

      - name: Check semver
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'R0-silent') }}
        env:
          PRDOC_EXTRA_ARGS: ${{ env.PRDOC_EXTRA_ARGS }}
          PR: ${{ env.PR_NUMBER }}
        run: |
          if [ -z "$PR" ]; then
            echo "Skipping master/merge queue"
            exit 0
          fi

          export CARGO_TARGET_DIR=target
          export RUSTFLAGS='-A warnings -A missing_docs'
          export SKIP_WASM_BUILD=1

          if ! parity-publish --color always prdoc --since old --validate prdoc/pr_$PR.prdoc $PRDOC_EXTRA_ARGS -v --toolchain $TOOLCHAIN; then

            cat <<EOF
          üëã Hello developer! The SemVer information that you declared in the prdoc file did not match what the CI detected.

          Please check the output above and see the following links for more help:
          - https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/prdoc.md#record-semver-changes
          - https://forum.polkadot.network/t/psa-polkadot-sdk-to-use-semver

          Otherwise feel free to ask in the Merge Request or in Matrix chat.
          EOF

            exit 1
          fi
          
          # Only enforce SemVer restrictions for backports targeting stable branches
          if [[ "$BASE_BRANCH" == stable* ]]; then
            echo "üîç Backport branch detected, checking for non-patch/none changes..."
          
            # Check if any crate bump is NOT patch or none
            if grep -E 'bump:' prdoc/pr_$PR.prdoc | grep -Ev 'bump: (patch|none)' > /dev/null; then
          
              # Use awk to check if every major/minor bump has validate: false
              if awk '
                BEGIN {
                  in_crates_section = 0;
                  current_crate_has_major_minor = 0;
                  current_crate_has_validate_false = 0;
                  failed = 0;
                }
          
                # Start of crates section
                /^crates:/ {
                  in_crates_section = 1;
                  next;
                }
          
                # New crate entry (starts with "- name:")
                /^[[:space:]]*- name:/ {
                  if (in_crates_section) {
                    # Check previous crate before starting new one
                    if (current_crate_has_major_minor && !current_crate_has_validate_false) {
                      failed = 1;
                    }
                    # Reset for new crate
                    current_crate_has_major_minor = 0;
                    current_crate_has_validate_false = 0;
                  }
                  next;
                }
          
                # Check for major/minor bump in current crate
                /^[[:space:]]*bump:[[:space:]]*(major|minor)/ {
                  if (in_crates_section) {
                    current_crate_has_major_minor = 1;
                  }
                  next;
                }
          
                # Check for validate: false in current crate
                /^[[:space:]]*validate:[[:space:]]*false/ {
                  if (in_crates_section) {
                    current_crate_has_validate_false = 1;
                  }
                  next;
                }
          
                # End of crates section (new top-level key or end of file)
                /^[a-zA-Z]/ && !/^crates:/ {
                  if (in_crates_section) {
                    # Check the last crate
                    if (current_crate_has_major_minor && !current_crate_has_validate_false) {
                      failed = 1;
                    }
                    in_crates_section = 0;
                  }
                }
          
                END {
                  # Final check for last crate if we ended in crates section
                  if (in_crates_section && current_crate_has_major_minor && !current_crate_has_validate_false) {
                    failed = 1;
                  }
                  # Return 0 for success (all major/minor bumps have validate: false)
                  # Return 1 for failure (at least one major/minor bump lacks validate: false)
                  exit failed;
                }
              ' prdoc/pr_$PR.prdoc; then
                echo "‚ö†Ô∏è Backport contains higher bump types, but they are all marked with validate: false."
                echo "‚úÖ Semver override accepted. Please ensure the justification is documented in the PR description."
              else
                echo "‚ùå Backport PR contains disallowed semver change types without 'validate: false'."
                echo "üìò See: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/prdoc.md#backporting-prs"
                echo "üîß Please revise the entries in prdoc/pr_$PR.prdoc or add 'validate: false' with justification."
                exit 1
              fi
          
            else
              echo "‚úÖ All semver changes in backport are valid (patch or none)."
            fi
          fi
