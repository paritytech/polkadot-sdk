name: Check publish build

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  isdraft:
    uses: ./.github/workflows/reusable-isdraft.yml
  preflight:
    needs: isdraft
    uses: ./.github/workflows/reusable-preflight.yml

  check-publish-compile:
    timeout-minutes: 90
    needs: [preflight]
    runs-on: ${{ needs.preflight.outputs.RUNNER }}
    container:
      image: ${{ needs.preflight.outputs.IMAGE }}
    env:
      RUSTFLAGS: "-D warnings"
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@6d193bf28034eafb982f37bd894289fe649468fc # v4.1.7

      - name: Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-on-failure: true

      - name: install parity-publish
        run: |
          cargo install parity-publish@0.10.5 --locked -q
      
      - name: Checkout to merge base with master
        run: |
          git fetch origin master
          commit=$(git merge-base origin/master $GITHUB_REF_NAME)
          git checkout $commit

      - name: parity-publish update plan
        run: parity-publish --color always plan --skip-check --prdoc prdoc/

      - name: Checkout back to PR's branch
        run: git checkout $GITHUB_REF_NAME

      - name: parity-publish apply plan here for previous "local release"
        run: parity-publish --color always apply --registry

      - name: move all prdocs except current one to unstable dir
        run: |
          mkdir prdoc/unstable
          current_pr="pr_${{ github.event.pull_request.number }}.prdoc"
          if [ -f prdoc/$current_prdoc ]
            mv prdoc/$current_prdoc .   
          fi
          
          mv prdoc/pr_*.prdoc prdoc/unstable
          if [ -f prdoc/$current_prdoc ]
            mv $current_pr prdoc/
          fi

      - name: parity-publish update plan just for PR's prdoc
        run: parity-publish --color always plan --skip-check --prdoc prdoc/

      - name: parity-publish apply plan
        run: parity-publish --color always apply --registry

      - name: parity-publish check compile
        run: |
          packages="$(parity-publish apply --print)"

          if [ -n "$packages" ]; then
            cargo --color always check $(printf -- '-p %s ' $packages)
          fi
