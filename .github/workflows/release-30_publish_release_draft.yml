name: Release - Publish draft

# This workflow runs in paritytech-release and creates full release draft with:
# - release notes
# - info about the runtimes
# - attached artifacts:
#   - runtimes
#   - binaries
#   - signatures

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: Tag matching the actual release candidate with the format polkadot-stableYYMM(-X)-rcX or polkadot-stableYYMM(-X)
        required: true
        type: string

jobs:
  check-synchronization:
    uses: paritytech-release/sync-workflows/.github/workflows/check-syncronization.yml@main

  validate-inputs:
    needs: [ check-synchronization ]
    if: ${{ needs.check-synchronization.outputs.checks_passed }} == 'true'
    runs-on: ubuntu-latest
    outputs:
        release_tag: ${{ steps.validate_inputs.outputs.release_tag }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Validate inputs
        id: validate_inputs
        run: |
          . ./.github/scripts/common/lib.sh

          RELEASE_TAG=$(validate_stable_tag ${{ inputs.release_tag }})
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT

  get-rust-versions:
    needs: [ validate-inputs ]
    runs-on: ubuntu-latest
    outputs:
      rustc-stable: ${{ steps.get-rust-versions.outputs.stable }}
    steps:
      - id: get-rust-versions
        run: |
          RUST_STABLE_VERSION=$(curl -sS https://raw.githubusercontent.com/paritytech/scripts/master/dockerfiles/ci-unified/Dockerfile | grep -oP 'ARG RUST_STABLE_VERSION=\K[^ ]+')
          echo "stable=$RUST_STABLE_VERSION" >> $GITHUB_OUTPUT

  build-runtimes:
    needs: [ validate-inputs ]
    uses: "./.github/workflows/release-srtool.yml"
    with:
       excluded_runtimes: "asset-hub-rococo bridge-hub-rococo contracts-rococo coretime-rococo people-rococo rococo rococo-parachain substrate-test bp cumulus-test kitchensink minimal-template parachain-template penpal polkadot-test seedling shell frame-try sp solochain-template polkadot-sdk-docs-first"
       build_opts: "--features on-chain-release-build"
       profile: production
    permissions:
      id-token: write
      attestations: write
      contents: read

  publish-release-draft:
    runs-on: ubuntu-latest
    environment: release
    needs: [ validate-inputs, get-rust-versions, build-runtimes ]
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8

      - name: Prepare tooling
        run: |
          URL=https://github.com/chevdor/tera-cli/releases/download/v0.4.0/tera-cli_linux_amd64.deb
          wget $URL -O tera.deb
          sudo dpkg -i tera.deb

      - name: Prepare draft
        id: draft
        env:
          RUSTC_STABLE: ${{ needs.get-rust-versions.outputs.rustc-stable }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_HUB_WESTEND_DIGEST: ${{ github.workspace}}/asset-hub-westend-runtime/asset-hub-westend-srtool-digest.json
          BRIDGE_HUB_WESTEND_DIGEST: ${{ github.workspace}}/bridge-hub-westend-runtime/bridge-hub-westend-srtool-digest.json
          COLLECTIVES_WESTEND_DIGEST: ${{ github.workspace}}/collectives-westend-runtime/collectives-westend-srtool-digest.json
          CORETIME_WESTEND_DIGEST: ${{ github.workspace}}/coretime-westend-runtime/coretime-westend-srtool-digest.json
          GLUTTON_WESTEND_DIGEST: ${{ github.workspace}}/glutton-westend-runtime/glutton-westend-srtool-digest.json
          PEOPLE_WESTEND_DIGEST: ${{ github.workspace}}/people-westend-runtime/people-westend-srtool-digest.json
          WESTEND_DIGEST: ${{ github.workspace}}/westend-runtime/westend-srtool-digest.json
          RELEASE_TAG: ${{ needs.validate-inputs.outputs.release_tag }}
        shell: bash
        run: |
          . ./.github/scripts/common/lib.sh

          export REF1=$(get_latest_release_tag)
          if [[ -z "$RELEASE_TAG" ]]; then
            export REF2="${{ github.ref_name }}"
            echo "REF2: ${REF2}"
          else
            export REF2="$RELEASE_TAG"
            echo "REF2: ${REF2}"
          fi
          echo "REL_TAG=$REF2" >> $GITHUB_ENV
          export VERSION=$(echo "$REF2" | sed -E 's/.*(stable[0-9]{4}(-[0-9]+)?).*$/\1/')

          ./scripts/release/build-changelogs.sh

      - name: Archive artifact context.json
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: release-notes-context
          path: |
            scripts/release/context.json
            **/*-srtool-digest.json

      - name: Generate content write token for the release automation
        id: generate_write_token
        uses: actions/create-github-app-token@v1
        with:
            app-id: ${{ vars.POLKADOT_SDK_RELEASE_RW_APP_ID }}
            private-key: ${{ secrets.POLKADOT_SDK_RELEASE_RW_APP_KEY }}
            owner: paritytech
            repositories: polkadot-sdk

      - name: Create draft release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ steps.generate_write_token.outputs.token }}
        run: |
          gh release create ${{ env.REL_TAG }} \
            --repo paritytech/polkadot-sdk \
            --draft \
            --title "Polkadot ${{ env.REL_TAG }}" \
            --notes-file ${{ github.workspace}}/scripts/release/RELEASE_DRAFT.md

  publish-runtimes:
    needs: [ validate-inputs, build-runtimes, publish-release-draft ]
    environment: release
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.build-runtimes.outputs.published_runtimes) }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8

      - name: Get runtime info
        env:
          JSON: release-notes-context/${{ matrix.chain }}-runtime/${{ matrix.chain }}-srtool-digest.json
        run: |
          >>$GITHUB_ENV echo ASSET=$(find ${{ matrix.chain }}-runtime -name '*.compact.compressed.wasm')
          >>$GITHUB_ENV echo SPEC=$(<${JSON} jq -r .runtimes.compact.subwasm.core_version.specVersion)

      - name: Generate content write token for the release automation
        id: generate_write_token
        uses: actions/create-github-app-token@v1
        with:
            app-id: ${{ vars.POLKADOT_SDK_RELEASE_RW_APP_ID }}
            private-key: ${{ secrets.POLKADOT_SDK_RELEASE_RW_APP_KEY }}
            owner: paritytech
            repositories: polkadot-sdk

      - name: Upload compressed ${{ matrix.chain }} v${{ env.SPEC }} wasm
        env:
          GITHUB_TOKEN: ${{ steps.generate_write_token.outputs.token }}
        run: |
          gh release upload ${{ needs.validate-inputs.outputs.release_tag }} \
            --repo paritytech/polkadot-sdk \
            '${{ env.ASSET }}#${{ matrix.chain }}_runtime-v${{ env.SPEC }}.compact.compressed.wasm'

  publish-release-artifacts:
    needs: [ validate-inputs, publish-release-draft ]
    environment: release
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [ polkadot, polkadot-execute-worker, polkadot-prepare-worker, polkadot-parachain, polkadot-omni-node, frame-omni-bencher, chain-spec-builder ]
        target: [ x86_64-unknown-linux-gnu, aarch64-apple-darwin ]

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Fetch binaries from s3 based on version
        run: |
          . ./.github/scripts/common/lib.sh

          VERSION="${{ needs.validate-inputs.outputs.release_tag }}"
          fetch_release_artifacts_from_s3 ${{ matrix.binary }} ${{ matrix.target }}

      - name: Rename aarch64-apple-darwin binaries
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        working-directory: ${{ github.workspace}}/release-artifacts/${{ matrix.target }}/${{ matrix.binary }}
        run: |
          mv ${{ matrix.binary }} ${{ matrix.binary }}-aarch64-apple-darwin
          mv ${{ matrix.binary }}.asc ${{ matrix.binary }}-aarch64-apple-darwin.asc
          mv ${{ matrix.binary }}.sha256 ${{ matrix.binary }}-aarch64-apple-darwin.sha256

      - name: Generate content write token for the release automation
        id: generate_write_token
        uses: actions/create-github-app-token@v1
        with:
            app-id: ${{ vars.POLKADOT_SDK_RELEASE_RW_APP_ID }}
            private-key: ${{ secrets.POLKADOT_SDK_RELEASE_RW_APP_KEY }}
            owner: paritytech
            repositories: polkadot-sdk

      - name: Upload ${{ matrix.binary }} binary to release draft
        env:
          GITHUB_TOKEN: ${{ steps.generate_write_token.outputs.token }}
        working-directory: ${{ github.workspace}}/release-artifacts/${{ matrix.target }}/${{ matrix.binary }}
        run: |
          if [[ ${{ matrix.target }} == "aarch64-apple-darwin" ]]; then
            gh release upload ${{ needs.validate-inputs.outputs.release_tag }} \
              --repo paritytech/polkadot-sdk \
              ${{ matrix.binary }}-aarch64-apple-darwin \
              ${{ matrix.binary }}-aarch64-apple-darwin.asc \
              ${{ matrix.binary }}-aarch64-apple-darwin.sha256
          else
            gh release upload ${{ needs.validate-inputs.outputs.release_tag }} \
              --repo paritytech/polkadot-sdk \
              ${{ matrix.binary }} \
              ${{ matrix.binary }}.asc \
              ${{ matrix.binary }}.sha256
          fi

  post_to_matrix:
    runs-on: ubuntu-latest
    needs: [ validate-inputs, publish-release-draft ]
    environment: release
    strategy:
      matrix:
        channel:
          - name: "Team: RelEng Internal"
            room: '!GvAyzgCDgaVrvibaAF:parity.io'

    steps:
      - name: Send Matrix message to ${{ matrix.channel.name }}
        uses: s3krit/matrix-message-action@70ad3fb812ee0e45ff8999d6af11cafad11a6ecf # v0.0.3
        with:
          room_id: ${{ matrix.channel.room }}
          access_token: ${{ secrets.RELEASENOTES_MATRIX_V2_ACCESS_TOKEN }}
          server: m.parity.io
          message: |
            **New version of polkadot tagged**: ${{ needs.validate-inputs.outputs.release_tag }}<br/>
            And release draft is release created in [polkadot-sdk repo](https://github.com/paritytech/polkadot-sdk/releases)
