// Copyright 2019-2023 Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated runtime API
//! THIS FILE WAS AUTOGENERATED USING parity-bridges-common::runtime-codegen
//! EXECUTED COMMAND: target/debug/runtime-codegen --from-node-url wss://kusama-rpc.polkadot.io:443

#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
pub mod api {
	use super::api as root_mod;
	pub mod runtime_types {
		use super::runtime_types;
		pub mod bounded_collections {
			use super::runtime_types;
			pub mod bounded_btree_map {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::utils::KeyedVec<_0, _1>);
			}
			pub mod bounded_vec {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
			}
			pub mod weak_bounded_vec {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
			}
		}
		pub mod finality_grandpa {
			use super::runtime_types;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Equivocation<_0, _1, _2> {
				pub round_number: ::core::primitive::u64,
				pub identity: _0,
				pub first: (_1, _2),
				pub second: (_1, _2),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Precommit<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Prevote<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct DispatchInfo {
					pub weight: ::sp_weights::Weight,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PostDispatchInfo {
					pub actual_weight: ::core::option::Option<::sp_weights::Weight>,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod messages {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum ProcessMessageError {
						#[codec(index = 0)]
						BadFormat,
						#[codec(index = 1)]
						Corrupt,
						#[codec(index = 2)]
						Unsupported,
						#[codec(index = 3)]
						Overweight(::sp_weights::Weight),
						#[codec(index = 4)]
						Yield,
					}
				}
				pub mod misc {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct WrapperOpaque<_0>(
						#[codec(compact)] pub ::core::primitive::u32,
						pub _0,
					);
				}
				pub mod preimages {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Bounded<_0> {
						#[codec(index = 0)]
						Legacy {
							hash: ::subxt::utils::H256,
						},
						#[codec(index = 1)]
						Inline(
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Lookup {
							hash: ::subxt::utils::H256,
							len: ::core::primitive::u32,
						},
						__Ignore(::core::marker::PhantomData<_0>),
					}
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum DispatchTime<_0> {
						#[codec(index = 0)]
						At(_0),
						#[codec(index = 1)]
						After(_0),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod misc {
						use super::runtime_types;
						#[derive(
							:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq,
						)]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
					}
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckMortality(pub ::sp_runtime::generic::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BlockWeights {
					pub base_block: ::sp_weights::Weight,
					pub max_block: ::sp_weights::Weight,
					pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct WeightsPerClass {
					pub base_extrinsic: ::sp_weights::Weight,
					pub max_extrinsic: ::core::option::Option<::sp_weights::Weight>,
					pub max_total: ::core::option::Option<::sp_weights::Weight>,
					pub reserved: ::core::option::Option<::sp_weights::Weight>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					remark { remark: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 2)]
					set_code { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 3)]
					set_code_without_checks { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					set_storage {
						items: ::std::vec::Vec<(
							::std::vec::Vec<::core::primitive::u8>,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 5)]
					kill_storage { keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>> },
					#[codec(index = 6)]
					kill_prefix {
						prefix: ::std::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					remark_with_event { remark: ::std::vec::Vec<::core::primitive::u8> },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidSpecName,
					#[codec(index = 1)]
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					NonDefaultComposite,
					#[codec(index = 4)]
					NonZeroRefCount,
					#[codec(index = 5)]
					CallFiltered,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 1)]
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 2)]
					CodeUpdated,
					#[codec(index = 3)]
					NewAccount { account: ::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					KilledAccount { account: ::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					Remarked { sender: ::sp_core::crypto::AccountId32, hash: ::subxt::utils::H256 },
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: _0,
				pub providers: _0,
				pub sufficients: _0,
				pub data: _1,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::std::vec::Vec<_1>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::std::string::String,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod kusama_runtime {
			use super::runtime_types;
			pub mod governance {
				use super::runtime_types;
				pub mod origins {
					use super::runtime_types;
					pub mod pallet_custom_origins {
						use super::runtime_types;
						#[derive(
							:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq,
						)]
						pub enum Origin {
							#[codec(index = 0)]
							StakingAdmin,
							#[codec(index = 1)]
							Treasurer,
							#[codec(index = 2)]
							FellowshipAdmin,
							#[codec(index = 3)]
							GeneralAdmin,
							#[codec(index = 4)]
							AuctionAdmin,
							#[codec(index = 5)]
							LeaseAdmin,
							#[codec(index = 6)]
							ReferendumCanceller,
							#[codec(index = 7)]
							ReferendumKiller,
							#[codec(index = 8)]
							SmallTipper,
							#[codec(index = 9)]
							BigTipper,
							#[codec(index = 10)]
							SmallSpender,
							#[codec(index = 11)]
							MediumSpender,
							#[codec(index = 12)]
							BigSpender,
							#[codec(index = 13)]
							WhitelistedCaller,
							#[codec(index = 14)]
							FellowshipInitiates,
							#[codec(index = 15)]
							Fellows,
							#[codec(index = 16)]
							FellowshipExperts,
							#[codec(index = 17)]
							FellowshipMasters,
							#[codec(index = 18)]
							Fellowship1Dan,
							#[codec(index = 19)]
							Fellowship2Dan,
							#[codec(index = 20)]
							Fellowship3Dan,
							#[codec(index = 21)]
							Fellowship4Dan,
							#[codec(index = 22)]
							Fellowship5Dan,
							#[codec(index = 23)]
							Fellowship6Dan,
							#[codec(index = 24)]
							Fellowship7Dan,
							#[codec(index = 25)]
							Fellowship8Dan,
							#[codec(index = 26)]
							Fellowship9Dan,
						}
					}
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct NposCompactSolution24 {
				pub votes1: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes2: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					),
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes3: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 2usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes4: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 3usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes5: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 4usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes6: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 5usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes7: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 6usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes8: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 7usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes9: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 8usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes10: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 9usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes11: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 10usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes12: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 11usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes13: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 12usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes14: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 13usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes15: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 14usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes16: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 15usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes17: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 16usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes18: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 17usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes19: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 18usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes20: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 19usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes21: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 20usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes22: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 21usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes23: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 22usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes24: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 23usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum OriginCaller {
				# [codec (index = 0)] system (runtime_types :: frame_support :: dispatch :: RawOrigin < :: sp_core :: crypto :: AccountId32 > ,) , # [codec (index = 43)] Origins (runtime_types :: kusama_runtime :: governance :: origins :: pallet_custom_origins :: Origin ,) , # [codec (index = 50)] ParachainsOrigin (runtime_types :: polkadot_runtime_parachains :: origin :: pallet :: Origin ,) , # [codec (index = 99)] XcmPallet (runtime_types :: pallet_xcm :: pallet :: Origin ,) , # [codec (index = 4)] Void (runtime_types :: sp_core :: Void ,) , }
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum ProxyType {
				#[codec(index = 0)]
				Any,
				#[codec(index = 1)]
				NonTransfer,
				#[codec(index = 2)]
				Governance,
				#[codec(index = 3)]
				Staking,
				#[codec(index = 4)]
				IdentityJudgement,
				#[codec(index = 5)]
				CancelProxy,
				#[codec(index = 6)]
				Auction,
				#[codec(index = 7)]
				Society,
				#[codec(index = 8)]
				NominationPools,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Runtime;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeCall {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				Babe(runtime_types::pallet_babe::pallet::Call),
				#[codec(index = 2)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 3)]
				Indices(runtime_types::pallet_indices::pallet::Call),
				#[codec(index = 4)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 6)]
				Staking(runtime_types::pallet_staking::pallet::pallet::Call),
				#[codec(index = 8)]
				Session(runtime_types::pallet_session::pallet::Call),
				#[codec(index = 10)]
				Grandpa(runtime_types::pallet_grandpa::pallet::Call),
				#[codec(index = 11)]
				ImOnline(runtime_types::pallet_im_online::pallet::Call),
				#[codec(index = 18)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 20)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
				#[codec(index = 21)]
				Referenda(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 22)]
				FellowshipCollective(runtime_types::pallet_ranked_collective::pallet::Call),
				#[codec(index = 23)]
				FellowshipReferenda(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 44)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Call),
				#[codec(index = 19)]
				Claims(runtime_types::polkadot_runtime_common::claims::pallet::Call),
				#[codec(index = 24)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 25)]
				Identity(runtime_types::pallet_identity::pallet::Call),
				#[codec(index = 26)]
				Society(runtime_types::pallet_society::pallet::Call),
				#[codec(index = 27)]
				Recovery(runtime_types::pallet_recovery::pallet::Call),
				#[codec(index = 28)]
				Vesting(runtime_types::pallet_vesting::pallet::Call),
				#[codec(index = 29)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 30)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 31)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 32)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 35)]
				Bounties(runtime_types::pallet_bounties::pallet::Call),
				#[codec(index = 40)]
				ChildBounties(runtime_types::pallet_child_bounties::pallet::Call),
				#[codec(index = 37)]
				ElectionProviderMultiPhase(
					runtime_types::pallet_election_provider_multi_phase::pallet::Call,
				),
				#[codec(index = 38)]
				Nis(runtime_types::pallet_nis::pallet::Call),
				#[codec(index = 45)]
				NisCounterpartBalances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 39)]
				VoterList(runtime_types::pallet_bags_list::pallet::Call),
				#[codec(index = 41)]
				NominationPools(runtime_types::pallet_nomination_pools::pallet::Call),
				#[codec(index = 42)]
				FastUnstake(runtime_types::pallet_fast_unstake::pallet::Call),
				#[codec(index = 51)]
				Configuration(
					runtime_types::polkadot_runtime_parachains::configuration::pallet::Call,
				),
				#[codec(index = 52)]
				ParasShared(runtime_types::polkadot_runtime_parachains::shared::pallet::Call),
				#[codec(index = 53)]
				ParaInclusion(runtime_types::polkadot_runtime_parachains::inclusion::pallet::Call),
				#[codec(index = 54)]
				ParaInherent(
					runtime_types::polkadot_runtime_parachains::paras_inherent::pallet::Call,
				),
				#[codec(index = 56)]
				Paras(runtime_types::polkadot_runtime_parachains::paras::pallet::Call),
				#[codec(index = 57)]
				Initializer(runtime_types::polkadot_runtime_parachains::initializer::pallet::Call),
				#[codec(index = 60)]
				Hrmp(runtime_types::polkadot_runtime_parachains::hrmp::pallet::Call),
				#[codec(index = 62)]
				ParasDisputes(runtime_types::polkadot_runtime_parachains::disputes::pallet::Call),
				#[codec(index = 63)]
				ParasSlashing(
					runtime_types::polkadot_runtime_parachains::disputes::slashing::pallet::Call,
				),
				#[codec(index = 70)]
				Registrar(runtime_types::polkadot_runtime_common::paras_registrar::pallet::Call),
				#[codec(index = 71)]
				Slots(runtime_types::polkadot_runtime_common::slots::pallet::Call),
				#[codec(index = 72)]
				Auctions(runtime_types::polkadot_runtime_common::auctions::pallet::Call),
				#[codec(index = 73)]
				Crowdloan(runtime_types::polkadot_runtime_common::crowdloan::pallet::Call),
				#[codec(index = 99)]
				XcmPallet(runtime_types::pallet_xcm::pallet::Call),
				#[codec(index = 100)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Call),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeEvent {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 3)]
				Indices(runtime_types::pallet_indices::pallet::Event),
				#[codec(index = 4)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 33)]
				TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
				#[codec(index = 6)]
				Staking(runtime_types::pallet_staking::pallet::pallet::Event),
				#[codec(index = 7)]
				Offences(runtime_types::pallet_offences::pallet::Event),
				#[codec(index = 8)]
				Session(runtime_types::pallet_session::pallet::Event),
				#[codec(index = 10)]
				Grandpa(runtime_types::pallet_grandpa::pallet::Event),
				#[codec(index = 11)]
				ImOnline(runtime_types::pallet_im_online::pallet::Event),
				#[codec(index = 18)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 20)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
				#[codec(index = 21)]
				Referenda(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 22)]
				FellowshipCollective(runtime_types::pallet_ranked_collective::pallet::Event),
				#[codec(index = 23)]
				FellowshipReferenda(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 44)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Event),
				#[codec(index = 19)]
				Claims(runtime_types::polkadot_runtime_common::claims::pallet::Event),
				#[codec(index = 24)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 25)]
				Identity(runtime_types::pallet_identity::pallet::Event),
				#[codec(index = 26)]
				Society(runtime_types::pallet_society::pallet::Event),
				#[codec(index = 27)]
				Recovery(runtime_types::pallet_recovery::pallet::Event),
				#[codec(index = 28)]
				Vesting(runtime_types::pallet_vesting::pallet::Event),
				#[codec(index = 29)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 30)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 31)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 32)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 35)]
				Bounties(runtime_types::pallet_bounties::pallet::Event),
				#[codec(index = 40)]
				ChildBounties(runtime_types::pallet_child_bounties::pallet::Event),
				#[codec(index = 37)]
				ElectionProviderMultiPhase(
					runtime_types::pallet_election_provider_multi_phase::pallet::Event,
				),
				#[codec(index = 38)]
				Nis(runtime_types::pallet_nis::pallet::Event),
				#[codec(index = 45)]
				NisCounterpartBalances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 39)]
				VoterList(runtime_types::pallet_bags_list::pallet::Event),
				#[codec(index = 41)]
				NominationPools(runtime_types::pallet_nomination_pools::pallet::Event),
				#[codec(index = 42)]
				FastUnstake(runtime_types::pallet_fast_unstake::pallet::Event),
				#[codec(index = 53)]
				ParaInclusion(runtime_types::polkadot_runtime_parachains::inclusion::pallet::Event),
				#[codec(index = 56)]
				Paras(runtime_types::polkadot_runtime_parachains::paras::pallet::Event),
				#[codec(index = 60)]
				Hrmp(runtime_types::polkadot_runtime_parachains::hrmp::pallet::Event),
				#[codec(index = 62)]
				ParasDisputes(runtime_types::polkadot_runtime_parachains::disputes::pallet::Event),
				#[codec(index = 70)]
				Registrar(runtime_types::polkadot_runtime_common::paras_registrar::pallet::Event),
				#[codec(index = 71)]
				Slots(runtime_types::polkadot_runtime_common::slots::pallet::Event),
				#[codec(index = 72)]
				Auctions(runtime_types::polkadot_runtime_common::auctions::pallet::Event),
				#[codec(index = 73)]
				Crowdloan(runtime_types::polkadot_runtime_common::crowdloan::pallet::Event),
				#[codec(index = 99)]
				XcmPallet(runtime_types::pallet_xcm::pallet::Event),
				#[codec(index = 100)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Event),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeHoldReason {
				#[codec(index = 38)]
				Nis(runtime_types::pallet_nis::pallet::HoldReason),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct SessionKeys {
				pub grandpa: runtime_types::sp_consensus_grandpa::app::Public,
				pub babe: runtime_types::sp_consensus_babe::app::Public,
				pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
				pub para_validator: runtime_types::polkadot_primitives::v4::validator_app::Public,
				pub para_assignment: runtime_types::polkadot_primitives::v4::assignment_app::Public,
				pub authority_discovery: runtime_types::sp_authority_discovery::app::Public,
			}
		}
		pub mod pallet_babe {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					report_equivocation {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_slots::EquivocationProof<
								::sp_runtime::generic::Header<
									::core::primitive::u32,
									::sp_runtime::traits::BlakeTwo256,
								>,
								runtime_types::sp_consensus_babe::app::Public,
							>,
						>,
						key_owner_proof: ::sp_session::MembershipProof,
					},
					#[codec(index = 1)]
					report_equivocation_unsigned {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_slots::EquivocationProof<
								::sp_runtime::generic::Header<
									::core::primitive::u32,
									::sp_runtime::traits::BlakeTwo256,
								>,
								runtime_types::sp_consensus_babe::app::Public,
							>,
						>,
						key_owner_proof: ::sp_session::MembershipProof,
					},
					#[codec(index = 2)]
					plan_config_change {
						config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidEquivocationProof,
					#[codec(index = 1)]
					InvalidKeyOwnershipProof,
					#[codec(index = 2)]
					DuplicateOffenceReport,
					#[codec(index = 3)]
					InvalidConfiguration,
				}
			}
		}
		pub mod pallet_bags_list {
			use super::runtime_types;
			pub mod list {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Bag {
					pub head: ::core::option::Option<::sp_core::crypto::AccountId32>,
					pub tail: ::core::option::Option<::sp_core::crypto::AccountId32>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum ListError {
					#[codec(index = 0)]
					Duplicate,
					#[codec(index = 1)]
					NotHeavier,
					#[codec(index = 2)]
					NotInSameBag,
					#[codec(index = 3)]
					NodeNotFound,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Node {
					pub id: ::sp_core::crypto::AccountId32,
					pub prev: ::core::option::Option<::sp_core::crypto::AccountId32>,
					pub next: ::core::option::Option<::sp_core::crypto::AccountId32>,
					pub bag_upper: ::core::primitive::u64,
					pub score: ::core::primitive::u64,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					rebag {
						dislocated:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 1)]
					put_in_front_of {
						lighter: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					List(runtime_types::pallet_bags_list::list::ListError),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Rebagged {
						who: ::sp_core::crypto::AccountId32,
						from: ::core::primitive::u64,
						to: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					ScoreUpdated {
						who: ::sp_core::crypto::AccountId32,
						new_score: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					transfer_allow_death {
						dest: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					set_balance_deprecated {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						old_reserved: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					force_transfer {
						source: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						dest: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					transfer_keep_alive {
						dest: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					transfer_all {
						dest: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					force_unreserve {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					upgrade_accounts { who: ::std::vec::Vec<::sp_core::crypto::AccountId32> },
					#[codec(index = 7)]
					transfer {
						dest: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					force_set_balance {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					VestingBalance,
					#[codec(index = 1)]
					LiquidityRestrictions,
					#[codec(index = 2)]
					InsufficientBalance,
					#[codec(index = 3)]
					ExistentialDeposit,
					#[codec(index = 4)]
					Expendability,
					#[codec(index = 5)]
					ExistingVestingSchedule,
					#[codec(index = 6)]
					DeadAccount,
					#[codec(index = 7)]
					TooManyReserves,
					#[codec(index = 8)]
					TooManyHolds,
					#[codec(index = 9)]
					TooManyFreezes,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Endowed {
						account: ::sp_core::crypto::AccountId32,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					DustLost {
						account: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					Transfer {
						from: ::sp_core::crypto::AccountId32,
						to: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					BalanceSet {
						who: ::sp_core::crypto::AccountId32,
						free: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					Reserved {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					Unreserved {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					ReserveRepatriated {
						from: ::sp_core::crypto::AccountId32,
						to: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					Deposit { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 8)]
					Withdraw {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					Slashed { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 10)]
					Minted { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 11)]
					Burned { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 12)]
					Suspended {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					Restored {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					Upgraded { who: ::sp_core::crypto::AccountId32 },
					#[codec(index = 15)]
					Issued { amount: ::core::primitive::u128 },
					#[codec(index = 16)]
					Rescinded { amount: ::core::primitive::u128 },
					#[codec(index = 17)]
					Locked { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 18)]
					Unlocked {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 19)]
					Frozen { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 20)]
					Thawed { who: ::sp_core::crypto::AccountId32, amount: ::core::primitive::u128 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct AccountData<_0> {
					pub free: _0,
					pub reserved: _0,
					pub frozen: _0,
					pub flags: runtime_types::pallet_balances::types::ExtraFlags,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BalanceLock<_0> {
					pub id: [::core::primitive::u8; 8usize],
					pub amount: _0,
					pub reasons: runtime_types::pallet_balances::types::Reasons,
				}
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct ExtraFlags(pub ::core::primitive::u128);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct IdAmount<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Reasons {
					#[codec(index = 0)]
					Fee,
					#[codec(index = 1)]
					Misc,
					#[codec(index = 2)]
					All,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ReserveData<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
			}
		}
		pub mod pallet_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					propose_bounty {
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					approve_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					propose_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					unassign_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					accept_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					award_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						beneficiary:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 6)]
					claim_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					close_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					extend_bounty_expiry {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						remark: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					InvalidIndex,
					#[codec(index = 2)]
					ReasonTooBig,
					#[codec(index = 3)]
					UnexpectedStatus,
					#[codec(index = 4)]
					RequireCurator,
					#[codec(index = 5)]
					InvalidValue,
					#[codec(index = 6)]
					InvalidFee,
					#[codec(index = 7)]
					PendingPayout,
					#[codec(index = 8)]
					Premature,
					#[codec(index = 9)]
					HasActiveChildBounty,
					#[codec(index = 10)]
					TooManyQueued,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					BountyProposed { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					BountyRejected { index: ::core::primitive::u32, bond: ::core::primitive::u128 },
					#[codec(index = 2)]
					BountyBecameActive { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					BountyAwarded {
						index: ::core::primitive::u32,
						beneficiary: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 4)]
					BountyClaimed {
						index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 5)]
					BountyCanceled { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					BountyExtended { index: ::core::primitive::u32 },
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Bounty<_0, _1, _2> {
				pub proposer: _0,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub bond: _1,
				pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum BountyStatus<_0, _1> {
				#[codec(index = 0)]
				Proposed,
				#[codec(index = 1)]
				Approved,
				#[codec(index = 2)]
				Funded,
				#[codec(index = 3)]
				CuratorProposed { curator: _0 },
				#[codec(index = 4)]
				Active { curator: _0, update_due: _1 },
				#[codec(index = 5)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_child_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					add_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					propose_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					accept_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					unassign_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					award_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
						beneficiary:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 5)]
					claim_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					close_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					ParentBountyNotActive,
					#[codec(index = 1)]
					InsufficientBountyBalance,
					#[codec(index = 2)]
					TooManyChildBounties,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Added { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					Awarded {
						index: ::core::primitive::u32,
						child_index: ::core::primitive::u32,
						beneficiary: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 2)]
					Claimed {
						index: ::core::primitive::u32,
						child_index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					Canceled { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ChildBounty<_0, _1, _2> {
				pub parent_bounty: _2,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub status: runtime_types::pallet_child_bounties::ChildBountyStatus<_0, _2>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum ChildBountyStatus<_0, _1> {
				#[codec(index = 0)]
				Added,
				#[codec(index = 1)]
				CuratorProposed { curator: _0 },
				#[codec(index = 2)]
				Active { curator: _0 },
				#[codec(index = 3)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_conviction_voting {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					vote {
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					delegate {
						class: ::core::primitive::u16,
						to: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					undelegate { class: ::core::primitive::u16 },
					#[codec(index = 3)]
					unlock {
						class: ::core::primitive::u16,
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 4)]
					remove_vote {
						class: ::core::option::Option<::core::primitive::u16>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					remove_other_vote {
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						class: ::core::primitive::u16,
						index: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotOngoing,
					#[codec(index = 1)]
					NotVoter,
					#[codec(index = 2)]
					NoPermission,
					#[codec(index = 3)]
					NoPermissionYet,
					#[codec(index = 4)]
					AlreadyDelegating,
					#[codec(index = 5)]
					AlreadyVoting,
					#[codec(index = 6)]
					InsufficientFunds,
					#[codec(index = 7)]
					NotDelegating,
					#[codec(index = 8)]
					Nonsense,
					#[codec(index = 9)]
					MaxVotesReached,
					#[codec(index = 10)]
					ClassNeeded,
					#[codec(index = 11)]
					BadClass,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Delegated(::sp_core::crypto::AccountId32, ::sp_core::crypto::AccountId32),
					#[codec(index = 1)]
					Undelegated(::sp_core::crypto::AccountId32),
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub support: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard {
						vote: runtime_types::pallet_conviction_voting::vote::Vote,
						balance: _0,
					},
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
					#[codec(index = 2)]
					SplitAbstain { aye: _0, nay: _0, abstain: _0 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Casting<_0, _1, _2> {
					pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_1,
						runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
					)>,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Delegating<_0, _1, _2> {
					pub balance: _0,
					pub target: _1,
					pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Voting<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
					#[codec(index = 1)]
					Delegating(
						runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
					),
					__Ignore(::core::marker::PhantomData<_3>),
				}
			}
		}
		pub mod pallet_election_provider_multi_phase {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					# [codec (index = 0)] submit_unsigned { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: kusama_runtime :: NposCompactSolution24 > > , witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize , } , # [codec (index = 1)] set_minimum_untrusted_score { maybe_next_score : :: core :: option :: Option < runtime_types :: sp_npos_elections :: ElectionScore > , } , # [codec (index = 2)] set_emergency_election_result { supports : :: std :: vec :: Vec < (:: sp_core :: crypto :: AccountId32 , runtime_types :: sp_npos_elections :: Support < :: sp_core :: crypto :: AccountId32 > ,) > , } , # [codec (index = 3)] submit { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: kusama_runtime :: NposCompactSolution24 > > , } , # [codec (index = 4)] governance_fallback { maybe_max_voters : :: core :: option :: Option < :: core :: primitive :: u32 > , maybe_max_targets : :: core :: option :: Option < :: core :: primitive :: u32 > , } , }
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					PreDispatchEarlySubmission,
					#[codec(index = 1)]
					PreDispatchWrongWinnerCount,
					#[codec(index = 2)]
					PreDispatchWeakSubmission,
					#[codec(index = 3)]
					SignedQueueFull,
					#[codec(index = 4)]
					SignedCannotPayDeposit,
					#[codec(index = 5)]
					SignedInvalidWitness,
					#[codec(index = 6)]
					SignedTooMuchWeight,
					#[codec(index = 7)]
					OcwCallWrongEra,
					#[codec(index = 8)]
					MissingSnapshotMetadata,
					#[codec(index = 9)]
					InvalidSubmissionIndex,
					#[codec(index = 10)]
					CallNotAllowed,
					#[codec(index = 11)]
					FallbackFailed,
					#[codec(index = 12)]
					BoundNotMet,
					#[codec(index = 13)]
					TooManyWinners,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					SolutionStored {
						compute:
							runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
						origin: ::core::option::Option<::sp_core::crypto::AccountId32>,
						prev_ejected: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					ElectionFinalized {
						compute:
							runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
						score: runtime_types::sp_npos_elections::ElectionScore,
					},
					#[codec(index = 2)]
					ElectionFailed,
					#[codec(index = 3)]
					Rewarded {
						account: ::sp_core::crypto::AccountId32,
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					Slashed {
						account: ::sp_core::crypto::AccountId32,
						value: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					PhaseTransitioned {
						from: runtime_types::pallet_election_provider_multi_phase::Phase<
							::core::primitive::u32,
						>,
						to: runtime_types::pallet_election_provider_multi_phase::Phase<
							::core::primitive::u32,
						>,
						round: ::core::primitive::u32,
					},
				}
			}
			pub mod signed {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SignedSubmission<_0, _1, _2> {
					pub who: _0,
					pub deposit: _1,
					pub raw_solution:
						runtime_types::pallet_election_provider_multi_phase::RawSolution<_2>,
					pub call_fee: _1,
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum ElectionCompute {
				#[codec(index = 0)]
				OnChain,
				#[codec(index = 1)]
				Signed,
				#[codec(index = 2)]
				Unsigned,
				#[codec(index = 3)]
				Fallback,
				#[codec(index = 4)]
				Emergency,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Phase<_0> {
				#[codec(index = 0)]
				Off,
				#[codec(index = 1)]
				Signed,
				#[codec(index = 2)]
				Unsigned((::core::primitive::bool, _0)),
				#[codec(index = 3)]
				Emergency,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct RawSolution<_0> {
				pub solution: _0,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
				pub round: ::core::primitive::u32,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ReadySolution {
				pub supports: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
					::sp_core::crypto::AccountId32,
					runtime_types::sp_npos_elections::Support<::sp_core::crypto::AccountId32>,
				)>,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
				pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct RoundSnapshot<_0, _1> {
				pub voters: ::std::vec::Vec<_1>,
				pub targets: ::std::vec::Vec<_0>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct SolutionOrSnapshotSize {
				#[codec(compact)]
				pub voters: ::core::primitive::u32,
				#[codec(compact)]
				pub targets: ::core::primitive::u32,
			}
		}
		pub mod pallet_fast_unstake {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					register_fast_unstake,
					#[codec(index = 1)]
					deregister,
					#[codec(index = 2)]
					control { eras_to_check: ::core::primitive::u32 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotController,
					#[codec(index = 1)]
					AlreadyQueued,
					#[codec(index = 2)]
					NotFullyBonded,
					#[codec(index = 3)]
					NotQueued,
					#[codec(index = 4)]
					AlreadyHead,
					#[codec(index = 5)]
					CallNotAllowed,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Unstaked {
						stash: ::sp_core::crypto::AccountId32,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					Slashed {
						stash: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					InternalError,
					#[codec(index = 3)]
					BatchChecked { eras: ::std::vec::Vec<::core::primitive::u32> },
					#[codec(index = 4)]
					BatchFinished { size: ::core::primitive::u32 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct UnstakeRequest {
					pub stashes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::sp_core::crypto::AccountId32,
						::core::primitive::u128,
					)>,
					pub checked: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u32,
					>,
				}
			}
		}
		pub mod pallet_grandpa {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					report_equivocation {
						equivocation_proof: ::std::boxed::Box<
							::sp_consensus_grandpa::EquivocationProof<
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						key_owner_proof: ::sp_session::MembershipProof,
					},
					#[codec(index = 1)]
					report_equivocation_unsigned {
						equivocation_proof: ::std::boxed::Box<
							::sp_consensus_grandpa::EquivocationProof<
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						key_owner_proof: ::sp_session::MembershipProof,
					},
					#[codec(index = 2)]
					note_stalled {
						delay: ::core::primitive::u32,
						best_finalized_block_number: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					PauseFailed,
					#[codec(index = 1)]
					ResumeFailed,
					#[codec(index = 2)]
					ChangePending,
					#[codec(index = 3)]
					TooSoon,
					#[codec(index = 4)]
					InvalidKeyOwnershipProof,
					#[codec(index = 5)]
					InvalidEquivocationProof,
					#[codec(index = 6)]
					DuplicateOffenceReport,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					NewAuthorities {
						authority_set: ::std::vec::Vec<(
							runtime_types::sp_consensus_grandpa::app::Public,
							::core::primitive::u64,
						)>,
					},
					#[codec(index = 1)]
					Paused,
					#[codec(index = 2)]
					Resumed,
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct StoredPendingChange<_0> {
				pub scheduled_at: _0,
				pub delay: _0,
				pub next_authorities:
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
						runtime_types::sp_consensus_grandpa::app::Public,
						::core::primitive::u64,
					)>,
				pub forced: ::core::option::Option<_0>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum StoredState<_0> {
				#[codec(index = 0)]
				Live,
				#[codec(index = 1)]
				PendingPause { scheduled_at: _0, delay: _0 },
				#[codec(index = 2)]
				Paused,
				#[codec(index = 3)]
				PendingResume { scheduled_at: _0, delay: _0 },
			}
		}
		pub mod pallet_identity {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					add_registrar {
						account: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 1)]
					set_identity {
						info:
							::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
					},
					#[codec(index = 2)]
					set_subs {
						subs: ::std::vec::Vec<(
							::sp_core::crypto::AccountId32,
							runtime_types::pallet_identity::types::Data,
						)>,
					},
					#[codec(index = 3)]
					clear_identity,
					#[codec(index = 4)]
					request_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						#[codec(compact)]
						max_fee: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					cancel_request { reg_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					set_fee {
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					set_account_id {
						#[codec(compact)]
						index: ::core::primitive::u32,
						new: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 8)]
					set_fields {
						#[codec(compact)]
						index: ::core::primitive::u32,
						fields: runtime_types::pallet_identity::types::BitFlags<
							runtime_types::pallet_identity::types::IdentityField,
						>,
					},
					#[codec(index = 9)]
					provide_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						judgement: runtime_types::pallet_identity::types::Judgement<
							::core::primitive::u128,
						>,
						identity: ::subxt::utils::H256,
					},
					#[codec(index = 10)]
					kill_identity {
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 11)]
					add_sub {
						sub: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 12)]
					rename_sub {
						sub: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 13)]
					remove_sub {
						sub: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 14)]
					quit_sub,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooManySubAccounts,
					#[codec(index = 1)]
					NotFound,
					#[codec(index = 2)]
					NotNamed,
					#[codec(index = 3)]
					EmptyIndex,
					#[codec(index = 4)]
					FeeChanged,
					#[codec(index = 5)]
					NoIdentity,
					#[codec(index = 6)]
					StickyJudgement,
					#[codec(index = 7)]
					JudgementGiven,
					#[codec(index = 8)]
					InvalidJudgement,
					#[codec(index = 9)]
					InvalidIndex,
					#[codec(index = 10)]
					InvalidTarget,
					#[codec(index = 11)]
					TooManyFields,
					#[codec(index = 12)]
					TooManyRegistrars,
					#[codec(index = 13)]
					AlreadyClaimed,
					#[codec(index = 14)]
					NotSub,
					#[codec(index = 15)]
					NotOwned,
					#[codec(index = 16)]
					JudgementForDifferentIdentity,
					#[codec(index = 17)]
					JudgementPaymentFailed,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					IdentitySet { who: ::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					IdentityCleared {
						who: ::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					IdentityKilled {
						who: ::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					JudgementRequested {
						who: ::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					JudgementUnrequested {
						who: ::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					JudgementGiven {
						target: ::sp_core::crypto::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					RegistrarAdded { registrar_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					SubIdentityAdded {
						sub: ::sp_core::crypto::AccountId32,
						main: ::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					SubIdentityRemoved {
						sub: ::sp_core::crypto::AccountId32,
						main: ::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					SubIdentityRevoked {
						sub: ::sp_core::crypto::AccountId32,
						main: ::sp_core::crypto::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct BitFlags<_0>(
					pub ::core::primitive::u64,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Data {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Raw0([::core::primitive::u8; 0usize]),
					#[codec(index = 2)]
					Raw1([::core::primitive::u8; 1usize]),
					#[codec(index = 3)]
					Raw2([::core::primitive::u8; 2usize]),
					#[codec(index = 4)]
					Raw3([::core::primitive::u8; 3usize]),
					#[codec(index = 5)]
					Raw4([::core::primitive::u8; 4usize]),
					#[codec(index = 6)]
					Raw5([::core::primitive::u8; 5usize]),
					#[codec(index = 7)]
					Raw6([::core::primitive::u8; 6usize]),
					#[codec(index = 8)]
					Raw7([::core::primitive::u8; 7usize]),
					#[codec(index = 9)]
					Raw8([::core::primitive::u8; 8usize]),
					#[codec(index = 10)]
					Raw9([::core::primitive::u8; 9usize]),
					#[codec(index = 11)]
					Raw10([::core::primitive::u8; 10usize]),
					#[codec(index = 12)]
					Raw11([::core::primitive::u8; 11usize]),
					#[codec(index = 13)]
					Raw12([::core::primitive::u8; 12usize]),
					#[codec(index = 14)]
					Raw13([::core::primitive::u8; 13usize]),
					#[codec(index = 15)]
					Raw14([::core::primitive::u8; 14usize]),
					#[codec(index = 16)]
					Raw15([::core::primitive::u8; 15usize]),
					#[codec(index = 17)]
					Raw16([::core::primitive::u8; 16usize]),
					#[codec(index = 18)]
					Raw17([::core::primitive::u8; 17usize]),
					#[codec(index = 19)]
					Raw18([::core::primitive::u8; 18usize]),
					#[codec(index = 20)]
					Raw19([::core::primitive::u8; 19usize]),
					#[codec(index = 21)]
					Raw20([::core::primitive::u8; 20usize]),
					#[codec(index = 22)]
					Raw21([::core::primitive::u8; 21usize]),
					#[codec(index = 23)]
					Raw22([::core::primitive::u8; 22usize]),
					#[codec(index = 24)]
					Raw23([::core::primitive::u8; 23usize]),
					#[codec(index = 25)]
					Raw24([::core::primitive::u8; 24usize]),
					#[codec(index = 26)]
					Raw25([::core::primitive::u8; 25usize]),
					#[codec(index = 27)]
					Raw26([::core::primitive::u8; 26usize]),
					#[codec(index = 28)]
					Raw27([::core::primitive::u8; 27usize]),
					#[codec(index = 29)]
					Raw28([::core::primitive::u8; 28usize]),
					#[codec(index = 30)]
					Raw29([::core::primitive::u8; 29usize]),
					#[codec(index = 31)]
					Raw30([::core::primitive::u8; 30usize]),
					#[codec(index = 32)]
					Raw31([::core::primitive::u8; 31usize]),
					#[codec(index = 33)]
					Raw32([::core::primitive::u8; 32usize]),
					#[codec(index = 34)]
					BlakeTwo256([::core::primitive::u8; 32usize]),
					#[codec(index = 35)]
					Sha256([::core::primitive::u8; 32usize]),
					#[codec(index = 36)]
					Keccak256([::core::primitive::u8; 32usize]),
					#[codec(index = 37)]
					ShaThree256([::core::primitive::u8; 32usize]),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum IdentityField {
					#[codec(index = 1)]
					Display,
					#[codec(index = 2)]
					Legal,
					#[codec(index = 4)]
					Web,
					#[codec(index = 8)]
					Riot,
					#[codec(index = 16)]
					Email,
					#[codec(index = 32)]
					PgpFingerprint,
					#[codec(index = 64)]
					Image,
					#[codec(index = 128)]
					Twitter,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct IdentityInfo {
					pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::pallet_identity::types::Data,
						runtime_types::pallet_identity::types::Data,
					)>,
					pub display: runtime_types::pallet_identity::types::Data,
					pub legal: runtime_types::pallet_identity::types::Data,
					pub web: runtime_types::pallet_identity::types::Data,
					pub riot: runtime_types::pallet_identity::types::Data,
					pub email: runtime_types::pallet_identity::types::Data,
					pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
					pub image: runtime_types::pallet_identity::types::Data,
					pub twitter: runtime_types::pallet_identity::types::Data,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Judgement<_0> {
					#[codec(index = 0)]
					Unknown,
					#[codec(index = 1)]
					FeePaid(_0),
					#[codec(index = 2)]
					Reasonable,
					#[codec(index = 3)]
					KnownGood,
					#[codec(index = 4)]
					OutOfDate,
					#[codec(index = 5)]
					LowQuality,
					#[codec(index = 6)]
					Erroneous,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct RegistrarInfo<_0, _1> {
					pub account: _1,
					pub fee: _0,
					pub fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Registration<_0> {
					pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						runtime_types::pallet_identity::types::Judgement<_0>,
					)>,
					pub deposit: _0,
					pub info: runtime_types::pallet_identity::types::IdentityInfo,
				}
			}
		}
		pub mod pallet_im_online {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					heartbeat {
						heartbeat:
							runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
						signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidKey,
					#[codec(index = 1)]
					DuplicatedHeartbeat,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					HeartbeatReceived {
						authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
					},
					#[codec(index = 1)]
					AllGood,
					#[codec(index = 2)]
					SomeOffline {
						offline: ::std::vec::Vec<(
							::sp_core::crypto::AccountId32,
							runtime_types::pallet_staking::Exposure<
								::sp_core::crypto::AccountId32,
								::core::primitive::u128,
							>,
						)>,
					},
				}
			}
			pub mod sr25519 {
				use super::runtime_types;
				pub mod app_sr25519 {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct BoundedOpaqueNetworkState {
				pub peer_id: runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
					::core::primitive::u8,
				>,
				pub external_addresses:
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Heartbeat<_0> {
				pub block_number: _0,
				pub network_state: runtime_types::sp_core::offchain::OpaqueNetworkState,
				pub session_index: _0,
				pub authority_index: _0,
				pub validators_len: _0,
			}
		}
		pub mod pallet_indices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					claim { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					transfer {
						new: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					free { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					force_transfer {
						new: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						index: ::core::primitive::u32,
						freeze: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					freeze { index: ::core::primitive::u32 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotAssigned,
					#[codec(index = 1)]
					NotOwner,
					#[codec(index = 2)]
					InUse,
					#[codec(index = 3)]
					NotTransfer,
					#[codec(index = 4)]
					Permanent,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					IndexAssigned {
						who: ::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					IndexFreed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					IndexFrozen {
						index: ::core::primitive::u32,
						who: ::sp_core::crypto::AccountId32,
					},
				}
			}
		}
		pub mod pallet_message_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					# [codec (index = 0)] reap_page { message_origin : runtime_types :: polkadot_runtime_parachains :: inclusion :: AggregateMessageOrigin , page_index : :: core :: primitive :: u32 , } , # [codec (index = 1)] execute_overweight { message_origin : runtime_types :: polkadot_runtime_parachains :: inclusion :: AggregateMessageOrigin , page : :: core :: primitive :: u32 , index : :: core :: primitive :: u32 , weight_limit : :: sp_weights :: Weight , } , }
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotReapable,
					#[codec(index = 1)]
					NoPage,
					#[codec(index = 2)]
					NoMessage,
					#[codec(index = 3)]
					AlreadyProcessed,
					#[codec(index = 4)]
					Queued,
					#[codec(index = 5)]
					InsufficientWeight,
					#[codec(index = 6)]
					TemporarilyUnprocessable,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					# [codec (index = 0)] ProcessingFailed { id : [:: core :: primitive :: u8 ; 32usize] , origin : runtime_types :: polkadot_runtime_parachains :: inclusion :: AggregateMessageOrigin , error : runtime_types :: frame_support :: traits :: messages :: ProcessMessageError , } , # [codec (index = 1)] Processed { id : [:: core :: primitive :: u8 ; 32usize] , origin : runtime_types :: polkadot_runtime_parachains :: inclusion :: AggregateMessageOrigin , weight_used : :: sp_weights :: Weight , success : :: core :: primitive :: bool , } , # [codec (index = 2)] OverweightEnqueued { id : [:: core :: primitive :: u8 ; 32usize] , origin : runtime_types :: polkadot_runtime_parachains :: inclusion :: AggregateMessageOrigin , page_index : :: core :: primitive :: u32 , message_index : :: core :: primitive :: u32 , } , # [codec (index = 3)] PageReaped { origin : runtime_types :: polkadot_runtime_parachains :: inclusion :: AggregateMessageOrigin , index : :: core :: primitive :: u32 , } , }
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct BookState<_0> {
				pub begin: ::core::primitive::u32,
				pub end: ::core::primitive::u32,
				pub count: ::core::primitive::u32,
				pub ready_neighbours:
					::core::option::Option<runtime_types::pallet_message_queue::Neighbours<_0>>,
				pub message_count: ::core::primitive::u64,
				pub size: ::core::primitive::u64,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Neighbours<_0> {
				pub prev: _0,
				pub next: _0,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Page<_0> {
				pub remaining: _0,
				pub remaining_size: _0,
				pub first_index: _0,
				pub first: _0,
				pub last: _0,
				pub heap: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					as_multi_threshold_1 {
						other_signatories: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
						max_weight: ::sp_weights::Weight,
					},
					#[codec(index = 2)]
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: ::sp_weights::Weight,
					},
					#[codec(index = 3)]
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					MinimumThreshold,
					#[codec(index = 1)]
					AlreadyApproved,
					#[codec(index = 2)]
					NoApprovalsNeeded,
					#[codec(index = 3)]
					TooFewSignatories,
					#[codec(index = 4)]
					TooManySignatories,
					#[codec(index = 5)]
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					SenderInSignatories,
					#[codec(index = 7)]
					NotFound,
					#[codec(index = 8)]
					NotOwner,
					#[codec(index = 9)]
					NoTimepoint,
					#[codec(index = 10)]
					WrongTimepoint,
					#[codec(index = 11)]
					UnexpectedTimepoint,
					#[codec(index = 12)]
					MaxWeightTooLow,
					#[codec(index = 13)]
					AlreadyStored,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					NewMultisig {
						approving: ::sp_core::crypto::AccountId32,
						multisig: ::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					MultisigApproval {
						approving: ::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					MultisigExecuted {
						approving: ::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					MultisigCancelled {
						cancelling: ::sp_core::crypto::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::sp_core::crypto::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: _0,
			}
		}
		pub mod pallet_nis {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Bid<_0, _1> {
					pub amount: _0,
					pub who: _1,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					place_bid {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					retract_bid {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					fund_deficit,
					#[codec(index = 3)]
					thaw_private {
						#[codec(compact)]
						index: ::core::primitive::u32,
						maybe_proportion: ::core::option::Option<
							runtime_types::sp_arithmetic::per_things::Perquintill,
						>,
					},
					#[codec(index = 4)]
					thaw_communal {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					communify {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					privatize {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					DurationTooSmall,
					#[codec(index = 1)]
					DurationTooBig,
					#[codec(index = 2)]
					AmountTooSmall,
					#[codec(index = 3)]
					BidTooLow,
					#[codec(index = 4)]
					UnknownReceipt,
					#[codec(index = 5)]
					NotOwner,
					#[codec(index = 6)]
					NotExpired,
					#[codec(index = 7)]
					UnknownBid,
					#[codec(index = 8)]
					PortionTooBig,
					#[codec(index = 9)]
					Unfunded,
					#[codec(index = 10)]
					AlreadyFunded,
					#[codec(index = 11)]
					Throttled,
					#[codec(index = 12)]
					MakesDust,
					#[codec(index = 13)]
					AlreadyCommunal,
					#[codec(index = 14)]
					AlreadyPrivate,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					BidPlaced {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					BidRetracted {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					BidDropped {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					Issued {
						index: ::core::primitive::u32,
						expiry: ::core::primitive::u32,
						who: ::sp_core::crypto::AccountId32,
						proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					Thawed {
						index: ::core::primitive::u32,
						who: ::sp_core::crypto::AccountId32,
						proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
						amount: ::core::primitive::u128,
						dropped: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					Funded { deficit: ::core::primitive::u128 },
					#[codec(index = 6)]
					Transferred {
						from: ::sp_core::crypto::AccountId32,
						to: ::sp_core::crypto::AccountId32,
						index: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum HoldReason {
					#[codec(index = 0)]
					NftReceipt,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ReceiptRecord<_0, _1, _2> {
					pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub owner: ::core::option::Option<(_0, _2)>,
					pub expiry: _1,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SummaryRecord<_0, _1> {
					pub proportion_owed: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub index: _0,
					pub thawed: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub last_period: _0,
					pub receipts_on_hold: _1,
				}
			}
		}
		pub mod pallet_nomination_pools {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					join {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					bond_extra {
						extra: runtime_types::pallet_nomination_pools::BondExtra<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					claim_payout,
					#[codec(index = 3)]
					unbond {
						member_account:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						#[codec(compact)]
						unbonding_points: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					pool_withdraw_unbonded {
						pool_id: ::core::primitive::u32,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					withdraw_unbonded {
						member_account:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					create {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						root: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						nominator: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						bouncer: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 7)]
					create_with_pool_id {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						root: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						nominator: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						bouncer: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					nominate {
						pool_id: ::core::primitive::u32,
						validators: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 9)]
					set_state {
						pool_id: ::core::primitive::u32,
						state: runtime_types::pallet_nomination_pools::PoolState,
					},
					#[codec(index = 10)]
					set_metadata {
						pool_id: ::core::primitive::u32,
						metadata: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 11)]
					set_configs {
						min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u128,
						>,
						min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u128,
						>,
						max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						max_members: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
							runtime_types::sp_arithmetic::per_things::Perbill,
						>,
					},
					#[codec(index = 12)]
					update_roles {
						pool_id: ::core::primitive::u32,
						new_root: runtime_types::pallet_nomination_pools::ConfigOp<
							::sp_core::crypto::AccountId32,
						>,
						new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
							::sp_core::crypto::AccountId32,
						>,
						new_bouncer: runtime_types::pallet_nomination_pools::ConfigOp<
							::sp_core::crypto::AccountId32,
						>,
					},
					#[codec(index = 13)]
					chill { pool_id: ::core::primitive::u32 },
					#[codec(index = 14)]
					bond_extra_other {
						member: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						extra: runtime_types::pallet_nomination_pools::BondExtra<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 15)]
					set_claim_permission {
						permission: runtime_types::pallet_nomination_pools::ClaimPermission,
					},
					#[codec(index = 16)]
					claim_payout_other { other: ::sp_core::crypto::AccountId32 },
					#[codec(index = 17)]
					set_commission {
						pool_id: ::core::primitive::u32,
						new_commission: ::core::option::Option<(
							runtime_types::sp_arithmetic::per_things::Perbill,
							::sp_core::crypto::AccountId32,
						)>,
					},
					#[codec(index = 18)]
					set_commission_max {
						pool_id: ::core::primitive::u32,
						max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 19)]
					set_commission_change_rate {
						pool_id: ::core::primitive::u32,
						change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
							::core::primitive::u32,
						>,
					},
					#[codec(index = 20)]
					claim_commission { pool_id: ::core::primitive::u32 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum DefensiveError {
					#[codec(index = 0)]
					NotEnoughSpaceInUnbondPool,
					#[codec(index = 1)]
					PoolNotFound,
					#[codec(index = 2)]
					RewardPoolNotFound,
					#[codec(index = 3)]
					SubPoolsNotFound,
					#[codec(index = 4)]
					BondedStashKilledPrematurely,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					PoolNotFound,
					#[codec(index = 1)]
					PoolMemberNotFound,
					#[codec(index = 2)]
					RewardPoolNotFound,
					#[codec(index = 3)]
					SubPoolsNotFound,
					#[codec(index = 4)]
					AccountBelongsToOtherPool,
					#[codec(index = 5)]
					FullyUnbonding,
					#[codec(index = 6)]
					MaxUnbondingLimit,
					#[codec(index = 7)]
					CannotWithdrawAny,
					#[codec(index = 8)]
					MinimumBondNotMet,
					#[codec(index = 9)]
					OverflowRisk,
					#[codec(index = 10)]
					NotDestroying,
					#[codec(index = 11)]
					NotNominator,
					#[codec(index = 12)]
					NotKickerOrDestroying,
					#[codec(index = 13)]
					NotOpen,
					#[codec(index = 14)]
					MaxPools,
					#[codec(index = 15)]
					MaxPoolMembers,
					#[codec(index = 16)]
					CanNotChangeState,
					#[codec(index = 17)]
					DoesNotHavePermission,
					#[codec(index = 18)]
					MetadataExceedsMaxLen,
					#[codec(index = 19)]
					Defensive(runtime_types::pallet_nomination_pools::pallet::DefensiveError),
					#[codec(index = 20)]
					PartialUnbondNotAllowedPermissionlessly,
					#[codec(index = 21)]
					MaxCommissionRestricted,
					#[codec(index = 22)]
					CommissionExceedsMaximum,
					#[codec(index = 23)]
					CommissionChangeThrottled,
					#[codec(index = 24)]
					CommissionChangeRateNotAllowed,
					#[codec(index = 25)]
					NoPendingCommission,
					#[codec(index = 26)]
					NoCommissionCurrentSet,
					#[codec(index = 27)]
					PoolIdInUse,
					#[codec(index = 28)]
					InvalidPoolId,
					#[codec(index = 29)]
					BondExtraRestricted,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Created {
						depositor: ::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					Bonded {
						member: ::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						bonded: ::core::primitive::u128,
						joined: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					PaidOut {
						member: ::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						payout: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					Unbonded {
						member: ::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
						points: ::core::primitive::u128,
						era: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					Withdrawn {
						member: ::sp_core::crypto::AccountId32,
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
						points: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					Destroyed { pool_id: ::core::primitive::u32 },
					#[codec(index = 6)]
					StateChanged {
						pool_id: ::core::primitive::u32,
						new_state: runtime_types::pallet_nomination_pools::PoolState,
					},
					#[codec(index = 7)]
					MemberRemoved {
						pool_id: ::core::primitive::u32,
						member: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 8)]
					RolesUpdated {
						root: ::core::option::Option<::sp_core::crypto::AccountId32>,
						bouncer: ::core::option::Option<::sp_core::crypto::AccountId32>,
						nominator: ::core::option::Option<::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 9)]
					PoolSlashed {
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					UnbondingPoolSlashed {
						pool_id: ::core::primitive::u32,
						era: ::core::primitive::u32,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					PoolCommissionUpdated {
						pool_id: ::core::primitive::u32,
						current: ::core::option::Option<(
							runtime_types::sp_arithmetic::per_things::Perbill,
							::sp_core::crypto::AccountId32,
						)>,
					},
					#[codec(index = 12)]
					PoolMaxCommissionUpdated {
						pool_id: ::core::primitive::u32,
						max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 13)]
					PoolCommissionChangeRateUpdated {
						pool_id: ::core::primitive::u32,
						change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					PoolCommissionClaimed {
						pool_id: ::core::primitive::u32,
						commission: ::core::primitive::u128,
					},
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum BondExtra<_0> {
				#[codec(index = 0)]
				FreeBalance(_0),
				#[codec(index = 1)]
				Rewards,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct BondedPoolInner {
				pub commission: runtime_types::pallet_nomination_pools::Commission,
				pub member_counter: ::core::primitive::u32,
				pub points: ::core::primitive::u128,
				pub roles: runtime_types::pallet_nomination_pools::PoolRoles<
					::sp_core::crypto::AccountId32,
				>,
				pub state: runtime_types::pallet_nomination_pools::PoolState,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum ClaimPermission {
				#[codec(index = 0)]
				Permissioned,
				#[codec(index = 1)]
				PermissionlessCompound,
				#[codec(index = 2)]
				PermissionlessWithdraw,
				#[codec(index = 3)]
				PermissionlessAll,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Commission {
				pub current: ::core::option::Option<(
					runtime_types::sp_arithmetic::per_things::Perbill,
					::sp_core::crypto::AccountId32,
				)>,
				pub max: ::core::option::Option<runtime_types::sp_arithmetic::per_things::Perbill>,
				pub change_rate: ::core::option::Option<
					runtime_types::pallet_nomination_pools::CommissionChangeRate<
						::core::primitive::u32,
					>,
				>,
				pub throttle_from: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct CommissionChangeRate<_0> {
				pub max_increase: runtime_types::sp_arithmetic::per_things::Perbill,
				pub min_delay: _0,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum ConfigOp<_0> {
				#[codec(index = 0)]
				Noop,
				#[codec(index = 1)]
				Set(_0),
				#[codec(index = 2)]
				Remove,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct PoolMember {
				pub pool_id: ::core::primitive::u32,
				pub points: ::core::primitive::u128,
				pub last_recorded_reward_counter:
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub unbonding_eras:
					runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct PoolRoles<_0> {
				pub depositor: _0,
				pub root: ::core::option::Option<_0>,
				pub nominator: ::core::option::Option<_0>,
				pub bouncer: ::core::option::Option<_0>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum PoolState {
				#[codec(index = 0)]
				Open,
				#[codec(index = 1)]
				Blocked,
				#[codec(index = 2)]
				Destroying,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct RewardPool {
				pub last_recorded_reward_counter:
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub last_recorded_total_payouts: ::core::primitive::u128,
				pub total_rewards_claimed: ::core::primitive::u128,
				pub total_commission_pending: ::core::primitive::u128,
				pub total_commission_claimed: ::core::primitive::u128,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct SubPools {
				pub no_era: runtime_types::pallet_nomination_pools::UnbondPool,
				pub with_era:
					runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u32,
						runtime_types::pallet_nomination_pools::UnbondPool,
					>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct UnbondPool {
				pub points: ::core::primitive::u128,
				pub balance: ::core::primitive::u128,
			}
		}
		pub mod pallet_offences {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Offence {
						kind: [::core::primitive::u8; 16usize],
						timeslot: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					note_preimage { bytes: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					unnote_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					request_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 3)]
					unrequest_preimage { hash: ::subxt::utils::H256 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooBig,
					#[codec(index = 1)]
					AlreadyNoted,
					#[codec(index = 2)]
					NotAuthorized,
					#[codec(index = 3)]
					NotNoted,
					#[codec(index = 4)]
					Requested,
					#[codec(index = 5)]
					NotRequested,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Noted { hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					Requested { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					Cleared { hash: ::subxt::utils::H256 },
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { deposit: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					deposit: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					len: ::core::option::Option<::core::primitive::u32>,
				},
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					proxy {
						real: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						force_proxy_type:
							::core::option::Option<runtime_types::kusama_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					add_proxy {
						delegate: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					remove_proxy {
						delegate: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					remove_proxies,
					#[codec(index = 4)]
					create_pure {
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					kill_pure {
						spawner: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					announce {
						real: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 7)]
					remove_announcement {
						real: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 8)]
					reject_announcement {
						delegate: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 9)]
					proxy_announced {
						delegate: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						real: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						force_proxy_type:
							::core::option::Option<runtime_types::kusama_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooMany,
					#[codec(index = 1)]
					NotFound,
					#[codec(index = 2)]
					NotProxy,
					#[codec(index = 3)]
					Unproxyable,
					#[codec(index = 4)]
					Duplicate,
					#[codec(index = 5)]
					NoPermission,
					#[codec(index = 6)]
					Unannounced,
					#[codec(index = 7)]
					NoSelfProxy,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					PureCreated {
						pure: ::sp_core::crypto::AccountId32,
						who: ::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					Announced {
						real: ::sp_core::crypto::AccountId32,
						proxy: ::sp_core::crypto::AccountId32,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 3)]
					ProxyAdded {
						delegator: ::sp_core::crypto::AccountId32,
						delegatee: ::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					ProxyRemoved {
						delegator: ::sp_core::crypto::AccountId32,
						delegatee: ::sp_core::crypto::AccountId32,
						proxy_type: runtime_types::kusama_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_ranked_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					add_member {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 1)]
					promote_member {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 2)]
					demote_member {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 3)]
					remove_member {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						min_rank: ::core::primitive::u16,
					},
					#[codec(index = 4)]
					vote { poll: ::core::primitive::u32, aye: ::core::primitive::bool },
					#[codec(index = 5)]
					cleanup_poll { poll_index: ::core::primitive::u32, max: ::core::primitive::u32 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AlreadyMember,
					#[codec(index = 1)]
					NotMember,
					#[codec(index = 2)]
					NotPolling,
					#[codec(index = 3)]
					Ongoing,
					#[codec(index = 4)]
					NoneRemaining,
					#[codec(index = 5)]
					Corruption,
					#[codec(index = 6)]
					RankTooLow,
					#[codec(index = 7)]
					InvalidWitness,
					#[codec(index = 8)]
					NoPermission,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					MemberAdded { who: ::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					RankChanged {
						who: ::sp_core::crypto::AccountId32,
						rank: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					MemberRemoved {
						who: ::sp_core::crypto::AccountId32,
						rank: ::core::primitive::u16,
					},
					#[codec(index = 3)]
					Voted {
						who: ::sp_core::crypto::AccountId32,
						poll: ::core::primitive::u32,
						vote: runtime_types::pallet_ranked_collective::VoteRecord,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
				}
			}
			#[derive(
				:: codec :: Decode,
				:: codec :: Encode,
				:: subxt :: ext :: codec :: CompactAs,
				Clone,
				Debug,
				PartialEq,
			)]
			pub struct MemberRecord {
				pub rank: ::core::primitive::u16,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Tally {
				pub bare_ayes: ::core::primitive::u32,
				pub ayes: ::core::primitive::u32,
				pub nays: ::core::primitive::u32,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VoteRecord {
				#[codec(index = 0)]
				Aye(::core::primitive::u32),
				#[codec(index = 1)]
				Nay(::core::primitive::u32),
			}
		}
		pub mod pallet_recovery {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					as_recovered {
						account: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					set_recovered {
						lost: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						rescuer: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 2)]
					create_recovery {
						friends: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
						threshold: ::core::primitive::u16,
						delay_period: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					initiate_recovery {
						account: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 4)]
					vouch_recovery {
						lost: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						rescuer: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 5)]
					claim_recovery {
						account: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 6)]
					close_recovery {
						rescuer: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 7)]
					remove_recovery,
					#[codec(index = 8)]
					cancel_recovered {
						account: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotAllowed,
					#[codec(index = 1)]
					ZeroThreshold,
					#[codec(index = 2)]
					NotEnoughFriends,
					#[codec(index = 3)]
					MaxFriends,
					#[codec(index = 4)]
					NotSorted,
					#[codec(index = 5)]
					NotRecoverable,
					#[codec(index = 6)]
					AlreadyRecoverable,
					#[codec(index = 7)]
					AlreadyStarted,
					#[codec(index = 8)]
					NotStarted,
					#[codec(index = 9)]
					NotFriend,
					#[codec(index = 10)]
					DelayPeriod,
					#[codec(index = 11)]
					AlreadyVouched,
					#[codec(index = 12)]
					Threshold,
					#[codec(index = 13)]
					StillActive,
					#[codec(index = 14)]
					AlreadyProxy,
					#[codec(index = 15)]
					BadState,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					RecoveryCreated { account: ::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					RecoveryInitiated {
						lost_account: ::sp_core::crypto::AccountId32,
						rescuer_account: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 2)]
					RecoveryVouched {
						lost_account: ::sp_core::crypto::AccountId32,
						rescuer_account: ::sp_core::crypto::AccountId32,
						sender: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					RecoveryClosed {
						lost_account: ::sp_core::crypto::AccountId32,
						rescuer_account: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 4)]
					AccountRecovered {
						lost_account: ::sp_core::crypto::AccountId32,
						rescuer_account: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 5)]
					RecoveryRemoved { lost_account: ::sp_core::crypto::AccountId32 },
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ActiveRecovery<_0, _1, _2> {
				pub created: _0,
				pub deposit: _1,
				pub friends: _2,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct RecoveryConfig<_0, _1, _2> {
				pub delay_period: _0,
				pub deposit: _1,
				pub friends: _2,
				pub threshold: ::core::primitive::u16,
			}
		}
		pub mod pallet_referenda {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					submit {
						proposal_origin:
							::std::boxed::Box<runtime_types::kusama_runtime::OriginCaller>,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::kusama_runtime::RuntimeCall,
						>,
						enactment_moment:
							runtime_types::frame_support::traits::schedule::DispatchTime<
								::core::primitive::u32,
							>,
					},
					#[codec(index = 1)]
					place_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					refund_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					cancel { index: ::core::primitive::u32 },
					#[codec(index = 4)]
					kill { index: ::core::primitive::u32 },
					#[codec(index = 5)]
					nudge_referendum { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					one_fewer_deciding { track: ::core::primitive::u16 },
					#[codec(index = 7)]
					refund_submission_deposit { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					set_metadata {
						index: ::core::primitive::u32,
						maybe_hash: ::core::option::Option<::subxt::utils::H256>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotOngoing,
					#[codec(index = 1)]
					HasDeposit,
					#[codec(index = 2)]
					BadTrack,
					#[codec(index = 3)]
					Full,
					#[codec(index = 4)]
					QueueEmpty,
					#[codec(index = 5)]
					BadReferendum,
					#[codec(index = 6)]
					NothingToDo,
					#[codec(index = 7)]
					NoTrack,
					#[codec(index = 8)]
					Unfinished,
					#[codec(index = 9)]
					NoPermission,
					#[codec(index = 10)]
					NoDeposit,
					#[codec(index = 11)]
					BadStatus,
					#[codec(index = 12)]
					PreimageNotExist,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Submitted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::kusama_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					DecisionDepositPlaced {
						index: ::core::primitive::u32,
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					DecisionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					DepositSlashed {
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					DecisionStarted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::kusama_runtime::RuntimeCall,
						>,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 5)]
					ConfirmStarted { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					ConfirmAborted { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					Confirmed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 8)]
					Approved { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					Rejected {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 10)]
					TimedOut {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 11)]
					Cancelled {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 12)]
					Killed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 13)]
					SubmissionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::sp_core::crypto::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					MetadataSet { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
					#[codec(index = 15)]
					MetadataCleared { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Curve {
					#[codec(index = 0)]
					LinearDecreasing {
						length: runtime_types::sp_arithmetic::per_things::Perbill,
						floor: runtime_types::sp_arithmetic::per_things::Perbill,
						ceil: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 1)]
					SteppedDecreasing {
						begin: runtime_types::sp_arithmetic::per_things::Perbill,
						end: runtime_types::sp_arithmetic::per_things::Perbill,
						step: runtime_types::sp_arithmetic::per_things::Perbill,
						period: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 2)]
					Reciprocal {
						factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct DecidingStatus<_0> {
					pub since: _0,
					pub confirming: ::core::option::Option<_0>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Deposit<_0, _1> {
					pub who: _0,
					pub amount: _1,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
					#[codec(index = 0)]
					Ongoing(
						runtime_types::pallet_referenda::types::ReferendumStatus<
							_0,
							_1,
							_2,
							_3,
							_4,
							_5,
							_6,
							_7,
						>,
					),
					#[codec(index = 1)]
					Approved(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 2)]
					Rejected(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 3)]
					Cancelled(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 4)]
					TimedOut(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 5)]
					Killed(_2),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
					pub track: _0,
					pub origin: _1,
					pub proposal: _3,
					pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
					pub submitted: _2,
					pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					pub decision_deposit: ::core::option::Option<
						runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					>,
					pub deciding: ::core::option::Option<
						runtime_types::pallet_referenda::types::DecidingStatus<_2>,
					>,
					pub tally: _5,
					pub in_queue: ::core::primitive::bool,
					pub alarm: ::core::option::Option<(_2, _7)>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct TrackInfo<_0, _1> {
					pub name: ::std::string::String,
					pub max_deciding: _1,
					pub decision_deposit: _0,
					pub prepare_period: _1,
					pub decision_period: _1,
					pub confirm_period: _1,
					pub min_enactment_period: _1,
					pub min_approval: runtime_types::pallet_referenda::types::Curve,
					pub min_support: runtime_types::pallet_referenda::types::Curve,
				}
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					schedule_named {
						id: [::core::primitive::u8; 32usize],
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 3)]
					cancel_named { id: [::core::primitive::u8; 32usize] },
					#[codec(index = 4)]
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 5)]
					schedule_named_after {
						id: [::core::primitive::u8; 32usize],
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					FailedToSchedule,
					#[codec(index = 1)]
					NotFound,
					#[codec(index = 2)]
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					RescheduleNoChange,
					#[codec(index = 4)]
					Named,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					CallUnavailable {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 4)]
					PeriodicFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 5)]
					PermanentlyOverweight {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Scheduled<_0, _1, _2, _3, _4> {
				pub maybe_id: ::core::option::Option<_0>,
				pub priority: ::core::primitive::u8,
				pub call: _1,
				pub maybe_periodic: ::core::option::Option<(_2, _2)>,
				pub origin: _3,
				#[codec(skip)]
				pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_session {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set_keys {
						keys: runtime_types::kusama_runtime::SessionKeys,
						proof: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					purge_keys,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidProof,
					#[codec(index = 1)]
					NoAssociatedValidatorId,
					#[codec(index = 2)]
					DuplicatedKey,
					#[codec(index = 3)]
					NoKeys,
					#[codec(index = 4)]
					NoAccount,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					NewSession { session_index: ::core::primitive::u32 },
				}
			}
		}
		pub mod pallet_society {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					bid { value: ::core::primitive::u128 },
					#[codec(index = 1)]
					unbid { pos: ::core::primitive::u32 },
					#[codec(index = 2)]
					vouch {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						value: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					unvouch { pos: ::core::primitive::u32 },
					#[codec(index = 4)]
					vote {
						candidate: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					defender_vote { approve: ::core::primitive::bool },
					#[codec(index = 6)]
					payout,
					#[codec(index = 7)]
					found {
						founder: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						max_members: ::core::primitive::u32,
						rules: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 8)]
					unfound,
					#[codec(index = 9)]
					judge_suspended_member {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						forgive: ::core::primitive::bool,
					},
					#[codec(index = 10)]
					judge_suspended_candidate {
						who: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						judgement: runtime_types::pallet_society::Judgement,
					},
					#[codec(index = 11)]
					set_max_members { max: ::core::primitive::u32 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					BadPosition,
					#[codec(index = 1)]
					NotMember,
					#[codec(index = 2)]
					AlreadyMember,
					#[codec(index = 3)]
					Suspended,
					#[codec(index = 4)]
					NotSuspended,
					#[codec(index = 5)]
					NoPayout,
					#[codec(index = 6)]
					AlreadyFounded,
					#[codec(index = 7)]
					InsufficientPot,
					#[codec(index = 8)]
					AlreadyVouching,
					#[codec(index = 9)]
					NotVouching,
					#[codec(index = 10)]
					Head,
					#[codec(index = 11)]
					Founder,
					#[codec(index = 12)]
					AlreadyBid,
					#[codec(index = 13)]
					AlreadyCandidate,
					#[codec(index = 14)]
					NotCandidate,
					#[codec(index = 15)]
					MaxMembers,
					#[codec(index = 16)]
					NotFounder,
					#[codec(index = 17)]
					NotHead,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Founded { founder: ::sp_core::crypto::AccountId32 },
					#[codec(index = 1)]
					Bid {
						candidate_id: ::sp_core::crypto::AccountId32,
						offer: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					Vouch {
						candidate_id: ::sp_core::crypto::AccountId32,
						offer: ::core::primitive::u128,
						vouching: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					AutoUnbid { candidate: ::sp_core::crypto::AccountId32 },
					#[codec(index = 4)]
					Unbid { candidate: ::sp_core::crypto::AccountId32 },
					#[codec(index = 5)]
					Unvouch { candidate: ::sp_core::crypto::AccountId32 },
					#[codec(index = 6)]
					Inducted {
						primary: ::sp_core::crypto::AccountId32,
						candidates: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
					},
					#[codec(index = 7)]
					SuspendedMemberJudgement {
						who: ::sp_core::crypto::AccountId32,
						judged: ::core::primitive::bool,
					},
					#[codec(index = 8)]
					CandidateSuspended { candidate: ::sp_core::crypto::AccountId32 },
					#[codec(index = 9)]
					MemberSuspended { member: ::sp_core::crypto::AccountId32 },
					#[codec(index = 10)]
					Challenged { member: ::sp_core::crypto::AccountId32 },
					#[codec(index = 11)]
					Vote {
						candidate: ::sp_core::crypto::AccountId32,
						voter: ::sp_core::crypto::AccountId32,
						vote: ::core::primitive::bool,
					},
					#[codec(index = 12)]
					DefenderVote {
						voter: ::sp_core::crypto::AccountId32,
						vote: ::core::primitive::bool,
					},
					#[codec(index = 13)]
					NewMaxMembers { max: ::core::primitive::u32 },
					#[codec(index = 14)]
					Unfounded { founder: ::sp_core::crypto::AccountId32 },
					#[codec(index = 15)]
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 16)]
					SkepticsChosen { skeptics: ::std::vec::Vec<::sp_core::crypto::AccountId32> },
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Bid<_0, _1> {
				pub who: _0,
				pub kind: runtime_types::pallet_society::BidKind<_0, _1>,
				pub value: _1,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum BidKind<_0, _1> {
				#[codec(index = 0)]
				Deposit(_1),
				#[codec(index = 1)]
				Vouch(_0, _1),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Judgement {
				#[codec(index = 0)]
				Rebid,
				#[codec(index = 1)]
				Reject,
				#[codec(index = 2)]
				Approve,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Vote {
				#[codec(index = 0)]
				Skeptic,
				#[codec(index = 1)]
				Reject,
				#[codec(index = 2)]
				Approve,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VouchingStatus {
				#[codec(index = 0)]
				Vouching,
				#[codec(index = 1)]
				Banned,
			}
		}
		pub mod pallet_staking {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						bond {
							#[codec(compact)]
							value: ::core::primitive::u128,
							payee: runtime_types::pallet_staking::RewardDestination<
								::sp_core::crypto::AccountId32,
							>,
						},
						#[codec(index = 1)]
						bond_extra {
							#[codec(compact)]
							max_additional: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						unbond {
							#[codec(compact)]
							value: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						withdraw_unbonded { num_slashing_spans: ::core::primitive::u32 },
						#[codec(index = 4)]
						validate { prefs: runtime_types::pallet_staking::ValidatorPrefs },
						#[codec(index = 5)]
						nominate {
							targets: ::std::vec::Vec<
								::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
							>,
						},
						#[codec(index = 6)]
						chill,
						#[codec(index = 7)]
						set_payee {
							payee: runtime_types::pallet_staking::RewardDestination<
								::sp_core::crypto::AccountId32,
							>,
						},
						#[codec(index = 8)]
						set_controller,
						#[codec(index = 9)]
						set_validator_count {
							#[codec(compact)]
							new: ::core::primitive::u32,
						},
						#[codec(index = 10)]
						increase_validator_count {
							#[codec(compact)]
							additional: ::core::primitive::u32,
						},
						#[codec(index = 11)]
						scale_validator_count {
							factor: runtime_types::sp_arithmetic::per_things::Percent,
						},
						#[codec(index = 12)]
						force_no_eras,
						#[codec(index = 13)]
						force_new_era,
						#[codec(index = 14)]
						set_invulnerables {
							invulnerables: ::std::vec::Vec<::sp_core::crypto::AccountId32>,
						},
						#[codec(index = 15)]
						force_unstake {
							stash: ::sp_core::crypto::AccountId32,
							num_slashing_spans: ::core::primitive::u32,
						},
						#[codec(index = 16)]
						force_new_era_always,
						#[codec(index = 17)]
						cancel_deferred_slash {
							era: ::core::primitive::u32,
							slash_indices: ::std::vec::Vec<::core::primitive::u32>,
						},
						#[codec(index = 18)]
						payout_stakers {
							validator_stash: ::sp_core::crypto::AccountId32,
							era: ::core::primitive::u32,
						},
						#[codec(index = 19)]
						rebond {
							#[codec(compact)]
							value: ::core::primitive::u128,
						},
						#[codec(index = 20)]
						reap_stash {
							stash: ::sp_core::crypto::AccountId32,
							num_slashing_spans: ::core::primitive::u32,
						},
						#[codec(index = 21)]
						kick {
							who: ::std::vec::Vec<
								::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
							>,
						},
						#[codec(index = 22)]
						set_staking_configs {
							min_nominator_bond:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u128,
								>,
							min_validator_bond:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u128,
								>,
							max_nominator_count:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u32,
								>,
							max_validator_count:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u32,
								>,
							chill_threshold:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									runtime_types::sp_arithmetic::per_things::Percent,
								>,
							min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
								runtime_types::sp_arithmetic::per_things::Perbill,
							>,
						},
						#[codec(index = 23)]
						chill_other { controller: ::sp_core::crypto::AccountId32 },
						#[codec(index = 24)]
						force_apply_min_commission {
							validator_stash: ::sp_core::crypto::AccountId32,
						},
						#[codec(index = 25)]
						set_min_commission {
							new: runtime_types::sp_arithmetic::per_things::Perbill,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum ConfigOp<_0> {
						#[codec(index = 0)]
						Noop,
						#[codec(index = 1)]
						Set(_0),
						#[codec(index = 2)]
						Remove,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						NotController,
						#[codec(index = 1)]
						NotStash,
						#[codec(index = 2)]
						AlreadyBonded,
						#[codec(index = 3)]
						AlreadyPaired,
						#[codec(index = 4)]
						EmptyTargets,
						#[codec(index = 5)]
						DuplicateIndex,
						#[codec(index = 6)]
						InvalidSlashIndex,
						#[codec(index = 7)]
						InsufficientBond,
						#[codec(index = 8)]
						NoMoreChunks,
						#[codec(index = 9)]
						NoUnlockChunk,
						#[codec(index = 10)]
						FundedTarget,
						#[codec(index = 11)]
						InvalidEraToReward,
						#[codec(index = 12)]
						InvalidNumberOfNominations,
						#[codec(index = 13)]
						NotSortedAndUnique,
						#[codec(index = 14)]
						AlreadyClaimed,
						#[codec(index = 15)]
						IncorrectHistoryDepth,
						#[codec(index = 16)]
						IncorrectSlashingSpans,
						#[codec(index = 17)]
						BadState,
						#[codec(index = 18)]
						TooManyTargets,
						#[codec(index = 19)]
						BadTarget,
						#[codec(index = 20)]
						CannotChillOther,
						#[codec(index = 21)]
						TooManyNominators,
						#[codec(index = 22)]
						TooManyValidators,
						#[codec(index = 23)]
						CommissionTooLow,
						#[codec(index = 24)]
						BoundNotMet,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						EraPaid {
							era_index: ::core::primitive::u32,
							validator_payout: ::core::primitive::u128,
							remainder: ::core::primitive::u128,
						},
						#[codec(index = 1)]
						Rewarded {
							stash: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						Slashed {
							staker: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						SlashReported {
							validator: ::sp_core::crypto::AccountId32,
							fraction: runtime_types::sp_arithmetic::per_things::Perbill,
							slash_era: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						OldSlashingReportDiscarded { session_index: ::core::primitive::u32 },
						#[codec(index = 5)]
						StakersElected,
						#[codec(index = 6)]
						Bonded {
							stash: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 7)]
						Unbonded {
							stash: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 8)]
						Withdrawn {
							stash: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 9)]
						Kicked {
							nominator: ::sp_core::crypto::AccountId32,
							stash: ::sp_core::crypto::AccountId32,
						},
						#[codec(index = 10)]
						StakingElectionFailed,
						#[codec(index = 11)]
						Chilled { stash: ::sp_core::crypto::AccountId32 },
						#[codec(index = 12)]
						PayoutStarted {
							era_index: ::core::primitive::u32,
							validator_stash: ::sp_core::crypto::AccountId32,
						},
						#[codec(index = 13)]
						ValidatorPrefsSet {
							stash: ::sp_core::crypto::AccountId32,
							prefs: runtime_types::pallet_staking::ValidatorPrefs,
						},
						#[codec(index = 14)]
						ForceEra { mode: runtime_types::pallet_staking::Forcing },
					}
				}
			}
			pub mod slashing {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SlashingSpans {
					pub span_index: ::core::primitive::u32,
					pub last_start: ::core::primitive::u32,
					pub last_nonzero_slash: ::core::primitive::u32,
					pub prior: ::std::vec::Vec<::core::primitive::u32>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SpanRecord<_0> {
					pub slashed: _0,
					pub paid_out: _0,
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ActiveEraInfo {
				pub index: ::core::primitive::u32,
				pub start: ::core::option::Option<::core::primitive::u64>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct EraRewardPoints<_0> {
				pub total: ::core::primitive::u32,
				pub individual: ::subxt::utils::KeyedVec<_0, ::core::primitive::u32>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Exposure<_0, _1> {
				#[codec(compact)]
				pub total: _1,
				#[codec(compact)]
				pub own: _1,
				pub others:
					::std::vec::Vec<runtime_types::pallet_staking::IndividualExposure<_0, _1>>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Forcing {
				#[codec(index = 0)]
				NotForcing,
				#[codec(index = 1)]
				ForceNew,
				#[codec(index = 2)]
				ForceNone,
				#[codec(index = 3)]
				ForceAlways,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct IndividualExposure<_0, _1> {
				pub who: _0,
				#[codec(compact)]
				pub value: _1,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Nominations {
				pub targets: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::sp_core::crypto::AccountId32,
				>,
				pub submitted_in: ::core::primitive::u32,
				pub suppressed: ::core::primitive::bool,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum RewardDestination<_0> {
				#[codec(index = 0)]
				Staked,
				#[codec(index = 1)]
				Stash,
				#[codec(index = 2)]
				Controller,
				#[codec(index = 3)]
				Account(_0),
				#[codec(index = 4)]
				None,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct StakingLedger {
				pub stash: ::sp_core::crypto::AccountId32,
				#[codec(compact)]
				pub total: ::core::primitive::u128,
				#[codec(compact)]
				pub active: ::core::primitive::u128,
				pub unlocking: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					runtime_types::pallet_staking::UnlockChunk<::core::primitive::u128>,
				>,
				pub claimed_rewards: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u32,
				>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct UnappliedSlash<_0, _1> {
				pub validator: _0,
				pub own: _1,
				pub others: ::std::vec::Vec<(_0, _1)>,
				pub reporters: ::std::vec::Vec<_0>,
				pub payout: _1,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct UnlockChunk<_0> {
				#[codec(compact)]
				pub value: _0,
				#[codec(compact)]
				pub era: ::core::primitive::u32,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ValidatorPrefs {
				#[codec(compact)]
				pub commission: runtime_types::sp_arithmetic::per_things::Perbill,
				pub blocked: ::core::primitive::bool,
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					TransactionFeePaid {
						who: ::sp_core::crypto::AccountId32,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					propose_spend {
						#[codec(compact)]
						value: ::core::primitive::u128,
						beneficiary:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 1)]
					reject_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					approve_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					spend {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary:
							::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 4)]
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					InvalidIndex,
					#[codec(index = 2)]
					TooManyApprovals,
					#[codec(index = 3)]
					InsufficientPermission,
					#[codec(index = 4)]
					ProposalNotApproved,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Proposed { proposal_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 2)]
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 3)]
					Rejected {
						proposal_index: ::core::primitive::u32,
						slashed: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 5)]
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 6)]
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 7)]
					SpendApproved {
						proposal_index: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						beneficiary: ::sp_core::crypto::AccountId32,
					},
					#[codec(index = 8)]
					UpdatedInactive {
						reactivated: ::core::primitive::u128,
						deactivated: ::core::primitive::u128,
					},
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					batch { calls: ::std::vec::Vec<runtime_types::kusama_runtime::RuntimeCall> },
					#[codec(index = 1)]
					as_derivative {
						index: ::core::primitive::u16,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 2)]
					batch_all { calls: ::std::vec::Vec<runtime_types::kusama_runtime::RuntimeCall> },
					#[codec(index = 3)]
					dispatch_as {
						as_origin: ::std::boxed::Box<runtime_types::kusama_runtime::OriginCaller>,
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 4)]
					force_batch {
						calls: ::std::vec::Vec<runtime_types::kusama_runtime::RuntimeCall>,
					},
					#[codec(index = 5)]
					with_weight {
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
						weight: ::sp_weights::Weight,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooManyCalls,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					BatchCompleted,
					#[codec(index = 2)]
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					ItemCompleted,
					#[codec(index = 4)]
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_vesting {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					vest,
					#[codec(index = 1)]
					vest_other {
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
					},
					#[codec(index = 2)]
					vested_transfer {
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					force_vested_transfer {
						source: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						target: ::subxt::utils::MultiAddress<::sp_core::crypto::AccountId32, ()>,
						schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					merge_schedules {
						schedule1_index: ::core::primitive::u32,
						schedule2_index: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotVesting,
					#[codec(index = 1)]
					AtMaxVestingSchedules,
					#[codec(index = 2)]
					AmountLow,
					#[codec(index = 3)]
					ScheduleIndexOutOfBounds,
					#[codec(index = 4)]
					InvalidScheduleParams,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					VestingUpdated {
						account: ::sp_core::crypto::AccountId32,
						unvested: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					VestingCompleted { account: ::sp_core::crypto::AccountId32 },
				}
			}
			pub mod vesting_info {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct VestingInfo<_0, _1> {
					pub locked: _0,
					pub per_block: _0,
					pub starting_block: _1,
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Releases {
				#[codec(index = 0)]
				V0,
				#[codec(index = 1)]
				V1,
			}
		}
		pub mod pallet_whitelist {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					whitelist_call { call_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					remove_whitelisted_call { call_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					dispatch_whitelisted_call {
						call_hash: ::subxt::utils::H256,
						call_encoded_len: ::core::primitive::u32,
						call_weight_witness: ::sp_weights::Weight,
					},
					#[codec(index = 3)]
					dispatch_whitelisted_call_with_preimage {
						call: ::std::boxed::Box<runtime_types::kusama_runtime::RuntimeCall>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					UnavailablePreImage,
					#[codec(index = 1)]
					UndecodableCall,
					#[codec(index = 2)]
					InvalidCallWeightWitness,
					#[codec(index = 3)]
					CallIsNotWhitelisted,
					#[codec(index = 4)]
					CallAlreadyWhitelisted,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					CallWhitelisted { call_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					WhitelistedCallRemoved { call_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					WhitelistedCallDispatched {
						call_hash: ::subxt::utils::H256,
						result: ::core::result::Result<
							runtime_types::frame_support::dispatch::PostDispatchInfo,
							runtime_types::sp_runtime::DispatchErrorWithPostInfo<
								runtime_types::frame_support::dispatch::PostDispatchInfo,
							>,
						>,
					},
				}
			}
		}
		pub mod pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					send {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
					},
					#[codec(index = 1)]
					teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					execute {
						message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
						max_weight: ::sp_weights::Weight,
					},
					#[codec(index = 4)]
					force_xcm_version {
						location:
							::std::boxed::Box<runtime_types::xcm::v3::multilocation::MultiLocation>,
						xcm_version: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					force_default_xcm_version {
						maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					force_subscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 7)]
					force_unsubscribe_version_notify {
						location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
					},
					#[codec(index = 8)]
					limited_reserve_transfer_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 9)]
					limited_teleport_assets {
						dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
						assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 10)]
					force_suspension { suspended: ::core::primitive::bool },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					Unreachable,
					#[codec(index = 1)]
					SendFailure,
					#[codec(index = 2)]
					Filtered,
					#[codec(index = 3)]
					UnweighableMessage,
					#[codec(index = 4)]
					DestinationNotInvertible,
					#[codec(index = 5)]
					Empty,
					#[codec(index = 6)]
					CannotReanchor,
					#[codec(index = 7)]
					TooManyAssets,
					#[codec(index = 8)]
					InvalidOrigin,
					#[codec(index = 9)]
					BadVersion,
					#[codec(index = 10)]
					BadLocation,
					#[codec(index = 11)]
					NoSubscription,
					#[codec(index = 12)]
					AlreadySubscribed,
					#[codec(index = 13)]
					InvalidAsset,
					#[codec(index = 14)]
					LowBalance,
					#[codec(index = 15)]
					TooManyLocks,
					#[codec(index = 16)]
					AccountNotSovereign,
					#[codec(index = 17)]
					FeesNotMet,
					#[codec(index = 18)]
					LockNotFound,
					#[codec(index = 19)]
					InUse,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Attempted(runtime_types::xcm::v3::traits::Outcome),
					#[codec(index = 1)]
					Sent(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::Xcm,
					),
					#[codec(index = 2)]
					UnexpectedResponse(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 3)]
					ResponseReady(::core::primitive::u64, runtime_types::xcm::v3::Response),
					#[codec(index = 4)]
					Notified(::core::primitive::u64, ::core::primitive::u8, ::core::primitive::u8),
					#[codec(index = 5)]
					NotifyOverweight(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
						::sp_weights::Weight,
						::sp_weights::Weight,
					),
					#[codec(index = 6)]
					NotifyDispatchError(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 7)]
					NotifyDecodeFailed(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 8)]
					InvalidResponder(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
						::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 9)]
					InvalidResponderVersion(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 10)]
					ResponseTaken(::core::primitive::u64),
					#[codec(index = 11)]
					AssetsTrapped(
						::subxt::utils::H256,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::VersionedMultiAssets,
					),
					#[codec(index = 12)]
					VersionChangeNotified(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u32,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 13)]
					SupportedVersionChanged(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u32,
					),
					#[codec(index = 14)]
					NotifyTargetSendFail(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
						runtime_types::xcm::v3::traits::Error,
					),
					#[codec(index = 15)]
					NotifyTargetMigrationFail(
						runtime_types::xcm::VersionedMultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 16)]
					InvalidQuerierVersion(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 17)]
					InvalidQuerier(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 18)]
					VersionNotifyStarted(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 19)]
					VersionNotifyRequested(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 20)]
					VersionNotifyUnrequested(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 21)]
					FeesPaid(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 22)]
					AssetsClaimed(
						::subxt::utils::H256,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::VersionedMultiAssets,
					),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Origin {
					#[codec(index = 0)]
					Xcm(runtime_types::xcm::v3::multilocation::MultiLocation),
					#[codec(index = 1)]
					Response(runtime_types::xcm::v3::multilocation::MultiLocation),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum QueryStatus<_0> {
					#[codec(index = 0)]
					Pending {
						responder: runtime_types::xcm::VersionedMultiLocation,
						maybe_match_querier:
							::core::option::Option<runtime_types::xcm::VersionedMultiLocation>,
						maybe_notify:
							::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
						timeout: _0,
					},
					#[codec(index = 1)]
					VersionNotifier {
						origin: runtime_types::xcm::VersionedMultiLocation,
						is_active: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					Ready { response: runtime_types::xcm::VersionedResponse, at: _0 },
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct RemoteLockedFungibleRecord<_0> {
					pub amount: ::core::primitive::u128,
					pub owner: runtime_types::xcm::VersionedMultiLocation,
					pub locker: runtime_types::xcm::VersionedMultiLocation,
					pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_0,
						::core::primitive::u128,
					)>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum VersionMigrationStage {
					#[codec(index = 0)]
					MigrateSupportedVersion,
					#[codec(index = 1)]
					MigrateVersionNotifiers,
					#[codec(index = 2)]
					NotifyCurrentTargets(
						::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
					),
					#[codec(index = 3)]
					MigrateAndNotifyOldTargets,
				}
			}
		}
		pub mod polkadot_core_primitives {
			use super::runtime_types;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct CandidateHash(pub ::subxt::utils::H256);
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct InboundDownwardMessage<_0> {
				pub sent_at: _0,
				pub msg: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct InboundHrmpMessage<_0> {
				pub sent_at: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct OutboundHrmpMessage<_0> {
				pub recipient: _0,
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod polkadot_parachain {
			use super::runtime_types;
			pub mod primitives {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct HrmpChannelId {
					pub sender: runtime_types::polkadot_parachain::primitives::Id,
					pub recipient: runtime_types::polkadot_parachain::primitives::Id,
				}
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Id(pub ::core::primitive::u32);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ValidationCode(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ValidationCodeHash(pub ::subxt::utils::H256);
			}
		}
		pub mod polkadot_primitives {
			use super::runtime_types;
			pub mod v4 {
				use super::runtime_types;
				pub mod assignment_app {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
				}
				pub mod collator_app {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
				pub mod executor_params {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum ExecutorParam {
						#[codec(index = 1)]
						MaxMemoryPages(::core::primitive::u32),
						#[codec(index = 2)]
						StackLogicalMax(::core::primitive::u32),
						#[codec(index = 3)]
						StackNativeMax(::core::primitive::u32),
						#[codec(index = 4)]
						PrecheckingMaxMemory(::core::primitive::u64),
						#[codec(index = 5)]
						PvfPrepTimeout(
							runtime_types::polkadot_primitives::v4::PvfPrepTimeoutKind,
							::core::primitive::u64,
						),
						#[codec(index = 6)]
						PvfExecTimeout(
							runtime_types::polkadot_primitives::v4::PvfExecTimeoutKind,
							::core::primitive::u64,
						),
						#[codec(index = 7)]
						WasmExtBulkMemory,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct ExecutorParams(
						pub  ::std::vec::Vec<
							runtime_types::polkadot_primitives::v4::executor_params::ExecutorParam,
						>,
					);
				}
				pub mod signed {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct UncheckedSigned<_0, _1> {
						pub payload: _0,
						pub validator_index: runtime_types::polkadot_primitives::v4::ValidatorIndex,
						pub signature:
							runtime_types::polkadot_primitives::v4::validator_app::Signature,
						#[codec(skip)]
						pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
					}
				}
				pub mod validator_app {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct AvailabilityBitfield(
					pub  ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
				);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BackedCandidate<_0> {
					pub candidate:
						runtime_types::polkadot_primitives::v4::CommittedCandidateReceipt<_0>,
					pub validity_votes: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::ValidityAttestation,
					>,
					pub validator_indices: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct CandidateCommitments<_0> {
					pub upward_messages:
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::std::vec::Vec<::core::primitive::u8>,
						>,
					pub horizontal_messages:
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
								runtime_types::polkadot_parachain::primitives::Id,
							>,
						>,
					pub new_validation_code: ::core::option::Option<
						runtime_types::polkadot_parachain::primitives::ValidationCode,
					>,
					pub head_data: runtime_types::polkadot_parachain::primitives::HeadData,
					pub processed_downward_messages: _0,
					pub hrmp_watermark: _0,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct CandidateDescriptor<_0> {
					pub para_id: runtime_types::polkadot_parachain::primitives::Id,
					pub relay_parent: _0,
					pub collator: runtime_types::polkadot_primitives::v4::collator_app::Public,
					pub persisted_validation_data_hash: _0,
					pub pov_hash: _0,
					pub erasure_root: _0,
					pub signature: runtime_types::polkadot_primitives::v4::collator_app::Signature,
					pub para_head: _0,
					pub validation_code_hash:
						runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct CandidateReceipt<_0> {
					pub descriptor: runtime_types::polkadot_primitives::v4::CandidateDescriptor<_0>,
					pub commitments_hash: _0,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct CommittedCandidateReceipt<_0> {
					pub descriptor: runtime_types::polkadot_primitives::v4::CandidateDescriptor<_0>,
					pub commitments: runtime_types::polkadot_primitives::v4::CandidateCommitments<
						::core::primitive::u32,
					>,
				}
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct CoreIndex(pub ::core::primitive::u32);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum CoreOccupied {
					#[codec(index = 0)]
					Parathread(runtime_types::polkadot_primitives::v4::ParathreadEntry),
					#[codec(index = 1)]
					Parachain,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct DisputeState<_0> {
					pub validators_for: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
					pub validators_against: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
					pub start: _0,
					pub concluded_at: ::core::option::Option<_0>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum DisputeStatement {
					#[codec(index = 0)]
					Valid(runtime_types::polkadot_primitives::v4::ValidDisputeStatementKind),
					#[codec(index = 1)]
					Invalid(runtime_types::polkadot_primitives::v4::InvalidDisputeStatementKind),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct DisputeStatementSet {
					pub candidate_hash: runtime_types::polkadot_core_primitives::CandidateHash,
					pub session: ::core::primitive::u32,
					pub statements: ::std::vec::Vec<(
						runtime_types::polkadot_primitives::v4::DisputeStatement,
						runtime_types::polkadot_primitives::v4::ValidatorIndex,
						runtime_types::polkadot_primitives::v4::validator_app::Signature,
					)>,
				}
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct GroupIndex(pub ::core::primitive::u32);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct IndexedVec<_0, _1>(
					pub ::std::vec::Vec<_1>,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct InherentData<_0> {
					pub bitfields: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::signed::UncheckedSigned<
							runtime_types::polkadot_primitives::v4::AvailabilityBitfield,
							runtime_types::polkadot_primitives::v4::AvailabilityBitfield,
						>,
					>,
					pub backed_candidates: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::BackedCandidate<
							::subxt::utils::H256,
						>,
					>,
					pub disputes: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::DisputeStatementSet,
					>,
					pub parent_header: _0,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum InvalidDisputeStatementKind {
					#[codec(index = 0)]
					Explicit,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ParathreadClaim(
					pub runtime_types::polkadot_parachain::primitives::Id,
					pub runtime_types::polkadot_primitives::v4::collator_app::Public,
				);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ParathreadEntry {
					pub claim: runtime_types::polkadot_primitives::v4::ParathreadClaim,
					pub retries: ::core::primitive::u32,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PvfCheckStatement {
					pub accept: ::core::primitive::bool,
					pub subject: runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
					pub session_index: ::core::primitive::u32,
					pub validator_index: runtime_types::polkadot_primitives::v4::ValidatorIndex,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum PvfExecTimeoutKind {
					#[codec(index = 0)]
					Backing,
					#[codec(index = 1)]
					Approval,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum PvfPrepTimeoutKind {
					#[codec(index = 0)]
					Precheck,
					#[codec(index = 1)]
					Lenient,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ScrapedOnChainVotes<_0> {
					pub session: ::core::primitive::u32,
					pub backing_validators_per_candidate: ::std::vec::Vec<(
						runtime_types::polkadot_primitives::v4::CandidateReceipt<_0>,
						::std::vec::Vec<(
							runtime_types::polkadot_primitives::v4::ValidatorIndex,
							runtime_types::polkadot_primitives::v4::ValidityAttestation,
						)>,
					)>,
					pub disputes: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::DisputeStatementSet,
					>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SessionInfo {
					pub active_validator_indices:
						::std::vec::Vec<runtime_types::polkadot_primitives::v4::ValidatorIndex>,
					pub random_seed: [::core::primitive::u8; 32usize],
					pub dispute_period: ::core::primitive::u32,
					pub validators: runtime_types::polkadot_primitives::v4::IndexedVec<
						runtime_types::polkadot_primitives::v4::ValidatorIndex,
						runtime_types::polkadot_primitives::v4::validator_app::Public,
					>,
					pub discovery_keys:
						::std::vec::Vec<runtime_types::sp_authority_discovery::app::Public>,
					pub assignment_keys: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::assignment_app::Public,
					>,
					pub validator_groups: runtime_types::polkadot_primitives::v4::IndexedVec<
						runtime_types::polkadot_primitives::v4::GroupIndex,
						::std::vec::Vec<runtime_types::polkadot_primitives::v4::ValidatorIndex>,
					>,
					pub n_cores: ::core::primitive::u32,
					pub zeroth_delay_tranche_width: ::core::primitive::u32,
					pub relay_vrf_modulo_samples: ::core::primitive::u32,
					pub n_delay_tranches: ::core::primitive::u32,
					pub no_show_slots: ::core::primitive::u32,
					pub needed_approvals: ::core::primitive::u32,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum UpgradeGoAhead {
					#[codec(index = 0)]
					Abort,
					#[codec(index = 1)]
					GoAhead,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum UpgradeRestriction {
					#[codec(index = 0)]
					Present,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum ValidDisputeStatementKind {
					#[codec(index = 0)]
					Explicit,
					#[codec(index = 1)]
					BackingSeconded(::subxt::utils::H256),
					#[codec(index = 2)]
					BackingValid(::subxt::utils::H256),
					#[codec(index = 3)]
					ApprovalChecking,
				}
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct ValidatorIndex(pub ::core::primitive::u32);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum ValidityAttestation {
					#[codec(index = 1)]
					Implicit(runtime_types::polkadot_primitives::v4::validator_app::Signature),
					#[codec(index = 2)]
					Explicit(runtime_types::polkadot_primitives::v4::validator_app::Signature),
				}
			}
			pub mod vstaging {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct AsyncBackingParams {
					pub max_candidate_depth: ::core::primitive::u32,
					pub allowed_ancestry_len: ::core::primitive::u32,
				}
			}
		}
		pub mod polkadot_runtime_common {
			use super::runtime_types;
			pub mod auctions {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						new_auction {
							#[codec(compact)]
							duration: ::core::primitive::u32,
							#[codec(compact)]
							lease_period_index: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						bid {
							#[codec(compact)]
							para: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							auction_index: ::core::primitive::u32,
							#[codec(compact)]
							first_slot: ::core::primitive::u32,
							#[codec(compact)]
							last_slot: ::core::primitive::u32,
							#[codec(compact)]
							amount: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						cancel_auction,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						AuctionInProgress,
						#[codec(index = 1)]
						LeasePeriodInPast,
						#[codec(index = 2)]
						ParaNotRegistered,
						#[codec(index = 3)]
						NotCurrentAuction,
						#[codec(index = 4)]
						NotAuction,
						#[codec(index = 5)]
						AuctionEnded,
						#[codec(index = 6)]
						AlreadyLeasedOut,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						AuctionStarted {
							auction_index: ::core::primitive::u32,
							lease_period: ::core::primitive::u32,
							ending: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						AuctionClosed { auction_index: ::core::primitive::u32 },
						#[codec(index = 2)]
						Reserved {
							bidder: ::sp_core::crypto::AccountId32,
							extra_reserved: ::core::primitive::u128,
							total_amount: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						Unreserved {
							bidder: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 4)]
						ReserveConfiscated {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							leaser: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 5)]
						BidAccepted {
							bidder: ::sp_core::crypto::AccountId32,
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							amount: ::core::primitive::u128,
							first_slot: ::core::primitive::u32,
							last_slot: ::core::primitive::u32,
						},
						#[codec(index = 6)]
						WinningOffset {
							auction_index: ::core::primitive::u32,
							block_number: ::core::primitive::u32,
						},
					}
				}
			}
			pub mod claims {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						claim {
							dest: ::sp_core::crypto::AccountId32,
							ethereum_signature:
								runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
						},
						#[codec(index = 1)]
						mint_claim {
							who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							value: ::core::primitive::u128,
							vesting_schedule: ::core::option::Option<(
								::core::primitive::u128,
								::core::primitive::u128,
								::core::primitive::u32,
							)>,
							statement: ::core::option::Option<
								runtime_types::polkadot_runtime_common::claims::StatementKind,
							>,
						},
						#[codec(index = 2)]
						claim_attest {
							dest: ::sp_core::crypto::AccountId32,
							ethereum_signature:
								runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
							statement: ::std::vec::Vec<::core::primitive::u8>,
						},
						#[codec(index = 3)]
						attest { statement: ::std::vec::Vec<::core::primitive::u8> },
						#[codec(index = 4)]
						move_claim {
							old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							maybe_preclaim: ::core::option::Option<::sp_core::crypto::AccountId32>,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						InvalidEthereumSignature,
						#[codec(index = 1)]
						SignerHasNoClaim,
						#[codec(index = 2)]
						SenderHasNoClaim,
						#[codec(index = 3)]
						PotUnderflow,
						#[codec(index = 4)]
						InvalidStatement,
						#[codec(index = 5)]
						VestedBalanceExists,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						Claimed {
							who: ::sp_core::crypto::AccountId32,
							ethereum_address:
								runtime_types::polkadot_runtime_common::claims::EthereumAddress,
							amount: ::core::primitive::u128,
						},
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct EcdsaSignature(pub [::core::primitive::u8; 65usize]);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct EthereumAddress(pub [::core::primitive::u8; 20usize]);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum StatementKind {
					#[codec(index = 0)]
					Regular,
					#[codec(index = 1)]
					Saft,
				}
			}
			pub mod crowdloan {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						create {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							cap: ::core::primitive::u128,
							#[codec(compact)]
							first_period: ::core::primitive::u32,
							#[codec(compact)]
							last_period: ::core::primitive::u32,
							#[codec(compact)]
							end: ::core::primitive::u32,
							verifier:
								::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
						},
						#[codec(index = 1)]
						contribute {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							value: ::core::primitive::u128,
							signature:
								::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
						},
						#[codec(index = 2)]
						withdraw {
							who: ::sp_core::crypto::AccountId32,
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 3)]
						refund {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 4)]
						dissolve {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 5)]
						edit {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							#[codec(compact)]
							cap: ::core::primitive::u128,
							#[codec(compact)]
							first_period: ::core::primitive::u32,
							#[codec(compact)]
							last_period: ::core::primitive::u32,
							#[codec(compact)]
							end: ::core::primitive::u32,
							verifier:
								::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
						},
						#[codec(index = 6)]
						add_memo {
							index: runtime_types::polkadot_parachain::primitives::Id,
							memo: ::std::vec::Vec<::core::primitive::u8>,
						},
						#[codec(index = 7)]
						poke { index: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 8)]
						contribute_all {
							#[codec(compact)]
							index: runtime_types::polkadot_parachain::primitives::Id,
							signature:
								::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						FirstPeriodInPast,
						#[codec(index = 1)]
						FirstPeriodTooFarInFuture,
						#[codec(index = 2)]
						LastPeriodBeforeFirstPeriod,
						#[codec(index = 3)]
						LastPeriodTooFarInFuture,
						#[codec(index = 4)]
						CannotEndInPast,
						#[codec(index = 5)]
						EndTooFarInFuture,
						#[codec(index = 6)]
						Overflow,
						#[codec(index = 7)]
						ContributionTooSmall,
						#[codec(index = 8)]
						InvalidParaId,
						#[codec(index = 9)]
						CapExceeded,
						#[codec(index = 10)]
						ContributionPeriodOver,
						#[codec(index = 11)]
						InvalidOrigin,
						#[codec(index = 12)]
						NotParachain,
						#[codec(index = 13)]
						LeaseActive,
						#[codec(index = 14)]
						BidOrLeaseActive,
						#[codec(index = 15)]
						FundNotEnded,
						#[codec(index = 16)]
						NoContributions,
						#[codec(index = 17)]
						NotReadyToDissolve,
						#[codec(index = 18)]
						InvalidSignature,
						#[codec(index = 19)]
						MemoTooLarge,
						#[codec(index = 20)]
						AlreadyInNewRaise,
						#[codec(index = 21)]
						VrfDelayInProgress,
						#[codec(index = 22)]
						NoLeasePeriod,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						Created { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 1)]
						Contributed {
							who: ::sp_core::crypto::AccountId32,
							fund_index: runtime_types::polkadot_parachain::primitives::Id,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						Withdrew {
							who: ::sp_core::crypto::AccountId32,
							fund_index: runtime_types::polkadot_parachain::primitives::Id,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						PartiallyRefunded {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 4)]
						AllRefunded { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 5)]
						Dissolved { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 6)]
						HandleBidResult {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							result: ::core::result::Result<
								(),
								runtime_types::sp_runtime::DispatchError,
							>,
						},
						#[codec(index = 7)]
						Edited { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 8)]
						MemoUpdated {
							who: ::sp_core::crypto::AccountId32,
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							memo: ::std::vec::Vec<::core::primitive::u8>,
						},
						#[codec(index = 9)]
						AddedToNewRaise {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
						},
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct FundInfo<_0, _1, _2, _3> {
					pub depositor: _0,
					pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
					pub deposit: _1,
					pub raised: _1,
					pub end: _2,
					pub cap: _1,
					pub last_contribution:
						runtime_types::polkadot_runtime_common::crowdloan::LastContribution<_2>,
					pub first_period: _2,
					pub last_period: _2,
					pub fund_index: _2,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum LastContribution<_0> {
					#[codec(index = 0)]
					Never,
					#[codec(index = 1)]
					PreEnding(_0),
					#[codec(index = 2)]
					Ending(_0),
				}
			}
			pub mod paras_registrar {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						register {
							id: runtime_types::polkadot_parachain::primitives::Id,
							genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
							validation_code:
								runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 1)]
						force_register {
							who: ::sp_core::crypto::AccountId32,
							deposit: ::core::primitive::u128,
							id: runtime_types::polkadot_parachain::primitives::Id,
							genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
							validation_code:
								runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 2)]
						deregister { id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 3)]
						swap {
							id: runtime_types::polkadot_parachain::primitives::Id,
							other: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 4)]
						remove_lock { para: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 5)]
						reserve,
						#[codec(index = 6)]
						add_lock { para: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 7)]
						schedule_code_upgrade {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 8)]
						set_current_head {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_head: runtime_types::polkadot_parachain::primitives::HeadData,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						NotRegistered,
						#[codec(index = 1)]
						AlreadyRegistered,
						#[codec(index = 2)]
						NotOwner,
						#[codec(index = 3)]
						CodeTooLarge,
						#[codec(index = 4)]
						HeadDataTooLarge,
						#[codec(index = 5)]
						NotParachain,
						#[codec(index = 6)]
						NotParathread,
						#[codec(index = 7)]
						CannotDeregister,
						#[codec(index = 8)]
						CannotDowngrade,
						#[codec(index = 9)]
						CannotUpgrade,
						#[codec(index = 10)]
						ParaLocked,
						#[codec(index = 11)]
						NotReserved,
						#[codec(index = 12)]
						EmptyCode,
						#[codec(index = 13)]
						CannotSwap,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						Registered {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							manager: ::sp_core::crypto::AccountId32,
						},
						#[codec(index = 1)]
						Deregistered { para_id: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 2)]
						Reserved {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							who: ::sp_core::crypto::AccountId32,
						},
						#[codec(index = 3)]
						Swapped {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							other_id: runtime_types::polkadot_parachain::primitives::Id,
						},
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ParaInfo<_0, _1> {
					pub manager: _0,
					pub deposit: _1,
					pub locked: ::core::primitive::bool,
				}
			}
			pub mod slots {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						force_lease {
							para: runtime_types::polkadot_parachain::primitives::Id,
							leaser: ::sp_core::crypto::AccountId32,
							amount: ::core::primitive::u128,
							period_begin: ::core::primitive::u32,
							period_count: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						clear_all_leases { para: runtime_types::polkadot_parachain::primitives::Id },
						#[codec(index = 2)]
						trigger_onboard { para: runtime_types::polkadot_parachain::primitives::Id },
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						ParaNotOnboarding,
						#[codec(index = 1)]
						LeaseError,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						NewLeasePeriod { lease_period: ::core::primitive::u32 },
						#[codec(index = 1)]
						Leased {
							para_id: runtime_types::polkadot_parachain::primitives::Id,
							leaser: ::sp_core::crypto::AccountId32,
							period_begin: ::core::primitive::u32,
							period_count: ::core::primitive::u32,
							extra_reserved: ::core::primitive::u128,
							total_amount: ::core::primitive::u128,
						},
					}
				}
			}
		}
		pub mod polkadot_runtime_parachains {
			use super::runtime_types;
			pub mod configuration {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						# [codec (index = 0)] set_validation_upgrade_cooldown { new : :: core :: primitive :: u32 , } , # [codec (index = 1)] set_validation_upgrade_delay { new : :: core :: primitive :: u32 , } , # [codec (index = 2)] set_code_retention_period { new : :: core :: primitive :: u32 , } , # [codec (index = 3)] set_max_code_size { new : :: core :: primitive :: u32 , } , # [codec (index = 4)] set_max_pov_size { new : :: core :: primitive :: u32 , } , # [codec (index = 5)] set_max_head_data_size { new : :: core :: primitive :: u32 , } , # [codec (index = 6)] set_parathread_cores { new : :: core :: primitive :: u32 , } , # [codec (index = 7)] set_parathread_retries { new : :: core :: primitive :: u32 , } , # [codec (index = 8)] set_group_rotation_frequency { new : :: core :: primitive :: u32 , } , # [codec (index = 9)] set_chain_availability_period { new : :: core :: primitive :: u32 , } , # [codec (index = 10)] set_thread_availability_period { new : :: core :: primitive :: u32 , } , # [codec (index = 11)] set_scheduling_lookahead { new : :: core :: primitive :: u32 , } , # [codec (index = 12)] set_max_validators_per_core { new : :: core :: option :: Option < :: core :: primitive :: u32 > , } , # [codec (index = 13)] set_max_validators { new : :: core :: option :: Option < :: core :: primitive :: u32 > , } , # [codec (index = 14)] set_dispute_period { new : :: core :: primitive :: u32 , } , # [codec (index = 15)] set_dispute_post_conclusion_acceptance_period { new : :: core :: primitive :: u32 , } , # [codec (index = 18)] set_no_show_slots { new : :: core :: primitive :: u32 , } , # [codec (index = 19)] set_n_delay_tranches { new : :: core :: primitive :: u32 , } , # [codec (index = 20)] set_zeroth_delay_tranche_width { new : :: core :: primitive :: u32 , } , # [codec (index = 21)] set_needed_approvals { new : :: core :: primitive :: u32 , } , # [codec (index = 22)] set_relay_vrf_modulo_samples { new : :: core :: primitive :: u32 , } , # [codec (index = 23)] set_max_upward_queue_count { new : :: core :: primitive :: u32 , } , # [codec (index = 24)] set_max_upward_queue_size { new : :: core :: primitive :: u32 , } , # [codec (index = 25)] set_max_downward_message_size { new : :: core :: primitive :: u32 , } , # [codec (index = 27)] set_max_upward_message_size { new : :: core :: primitive :: u32 , } , # [codec (index = 28)] set_max_upward_message_num_per_candidate { new : :: core :: primitive :: u32 , } , # [codec (index = 29)] set_hrmp_open_request_ttl { new : :: core :: primitive :: u32 , } , # [codec (index = 30)] set_hrmp_sender_deposit { new : :: core :: primitive :: u128 , } , # [codec (index = 31)] set_hrmp_recipient_deposit { new : :: core :: primitive :: u128 , } , # [codec (index = 32)] set_hrmp_channel_max_capacity { new : :: core :: primitive :: u32 , } , # [codec (index = 33)] set_hrmp_channel_max_total_size { new : :: core :: primitive :: u32 , } , # [codec (index = 34)] set_hrmp_max_parachain_inbound_channels { new : :: core :: primitive :: u32 , } , # [codec (index = 35)] set_hrmp_max_parathread_inbound_channels { new : :: core :: primitive :: u32 , } , # [codec (index = 36)] set_hrmp_channel_max_message_size { new : :: core :: primitive :: u32 , } , # [codec (index = 37)] set_hrmp_max_parachain_outbound_channels { new : :: core :: primitive :: u32 , } , # [codec (index = 38)] set_hrmp_max_parathread_outbound_channels { new : :: core :: primitive :: u32 , } , # [codec (index = 39)] set_hrmp_max_message_num_per_candidate { new : :: core :: primitive :: u32 , } , # [codec (index = 41)] set_pvf_checking_enabled { new : :: core :: primitive :: bool , } , # [codec (index = 42)] set_pvf_voting_ttl { new : :: core :: primitive :: u32 , } , # [codec (index = 43)] set_minimum_validation_upgrade_delay { new : :: core :: primitive :: u32 , } , # [codec (index = 44)] set_bypass_consistency_check { new : :: core :: primitive :: bool , } , # [codec (index = 45)] set_async_backing_params { new : runtime_types :: polkadot_primitives :: vstaging :: AsyncBackingParams , } , # [codec (index = 46)] set_executor_params { new : runtime_types :: polkadot_primitives :: v4 :: executor_params :: ExecutorParams , } , }
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						InvalidNewValue,
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct HostConfiguration<_0> {
					pub max_code_size: _0,
					pub max_head_data_size: _0,
					pub max_upward_queue_count: _0,
					pub max_upward_queue_size: _0,
					pub max_upward_message_size: _0,
					pub max_upward_message_num_per_candidate: _0,
					pub hrmp_max_message_num_per_candidate: _0,
					pub validation_upgrade_cooldown: _0,
					pub validation_upgrade_delay: _0,
					pub async_backing_params:
						runtime_types::polkadot_primitives::vstaging::AsyncBackingParams,
					pub max_pov_size: _0,
					pub max_downward_message_size: _0,
					pub hrmp_max_parachain_outbound_channels: _0,
					pub hrmp_max_parathread_outbound_channels: _0,
					pub hrmp_sender_deposit: ::core::primitive::u128,
					pub hrmp_recipient_deposit: ::core::primitive::u128,
					pub hrmp_channel_max_capacity: _0,
					pub hrmp_channel_max_total_size: _0,
					pub hrmp_max_parachain_inbound_channels: _0,
					pub hrmp_max_parathread_inbound_channels: _0,
					pub hrmp_channel_max_message_size: _0,
					pub executor_params:
						runtime_types::polkadot_primitives::v4::executor_params::ExecutorParams,
					pub code_retention_period: _0,
					pub parathread_cores: _0,
					pub parathread_retries: _0,
					pub group_rotation_frequency: _0,
					pub chain_availability_period: _0,
					pub thread_availability_period: _0,
					pub scheduling_lookahead: _0,
					pub max_validators_per_core: ::core::option::Option<_0>,
					pub max_validators: ::core::option::Option<_0>,
					pub dispute_period: _0,
					pub dispute_post_conclusion_acceptance_period: _0,
					pub no_show_slots: _0,
					pub n_delay_tranches: _0,
					pub zeroth_delay_tranche_width: _0,
					pub needed_approvals: _0,
					pub relay_vrf_modulo_samples: _0,
					pub pvf_checking_enabled: ::core::primitive::bool,
					pub pvf_voting_ttl: _0,
					pub minimum_validation_upgrade_delay: _0,
				}
			}
			pub mod disputes {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						force_unfreeze,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						DuplicateDisputeStatementSets,
						#[codec(index = 1)]
						AncientDisputeStatement,
						#[codec(index = 2)]
						ValidatorIndexOutOfBounds,
						#[codec(index = 3)]
						InvalidSignature,
						#[codec(index = 4)]
						DuplicateStatement,
						#[codec(index = 5)]
						SingleSidedDispute,
						#[codec(index = 6)]
						MaliciousBacker,
						#[codec(index = 7)]
						MissingBackingVotes,
						#[codec(index = 8)]
						UnconfirmedDispute,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						DisputeInitiated(
							runtime_types::polkadot_core_primitives::CandidateHash,
							runtime_types::polkadot_runtime_parachains::disputes::DisputeLocation,
						),
						#[codec(index = 1)]
						DisputeConcluded(
							runtime_types::polkadot_core_primitives::CandidateHash,
							runtime_types::polkadot_runtime_parachains::disputes::DisputeResult,
						),
						#[codec(index = 2)]
						Revert(::core::primitive::u32),
					}
				}
				pub mod slashing {
					use super::runtime_types;
					pub mod pallet {
						use super::runtime_types;
						#[derive(
							:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq,
						)]
						pub enum Call {
							# [codec (index = 0)] report_dispute_lost_unsigned { dispute_proof : :: std :: boxed :: Box < runtime_types :: polkadot_runtime_parachains :: disputes :: slashing :: DisputeProof > , key_owner_proof : :: sp_session :: MembershipProof , } , }
						#[derive(
							:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq,
						)]
						pub enum Error {
							#[codec(index = 0)]
							InvalidKeyOwnershipProof,
							#[codec(index = 1)]
							InvalidSessionIndex,
							#[codec(index = 2)]
							InvalidCandidateHash,
							#[codec(index = 3)]
							InvalidValidatorIndex,
							#[codec(index = 4)]
							ValidatorIndexIdMismatch,
							#[codec(index = 5)]
							DuplicateSlashingReport,
						}
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct DisputeProof { pub time_slot : runtime_types :: polkadot_runtime_parachains :: disputes :: slashing :: DisputesTimeSlot , pub kind : runtime_types :: polkadot_runtime_parachains :: disputes :: slashing :: SlashingOffenceKind , pub validator_index : runtime_types :: polkadot_primitives :: v4 :: ValidatorIndex , pub validator_id : runtime_types :: polkadot_primitives :: v4 :: validator_app :: Public , }
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct DisputesTimeSlot {
						pub session_index: ::core::primitive::u32,
						pub candidate_hash: runtime_types::polkadot_core_primitives::CandidateHash,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct PendingSlashes { pub keys : :: subxt :: utils :: KeyedVec < runtime_types :: polkadot_primitives :: v4 :: ValidatorIndex , runtime_types :: polkadot_primitives :: v4 :: validator_app :: Public > , pub kind : runtime_types :: polkadot_runtime_parachains :: disputes :: slashing :: SlashingOffenceKind , }
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum SlashingOffenceKind {
						#[codec(index = 0)]
						ForInvalid,
						#[codec(index = 1)]
						AgainstValid,
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum DisputeLocation {
					#[codec(index = 0)]
					Local,
					#[codec(index = 1)]
					Remote,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum DisputeResult {
					#[codec(index = 0)]
					Valid,
					#[codec(index = 1)]
					Invalid,
				}
			}
			pub mod hrmp {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						hrmp_init_open_channel {
							recipient: runtime_types::polkadot_parachain::primitives::Id,
							proposed_max_capacity: ::core::primitive::u32,
							proposed_max_message_size: ::core::primitive::u32,
						},
						#[codec(index = 1)]
						hrmp_accept_open_channel {
							sender: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 2)]
						hrmp_close_channel {
							channel_id:
								runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						},
						#[codec(index = 3)]
						force_clean_hrmp {
							para: runtime_types::polkadot_parachain::primitives::Id,
							inbound: ::core::primitive::u32,
							outbound: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						force_process_hrmp_open { channels: ::core::primitive::u32 },
						#[codec(index = 5)]
						force_process_hrmp_close { channels: ::core::primitive::u32 },
						#[codec(index = 6)]
						hrmp_cancel_open_request {
							channel_id:
								runtime_types::polkadot_parachain::primitives::HrmpChannelId,
							open_requests: ::core::primitive::u32,
						},
						#[codec(index = 7)]
						force_open_hrmp_channel {
							sender: runtime_types::polkadot_parachain::primitives::Id,
							recipient: runtime_types::polkadot_parachain::primitives::Id,
							max_capacity: ::core::primitive::u32,
							max_message_size: ::core::primitive::u32,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						OpenHrmpChannelToSelf,
						#[codec(index = 1)]
						OpenHrmpChannelInvalidRecipient,
						#[codec(index = 2)]
						OpenHrmpChannelZeroCapacity,
						#[codec(index = 3)]
						OpenHrmpChannelCapacityExceedsLimit,
						#[codec(index = 4)]
						OpenHrmpChannelZeroMessageSize,
						#[codec(index = 5)]
						OpenHrmpChannelMessageSizeExceedsLimit,
						#[codec(index = 6)]
						OpenHrmpChannelAlreadyExists,
						#[codec(index = 7)]
						OpenHrmpChannelAlreadyRequested,
						#[codec(index = 8)]
						OpenHrmpChannelLimitExceeded,
						#[codec(index = 9)]
						AcceptHrmpChannelDoesntExist,
						#[codec(index = 10)]
						AcceptHrmpChannelAlreadyConfirmed,
						#[codec(index = 11)]
						AcceptHrmpChannelLimitExceeded,
						#[codec(index = 12)]
						CloseHrmpChannelUnauthorized,
						#[codec(index = 13)]
						CloseHrmpChannelDoesntExist,
						#[codec(index = 14)]
						CloseHrmpChannelAlreadyUnderway,
						#[codec(index = 15)]
						CancelHrmpOpenChannelUnauthorized,
						#[codec(index = 16)]
						OpenHrmpChannelDoesntExist,
						#[codec(index = 17)]
						OpenHrmpChannelAlreadyConfirmed,
						#[codec(index = 18)]
						WrongWitness,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						OpenChannelRequested(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
							::core::primitive::u32,
						),
						#[codec(index = 1)]
						OpenChannelCanceled(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						),
						#[codec(index = 2)]
						OpenChannelAccepted(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::Id,
						),
						#[codec(index = 3)]
						ChannelClosed(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::HrmpChannelId,
						),
						#[codec(index = 4)]
						HrmpChannelForceOpened(
							runtime_types::polkadot_parachain::primitives::Id,
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
							::core::primitive::u32,
						),
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct HrmpChannel {
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
					pub max_message_size: ::core::primitive::u32,
					pub msg_count: ::core::primitive::u32,
					pub total_size: ::core::primitive::u32,
					pub mqc_head: ::core::option::Option<::subxt::utils::H256>,
					pub sender_deposit: ::core::primitive::u128,
					pub recipient_deposit: ::core::primitive::u128,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct HrmpOpenChannelRequest {
					pub confirmed: ::core::primitive::bool,
					pub _age: ::core::primitive::u32,
					pub sender_deposit: ::core::primitive::u128,
					pub max_message_size: ::core::primitive::u32,
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
				}
			}
			pub mod inclusion {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						UnsortedOrDuplicateValidatorIndices,
						#[codec(index = 1)]
						UnsortedOrDuplicateDisputeStatementSet,
						#[codec(index = 2)]
						UnsortedOrDuplicateBackedCandidates,
						#[codec(index = 3)]
						UnexpectedRelayParent,
						#[codec(index = 4)]
						WrongBitfieldSize,
						#[codec(index = 5)]
						BitfieldAllZeros,
						#[codec(index = 6)]
						BitfieldDuplicateOrUnordered,
						#[codec(index = 7)]
						ValidatorIndexOutOfBounds,
						#[codec(index = 8)]
						InvalidBitfieldSignature,
						#[codec(index = 9)]
						UnscheduledCandidate,
						#[codec(index = 10)]
						CandidateScheduledBeforeParaFree,
						#[codec(index = 11)]
						WrongCollator,
						#[codec(index = 12)]
						ScheduledOutOfOrder,
						#[codec(index = 13)]
						HeadDataTooLarge,
						#[codec(index = 14)]
						PrematureCodeUpgrade,
						#[codec(index = 15)]
						NewCodeTooLarge,
						#[codec(index = 16)]
						CandidateNotInParentContext,
						#[codec(index = 17)]
						InvalidGroupIndex,
						#[codec(index = 18)]
						InsufficientBacking,
						#[codec(index = 19)]
						InvalidBacking,
						#[codec(index = 20)]
						NotCollatorSigned,
						#[codec(index = 21)]
						ValidationDataHashMismatch,
						#[codec(index = 22)]
						IncorrectDownwardMessageHandling,
						#[codec(index = 23)]
						InvalidUpwardMessages,
						#[codec(index = 24)]
						HrmpWatermarkMishandling,
						#[codec(index = 25)]
						InvalidOutboundHrmp,
						#[codec(index = 26)]
						InvalidValidationCodeHash,
						#[codec(index = 27)]
						ParaHeadMismatch,
						#[codec(index = 28)]
						BitfieldReferencesFreedCore,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						CandidateBacked(
							runtime_types::polkadot_primitives::v4::CandidateReceipt<
								::subxt::utils::H256,
							>,
							runtime_types::polkadot_parachain::primitives::HeadData,
							runtime_types::polkadot_primitives::v4::CoreIndex,
							runtime_types::polkadot_primitives::v4::GroupIndex,
						),
						#[codec(index = 1)]
						CandidateIncluded(
							runtime_types::polkadot_primitives::v4::CandidateReceipt<
								::subxt::utils::H256,
							>,
							runtime_types::polkadot_parachain::primitives::HeadData,
							runtime_types::polkadot_primitives::v4::CoreIndex,
							runtime_types::polkadot_primitives::v4::GroupIndex,
						),
						#[codec(index = 2)]
						CandidateTimedOut(
							runtime_types::polkadot_primitives::v4::CandidateReceipt<
								::subxt::utils::H256,
							>,
							runtime_types::polkadot_parachain::primitives::HeadData,
							runtime_types::polkadot_primitives::v4::CoreIndex,
						),
						#[codec(index = 3)]
						UpwardMessagesReceived {
							from: runtime_types::polkadot_parachain::primitives::Id,
							count: ::core::primitive::u32,
						},
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum AggregateMessageOrigin {
					#[codec(index = 0)]
					Ump(runtime_types::polkadot_runtime_parachains::inclusion::UmpQueueId),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct AvailabilityBitfieldRecord<_0> {
					pub bitfield: runtime_types::polkadot_primitives::v4::AvailabilityBitfield,
					pub submitted_at: _0,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct CandidatePendingAvailability<_0, _1> {
					pub core: runtime_types::polkadot_primitives::v4::CoreIndex,
					pub hash: runtime_types::polkadot_core_primitives::CandidateHash,
					pub descriptor: runtime_types::polkadot_primitives::v4::CandidateDescriptor<_0>,
					pub availability_votes: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
					pub backers: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
					pub relay_parent_number: _1,
					pub backed_in_number: _1,
					pub backing_group: runtime_types::polkadot_primitives::v4::GroupIndex,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum UmpQueueId {
					#[codec(index = 0)]
					Para(runtime_types::polkadot_parachain::primitives::Id),
				}
			}
			pub mod initializer {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						force_approve { up_to: ::core::primitive::u32 },
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct BufferedSessionChange {
					pub validators: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::validator_app::Public,
					>,
					pub queued: ::std::vec::Vec<
						runtime_types::polkadot_primitives::v4::validator_app::Public,
					>,
					pub session_index: ::core::primitive::u32,
				}
			}
			pub mod origin {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Origin {
						#[codec(index = 0)]
						Parachain(runtime_types::polkadot_parachain::primitives::Id),
					}
				}
			}
			pub mod paras {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						force_set_current_code {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 1)]
						force_set_current_head {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_head: runtime_types::polkadot_parachain::primitives::HeadData,
						},
						#[codec(index = 2)]
						force_schedule_code_upgrade {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
							relay_parent_number: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						force_note_new_head {
							para: runtime_types::polkadot_parachain::primitives::Id,
							new_head: runtime_types::polkadot_parachain::primitives::HeadData,
						},
						#[codec(index = 4)]
						force_queue_action {
							para: runtime_types::polkadot_parachain::primitives::Id,
						},
						#[codec(index = 5)]
						add_trusted_validation_code {
							validation_code:
								runtime_types::polkadot_parachain::primitives::ValidationCode,
						},
						#[codec(index = 6)]
						poke_unused_validation_code {
							validation_code_hash:
								runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
						},
						#[codec(index = 7)]
						include_pvf_check_statement {
							stmt: runtime_types::polkadot_primitives::v4::PvfCheckStatement,
							signature:
								runtime_types::polkadot_primitives::v4::validator_app::Signature,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						NotRegistered,
						#[codec(index = 1)]
						CannotOnboard,
						#[codec(index = 2)]
						CannotOffboard,
						#[codec(index = 3)]
						CannotUpgrade,
						#[codec(index = 4)]
						CannotDowngrade,
						#[codec(index = 5)]
						PvfCheckStatementStale,
						#[codec(index = 6)]
						PvfCheckStatementFuture,
						#[codec(index = 7)]
						PvfCheckValidatorIndexOutOfBounds,
						#[codec(index = 8)]
						PvfCheckInvalidSignature,
						#[codec(index = 9)]
						PvfCheckDoubleVote,
						#[codec(index = 10)]
						PvfCheckSubjectInvalid,
						#[codec(index = 11)]
						CannotUpgradeCode,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Event {
						#[codec(index = 0)]
						CurrentCodeUpdated(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 1)]
						CurrentHeadUpdated(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 2)]
						CodeUpgradeScheduled(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 3)]
						NewHeadNoted(runtime_types::polkadot_parachain::primitives::Id),
						#[codec(index = 4)]
						ActionQueued(
							runtime_types::polkadot_parachain::primitives::Id,
							::core::primitive::u32,
						),
						#[codec(index = 5)]
						PvfCheckStarted(
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
							runtime_types::polkadot_parachain::primitives::Id,
						),
						#[codec(index = 6)]
						PvfCheckAccepted(
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
							runtime_types::polkadot_parachain::primitives::Id,
						),
						#[codec(index = 7)]
						PvfCheckRejected(
							runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
							runtime_types::polkadot_parachain::primitives::Id,
						),
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ParaGenesisArgs {
					pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
					pub validation_code:
						runtime_types::polkadot_parachain::primitives::ValidationCode,
					pub para_kind: ::core::primitive::bool,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum ParaLifecycle {
					#[codec(index = 0)]
					Onboarding,
					#[codec(index = 1)]
					Parathread,
					#[codec(index = 2)]
					Parachain,
					#[codec(index = 3)]
					UpgradingParathread,
					#[codec(index = 4)]
					DowngradingParachain,
					#[codec(index = 5)]
					OffboardingParathread,
					#[codec(index = 6)]
					OffboardingParachain,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ParaPastCodeMeta<_0> {
					pub upgrade_times: ::std::vec::Vec<
						runtime_types::polkadot_runtime_parachains::paras::ReplacementTimes<_0>,
					>,
					pub last_pruned: ::core::option::Option<_0>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PvfCheckActiveVoteState<_0> {
					pub votes_accept: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
					pub votes_reject: ::subxt::utils::bits::DecodedBits<
						::core::primitive::u8,
						::subxt::utils::bits::Lsb0,
					>,
					pub age: _0,
					pub created_at: _0,
					pub causes: ::std::vec::Vec<
						runtime_types::polkadot_runtime_parachains::paras::PvfCheckCause<_0>,
					>,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum PvfCheckCause<_0> {
					#[codec(index = 0)]
					Onboarding(runtime_types::polkadot_parachain::primitives::Id),
					#[codec(index = 1)]
					Upgrade {
						id: runtime_types::polkadot_parachain::primitives::Id,
						relay_parent_number: _0,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ReplacementTimes<_0> {
					pub expected_at: _0,
					pub activated_at: _0,
				}
			}
			pub mod paras_inherent {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {
						#[codec(index = 0)]
						enter {
							data: runtime_types::polkadot_primitives::v4::InherentData<
								::sp_runtime::generic::Header<
									::core::primitive::u32,
									::sp_runtime::traits::BlakeTwo256,
								>,
							>,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						TooManyInclusionInherents,
						#[codec(index = 1)]
						InvalidParentHeader,
						#[codec(index = 2)]
						CandidateConcludedInvalid,
						#[codec(index = 3)]
						InherentOverweight,
						#[codec(index = 4)]
						DisputeStatementsUnsortedOrDuplicates,
						#[codec(index = 5)]
						DisputeInvalid,
					}
				}
			}
			pub mod scheduler {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum AssignmentKind {
					#[codec(index = 0)]
					Parachain,
					#[codec(index = 1)]
					Parathread(
						runtime_types::polkadot_primitives::v4::collator_app::Public,
						::core::primitive::u32,
					),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct CoreAssignment {
					pub core: runtime_types::polkadot_primitives::v4::CoreIndex,
					pub para_id: runtime_types::polkadot_parachain::primitives::Id,
					pub kind: runtime_types::polkadot_runtime_parachains::scheduler::AssignmentKind,
					pub group_idx: runtime_types::polkadot_primitives::v4::GroupIndex,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct ParathreadClaimQueue {
					pub queue: ::std::vec::Vec<
						runtime_types::polkadot_runtime_parachains::scheduler::QueuedParathread,
					>,
					pub next_core_offset: ::core::primitive::u32,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct QueuedParathread {
					pub claim: runtime_types::polkadot_primitives::v4::ParathreadEntry,
					pub core_offset: ::core::primitive::u32,
				}
			}
			pub mod shared {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Call {}
				}
			}
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct FixedI64(pub ::core::primitive::i64);
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct PerU16(pub ::core::primitive::u16);
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Percent(pub ::core::primitive::u8);
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Permill(pub ::core::primitive::u32);
				#[derive(
					:: codec :: Decode,
					:: codec :: Encode,
					:: subxt :: ext :: codec :: CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Perquintill(pub ::core::primitive::u64);
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
		}
		pub mod sp_authority_discovery {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub runtime_types::sp_core::sr25519::Public);
			}
		}
		pub mod sp_consensus_babe {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub runtime_types::sp_core::sr25519::Public);
			}
			pub mod digests {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum NextConfigDescriptor {
					#[codec(index = 1)]
					V1 {
						c: (::core::primitive::u64, ::core::primitive::u64),
						allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum PreDigest {
					#[codec(index = 1)]
					Primary(runtime_types::sp_consensus_babe::digests::PrimaryPreDigest),
					#[codec(index = 2)]
					SecondaryPlain(
						runtime_types::sp_consensus_babe::digests::SecondaryPlainPreDigest,
					),
					#[codec(index = 3)]
					SecondaryVRF(runtime_types::sp_consensus_babe::digests::SecondaryVRFPreDigest),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PrimaryPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
					pub vrf_signature: runtime_types::sp_core::sr25519::vrf::VrfSignature,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SecondaryPlainPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct SecondaryVRFPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
					pub vrf_signature: runtime_types::sp_core::sr25519::vrf::VrfSignature,
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum AllowedSlots {
				#[codec(index = 0)]
				PrimarySlots,
				#[codec(index = 1)]
				PrimaryAndSecondaryPlainSlots,
				#[codec(index = 2)]
				PrimaryAndSecondaryVRFSlots,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct BabeEpochConfiguration {
				pub c: (::core::primitive::u64, ::core::primitive::u64),
				pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
			}
		}
		pub mod sp_consensus_grandpa {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub runtime_types::sp_core::ed25519::Public);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Equivocation<_0, _1> {
				#[codec(index = 0)]
				Prevote(
					runtime_types::finality_grandpa::Equivocation<
						runtime_types::sp_consensus_grandpa::app::Public,
						runtime_types::finality_grandpa::Prevote<_0, _1>,
						runtime_types::sp_consensus_grandpa::app::Signature,
					>,
				),
				#[codec(index = 1)]
				Precommit(
					runtime_types::finality_grandpa::Equivocation<
						runtime_types::sp_consensus_grandpa::app::Public,
						runtime_types::finality_grandpa::Precommit<_0, _1>,
						runtime_types::sp_consensus_grandpa::app::Signature,
					>,
				),
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct EquivocationProof<_0, _1> {
				pub offender: _1,
				pub slot: runtime_types::sp_consensus_slots::Slot,
				pub first_header: _0,
				pub second_header: _0,
			}
			#[derive(
				:: codec :: Decode,
				:: codec :: Encode,
				:: subxt :: ext :: codec :: CompactAs,
				Clone,
				Debug,
				PartialEq,
			)]
			pub struct Slot(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			pub mod ecdsa {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub [::core::primitive::u8; 33usize]);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Signature(pub [::core::primitive::u8; 65usize]);
			}
			pub mod ed25519 {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			pub mod offchain {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct OpaqueMultiaddr(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct OpaqueNetworkState {
					pub peer_id: runtime_types::sp_core::OpaquePeerId,
					pub external_addresses:
						::std::vec::Vec<runtime_types::sp_core::offchain::OpaqueMultiaddr>,
				}
			}
			pub mod sr25519 {
				use super::runtime_types;
				pub mod vrf {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct VrfSignature {
						pub output: [::core::primitive::u8; 32usize],
						pub proof: [::core::primitive::u8; 64usize],
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum Void {}
		}
		pub mod sp_npos_elections {
			use super::runtime_types;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ElectionScore {
				pub minimal_stake: ::core::primitive::u128,
				pub sum_stake: ::core::primitive::u128,
				pub sum_stake_squared: ::core::primitive::u128,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct Support<_0> {
				pub total: ::core::primitive::u128,
				pub voters: ::std::vec::Vec<(_0, ::core::primitive::u128)>,
			}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod generic {
				use super::runtime_types;
				pub mod digest {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
				pub mod unchecked_extrinsic {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
						pub ::std::vec::Vec<::core::primitive::u8>,
						#[codec(skip)] pub ::core::marker::PhantomData<(_1, _0, _2, _3)>,
					);
				}
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
				#[codec(index = 10)]
				Exhausted,
				#[codec(index = 11)]
				Corruption,
				#[codec(index = 12)]
				Unavailable,
				#[codec(index = 13)]
				RootNotAllowed,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct DispatchErrorWithPostInfo<_0> {
				pub post_info: _0,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Signature),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Signature),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Signature),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum MultiSigner {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Public),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Public),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Public),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum TokenError {
				#[codec(index = 0)]
				FundsUnavailable,
				#[codec(index = 1)]
				OnlyProvider,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
				#[codec(index = 7)]
				CannotCreateHold,
				#[codec(index = 8)]
				NotExpendable,
				#[codec(index = 9)]
				Blocked,
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_staking {
			use super::runtime_types;
			pub mod offence {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct OffenceDetails<_0, _1> {
					pub offender: _1,
					pub reporters: ::std::vec::Vec<_0>,
				}
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct RuntimeVersion {
				pub spec_name: ::std::string::String,
				pub impl_name: ::std::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis:
					::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod sp_weights {
			use super::runtime_types;
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub struct RuntimeDbWeight {
				pub read: ::core::primitive::u64,
				pub write: ::core::primitive::u64,
			}
		}
		pub mod xcm {
			use super::runtime_types;
			pub mod double_encoded {
				use super::runtime_types;
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct DoubleEncoded {
					pub encoded: ::std::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod v2 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: runtime_types::xcm::v2::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: runtime_types::xcm::v2::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: runtime_types::xcm::v2::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey(
							runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v2::BodyId,
							part: runtime_types::xcm::v2::BodyPart,
						},
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
						#[codec(index = 6)]
						Blob(::std::vec::Vec<::core::primitive::u8>),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v2::multiasset::AssetId,
						pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct MultiAssets(
						pub ::std::vec::Vec<runtime_types::xcm::v2::multiasset::MultiAsset>,
					);
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v2::multiasset::AssetId,
							fun: runtime_types::xcm::v2::multiasset::WildFungibility,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v2::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v2::multilocation::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						MultiLocationFull,
						#[codec(index = 5)]
						MultiLocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						UnhandledXcmVersion,
						#[codec(index = 23)]
						WeightLimitReached(::core::primitive::u64),
						#[codec(index = 24)]
						Barrier,
						#[codec(index = 25)]
						WeightNotComputable,
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum BodyId {
					#[codec(index = 0)]
					Unit,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Index(#[codec(compact)] ::core::primitive::u32),
					#[codec(index = 3)]
					Executive,
					#[codec(index = 4)]
					Technical,
					#[codec(index = 5)]
					Legislative,
					#[codec(index = 6)]
					Judicial,
					#[codec(index = 7)]
					Defense,
					#[codec(index = 8)]
					Administration,
					#[codec(index = 9)]
					Treasury,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum BodyPart {
					#[codec(index = 0)]
					Voice,
					#[codec(index = 1)]
					Members {
						#[codec(compact)]
						count: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					Fraction {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					AtLeastProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					MoreThanProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v2::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v2::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v2::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum NetworkId {
					#[codec(index = 0)]
					Any,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Polkadot,
					#[codec(index = 3)]
					Kusama,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v2::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(#[codec(compact)] ::core::primitive::u64),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
			}
			pub mod v3 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum BodyId {
						#[codec(index = 0)]
						Unit,
						#[codec(index = 1)]
						Moniker([::core::primitive::u8; 4usize]),
						#[codec(index = 2)]
						Index(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						Executive,
						#[codec(index = 4)]
						Technical,
						#[codec(index = 5)]
						Legislative,
						#[codec(index = 6)]
						Judicial,
						#[codec(index = 7)]
						Defense,
						#[codec(index = 8)]
						Administration,
						#[codec(index = 9)]
						Treasury,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum BodyPart {
						#[codec(index = 0)]
						Voice,
						#[codec(index = 1)]
						Members {
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
						#[codec(index = 2)]
						Fraction {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						AtLeastProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						MoreThanProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey {
							length: ::core::primitive::u8,
							data: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v3::junction::BodyId,
							part: runtime_types::xcm::v3::junction::BodyPart,
						},
						#[codec(index = 9)]
						GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum NetworkId {
						#[codec(index = 0)]
						ByGenesis([::core::primitive::u8; 32usize]),
						#[codec(index = 1)]
						ByFork {
							block_number: ::core::primitive::u64,
							block_hash: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
						#[codec(index = 4)]
						Westend,
						#[codec(index = 5)]
						Rococo,
						#[codec(index = 6)]
						Wococo,
						#[codec(index = 7)]
						Ethereum {
							#[codec(compact)]
							chain_id: ::core::primitive::u64,
						},
						#[codec(index = 8)]
						BitcoinCore,
						#[codec(index = 9)]
						BitcoinCash,
					}
				}
				pub mod junctions {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v3::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v3::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract([::core::primitive::u8; 32usize]),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v3::multiasset::AssetId,
						pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct MultiAssets(
						pub ::std::vec::Vec<runtime_types::xcm::v3::multiasset::MultiAsset>,
					);
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
						},
						#[codec(index = 2)]
						AllCounted(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						AllOfCounted {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v3::junctions::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						LocationFull,
						#[codec(index = 5)]
						LocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						ExpectationFalse,
						#[codec(index = 23)]
						PalletNotFound,
						#[codec(index = 24)]
						NameMismatch,
						#[codec(index = 25)]
						VersionIncompatible,
						#[codec(index = 26)]
						HoldingWouldOverflow,
						#[codec(index = 27)]
						ExportError,
						#[codec(index = 28)]
						ReanchorFailed,
						#[codec(index = 29)]
						NoDeal,
						#[codec(index = 30)]
						FeesNotMet,
						#[codec(index = 31)]
						LockError,
						#[codec(index = 32)]
						NoPermission,
						#[codec(index = 33)]
						Unanchored,
						#[codec(index = 34)]
						NotDepositable,
						#[codec(index = 35)]
						UnhandledXcmVersion,
						#[codec(index = 36)]
						WeightLimitReached(::sp_weights::Weight),
						#[codec(index = 37)]
						Barrier,
						#[codec(index = 38)]
						WeightNotComputable,
						#[codec(index = 39)]
						ExceedsStackLimit,
					}
					#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
					pub enum Outcome {
						#[codec(index = 0)]
						Complete(::sp_weights::Weight),
						#[codec(index = 1)]
						Incomplete(::sp_weights::Weight, runtime_types::xcm::v3::traits::Error),
						#[codec(index = 2)]
						Error(runtime_types::xcm::v3::traits::Error),
					}
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
						max_weight: ::sp_weights::Weight,
						querier: ::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_kind: runtime_types::xcm::v2::OriginKind,
						require_weight_at_most: ::sp_weights::Weight,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
					#[codec(index = 12)]
					ReportError(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						want: runtime_types::xcm::v3::multiasset::MultiAssets,
						maximal: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 18)]
					ReportHolding {
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v3::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v3::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v3::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						max_response_weight: ::sp_weights::Weight,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
					#[codec(index = 28)]
					BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 29)]
					ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 30)]
					ExpectOrigin(
						::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 31)]
					ExpectError(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 32)]
					ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
					#[codec(index = 33)]
					QueryPallet {
						module_name: ::std::vec::Vec<::core::primitive::u8>,
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
					},
					#[codec(index = 34)]
					ExpectPallet {
						#[codec(compact)]
						index: ::core::primitive::u32,
						name: ::std::vec::Vec<::core::primitive::u8>,
						module_name: ::std::vec::Vec<::core::primitive::u8>,
						#[codec(compact)]
						crate_major: ::core::primitive::u32,
						#[codec(compact)]
						min_crate_minor: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 36)]
					ClearTransactStatus,
					#[codec(index = 37)]
					UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
					#[codec(index = 38)]
					ExportMessage {
						network: runtime_types::xcm::v3::junction::NetworkId,
						destination: runtime_types::xcm::v3::junctions::Junctions,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 39)]
					LockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 40)]
					UnlockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						target: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 41)]
					NoteUnlockable {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						owner: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 42)]
					RequestUnlock {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						locker: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 43)]
					SetFeesMode { jit_withdraw: ::core::primitive::bool },
					#[codec(index = 44)]
					SetTopic([::core::primitive::u8; 32usize]),
					#[codec(index = 45)]
					ClearTopic,
					#[codec(index = 46)]
					AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
					#[codec(index = 47)]
					UnpaidExecution {
						weight_limit: runtime_types::xcm::v3::WeightLimit,
						check_origin: ::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					},
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum MaybeErrorCode {
					#[codec(index = 0)]
					Success,
					#[codec(index = 1)]
					Error(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					TruncatedError(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct PalletInfo {
					#[codec(compact)]
					pub index: ::core::primitive::u32,
					pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					#[codec(compact)]
					pub major: ::core::primitive::u32,
					#[codec(compact)]
					pub minor: ::core::primitive::u32,
					#[codec(compact)]
					pub patch: ::core::primitive::u32,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct QueryResponseInfo {
					pub destination: runtime_types::xcm::v3::multilocation::MultiLocation,
					#[codec(compact)]
					pub query_id: ::core::primitive::u64,
					pub max_weight: ::sp_weights::Weight,
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
					#[codec(index = 4)]
					PalletsInfo(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::xcm::v3::PalletInfo,
						>,
					),
					#[codec(index = 5)]
					DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(::sp_weights::Weight),
				}
				#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
				pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction>);
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VersionedAssetId {
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::AssetId),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VersionedMultiAssets {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multiasset::MultiAssets),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::MultiAssets),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VersionedMultiLocation {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multilocation::MultiLocation),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multilocation::MultiLocation),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VersionedResponse {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Response),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Response),
			}
			#[derive(:: codec :: Decode, :: codec :: Encode, Clone, Debug, PartialEq)]
			pub enum VersionedXcm {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Xcm),
			}
		}
	}
}
